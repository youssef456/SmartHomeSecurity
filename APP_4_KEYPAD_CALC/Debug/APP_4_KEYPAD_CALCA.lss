
APP_4_KEYPAD_CALCA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005af2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015e  00800060  00005af2  00005b66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000040a4  00000000  00000000  00005cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010b6  00000000  00000000  00009d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001e0  00000000  00000000  0000ae1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000232  00000000  00000000  0000affe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002891  00000000  00000000  0000b230  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001628  00000000  00000000  0000dac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013de  00000000  00000000  0000f0e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  000104c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000030f  00000000  00000000  000106c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a56  00000000  00000000  000109d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0001142d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	fa e5       	ldi	r31, 0x5A	; 90
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 a5 2a 	call	0x554a	; 0x554a <main>
      7a:	0c 94 77 2d 	jmp	0x5aee	; 0x5aee <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 1d 04 	call	0x83a	; 0x83a <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 40 2d 	jmp	0x5a80	; 0x5a80 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a5 e9       	ldi	r26, 0x95	; 149
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 5c 2d 	jmp	0x5ab8	; 0x5ab8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 4c 2d 	jmp	0x5a98	; 0x5a98 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 cc 06 	call	0xd98	; 0xd98 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 cc 06 	call	0xd98	; 0xd98 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f7 05 	call	0xbee	; 0xbee <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 68 2d 	jmp	0x5ad0	; 0x5ad0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 4c 2d 	jmp	0x5a98	; 0x5a98 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 cc 06 	call	0xd98	; 0xd98 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 cc 06 	call	0xd98	; 0xd98 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f7 05 	call	0xbee	; 0xbee <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 68 2d 	jmp	0x5ad0	; 0x5ad0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 40 2d 	jmp	0x5a80	; 0x5a80 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 cc 06 	call	0xd98	; 0xd98 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 cc 06 	call	0xd98	; 0xd98 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	85 e9       	ldi	r24, 0x95	; 149
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f7 05 	call	0xbee	; 0xbee <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 5c 2d 	jmp	0x5ab8	; 0x5ab8 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 48 2d 	jmp	0x5a90	; 0x5a90 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 cc 06 	call	0xd98	; 0xd98 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 cc 06 	call	0xd98	; 0xd98 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	65 e9       	ldi	r22, 0x95	; 149
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 f7 05 	call	0xbee	; 0xbee <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 64 2d 	jmp	0x5ac8	; 0x5ac8 <__epilogue_restores__+0x10>

0000077a <__nesf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 4c 2d 	jmp	0x5a98	; 0x5a98 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 cc 06 	call	0xd98	; 0xd98 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 cc 06 	call	0xd98	; 0xd98 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__nesf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__nesf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 44 07 	call	0xe88	; 0xe88 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__nesf2+0x58>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 68 2d 	jmp	0x5ad0	; 0x5ad0 <__epilogue_restores__+0x18>

000007da <__gtsf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 4c 2d 	jmp	0x5a98	; 0x5a98 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 cc 06 	call	0xd98	; 0xd98 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 cc 06 	call	0xd98	; 0xd98 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gtsf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gtsf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 44 07 	call	0xe88	; 0xe88 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gtsf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 68 2d 	jmp	0x5ad0	; 0x5ad0 <__epilogue_restores__+0x18>

0000083a <__gesf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 4c 2d 	jmp	0x5a98	; 0x5a98 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 cc 06 	call	0xd98	; 0xd98 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 cc 06 	call	0xd98	; 0xd98 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 44 07 	call	0xe88	; 0xe88 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 68 2d 	jmp	0x5ad0	; 0x5ad0 <__epilogue_restores__+0x18>

0000089a <__ltsf2>:
     89a:	a8 e1       	ldi	r26, 0x18	; 24
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 4c 2d 	jmp	0x5a98	; 0x5a98 <__prologue_saves__+0x18>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	2d 83       	std	Y+5, r18	; 0x05
     8b0:	3e 83       	std	Y+6, r19	; 0x06
     8b2:	4f 83       	std	Y+7, r20	; 0x07
     8b4:	58 87       	std	Y+8, r21	; 0x08
     8b6:	89 e0       	ldi	r24, 0x09	; 9
     8b8:	e8 2e       	mov	r14, r24
     8ba:	f1 2c       	mov	r15, r1
     8bc:	ec 0e       	add	r14, r28
     8be:	fd 1e       	adc	r15, r29
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	b7 01       	movw	r22, r14
     8c6:	0e 94 cc 06 	call	0xd98	; 0xd98 <__unpack_f>
     8ca:	8e 01       	movw	r16, r28
     8cc:	0f 5e       	subi	r16, 0xEF	; 239
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	ce 01       	movw	r24, r28
     8d2:	05 96       	adiw	r24, 0x05	; 5
     8d4:	b8 01       	movw	r22, r16
     8d6:	0e 94 cc 06 	call	0xd98	; 0xd98 <__unpack_f>
     8da:	89 85       	ldd	r24, Y+9	; 0x09
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	40 f0       	brcs	.+16     	; 0x8f0 <__ltsf2+0x56>
     8e0:	89 89       	ldd	r24, Y+17	; 0x11
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	28 f0       	brcs	.+10     	; 0x8f0 <__ltsf2+0x56>
     8e6:	c7 01       	movw	r24, r14
     8e8:	b8 01       	movw	r22, r16
     8ea:	0e 94 44 07 	call	0xe88	; 0xe88 <__fpcmp_parts_f>
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <__ltsf2+0x58>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	68 96       	adiw	r28, 0x18	; 24
     8f4:	e6 e0       	ldi	r30, 0x06	; 6
     8f6:	0c 94 68 2d 	jmp	0x5ad0	; 0x5ad0 <__epilogue_restores__+0x18>

000008fa <__floatsisf>:
     8fa:	a8 e0       	ldi	r26, 0x08	; 8
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e3 e8       	ldi	r30, 0x83	; 131
     900:	f4 e0       	ldi	r31, 0x04	; 4
     902:	0c 94 49 2d 	jmp	0x5a92	; 0x5a92 <__prologue_saves__+0x12>
     906:	9b 01       	movw	r18, r22
     908:	ac 01       	movw	r20, r24
     90a:	83 e0       	ldi	r24, 0x03	; 3
     90c:	89 83       	std	Y+1, r24	; 0x01
     90e:	da 01       	movw	r26, r20
     910:	c9 01       	movw	r24, r18
     912:	88 27       	eor	r24, r24
     914:	b7 fd       	sbrc	r27, 7
     916:	83 95       	inc	r24
     918:	99 27       	eor	r25, r25
     91a:	aa 27       	eor	r26, r26
     91c:	bb 27       	eor	r27, r27
     91e:	b8 2e       	mov	r11, r24
     920:	21 15       	cp	r18, r1
     922:	31 05       	cpc	r19, r1
     924:	41 05       	cpc	r20, r1
     926:	51 05       	cpc	r21, r1
     928:	19 f4       	brne	.+6      	; 0x930 <__floatsisf+0x36>
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	89 83       	std	Y+1, r24	; 0x01
     92e:	3a c0       	rjmp	.+116    	; 0x9a4 <__floatsisf+0xaa>
     930:	88 23       	and	r24, r24
     932:	a9 f0       	breq	.+42     	; 0x95e <__floatsisf+0x64>
     934:	20 30       	cpi	r18, 0x00	; 0
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	38 07       	cpc	r19, r24
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	48 07       	cpc	r20, r24
     93e:	80 e8       	ldi	r24, 0x80	; 128
     940:	58 07       	cpc	r21, r24
     942:	29 f4       	brne	.+10     	; 0x94e <__floatsisf+0x54>
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	9f ec       	ldi	r25, 0xCF	; 207
     94c:	30 c0       	rjmp	.+96     	; 0x9ae <__floatsisf+0xb4>
     94e:	ee 24       	eor	r14, r14
     950:	ff 24       	eor	r15, r15
     952:	87 01       	movw	r16, r14
     954:	e2 1a       	sub	r14, r18
     956:	f3 0a       	sbc	r15, r19
     958:	04 0b       	sbc	r16, r20
     95a:	15 0b       	sbc	r17, r21
     95c:	02 c0       	rjmp	.+4      	; 0x962 <__floatsisf+0x68>
     95e:	79 01       	movw	r14, r18
     960:	8a 01       	movw	r16, r20
     962:	8e e1       	ldi	r24, 0x1E	; 30
     964:	c8 2e       	mov	r12, r24
     966:	d1 2c       	mov	r13, r1
     968:	dc 82       	std	Y+4, r13	; 0x04
     96a:	cb 82       	std	Y+3, r12	; 0x03
     96c:	ed 82       	std	Y+5, r14	; 0x05
     96e:	fe 82       	std	Y+6, r15	; 0x06
     970:	0f 83       	std	Y+7, r16	; 0x07
     972:	18 87       	std	Y+8, r17	; 0x08
     974:	c8 01       	movw	r24, r16
     976:	b7 01       	movw	r22, r14
     978:	0e 94 a8 05 	call	0xb50	; 0xb50 <__clzsi2>
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	18 16       	cp	r1, r24
     980:	19 06       	cpc	r1, r25
     982:	84 f4       	brge	.+32     	; 0x9a4 <__floatsisf+0xaa>
     984:	08 2e       	mov	r0, r24
     986:	04 c0       	rjmp	.+8      	; 0x990 <__floatsisf+0x96>
     988:	ee 0c       	add	r14, r14
     98a:	ff 1c       	adc	r15, r15
     98c:	00 1f       	adc	r16, r16
     98e:	11 1f       	adc	r17, r17
     990:	0a 94       	dec	r0
     992:	d2 f7       	brpl	.-12     	; 0x988 <__floatsisf+0x8e>
     994:	ed 82       	std	Y+5, r14	; 0x05
     996:	fe 82       	std	Y+6, r15	; 0x06
     998:	0f 83       	std	Y+7, r16	; 0x07
     99a:	18 87       	std	Y+8, r17	; 0x08
     99c:	c8 1a       	sub	r12, r24
     99e:	d9 0a       	sbc	r13, r25
     9a0:	dc 82       	std	Y+4, r13	; 0x04
     9a2:	cb 82       	std	Y+3, r12	; 0x03
     9a4:	ba 82       	std	Y+2, r11	; 0x02
     9a6:	ce 01       	movw	r24, r28
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	0e 94 f7 05 	call	0xbee	; 0xbee <__pack_f>
     9ae:	28 96       	adiw	r28, 0x08	; 8
     9b0:	e9 e0       	ldi	r30, 0x09	; 9
     9b2:	0c 94 65 2d 	jmp	0x5aca	; 0x5aca <__epilogue_restores__+0x12>

000009b6 <__fixsfsi>:
     9b6:	ac e0       	ldi	r26, 0x0C	; 12
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	e1 ee       	ldi	r30, 0xE1	; 225
     9bc:	f4 e0       	ldi	r31, 0x04	; 4
     9be:	0c 94 50 2d 	jmp	0x5aa0	; 0x5aa0 <__prologue_saves__+0x20>
     9c2:	69 83       	std	Y+1, r22	; 0x01
     9c4:	7a 83       	std	Y+2, r23	; 0x02
     9c6:	8b 83       	std	Y+3, r24	; 0x03
     9c8:	9c 83       	std	Y+4, r25	; 0x04
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	be 01       	movw	r22, r28
     9d0:	6b 5f       	subi	r22, 0xFB	; 251
     9d2:	7f 4f       	sbci	r23, 0xFF	; 255
     9d4:	0e 94 cc 06 	call	0xd98	; 0xd98 <__unpack_f>
     9d8:	8d 81       	ldd	r24, Y+5	; 0x05
     9da:	82 30       	cpi	r24, 0x02	; 2
     9dc:	61 f1       	breq	.+88     	; 0xa36 <__fixsfsi+0x80>
     9de:	82 30       	cpi	r24, 0x02	; 2
     9e0:	50 f1       	brcs	.+84     	; 0xa36 <__fixsfsi+0x80>
     9e2:	84 30       	cpi	r24, 0x04	; 4
     9e4:	21 f4       	brne	.+8      	; 0x9ee <__fixsfsi+0x38>
     9e6:	8e 81       	ldd	r24, Y+6	; 0x06
     9e8:	88 23       	and	r24, r24
     9ea:	51 f1       	breq	.+84     	; 0xa40 <__fixsfsi+0x8a>
     9ec:	2e c0       	rjmp	.+92     	; 0xa4a <__fixsfsi+0x94>
     9ee:	2f 81       	ldd	r18, Y+7	; 0x07
     9f0:	38 85       	ldd	r19, Y+8	; 0x08
     9f2:	37 fd       	sbrc	r19, 7
     9f4:	20 c0       	rjmp	.+64     	; 0xa36 <__fixsfsi+0x80>
     9f6:	6e 81       	ldd	r22, Y+6	; 0x06
     9f8:	2f 31       	cpi	r18, 0x1F	; 31
     9fa:	31 05       	cpc	r19, r1
     9fc:	1c f0       	brlt	.+6      	; 0xa04 <__fixsfsi+0x4e>
     9fe:	66 23       	and	r22, r22
     a00:	f9 f0       	breq	.+62     	; 0xa40 <__fixsfsi+0x8a>
     a02:	23 c0       	rjmp	.+70     	; 0xa4a <__fixsfsi+0x94>
     a04:	8e e1       	ldi	r24, 0x1E	; 30
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	82 1b       	sub	r24, r18
     a0a:	93 0b       	sbc	r25, r19
     a0c:	29 85       	ldd	r18, Y+9	; 0x09
     a0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a10:	4b 85       	ldd	r20, Y+11	; 0x0b
     a12:	5c 85       	ldd	r21, Y+12	; 0x0c
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__fixsfsi+0x68>
     a16:	56 95       	lsr	r21
     a18:	47 95       	ror	r20
     a1a:	37 95       	ror	r19
     a1c:	27 95       	ror	r18
     a1e:	8a 95       	dec	r24
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__fixsfsi+0x60>
     a22:	66 23       	and	r22, r22
     a24:	b1 f0       	breq	.+44     	; 0xa52 <__fixsfsi+0x9c>
     a26:	50 95       	com	r21
     a28:	40 95       	com	r20
     a2a:	30 95       	com	r19
     a2c:	21 95       	neg	r18
     a2e:	3f 4f       	sbci	r19, 0xFF	; 255
     a30:	4f 4f       	sbci	r20, 0xFF	; 255
     a32:	5f 4f       	sbci	r21, 0xFF	; 255
     a34:	0e c0       	rjmp	.+28     	; 0xa52 <__fixsfsi+0x9c>
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	50 e0       	ldi	r21, 0x00	; 0
     a3e:	09 c0       	rjmp	.+18     	; 0xa52 <__fixsfsi+0x9c>
     a40:	2f ef       	ldi	r18, 0xFF	; 255
     a42:	3f ef       	ldi	r19, 0xFF	; 255
     a44:	4f ef       	ldi	r20, 0xFF	; 255
     a46:	5f e7       	ldi	r21, 0x7F	; 127
     a48:	04 c0       	rjmp	.+8      	; 0xa52 <__fixsfsi+0x9c>
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	50 e8       	ldi	r21, 0x80	; 128
     a52:	b9 01       	movw	r22, r18
     a54:	ca 01       	movw	r24, r20
     a56:	2c 96       	adiw	r28, 0x0c	; 12
     a58:	e2 e0       	ldi	r30, 0x02	; 2
     a5a:	0c 94 6c 2d 	jmp	0x5ad8	; 0x5ad8 <__epilogue_restores__+0x20>

00000a5e <__floatunsisf>:
     a5e:	a8 e0       	ldi	r26, 0x08	; 8
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	e5 e3       	ldi	r30, 0x35	; 53
     a64:	f5 e0       	ldi	r31, 0x05	; 5
     a66:	0c 94 48 2d 	jmp	0x5a90	; 0x5a90 <__prologue_saves__+0x10>
     a6a:	7b 01       	movw	r14, r22
     a6c:	8c 01       	movw	r16, r24
     a6e:	61 15       	cp	r22, r1
     a70:	71 05       	cpc	r23, r1
     a72:	81 05       	cpc	r24, r1
     a74:	91 05       	cpc	r25, r1
     a76:	19 f4       	brne	.+6      	; 0xa7e <__floatunsisf+0x20>
     a78:	82 e0       	ldi	r24, 0x02	; 2
     a7a:	89 83       	std	Y+1, r24	; 0x01
     a7c:	60 c0       	rjmp	.+192    	; 0xb3e <__floatunsisf+0xe0>
     a7e:	83 e0       	ldi	r24, 0x03	; 3
     a80:	89 83       	std	Y+1, r24	; 0x01
     a82:	8e e1       	ldi	r24, 0x1E	; 30
     a84:	c8 2e       	mov	r12, r24
     a86:	d1 2c       	mov	r13, r1
     a88:	dc 82       	std	Y+4, r13	; 0x04
     a8a:	cb 82       	std	Y+3, r12	; 0x03
     a8c:	ed 82       	std	Y+5, r14	; 0x05
     a8e:	fe 82       	std	Y+6, r15	; 0x06
     a90:	0f 83       	std	Y+7, r16	; 0x07
     a92:	18 87       	std	Y+8, r17	; 0x08
     a94:	c8 01       	movw	r24, r16
     a96:	b7 01       	movw	r22, r14
     a98:	0e 94 a8 05 	call	0xb50	; 0xb50 <__clzsi2>
     a9c:	fc 01       	movw	r30, r24
     a9e:	31 97       	sbiw	r30, 0x01	; 1
     aa0:	f7 ff       	sbrs	r31, 7
     aa2:	3b c0       	rjmp	.+118    	; 0xb1a <__floatunsisf+0xbc>
     aa4:	22 27       	eor	r18, r18
     aa6:	33 27       	eor	r19, r19
     aa8:	2e 1b       	sub	r18, r30
     aaa:	3f 0b       	sbc	r19, r31
     aac:	57 01       	movw	r10, r14
     aae:	68 01       	movw	r12, r16
     ab0:	02 2e       	mov	r0, r18
     ab2:	04 c0       	rjmp	.+8      	; 0xabc <__floatunsisf+0x5e>
     ab4:	d6 94       	lsr	r13
     ab6:	c7 94       	ror	r12
     ab8:	b7 94       	ror	r11
     aba:	a7 94       	ror	r10
     abc:	0a 94       	dec	r0
     abe:	d2 f7       	brpl	.-12     	; 0xab4 <__floatunsisf+0x56>
     ac0:	40 e0       	ldi	r20, 0x00	; 0
     ac2:	50 e0       	ldi	r21, 0x00	; 0
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e0       	ldi	r26, 0x00	; 0
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0x7c>
     ad2:	88 0f       	add	r24, r24
     ad4:	99 1f       	adc	r25, r25
     ad6:	aa 1f       	adc	r26, r26
     ad8:	bb 1f       	adc	r27, r27
     ada:	2a 95       	dec	r18
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0x74>
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	a1 09       	sbc	r26, r1
     ae2:	b1 09       	sbc	r27, r1
     ae4:	8e 21       	and	r24, r14
     ae6:	9f 21       	and	r25, r15
     ae8:	a0 23       	and	r26, r16
     aea:	b1 23       	and	r27, r17
     aec:	00 97       	sbiw	r24, 0x00	; 0
     aee:	a1 05       	cpc	r26, r1
     af0:	b1 05       	cpc	r27, r1
     af2:	21 f0       	breq	.+8      	; 0xafc <__floatunsisf+0x9e>
     af4:	41 e0       	ldi	r20, 0x01	; 1
     af6:	50 e0       	ldi	r21, 0x00	; 0
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	4a 29       	or	r20, r10
     afe:	5b 29       	or	r21, r11
     b00:	6c 29       	or	r22, r12
     b02:	7d 29       	or	r23, r13
     b04:	4d 83       	std	Y+5, r20	; 0x05
     b06:	5e 83       	std	Y+6, r21	; 0x06
     b08:	6f 83       	std	Y+7, r22	; 0x07
     b0a:	78 87       	std	Y+8, r23	; 0x08
     b0c:	8e e1       	ldi	r24, 0x1E	; 30
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	8e 1b       	sub	r24, r30
     b12:	9f 0b       	sbc	r25, r31
     b14:	9c 83       	std	Y+4, r25	; 0x04
     b16:	8b 83       	std	Y+3, r24	; 0x03
     b18:	12 c0       	rjmp	.+36     	; 0xb3e <__floatunsisf+0xe0>
     b1a:	30 97       	sbiw	r30, 0x00	; 0
     b1c:	81 f0       	breq	.+32     	; 0xb3e <__floatunsisf+0xe0>
     b1e:	0e 2e       	mov	r0, r30
     b20:	04 c0       	rjmp	.+8      	; 0xb2a <__floatunsisf+0xcc>
     b22:	ee 0c       	add	r14, r14
     b24:	ff 1c       	adc	r15, r15
     b26:	00 1f       	adc	r16, r16
     b28:	11 1f       	adc	r17, r17
     b2a:	0a 94       	dec	r0
     b2c:	d2 f7       	brpl	.-12     	; 0xb22 <__floatunsisf+0xc4>
     b2e:	ed 82       	std	Y+5, r14	; 0x05
     b30:	fe 82       	std	Y+6, r15	; 0x06
     b32:	0f 83       	std	Y+7, r16	; 0x07
     b34:	18 87       	std	Y+8, r17	; 0x08
     b36:	ce 1a       	sub	r12, r30
     b38:	df 0a       	sbc	r13, r31
     b3a:	dc 82       	std	Y+4, r13	; 0x04
     b3c:	cb 82       	std	Y+3, r12	; 0x03
     b3e:	1a 82       	std	Y+2, r1	; 0x02
     b40:	ce 01       	movw	r24, r28
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	0e 94 f7 05 	call	0xbee	; 0xbee <__pack_f>
     b48:	28 96       	adiw	r28, 0x08	; 8
     b4a:	ea e0       	ldi	r30, 0x0A	; 10
     b4c:	0c 94 64 2d 	jmp	0x5ac8	; 0x5ac8 <__epilogue_restores__+0x10>

00000b50 <__clzsi2>:
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	7b 01       	movw	r14, r22
     b5a:	8c 01       	movw	r16, r24
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	e8 16       	cp	r14, r24
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	f8 06       	cpc	r15, r24
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	08 07       	cpc	r16, r24
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	18 07       	cpc	r17, r24
     b6c:	88 f4       	brcc	.+34     	; 0xb90 <__clzsi2+0x40>
     b6e:	8f ef       	ldi	r24, 0xFF	; 255
     b70:	e8 16       	cp	r14, r24
     b72:	f1 04       	cpc	r15, r1
     b74:	01 05       	cpc	r16, r1
     b76:	11 05       	cpc	r17, r1
     b78:	31 f0       	breq	.+12     	; 0xb86 <__clzsi2+0x36>
     b7a:	28 f0       	brcs	.+10     	; 0xb86 <__clzsi2+0x36>
     b7c:	88 e0       	ldi	r24, 0x08	; 8
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	a0 e0       	ldi	r26, 0x00	; 0
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	17 c0       	rjmp	.+46     	; 0xbb4 <__clzsi2+0x64>
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	12 c0       	rjmp	.+36     	; 0xbb4 <__clzsi2+0x64>
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	e8 16       	cp	r14, r24
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	f8 06       	cpc	r15, r24
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	08 07       	cpc	r16, r24
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	18 07       	cpc	r17, r24
     ba0:	28 f0       	brcs	.+10     	; 0xbac <__clzsi2+0x5c>
     ba2:	88 e1       	ldi	r24, 0x18	; 24
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	a0 e0       	ldi	r26, 0x00	; 0
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	04 c0       	rjmp	.+8      	; 0xbb4 <__clzsi2+0x64>
     bac:	80 e1       	ldi	r24, 0x10	; 16
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	a0 e0       	ldi	r26, 0x00	; 0
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	20 e2       	ldi	r18, 0x20	; 32
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	50 e0       	ldi	r21, 0x00	; 0
     bbc:	28 1b       	sub	r18, r24
     bbe:	39 0b       	sbc	r19, r25
     bc0:	4a 0b       	sbc	r20, r26
     bc2:	5b 0b       	sbc	r21, r27
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <__clzsi2+0x7e>
     bc6:	16 95       	lsr	r17
     bc8:	07 95       	ror	r16
     bca:	f7 94       	ror	r15
     bcc:	e7 94       	ror	r14
     bce:	8a 95       	dec	r24
     bd0:	d2 f7       	brpl	.-12     	; 0xbc6 <__clzsi2+0x76>
     bd2:	f7 01       	movw	r30, r14
     bd4:	e3 56       	subi	r30, 0x63	; 99
     bd6:	ff 4f       	sbci	r31, 0xFF	; 255
     bd8:	80 81       	ld	r24, Z
     bda:	28 1b       	sub	r18, r24
     bdc:	31 09       	sbc	r19, r1
     bde:	41 09       	sbc	r20, r1
     be0:	51 09       	sbc	r21, r1
     be2:	c9 01       	movw	r24, r18
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	08 95       	ret

00000bee <__pack_f>:
     bee:	df 92       	push	r13
     bf0:	ef 92       	push	r14
     bf2:	ff 92       	push	r15
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	fc 01       	movw	r30, r24
     bfa:	e4 80       	ldd	r14, Z+4	; 0x04
     bfc:	f5 80       	ldd	r15, Z+5	; 0x05
     bfe:	06 81       	ldd	r16, Z+6	; 0x06
     c00:	17 81       	ldd	r17, Z+7	; 0x07
     c02:	d1 80       	ldd	r13, Z+1	; 0x01
     c04:	80 81       	ld	r24, Z
     c06:	82 30       	cpi	r24, 0x02	; 2
     c08:	48 f4       	brcc	.+18     	; 0xc1c <__pack_f+0x2e>
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	a0 e1       	ldi	r26, 0x10	; 16
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e8 2a       	or	r14, r24
     c14:	f9 2a       	or	r15, r25
     c16:	0a 2b       	or	r16, r26
     c18:	1b 2b       	or	r17, r27
     c1a:	a5 c0       	rjmp	.+330    	; 0xd66 <__pack_f+0x178>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	09 f4       	brne	.+2      	; 0xc22 <__pack_f+0x34>
     c20:	9f c0       	rjmp	.+318    	; 0xd60 <__pack_f+0x172>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	21 f4       	brne	.+8      	; 0xc2e <__pack_f+0x40>
     c26:	ee 24       	eor	r14, r14
     c28:	ff 24       	eor	r15, r15
     c2a:	87 01       	movw	r16, r14
     c2c:	05 c0       	rjmp	.+10     	; 0xc38 <__pack_f+0x4a>
     c2e:	e1 14       	cp	r14, r1
     c30:	f1 04       	cpc	r15, r1
     c32:	01 05       	cpc	r16, r1
     c34:	11 05       	cpc	r17, r1
     c36:	19 f4       	brne	.+6      	; 0xc3e <__pack_f+0x50>
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	96 c0       	rjmp	.+300    	; 0xd6a <__pack_f+0x17c>
     c3e:	62 81       	ldd	r22, Z+2	; 0x02
     c40:	73 81       	ldd	r23, Z+3	; 0x03
     c42:	9f ef       	ldi	r25, 0xFF	; 255
     c44:	62 38       	cpi	r22, 0x82	; 130
     c46:	79 07       	cpc	r23, r25
     c48:	0c f0       	brlt	.+2      	; 0xc4c <__pack_f+0x5e>
     c4a:	5b c0       	rjmp	.+182    	; 0xd02 <__pack_f+0x114>
     c4c:	22 e8       	ldi	r18, 0x82	; 130
     c4e:	3f ef       	ldi	r19, 0xFF	; 255
     c50:	26 1b       	sub	r18, r22
     c52:	37 0b       	sbc	r19, r23
     c54:	2a 31       	cpi	r18, 0x1A	; 26
     c56:	31 05       	cpc	r19, r1
     c58:	2c f0       	brlt	.+10     	; 0xc64 <__pack_f+0x76>
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	40 e0       	ldi	r20, 0x00	; 0
     c60:	50 e0       	ldi	r21, 0x00	; 0
     c62:	2a c0       	rjmp	.+84     	; 0xcb8 <__pack_f+0xca>
     c64:	b8 01       	movw	r22, r16
     c66:	a7 01       	movw	r20, r14
     c68:	02 2e       	mov	r0, r18
     c6a:	04 c0       	rjmp	.+8      	; 0xc74 <__pack_f+0x86>
     c6c:	76 95       	lsr	r23
     c6e:	67 95       	ror	r22
     c70:	57 95       	ror	r21
     c72:	47 95       	ror	r20
     c74:	0a 94       	dec	r0
     c76:	d2 f7       	brpl	.-12     	; 0xc6c <__pack_f+0x7e>
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	a0 e0       	ldi	r26, 0x00	; 0
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	04 c0       	rjmp	.+8      	; 0xc8a <__pack_f+0x9c>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	aa 1f       	adc	r26, r26
     c88:	bb 1f       	adc	r27, r27
     c8a:	2a 95       	dec	r18
     c8c:	d2 f7       	brpl	.-12     	; 0xc82 <__pack_f+0x94>
     c8e:	01 97       	sbiw	r24, 0x01	; 1
     c90:	a1 09       	sbc	r26, r1
     c92:	b1 09       	sbc	r27, r1
     c94:	8e 21       	and	r24, r14
     c96:	9f 21       	and	r25, r15
     c98:	a0 23       	and	r26, r16
     c9a:	b1 23       	and	r27, r17
     c9c:	00 97       	sbiw	r24, 0x00	; 0
     c9e:	a1 05       	cpc	r26, r1
     ca0:	b1 05       	cpc	r27, r1
     ca2:	21 f0       	breq	.+8      	; 0xcac <__pack_f+0xbe>
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	a0 e0       	ldi	r26, 0x00	; 0
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	9a 01       	movw	r18, r20
     cae:	ab 01       	movw	r20, r22
     cb0:	28 2b       	or	r18, r24
     cb2:	39 2b       	or	r19, r25
     cb4:	4a 2b       	or	r20, r26
     cb6:	5b 2b       	or	r21, r27
     cb8:	da 01       	movw	r26, r20
     cba:	c9 01       	movw	r24, r18
     cbc:	8f 77       	andi	r24, 0x7F	; 127
     cbe:	90 70       	andi	r25, 0x00	; 0
     cc0:	a0 70       	andi	r26, 0x00	; 0
     cc2:	b0 70       	andi	r27, 0x00	; 0
     cc4:	80 34       	cpi	r24, 0x40	; 64
     cc6:	91 05       	cpc	r25, r1
     cc8:	a1 05       	cpc	r26, r1
     cca:	b1 05       	cpc	r27, r1
     ccc:	39 f4       	brne	.+14     	; 0xcdc <__pack_f+0xee>
     cce:	27 ff       	sbrs	r18, 7
     cd0:	09 c0       	rjmp	.+18     	; 0xce4 <__pack_f+0xf6>
     cd2:	20 5c       	subi	r18, 0xC0	; 192
     cd4:	3f 4f       	sbci	r19, 0xFF	; 255
     cd6:	4f 4f       	sbci	r20, 0xFF	; 255
     cd8:	5f 4f       	sbci	r21, 0xFF	; 255
     cda:	04 c0       	rjmp	.+8      	; 0xce4 <__pack_f+0xf6>
     cdc:	21 5c       	subi	r18, 0xC1	; 193
     cde:	3f 4f       	sbci	r19, 0xFF	; 255
     ce0:	4f 4f       	sbci	r20, 0xFF	; 255
     ce2:	5f 4f       	sbci	r21, 0xFF	; 255
     ce4:	e0 e0       	ldi	r30, 0x00	; 0
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	20 30       	cpi	r18, 0x00	; 0
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	3a 07       	cpc	r19, r26
     cee:	a0 e0       	ldi	r26, 0x00	; 0
     cf0:	4a 07       	cpc	r20, r26
     cf2:	a0 e4       	ldi	r26, 0x40	; 64
     cf4:	5a 07       	cpc	r21, r26
     cf6:	10 f0       	brcs	.+4      	; 0xcfc <__pack_f+0x10e>
     cf8:	e1 e0       	ldi	r30, 0x01	; 1
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	79 01       	movw	r14, r18
     cfe:	8a 01       	movw	r16, r20
     d00:	27 c0       	rjmp	.+78     	; 0xd50 <__pack_f+0x162>
     d02:	60 38       	cpi	r22, 0x80	; 128
     d04:	71 05       	cpc	r23, r1
     d06:	64 f5       	brge	.+88     	; 0xd60 <__pack_f+0x172>
     d08:	fb 01       	movw	r30, r22
     d0a:	e1 58       	subi	r30, 0x81	; 129
     d0c:	ff 4f       	sbci	r31, 0xFF	; 255
     d0e:	d8 01       	movw	r26, r16
     d10:	c7 01       	movw	r24, r14
     d12:	8f 77       	andi	r24, 0x7F	; 127
     d14:	90 70       	andi	r25, 0x00	; 0
     d16:	a0 70       	andi	r26, 0x00	; 0
     d18:	b0 70       	andi	r27, 0x00	; 0
     d1a:	80 34       	cpi	r24, 0x40	; 64
     d1c:	91 05       	cpc	r25, r1
     d1e:	a1 05       	cpc	r26, r1
     d20:	b1 05       	cpc	r27, r1
     d22:	39 f4       	brne	.+14     	; 0xd32 <__pack_f+0x144>
     d24:	e7 fe       	sbrs	r14, 7
     d26:	0d c0       	rjmp	.+26     	; 0xd42 <__pack_f+0x154>
     d28:	80 e4       	ldi	r24, 0x40	; 64
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	a0 e0       	ldi	r26, 0x00	; 0
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	04 c0       	rjmp	.+8      	; 0xd3a <__pack_f+0x14c>
     d32:	8f e3       	ldi	r24, 0x3F	; 63
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	a0 e0       	ldi	r26, 0x00	; 0
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e8 0e       	add	r14, r24
     d3c:	f9 1e       	adc	r15, r25
     d3e:	0a 1f       	adc	r16, r26
     d40:	1b 1f       	adc	r17, r27
     d42:	17 ff       	sbrs	r17, 7
     d44:	05 c0       	rjmp	.+10     	; 0xd50 <__pack_f+0x162>
     d46:	16 95       	lsr	r17
     d48:	07 95       	ror	r16
     d4a:	f7 94       	ror	r15
     d4c:	e7 94       	ror	r14
     d4e:	31 96       	adiw	r30, 0x01	; 1
     d50:	87 e0       	ldi	r24, 0x07	; 7
     d52:	16 95       	lsr	r17
     d54:	07 95       	ror	r16
     d56:	f7 94       	ror	r15
     d58:	e7 94       	ror	r14
     d5a:	8a 95       	dec	r24
     d5c:	d1 f7       	brne	.-12     	; 0xd52 <__pack_f+0x164>
     d5e:	05 c0       	rjmp	.+10     	; 0xd6a <__pack_f+0x17c>
     d60:	ee 24       	eor	r14, r14
     d62:	ff 24       	eor	r15, r15
     d64:	87 01       	movw	r16, r14
     d66:	ef ef       	ldi	r30, 0xFF	; 255
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	6e 2f       	mov	r22, r30
     d6c:	67 95       	ror	r22
     d6e:	66 27       	eor	r22, r22
     d70:	67 95       	ror	r22
     d72:	90 2f       	mov	r25, r16
     d74:	9f 77       	andi	r25, 0x7F	; 127
     d76:	d7 94       	ror	r13
     d78:	dd 24       	eor	r13, r13
     d7a:	d7 94       	ror	r13
     d7c:	8e 2f       	mov	r24, r30
     d7e:	86 95       	lsr	r24
     d80:	49 2f       	mov	r20, r25
     d82:	46 2b       	or	r20, r22
     d84:	58 2f       	mov	r21, r24
     d86:	5d 29       	or	r21, r13
     d88:	b7 01       	movw	r22, r14
     d8a:	ca 01       	movw	r24, r20
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	ff 90       	pop	r15
     d92:	ef 90       	pop	r14
     d94:	df 90       	pop	r13
     d96:	08 95       	ret

00000d98 <__unpack_f>:
     d98:	fc 01       	movw	r30, r24
     d9a:	db 01       	movw	r26, r22
     d9c:	40 81       	ld	r20, Z
     d9e:	51 81       	ldd	r21, Z+1	; 0x01
     da0:	22 81       	ldd	r18, Z+2	; 0x02
     da2:	62 2f       	mov	r22, r18
     da4:	6f 77       	andi	r22, 0x7F	; 127
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	22 1f       	adc	r18, r18
     daa:	22 27       	eor	r18, r18
     dac:	22 1f       	adc	r18, r18
     dae:	93 81       	ldd	r25, Z+3	; 0x03
     db0:	89 2f       	mov	r24, r25
     db2:	88 0f       	add	r24, r24
     db4:	82 2b       	or	r24, r18
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	99 1f       	adc	r25, r25
     dbc:	99 27       	eor	r25, r25
     dbe:	99 1f       	adc	r25, r25
     dc0:	11 96       	adiw	r26, 0x01	; 1
     dc2:	9c 93       	st	X, r25
     dc4:	11 97       	sbiw	r26, 0x01	; 1
     dc6:	21 15       	cp	r18, r1
     dc8:	31 05       	cpc	r19, r1
     dca:	a9 f5       	brne	.+106    	; 0xe36 <__unpack_f+0x9e>
     dcc:	41 15       	cp	r20, r1
     dce:	51 05       	cpc	r21, r1
     dd0:	61 05       	cpc	r22, r1
     dd2:	71 05       	cpc	r23, r1
     dd4:	11 f4       	brne	.+4      	; 0xdda <__unpack_f+0x42>
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	37 c0       	rjmp	.+110    	; 0xe48 <__unpack_f+0xb0>
     dda:	82 e8       	ldi	r24, 0x82	; 130
     ddc:	9f ef       	ldi	r25, 0xFF	; 255
     dde:	13 96       	adiw	r26, 0x03	; 3
     de0:	9c 93       	st	X, r25
     de2:	8e 93       	st	-X, r24
     de4:	12 97       	sbiw	r26, 0x02	; 2
     de6:	9a 01       	movw	r18, r20
     de8:	ab 01       	movw	r20, r22
     dea:	67 e0       	ldi	r22, 0x07	; 7
     dec:	22 0f       	add	r18, r18
     dee:	33 1f       	adc	r19, r19
     df0:	44 1f       	adc	r20, r20
     df2:	55 1f       	adc	r21, r21
     df4:	6a 95       	dec	r22
     df6:	d1 f7       	brne	.-12     	; 0xdec <__unpack_f+0x54>
     df8:	83 e0       	ldi	r24, 0x03	; 3
     dfa:	8c 93       	st	X, r24
     dfc:	0d c0       	rjmp	.+26     	; 0xe18 <__unpack_f+0x80>
     dfe:	22 0f       	add	r18, r18
     e00:	33 1f       	adc	r19, r19
     e02:	44 1f       	adc	r20, r20
     e04:	55 1f       	adc	r21, r21
     e06:	12 96       	adiw	r26, 0x02	; 2
     e08:	8d 91       	ld	r24, X+
     e0a:	9c 91       	ld	r25, X
     e0c:	13 97       	sbiw	r26, 0x03	; 3
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	13 96       	adiw	r26, 0x03	; 3
     e12:	9c 93       	st	X, r25
     e14:	8e 93       	st	-X, r24
     e16:	12 97       	sbiw	r26, 0x02	; 2
     e18:	20 30       	cpi	r18, 0x00	; 0
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	38 07       	cpc	r19, r24
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	48 07       	cpc	r20, r24
     e22:	80 e4       	ldi	r24, 0x40	; 64
     e24:	58 07       	cpc	r21, r24
     e26:	58 f3       	brcs	.-42     	; 0xdfe <__unpack_f+0x66>
     e28:	14 96       	adiw	r26, 0x04	; 4
     e2a:	2d 93       	st	X+, r18
     e2c:	3d 93       	st	X+, r19
     e2e:	4d 93       	st	X+, r20
     e30:	5c 93       	st	X, r21
     e32:	17 97       	sbiw	r26, 0x07	; 7
     e34:	08 95       	ret
     e36:	2f 3f       	cpi	r18, 0xFF	; 255
     e38:	31 05       	cpc	r19, r1
     e3a:	79 f4       	brne	.+30     	; 0xe5a <__unpack_f+0xc2>
     e3c:	41 15       	cp	r20, r1
     e3e:	51 05       	cpc	r21, r1
     e40:	61 05       	cpc	r22, r1
     e42:	71 05       	cpc	r23, r1
     e44:	19 f4       	brne	.+6      	; 0xe4c <__unpack_f+0xb4>
     e46:	84 e0       	ldi	r24, 0x04	; 4
     e48:	8c 93       	st	X, r24
     e4a:	08 95       	ret
     e4c:	64 ff       	sbrs	r22, 4
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <__unpack_f+0xbe>
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	8c 93       	st	X, r24
     e54:	12 c0       	rjmp	.+36     	; 0xe7a <__unpack_f+0xe2>
     e56:	1c 92       	st	X, r1
     e58:	10 c0       	rjmp	.+32     	; 0xe7a <__unpack_f+0xe2>
     e5a:	2f 57       	subi	r18, 0x7F	; 127
     e5c:	30 40       	sbci	r19, 0x00	; 0
     e5e:	13 96       	adiw	r26, 0x03	; 3
     e60:	3c 93       	st	X, r19
     e62:	2e 93       	st	-X, r18
     e64:	12 97       	sbiw	r26, 0x02	; 2
     e66:	83 e0       	ldi	r24, 0x03	; 3
     e68:	8c 93       	st	X, r24
     e6a:	87 e0       	ldi	r24, 0x07	; 7
     e6c:	44 0f       	add	r20, r20
     e6e:	55 1f       	adc	r21, r21
     e70:	66 1f       	adc	r22, r22
     e72:	77 1f       	adc	r23, r23
     e74:	8a 95       	dec	r24
     e76:	d1 f7       	brne	.-12     	; 0xe6c <__unpack_f+0xd4>
     e78:	70 64       	ori	r23, 0x40	; 64
     e7a:	14 96       	adiw	r26, 0x04	; 4
     e7c:	4d 93       	st	X+, r20
     e7e:	5d 93       	st	X+, r21
     e80:	6d 93       	st	X+, r22
     e82:	7c 93       	st	X, r23
     e84:	17 97       	sbiw	r26, 0x07	; 7
     e86:	08 95       	ret

00000e88 <__fpcmp_parts_f>:
     e88:	1f 93       	push	r17
     e8a:	dc 01       	movw	r26, r24
     e8c:	fb 01       	movw	r30, r22
     e8e:	9c 91       	ld	r25, X
     e90:	92 30       	cpi	r25, 0x02	; 2
     e92:	08 f4       	brcc	.+2      	; 0xe96 <__fpcmp_parts_f+0xe>
     e94:	47 c0       	rjmp	.+142    	; 0xf24 <__fpcmp_parts_f+0x9c>
     e96:	80 81       	ld	r24, Z
     e98:	82 30       	cpi	r24, 0x02	; 2
     e9a:	08 f4       	brcc	.+2      	; 0xe9e <__fpcmp_parts_f+0x16>
     e9c:	43 c0       	rjmp	.+134    	; 0xf24 <__fpcmp_parts_f+0x9c>
     e9e:	94 30       	cpi	r25, 0x04	; 4
     ea0:	51 f4       	brne	.+20     	; 0xeb6 <__fpcmp_parts_f+0x2e>
     ea2:	11 96       	adiw	r26, 0x01	; 1
     ea4:	1c 91       	ld	r17, X
     ea6:	84 30       	cpi	r24, 0x04	; 4
     ea8:	99 f5       	brne	.+102    	; 0xf10 <__fpcmp_parts_f+0x88>
     eaa:	81 81       	ldd	r24, Z+1	; 0x01
     eac:	68 2f       	mov	r22, r24
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	61 1b       	sub	r22, r17
     eb2:	71 09       	sbc	r23, r1
     eb4:	3f c0       	rjmp	.+126    	; 0xf34 <__fpcmp_parts_f+0xac>
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	21 f0       	breq	.+8      	; 0xec2 <__fpcmp_parts_f+0x3a>
     eba:	92 30       	cpi	r25, 0x02	; 2
     ebc:	31 f4       	brne	.+12     	; 0xeca <__fpcmp_parts_f+0x42>
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	b9 f1       	breq	.+110    	; 0xf30 <__fpcmp_parts_f+0xa8>
     ec2:	81 81       	ldd	r24, Z+1	; 0x01
     ec4:	88 23       	and	r24, r24
     ec6:	89 f1       	breq	.+98     	; 0xf2a <__fpcmp_parts_f+0xa2>
     ec8:	2d c0       	rjmp	.+90     	; 0xf24 <__fpcmp_parts_f+0x9c>
     eca:	11 96       	adiw	r26, 0x01	; 1
     ecc:	1c 91       	ld	r17, X
     ece:	11 97       	sbiw	r26, 0x01	; 1
     ed0:	82 30       	cpi	r24, 0x02	; 2
     ed2:	f1 f0       	breq	.+60     	; 0xf10 <__fpcmp_parts_f+0x88>
     ed4:	81 81       	ldd	r24, Z+1	; 0x01
     ed6:	18 17       	cp	r17, r24
     ed8:	d9 f4       	brne	.+54     	; 0xf10 <__fpcmp_parts_f+0x88>
     eda:	12 96       	adiw	r26, 0x02	; 2
     edc:	2d 91       	ld	r18, X+
     ede:	3c 91       	ld	r19, X
     ee0:	13 97       	sbiw	r26, 0x03	; 3
     ee2:	82 81       	ldd	r24, Z+2	; 0x02
     ee4:	93 81       	ldd	r25, Z+3	; 0x03
     ee6:	82 17       	cp	r24, r18
     ee8:	93 07       	cpc	r25, r19
     eea:	94 f0       	brlt	.+36     	; 0xf10 <__fpcmp_parts_f+0x88>
     eec:	28 17       	cp	r18, r24
     eee:	39 07       	cpc	r19, r25
     ef0:	bc f0       	brlt	.+46     	; 0xf20 <__fpcmp_parts_f+0x98>
     ef2:	14 96       	adiw	r26, 0x04	; 4
     ef4:	8d 91       	ld	r24, X+
     ef6:	9d 91       	ld	r25, X+
     ef8:	0d 90       	ld	r0, X+
     efa:	bc 91       	ld	r27, X
     efc:	a0 2d       	mov	r26, r0
     efe:	24 81       	ldd	r18, Z+4	; 0x04
     f00:	35 81       	ldd	r19, Z+5	; 0x05
     f02:	46 81       	ldd	r20, Z+6	; 0x06
     f04:	57 81       	ldd	r21, Z+7	; 0x07
     f06:	28 17       	cp	r18, r24
     f08:	39 07       	cpc	r19, r25
     f0a:	4a 07       	cpc	r20, r26
     f0c:	5b 07       	cpc	r21, r27
     f0e:	18 f4       	brcc	.+6      	; 0xf16 <__fpcmp_parts_f+0x8e>
     f10:	11 23       	and	r17, r17
     f12:	41 f0       	breq	.+16     	; 0xf24 <__fpcmp_parts_f+0x9c>
     f14:	0a c0       	rjmp	.+20     	; 0xf2a <__fpcmp_parts_f+0xa2>
     f16:	82 17       	cp	r24, r18
     f18:	93 07       	cpc	r25, r19
     f1a:	a4 07       	cpc	r26, r20
     f1c:	b5 07       	cpc	r27, r21
     f1e:	40 f4       	brcc	.+16     	; 0xf30 <__fpcmp_parts_f+0xa8>
     f20:	11 23       	and	r17, r17
     f22:	19 f0       	breq	.+6      	; 0xf2a <__fpcmp_parts_f+0xa2>
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	05 c0       	rjmp	.+10     	; 0xf34 <__fpcmp_parts_f+0xac>
     f2a:	6f ef       	ldi	r22, 0xFF	; 255
     f2c:	7f ef       	ldi	r23, 0xFF	; 255
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <__fpcmp_parts_f+0xac>
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	cb 01       	movw	r24, r22
     f36:	1f 91       	pop	r17
     f38:	08 95       	ret

00000f3a <DIO_void_set_port_dir>:


/* implementing the driver functions  */
/* set Portx Direction Function       */

void DIO_void_set_port_dir(u8 copy_u8_portID, u8 port_copy_dir){
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <DIO_void_set_port_dir+0x6>
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	6a 83       	std	Y+2, r22	; 0x02
	 *  Also general rule INPUT --> 0 // OUTPUT --> 1
	 *
	 *
	 */

	*(DIO_DDRx[copy_u8_portID]) = port_copy_dir;
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	fc 01       	movw	r30, r24
     f54:	eb 55       	subi	r30, 0x5B	; 91
     f56:	fe 4f       	sbci	r31, 0xFE	; 254
     f58:	01 90       	ld	r0, Z+
     f5a:	f0 81       	ld	r31, Z
     f5c:	e0 2d       	mov	r30, r0
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	80 83       	st	Z, r24

}
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <DIO_void_set_pin_dir>:

void DIO_void_set_pin_dir(u8 copy_u8_portID, u8 copy_u8_pinID, u8 pin_copy_dir){
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	00 d0       	rcall	.+0      	; 0xf72 <DIO_void_set_pin_dir+0x6>
     f72:	0f 92       	push	r0
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	89 83       	std	Y+1, r24	; 0x01
     f7a:	6a 83       	std	Y+2, r22	; 0x02
     f7c:	4b 83       	std	Y+3, r20	; 0x03
	 *  pin_copy_dir using the predefined macro INPUT //OUTPUT
	 *
	 *
	 */

	assign_Bit(*(DIO_DDRx[copy_u8_portID]),copy_u8_pinID,pin_copy_dir);
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	29 f5       	brne	.+74     	; 0xfce <DIO_void_set_pin_dir+0x62>
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	88 2f       	mov	r24, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	fc 01       	movw	r30, r24
     f90:	eb 55       	subi	r30, 0x5B	; 91
     f92:	fe 4f       	sbci	r31, 0xFE	; 254
     f94:	a0 81       	ld	r26, Z
     f96:	b1 81       	ldd	r27, Z+1	; 0x01
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	88 2f       	mov	r24, r24
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	fc 01       	movw	r30, r24
     fa4:	eb 55       	subi	r30, 0x5B	; 91
     fa6:	fe 4f       	sbci	r31, 0xFE	; 254
     fa8:	01 90       	ld	r0, Z+
     faa:	f0 81       	ld	r31, Z
     fac:	e0 2d       	mov	r30, r0
     fae:	80 81       	ld	r24, Z
     fb0:	48 2f       	mov	r20, r24
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 2e       	mov	r0, r18
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <DIO_void_set_pin_dir+0x58>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	0a 94       	dec	r0
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <DIO_void_set_pin_dir+0x54>
     fc8:	84 2b       	or	r24, r20
     fca:	8c 93       	st	X, r24
     fcc:	25 c0       	rjmp	.+74     	; 0x1018 <DIO_void_set_pin_dir+0xac>
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	88 2f       	mov	r24, r24
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	fc 01       	movw	r30, r24
     fda:	eb 55       	subi	r30, 0x5B	; 91
     fdc:	fe 4f       	sbci	r31, 0xFE	; 254
     fde:	a0 81       	ld	r26, Z
     fe0:	b1 81       	ldd	r27, Z+1	; 0x01
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	fc 01       	movw	r30, r24
     fee:	eb 55       	subi	r30, 0x5B	; 91
     ff0:	fe 4f       	sbci	r31, 0xFE	; 254
     ff2:	01 90       	ld	r0, Z+
     ff4:	f0 81       	ld	r31, Z
     ff6:	e0 2d       	mov	r30, r0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <DIO_void_set_pin_dir+0xa2>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <DIO_void_set_pin_dir+0x9e>
    1012:	80 95       	com	r24
    1014:	84 23       	and	r24, r20
    1016:	8c 93       	st	X, r24

}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <DIO_void_port_pullup>:

void DIO_void_port_pullup(u8 copy_u8_portID){
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	0f 92       	push	r0
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	89 83       	std	Y+1, r24	; 0x01
	 *  so that is what the function does
	 *  using the pullup for any button prevents the floating effect
	 *
	 *
	 */
	*(DIO_DDRx[copy_u8_portID]) = INPUT;
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	88 2f       	mov	r24, r24
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	fc 01       	movw	r30, r24
    103c:	eb 55       	subi	r30, 0x5B	; 91
    103e:	fe 4f       	sbci	r31, 0xFE	; 254
    1040:	01 90       	ld	r0, Z+
    1042:	f0 81       	ld	r31, Z
    1044:	e0 2d       	mov	r30, r0
    1046:	10 82       	st	Z, r1
	*(DIO_PORTx[copy_u8_portID]) = PORT_MAX;
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	fc 01       	movw	r30, r24
    1054:	e3 55       	subi	r30, 0x53	; 83
    1056:	fe 4f       	sbci	r31, 0xFE	; 254
    1058:	01 90       	ld	r0, Z+
    105a:	f0 81       	ld	r31, Z
    105c:	e0 2d       	mov	r30, r0
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	80 83       	st	Z, r24
}
    1062:	0f 90       	pop	r0
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <DIO_void_pin_pullup>:

void DIO_void_pin_pullup(u8 copy_u8_portID, u8 copy_u8_pinID){
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	00 d0       	rcall	.+0      	; 0x1070 <DIO_void_pin_pullup+0x6>
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	6a 83       	std	Y+2, r22	; 0x02
	/*  the function works as the one that set pullup for the whole port
	 *
	 *
	 */

	clear_Bit(*(DIO_DDRx[copy_u8_portID]),copy_u8_pinID);
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	88 2f       	mov	r24, r24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	fc 01       	movw	r30, r24
    1084:	eb 55       	subi	r30, 0x5B	; 91
    1086:	fe 4f       	sbci	r31, 0xFE	; 254
    1088:	a0 81       	ld	r26, Z
    108a:	b1 81       	ldd	r27, Z+1	; 0x01
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	fc 01       	movw	r30, r24
    1098:	eb 55       	subi	r30, 0x5B	; 91
    109a:	fe 4f       	sbci	r31, 0xFE	; 254
    109c:	01 90       	ld	r0, Z+
    109e:	f0 81       	ld	r31, Z
    10a0:	e0 2d       	mov	r30, r0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_void_pin_pullup+0x4c>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	2a 95       	dec	r18
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_void_pin_pullup+0x48>
    10ba:	80 95       	com	r24
    10bc:	84 23       	and	r24, r20
    10be:	8c 93       	st	X, r24
	set_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	88 2f       	mov	r24, r24
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	fc 01       	movw	r30, r24
    10cc:	e3 55       	subi	r30, 0x53	; 83
    10ce:	fe 4f       	sbci	r31, 0xFE	; 254
    10d0:	a0 81       	ld	r26, Z
    10d2:	b1 81       	ldd	r27, Z+1	; 0x01
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	88 2f       	mov	r24, r24
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	fc 01       	movw	r30, r24
    10e0:	e3 55       	subi	r30, 0x53	; 83
    10e2:	fe 4f       	sbci	r31, 0xFE	; 254
    10e4:	01 90       	ld	r0, Z+
    10e6:	f0 81       	ld	r31, Z
    10e8:	e0 2d       	mov	r30, r0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <DIO_void_pin_pullup+0x96>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <DIO_void_pin_pullup+0x92>
    1104:	84 2b       	or	r24, r20
    1106:	8c 93       	st	X, r24

}
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <DIO_void_set_port>:

void DIO_void_set_port(u8 copy_u8_portID){
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	0f 92       	push	r0
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	89 83       	std	Y+1, r24	; 0x01
	 *
	 */



	*(DIO_PORTx[copy_u8_portID]) = PORT_MAX;
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	88 2f       	mov	r24, r24
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	fc 01       	movw	r30, r24
    112a:	e3 55       	subi	r30, 0x53	; 83
    112c:	fe 4f       	sbci	r31, 0xFE	; 254
    112e:	01 90       	ld	r0, Z+
    1130:	f0 81       	ld	r31, Z
    1132:	e0 2d       	mov	r30, r0
    1134:	8f ef       	ldi	r24, 0xFF	; 255
    1136:	80 83       	st	Z, r24

}
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <DIO_void_clear_port>:

void DIO_void_clear_port(u8 copy_u8_portID){
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	0f 92       	push	r0
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	89 83       	std	Y+1, r24	; 0x01
	 *
	 *
	 */


	*(DIO_PORTx[copy_u8_portID]) = LOW;
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	88 2f       	mov	r24, r24
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	fc 01       	movw	r30, r24
    1158:	e3 55       	subi	r30, 0x53	; 83
    115a:	fe 4f       	sbci	r31, 0xFE	; 254
    115c:	01 90       	ld	r0, Z+
    115e:	f0 81       	ld	r31, Z
    1160:	e0 2d       	mov	r30, r0
    1162:	10 82       	st	Z, r1

}
    1164:	0f 90       	pop	r0
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <DIO_void_assign_port>:

void DIO_void_assign_port(u8 copy_u8_portID, u8 copy_value){
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	00 d0       	rcall	.+0      	; 0x1172 <DIO_void_assign_port+0x6>
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 */



	*(DIO_PORTx[copy_u8_portID]) = copy_value;
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	fc 01       	movw	r30, r24
    1186:	e3 55       	subi	r30, 0x53	; 83
    1188:	fe 4f       	sbci	r31, 0xFE	; 254
    118a:	01 90       	ld	r0, Z+
    118c:	f0 81       	ld	r31, Z
    118e:	e0 2d       	mov	r30, r0
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	80 83       	st	Z, r24

}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <DIO_void_toggle_port>:

void DIO_void_toggle_port(u8 copy_u8_portID){
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	0f 92       	push	r0
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	89 83       	std	Y+1, r24	; 0x01
	 *
	 *
	 */


	*(DIO_PORTx[copy_u8_portID]) ^= PORT_MAX;
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	fc 01       	movw	r30, r24
    11b6:	e3 55       	subi	r30, 0x53	; 83
    11b8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ba:	a0 81       	ld	r26, Z
    11bc:	b1 81       	ldd	r27, Z+1	; 0x01
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	88 2f       	mov	r24, r24
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	fc 01       	movw	r30, r24
    11ca:	e3 55       	subi	r30, 0x53	; 83
    11cc:	fe 4f       	sbci	r31, 0xFE	; 254
    11ce:	01 90       	ld	r0, Z+
    11d0:	f0 81       	ld	r31, Z
    11d2:	e0 2d       	mov	r30, r0
    11d4:	80 81       	ld	r24, Z
    11d6:	80 95       	com	r24
    11d8:	8c 93       	st	X, r24
}
    11da:	0f 90       	pop	r0
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <DIO_void_set_pin>:

void DIO_void_set_pin(u8 copy_u8_portID , u8 copy_u8_pinID){
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <DIO_void_set_pin+0x6>
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	89 83       	std	Y+1, r24	; 0x01
    11ee:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	set_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	88 2f       	mov	r24, r24
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	fc 01       	movw	r30, r24
    11fc:	e3 55       	subi	r30, 0x53	; 83
    11fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1200:	a0 81       	ld	r26, Z
    1202:	b1 81       	ldd	r27, Z+1	; 0x01
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	88 2f       	mov	r24, r24
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	fc 01       	movw	r30, r24
    1210:	e3 55       	subi	r30, 0x53	; 83
    1212:	fe 4f       	sbci	r31, 0xFE	; 254
    1214:	01 90       	ld	r0, Z+
    1216:	f0 81       	ld	r31, Z
    1218:	e0 2d       	mov	r30, r0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <DIO_void_set_pin+0x4e>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <DIO_void_set_pin+0x4a>
    1234:	84 2b       	or	r24, r20
    1236:	8c 93       	st	X, r24
}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <DIO_void_clear_pin>:

void DIO_void_clear_pin(u8 copy_u8_portID , u8 copy_u8_pinID){
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <DIO_void_clear_pin+0x6>
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	clear_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	88 2f       	mov	r24, r24
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	fc 01       	movw	r30, r24
    125c:	e3 55       	subi	r30, 0x53	; 83
    125e:	fe 4f       	sbci	r31, 0xFE	; 254
    1260:	a0 81       	ld	r26, Z
    1262:	b1 81       	ldd	r27, Z+1	; 0x01
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	88 2f       	mov	r24, r24
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	fc 01       	movw	r30, r24
    1270:	e3 55       	subi	r30, 0x53	; 83
    1272:	fe 4f       	sbci	r31, 0xFE	; 254
    1274:	01 90       	ld	r0, Z+
    1276:	f0 81       	ld	r31, Z
    1278:	e0 2d       	mov	r30, r0
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 2e       	mov	r0, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <DIO_void_clear_pin+0x4e>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <DIO_void_clear_pin+0x4a>
    1294:	80 95       	com	r24
    1296:	84 23       	and	r24, r20
    1298:	8c 93       	st	X, r24
}
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <DIO_void_assign_pin>:

void DIO_void_assign_pin(u8 copy_u8_portID,u8 copy_u8_pinID ,u8 copy_value){
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <DIO_void_assign_pin+0x6>
    12aa:	0f 92       	push	r0
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	6a 83       	std	Y+2, r22	; 0x02
    12b4:	4b 83       	std	Y+3, r20	; 0x03
	 *
	 */



	assign_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID,copy_value);
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	29 f5       	brne	.+74     	; 0x1306 <DIO_void_assign_pin+0x62>
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	88 2f       	mov	r24, r24
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	fc 01       	movw	r30, r24
    12c8:	e3 55       	subi	r30, 0x53	; 83
    12ca:	fe 4f       	sbci	r31, 0xFE	; 254
    12cc:	a0 81       	ld	r26, Z
    12ce:	b1 81       	ldd	r27, Z+1	; 0x01
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	88 2f       	mov	r24, r24
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	fc 01       	movw	r30, r24
    12dc:	e3 55       	subi	r30, 0x53	; 83
    12de:	fe 4f       	sbci	r31, 0xFE	; 254
    12e0:	01 90       	ld	r0, Z+
    12e2:	f0 81       	ld	r31, Z
    12e4:	e0 2d       	mov	r30, r0
    12e6:	80 81       	ld	r24, Z
    12e8:	48 2f       	mov	r20, r24
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	02 2e       	mov	r0, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <DIO_void_assign_pin+0x58>
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	0a 94       	dec	r0
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <DIO_void_assign_pin+0x54>
    1300:	84 2b       	or	r24, r20
    1302:	8c 93       	st	X, r24
    1304:	25 c0       	rjmp	.+74     	; 0x1350 <DIO_void_assign_pin+0xac>
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	fc 01       	movw	r30, r24
    1312:	e3 55       	subi	r30, 0x53	; 83
    1314:	fe 4f       	sbci	r31, 0xFE	; 254
    1316:	a0 81       	ld	r26, Z
    1318:	b1 81       	ldd	r27, Z+1	; 0x01
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	88 2f       	mov	r24, r24
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	fc 01       	movw	r30, r24
    1326:	e3 55       	subi	r30, 0x53	; 83
    1328:	fe 4f       	sbci	r31, 0xFE	; 254
    132a:	01 90       	ld	r0, Z+
    132c:	f0 81       	ld	r31, Z
    132e:	e0 2d       	mov	r30, r0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_void_assign_pin+0xa2>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIO_void_assign_pin+0x9e>
    134a:	80 95       	com	r24
    134c:	84 23       	and	r24, r20
    134e:	8c 93       	st	X, r24
}
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <DIO_void_toggle_pin>:

void DIO_void_toggle_pin(u8 copy_u8_portID , u8 copy_u8_pinID){
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	00 d0       	rcall	.+0      	; 0x1362 <DIO_void_toggle_pin+0x6>
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	toggle_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	88 2f       	mov	r24, r24
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	fc 01       	movw	r30, r24
    1376:	e3 55       	subi	r30, 0x53	; 83
    1378:	fe 4f       	sbci	r31, 0xFE	; 254
    137a:	a0 81       	ld	r26, Z
    137c:	b1 81       	ldd	r27, Z+1	; 0x01
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	88 2f       	mov	r24, r24
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	fc 01       	movw	r30, r24
    138a:	e3 55       	subi	r30, 0x53	; 83
    138c:	fe 4f       	sbci	r31, 0xFE	; 254
    138e:	01 90       	ld	r0, Z+
    1390:	f0 81       	ld	r31, Z
    1392:	e0 2d       	mov	r30, r0
    1394:	80 81       	ld	r24, Z
    1396:	48 2f       	mov	r20, r24
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	02 2e       	mov	r0, r18
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <DIO_void_toggle_pin+0x4e>
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	0a 94       	dec	r0
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <DIO_void_toggle_pin+0x4a>
    13ae:	84 27       	eor	r24, r20
    13b0:	8c 93       	st	X, r24

}
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <DIO_u8_get_port>:

u8 DIO_u8_get_port(u8 copy_u8_portID){
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	0f 92       	push	r0
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	89 83       	std	Y+1, r24	; 0x01
	 *  1 byte data
	 */



	return *(DIO_PINx[copy_u8_portID]);
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	88 2f       	mov	r24, r24
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	fc 01       	movw	r30, r24
    13d4:	e3 56       	subi	r30, 0x63	; 99
    13d6:	fe 4f       	sbci	r31, 0xFE	; 254
    13d8:	01 90       	ld	r0, Z+
    13da:	f0 81       	ld	r31, Z
    13dc:	e0 2d       	mov	r30, r0
    13de:	80 81       	ld	r24, Z
}
    13e0:	0f 90       	pop	r0
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <DIO_u8_get_pin>:

u8 DIO_u8_get_pin(u8 copy_u8_portID, u8 copy_u8_pinID){
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <DIO_u8_get_pin+0x6>
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	89 83       	std	Y+1, r24	; 0x01
    13f4:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	return get_Bit(*(DIO_PINx[copy_u8_portID]),copy_u8_pinID);
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	fc 01       	movw	r30, r24
    1402:	e3 56       	subi	r30, 0x63	; 99
    1404:	fe 4f       	sbci	r31, 0xFE	; 254
    1406:	01 90       	ld	r0, Z+
    1408:	f0 81       	ld	r31, Z
    140a:	e0 2d       	mov	r30, r0
    140c:	80 81       	ld	r24, Z
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	88 2f       	mov	r24, r24
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	a9 01       	movw	r20, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_u8_get_pin+0x38>
    141c:	55 95       	asr	r21
    141e:	47 95       	ror	r20
    1420:	8a 95       	dec	r24
    1422:	e2 f7       	brpl	.-8      	; 0x141c <DIO_u8_get_pin+0x34>
    1424:	ca 01       	movw	r24, r20
    1426:	81 70       	andi	r24, 0x01	; 1
}
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <KPD_Active_Col_init>:
u8 KPD_Row_Pin[row_Number] = {row_0,row_1,row_2,row_3};
u8 KPD_Col_Pin[col_Number] = {col_0,col_1,col_2,col_3};



void KPD_Active_Col_init(){
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	00 d0       	rcall	.+0      	; 0x1438 <KPD_Active_Col_init+0x6>
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62

	//set the columns to output
	for(u8 col = 0; col<col_Number;col++){
    143c:	1a 82       	std	Y+2, r1	; 0x02
    143e:	1a c0       	rjmp	.+52     	; 0x1474 <KPD_Active_Col_init+0x42>

		DIO_void_set_pin_dir(col_Port,KPD_Col_Pin[col],OUTPUT);
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	88 2f       	mov	r24, r24
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	fc 01       	movw	r30, r24
    1448:	e7 54       	subi	r30, 0x47	; 71
    144a:	fe 4f       	sbci	r31, 0xFE	; 254
    144c:	90 81       	ld	r25, Z
    144e:	82 e0       	ldi	r24, 0x02	; 2
    1450:	69 2f       	mov	r22, r25
    1452:	41 e0       	ldi	r20, 0x01	; 1
    1454:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_void_set_pin_dir>
		// set to high (pullup)
		DIO_void_set_pin(col_Port, KPD_Col_Pin[col]);
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	88 2f       	mov	r24, r24
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	fc 01       	movw	r30, r24
    1460:	e7 54       	subi	r30, 0x47	; 71
    1462:	fe 4f       	sbci	r31, 0xFE	; 254
    1464:	90 81       	ld	r25, Z
    1466:	82 e0       	ldi	r24, 0x02	; 2
    1468:	69 2f       	mov	r22, r25
    146a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <DIO_void_set_pin>


void KPD_Active_Col_init(){

	//set the columns to output
	for(u8 col = 0; col<col_Number;col++){
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	8f 5f       	subi	r24, 0xFF	; 255
    1472:	8a 83       	std	Y+2, r24	; 0x02
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	84 30       	cpi	r24, 0x04	; 4
    1478:	18 f3       	brcs	.-58     	; 0x1440 <KPD_Active_Col_init+0xe>
		// set to high (pullup)
		DIO_void_set_pin(col_Port, KPD_Col_Pin[col]);
	}

	//set rows to input and activate internal pullup
	for(u8 row = 0; row<row_Number;row++){
    147a:	19 82       	std	Y+1, r1	; 0x01
    147c:	0e c0       	rjmp	.+28     	; 0x149a <KPD_Active_Col_init+0x68>

		DIO_void_pin_pullup(row_Port, KPD_Row_Pin[row]);
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	fc 01       	movw	r30, r24
    1486:	eb 54       	subi	r30, 0x4B	; 75
    1488:	fe 4f       	sbci	r31, 0xFE	; 254
    148a:	90 81       	ld	r25, Z
    148c:	83 e0       	ldi	r24, 0x03	; 3
    148e:	69 2f       	mov	r22, r25
    1490:	0e 94 35 08 	call	0x106a	; 0x106a <DIO_void_pin_pullup>
		// set to high (pullup)
		DIO_void_set_pin(col_Port, KPD_Col_Pin[col]);
	}

	//set rows to input and activate internal pullup
	for(u8 row = 0; row<row_Number;row++){
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	8f 5f       	subi	r24, 0xFF	; 255
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	84 30       	cpi	r24, 0x04	; 4
    149e:	78 f3       	brcs	.-34     	; 0x147e <KPD_Active_Col_init+0x4c>

		DIO_void_pin_pullup(row_Port, KPD_Row_Pin[row]);

	}
}
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <KPD_read_key>:

void KPD_read_key(u8* copy_u8_key){
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	63 97       	sbiw	r28, 0x13	; 19
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	cd bf       	out	0x3d, r28	; 61
    14c2:	9b 8b       	std	Y+19, r25	; 0x13
    14c4:	8a 8b       	std	Y+18, r24	; 0x12

	u8 key_index = 0;
    14c6:	19 8a       	std	Y+17, r1	; 0x11
	 *    1110
	 *
	 *     for columns
`    */

	for(u8 col = 0; col<col_Number; col++){
    14c8:	18 8a       	std	Y+16, r1	; 0x10
    14ca:	41 c0       	rjmp	.+130    	; 0x154e <KPD_read_key+0xa4>

		//clear column pins
		DIO_void_clear_pin(col_Port, KPD_Col_Pin[col]);
    14cc:	88 89       	ldd	r24, Y+16	; 0x10
    14ce:	88 2f       	mov	r24, r24
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	fc 01       	movw	r30, r24
    14d4:	e7 54       	subi	r30, 0x47	; 71
    14d6:	fe 4f       	sbci	r31, 0xFE	; 254
    14d8:	90 81       	ld	r25, Z
    14da:	82 e0       	ldi	r24, 0x02	; 2
    14dc:	69 2f       	mov	r22, r25
    14de:	0e 94 21 09 	call	0x1242	; 0x1242 <DIO_void_clear_pin>

		for(u8 row = 0; row < row_Number; row++){
    14e2:	1f 86       	std	Y+15, r1	; 0x0f
    14e4:	23 c0       	rjmp	.+70     	; 0x152c <KPD_read_key+0x82>

			key_index = (row * 4)+ col;
    14e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e8:	88 2f       	mov	r24, r24
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	98 2f       	mov	r25, r24
    14f6:	88 89       	ldd	r24, Y+16	; 0x10
    14f8:	89 0f       	add	r24, r25
    14fa:	89 8b       	std	Y+17, r24	; 0x11
			copy_u8_key[key_index] = DIO_u8_get_pin(row_Port, KPD_Row_Pin[row]);
    14fc:	89 89       	ldd	r24, Y+17	; 0x11
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	8a 89       	ldd	r24, Y+18	; 0x12
    1504:	9b 89       	ldd	r25, Y+19	; 0x13
    1506:	8c 01       	movw	r16, r24
    1508:	02 0f       	add	r16, r18
    150a:	13 1f       	adc	r17, r19
    150c:	8f 85       	ldd	r24, Y+15	; 0x0f
    150e:	88 2f       	mov	r24, r24
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	fc 01       	movw	r30, r24
    1514:	eb 54       	subi	r30, 0x4B	; 75
    1516:	fe 4f       	sbci	r31, 0xFE	; 254
    1518:	90 81       	ld	r25, Z
    151a:	83 e0       	ldi	r24, 0x03	; 3
    151c:	69 2f       	mov	r22, r25
    151e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <DIO_u8_get_pin>
    1522:	f8 01       	movw	r30, r16
    1524:	80 83       	st	Z, r24
	for(u8 col = 0; col<col_Number; col++){

		//clear column pins
		DIO_void_clear_pin(col_Port, KPD_Col_Pin[col]);

		for(u8 row = 0; row < row_Number; row++){
    1526:	8f 85       	ldd	r24, Y+15	; 0x0f
    1528:	8f 5f       	subi	r24, 0xFF	; 255
    152a:	8f 87       	std	Y+15, r24	; 0x0f
    152c:	8f 85       	ldd	r24, Y+15	; 0x0f
    152e:	84 30       	cpi	r24, 0x04	; 4
    1530:	d0 f2       	brcs	.-76     	; 0x14e6 <KPD_read_key+0x3c>
			key_index = (row * 4)+ col;
			copy_u8_key[key_index] = DIO_u8_get_pin(row_Port, KPD_Row_Pin[row]);

		}

		DIO_void_set_pin(col_Port, KPD_Col_Pin[col]);
    1532:	88 89       	ldd	r24, Y+16	; 0x10
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	fc 01       	movw	r30, r24
    153a:	e7 54       	subi	r30, 0x47	; 71
    153c:	fe 4f       	sbci	r31, 0xFE	; 254
    153e:	90 81       	ld	r25, Z
    1540:	82 e0       	ldi	r24, 0x02	; 2
    1542:	69 2f       	mov	r22, r25
    1544:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <DIO_void_set_pin>
	 *    1110
	 *
	 *     for columns
`    */

	for(u8 col = 0; col<col_Number; col++){
    1548:	88 89       	ldd	r24, Y+16	; 0x10
    154a:	8f 5f       	subi	r24, 0xFF	; 255
    154c:	88 8b       	std	Y+16, r24	; 0x10
    154e:	88 89       	ldd	r24, Y+16	; 0x10
    1550:	84 30       	cpi	r24, 0x04	; 4
    1552:	08 f4       	brcc	.+2      	; 0x1556 <KPD_read_key+0xac>
    1554:	bb cf       	rjmp	.-138    	; 0x14cc <KPD_read_key+0x22>
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	a8 e4       	ldi	r26, 0x48	; 72
    155c:	b3 e4       	ldi	r27, 0x43	; 67
    155e:	8b 87       	std	Y+11, r24	; 0x0b
    1560:	9c 87       	std	Y+12, r25	; 0x0c
    1562:	ad 87       	std	Y+13, r26	; 0x0d
    1564:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1566:	6b 85       	ldd	r22, Y+11	; 0x0b
    1568:	7c 85       	ldd	r23, Y+12	; 0x0c
    156a:	8d 85       	ldd	r24, Y+13	; 0x0d
    156c:	9e 85       	ldd	r25, Y+14	; 0x0e
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	4a ef       	ldi	r20, 0xFA	; 250
    1574:	54 e4       	ldi	r21, 0x44	; 68
    1576:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	8f 83       	std	Y+7, r24	; 0x07
    1580:	98 87       	std	Y+8, r25	; 0x08
    1582:	a9 87       	std	Y+9, r26	; 0x09
    1584:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1586:	6f 81       	ldd	r22, Y+7	; 0x07
    1588:	78 85       	ldd	r23, Y+8	; 0x08
    158a:	89 85       	ldd	r24, Y+9	; 0x09
    158c:	9a 85       	ldd	r25, Y+10	; 0x0a
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	40 e8       	ldi	r20, 0x80	; 128
    1594:	5f e3       	ldi	r21, 0x3F	; 63
    1596:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    159a:	88 23       	and	r24, r24
    159c:	2c f4       	brge	.+10     	; 0x15a8 <KPD_read_key+0xfe>
		__ticks = 1;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	9e 83       	std	Y+6, r25	; 0x06
    15a4:	8d 83       	std	Y+5, r24	; 0x05
    15a6:	3f c0       	rjmp	.+126    	; 0x1626 <KPD_read_key+0x17c>
	else if (__tmp > 65535)
    15a8:	6f 81       	ldd	r22, Y+7	; 0x07
    15aa:	78 85       	ldd	r23, Y+8	; 0x08
    15ac:	89 85       	ldd	r24, Y+9	; 0x09
    15ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	3f ef       	ldi	r19, 0xFF	; 255
    15b4:	4f e7       	ldi	r20, 0x7F	; 127
    15b6:	57 e4       	ldi	r21, 0x47	; 71
    15b8:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    15bc:	18 16       	cp	r1, r24
    15be:	4c f5       	brge	.+82     	; 0x1612 <KPD_read_key+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	40 e2       	ldi	r20, 0x20	; 32
    15ce:	51 e4       	ldi	r21, 0x41	; 65
    15d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	bc 01       	movw	r22, r24
    15da:	cd 01       	movw	r24, r26
    15dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	9e 83       	std	Y+6, r25	; 0x06
    15e6:	8d 83       	std	Y+5, r24	; 0x05
    15e8:	0f c0       	rjmp	.+30     	; 0x1608 <KPD_read_key+0x15e>
    15ea:	88 ec       	ldi	r24, 0xC8	; 200
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	9c 83       	std	Y+4, r25	; 0x04
    15f0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	9c 81       	ldd	r25, Y+4	; 0x04
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	f1 f7       	brne	.-4      	; 0x15f6 <KPD_read_key+0x14c>
    15fa:	9c 83       	std	Y+4, r25	; 0x04
    15fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1600:	9e 81       	ldd	r25, Y+6	; 0x06
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	9e 83       	std	Y+6, r25	; 0x06
    1606:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1608:	8d 81       	ldd	r24, Y+5	; 0x05
    160a:	9e 81       	ldd	r25, Y+6	; 0x06
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	69 f7       	brne	.-38     	; 0x15ea <KPD_read_key+0x140>
    1610:	14 c0       	rjmp	.+40     	; 0x163a <KPD_read_key+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1612:	6f 81       	ldd	r22, Y+7	; 0x07
    1614:	78 85       	ldd	r23, Y+8	; 0x08
    1616:	89 85       	ldd	r24, Y+9	; 0x09
    1618:	9a 85       	ldd	r25, Y+10	; 0x0a
    161a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	9e 83       	std	Y+6, r25	; 0x06
    1624:	8d 83       	std	Y+5, r24	; 0x05
    1626:	8d 81       	ldd	r24, Y+5	; 0x05
    1628:	9e 81       	ldd	r25, Y+6	; 0x06
    162a:	9a 83       	std	Y+2, r25	; 0x02
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	9a 81       	ldd	r25, Y+2	; 0x02
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <KPD_read_key+0x188>
    1636:	9a 83       	std	Y+2, r25	; 0x02
    1638:	89 83       	std	Y+1, r24	; 0x01
	}


	_delay_ms(200);

}
    163a:	63 96       	adiw	r28, 0x13	; 19
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	1f 91       	pop	r17
    164c:	0f 91       	pop	r16
    164e:	08 95       	ret

00001650 <KPD_get_key>:

u8 KPD_get_key(u8* copy_u8_key) {
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	29 97       	sbiw	r28, 0x09	; 9
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	9d 83       	std	Y+5, r25	; 0x05
    1666:	8c 83       	std	Y+4, r24	; 0x04
	 *
	 *
	 */


    u8 key_index = KPD_size; // Initialize to an invalid value that does not correspond to any key
    1668:	80 e1       	ldi	r24, 0x10	; 16
    166a:	8b 83       	std	Y+3, r24	; 0x03
    u8 key_pressed = 0; // Flag to indicate if any key is pressed
    166c:	1a 82       	std	Y+2, r1	; 0x02

    for (u8 i = 0; i < KPD_size; i++) {
    166e:	19 82       	std	Y+1, r1	; 0x01
    1670:	13 c0       	rjmp	.+38     	; 0x1698 <KPD_get_key+0x48>
        if (copy_u8_key[i] == LOW) {
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	8c 81       	ldd	r24, Y+4	; 0x04
    167a:	9d 81       	ldd	r25, Y+5	; 0x05
    167c:	fc 01       	movw	r30, r24
    167e:	e2 0f       	add	r30, r18
    1680:	f3 1f       	adc	r31, r19
    1682:	80 81       	ld	r24, Z
    1684:	88 23       	and	r24, r24
    1686:	29 f4       	brne	.+10     	; 0x1692 <KPD_get_key+0x42>
            key_index = i;
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	8b 83       	std	Y+3, r24	; 0x03
            key_pressed = 1;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	8a 83       	std	Y+2, r24	; 0x02
    1690:	06 c0       	rjmp	.+12     	; 0x169e <KPD_get_key+0x4e>


    u8 key_index = KPD_size; // Initialize to an invalid value that does not correspond to any key
    u8 key_pressed = 0; // Flag to indicate if any key is pressed

    for (u8 i = 0; i < KPD_size; i++) {
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	8f 5f       	subi	r24, 0xFF	; 255
    1696:	89 83       	std	Y+1, r24	; 0x01
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	80 31       	cpi	r24, 0x10	; 16
    169c:	50 f3       	brcs	.-44     	; 0x1672 <KPD_get_key+0x22>
            key_pressed = 1;
            break;
        }
    }

    if (key_pressed) {
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	88 23       	and	r24, r24
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <KPD_get_key+0x56>
    16a4:	96 c0       	rjmp	.+300    	; 0x17d2 <KPD_get_key+0x182>
        switch (key_index) {
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	38 87       	std	Y+8, r19	; 0x08
    16ae:	2f 83       	std	Y+7, r18	; 0x07
    16b0:	8f 81       	ldd	r24, Y+7	; 0x07
    16b2:	98 85       	ldd	r25, Y+8	; 0x08
    16b4:	87 30       	cpi	r24, 0x07	; 7
    16b6:	91 05       	cpc	r25, r1
    16b8:	09 f4       	brne	.+2      	; 0x16bc <KPD_get_key+0x6c>
    16ba:	6f c0       	rjmp	.+222    	; 0x179a <KPD_get_key+0x14a>
    16bc:	2f 81       	ldd	r18, Y+7	; 0x07
    16be:	38 85       	ldd	r19, Y+8	; 0x08
    16c0:	28 30       	cpi	r18, 0x08	; 8
    16c2:	31 05       	cpc	r19, r1
    16c4:	54 f5       	brge	.+84     	; 0x171a <KPD_get_key+0xca>
    16c6:	8f 81       	ldd	r24, Y+7	; 0x07
    16c8:	98 85       	ldd	r25, Y+8	; 0x08
    16ca:	83 30       	cpi	r24, 0x03	; 3
    16cc:	91 05       	cpc	r25, r1
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <KPD_get_key+0x82>
    16d0:	58 c0       	rjmp	.+176    	; 0x1782 <KPD_get_key+0x132>
    16d2:	2f 81       	ldd	r18, Y+7	; 0x07
    16d4:	38 85       	ldd	r19, Y+8	; 0x08
    16d6:	24 30       	cpi	r18, 0x04	; 4
    16d8:	31 05       	cpc	r19, r1
    16da:	94 f4       	brge	.+36     	; 0x1700 <KPD_get_key+0xb0>
    16dc:	8f 81       	ldd	r24, Y+7	; 0x07
    16de:	98 85       	ldd	r25, Y+8	; 0x08
    16e0:	81 30       	cpi	r24, 0x01	; 1
    16e2:	91 05       	cpc	r25, r1
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <KPD_get_key+0x98>
    16e6:	47 c0       	rjmp	.+142    	; 0x1776 <KPD_get_key+0x126>
    16e8:	2f 81       	ldd	r18, Y+7	; 0x07
    16ea:	38 85       	ldd	r19, Y+8	; 0x08
    16ec:	22 30       	cpi	r18, 0x02	; 2
    16ee:	31 05       	cpc	r19, r1
    16f0:	0c f0       	brlt	.+2      	; 0x16f4 <KPD_get_key+0xa4>
    16f2:	44 c0       	rjmp	.+136    	; 0x177c <KPD_get_key+0x12c>
    16f4:	8f 81       	ldd	r24, Y+7	; 0x07
    16f6:	98 85       	ldd	r25, Y+8	; 0x08
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	09 f4       	brne	.+2      	; 0x16fe <KPD_get_key+0xae>
    16fc:	39 c0       	rjmp	.+114    	; 0x1770 <KPD_get_key+0x120>
    16fe:	68 c0       	rjmp	.+208    	; 0x17d0 <KPD_get_key+0x180>
    1700:	2f 81       	ldd	r18, Y+7	; 0x07
    1702:	38 85       	ldd	r19, Y+8	; 0x08
    1704:	25 30       	cpi	r18, 0x05	; 5
    1706:	31 05       	cpc	r19, r1
    1708:	09 f4       	brne	.+2      	; 0x170c <KPD_get_key+0xbc>
    170a:	41 c0       	rjmp	.+130    	; 0x178e <KPD_get_key+0x13e>
    170c:	8f 81       	ldd	r24, Y+7	; 0x07
    170e:	98 85       	ldd	r25, Y+8	; 0x08
    1710:	86 30       	cpi	r24, 0x06	; 6
    1712:	91 05       	cpc	r25, r1
    1714:	0c f0       	brlt	.+2      	; 0x1718 <KPD_get_key+0xc8>
    1716:	3e c0       	rjmp	.+124    	; 0x1794 <KPD_get_key+0x144>
    1718:	37 c0       	rjmp	.+110    	; 0x1788 <KPD_get_key+0x138>
    171a:	2f 81       	ldd	r18, Y+7	; 0x07
    171c:	38 85       	ldd	r19, Y+8	; 0x08
    171e:	2b 30       	cpi	r18, 0x0B	; 11
    1720:	31 05       	cpc	r19, r1
    1722:	09 f4       	brne	.+2      	; 0x1726 <KPD_get_key+0xd6>
    1724:	46 c0       	rjmp	.+140    	; 0x17b2 <KPD_get_key+0x162>
    1726:	8f 81       	ldd	r24, Y+7	; 0x07
    1728:	98 85       	ldd	r25, Y+8	; 0x08
    172a:	8c 30       	cpi	r24, 0x0C	; 12
    172c:	91 05       	cpc	r25, r1
    172e:	5c f4       	brge	.+22     	; 0x1746 <KPD_get_key+0xf6>
    1730:	2f 81       	ldd	r18, Y+7	; 0x07
    1732:	38 85       	ldd	r19, Y+8	; 0x08
    1734:	29 30       	cpi	r18, 0x09	; 9
    1736:	31 05       	cpc	r19, r1
    1738:	b1 f1       	breq	.+108    	; 0x17a6 <KPD_get_key+0x156>
    173a:	8f 81       	ldd	r24, Y+7	; 0x07
    173c:	98 85       	ldd	r25, Y+8	; 0x08
    173e:	8a 30       	cpi	r24, 0x0A	; 10
    1740:	91 05       	cpc	r25, r1
    1742:	a4 f5       	brge	.+104    	; 0x17ac <KPD_get_key+0x15c>
    1744:	2d c0       	rjmp	.+90     	; 0x17a0 <KPD_get_key+0x150>
    1746:	2f 81       	ldd	r18, Y+7	; 0x07
    1748:	38 85       	ldd	r19, Y+8	; 0x08
    174a:	2d 30       	cpi	r18, 0x0D	; 13
    174c:	31 05       	cpc	r19, r1
    174e:	b9 f1       	breq	.+110    	; 0x17be <KPD_get_key+0x16e>
    1750:	8f 81       	ldd	r24, Y+7	; 0x07
    1752:	98 85       	ldd	r25, Y+8	; 0x08
    1754:	8d 30       	cpi	r24, 0x0D	; 13
    1756:	91 05       	cpc	r25, r1
    1758:	7c f1       	brlt	.+94     	; 0x17b8 <KPD_get_key+0x168>
    175a:	2f 81       	ldd	r18, Y+7	; 0x07
    175c:	38 85       	ldd	r19, Y+8	; 0x08
    175e:	2e 30       	cpi	r18, 0x0E	; 14
    1760:	31 05       	cpc	r19, r1
    1762:	81 f1       	breq	.+96     	; 0x17c4 <KPD_get_key+0x174>
    1764:	8f 81       	ldd	r24, Y+7	; 0x07
    1766:	98 85       	ldd	r25, Y+8	; 0x08
    1768:	8f 30       	cpi	r24, 0x0F	; 15
    176a:	91 05       	cpc	r25, r1
    176c:	71 f1       	breq	.+92     	; 0x17ca <KPD_get_key+0x17a>
    176e:	30 c0       	rjmp	.+96     	; 0x17d0 <KPD_get_key+0x180>
            case 0: return '7';
    1770:	97 e3       	ldi	r25, 0x37	; 55
    1772:	9e 83       	std	Y+6, r25	; 0x06
    1774:	30 c0       	rjmp	.+96     	; 0x17d6 <KPD_get_key+0x186>
            case 1: return '8';
    1776:	28 e3       	ldi	r18, 0x38	; 56
    1778:	2e 83       	std	Y+6, r18	; 0x06
    177a:	2d c0       	rjmp	.+90     	; 0x17d6 <KPD_get_key+0x186>
            case 2: return '9';
    177c:	39 e3       	ldi	r19, 0x39	; 57
    177e:	3e 83       	std	Y+6, r19	; 0x06
    1780:	2a c0       	rjmp	.+84     	; 0x17d6 <KPD_get_key+0x186>
            case 3: return '/';
    1782:	8f e2       	ldi	r24, 0x2F	; 47
    1784:	8e 83       	std	Y+6, r24	; 0x06
    1786:	27 c0       	rjmp	.+78     	; 0x17d6 <KPD_get_key+0x186>
            case 4: return '4';
    1788:	94 e3       	ldi	r25, 0x34	; 52
    178a:	9e 83       	std	Y+6, r25	; 0x06
    178c:	24 c0       	rjmp	.+72     	; 0x17d6 <KPD_get_key+0x186>
            case 5: return '5';
    178e:	25 e3       	ldi	r18, 0x35	; 53
    1790:	2e 83       	std	Y+6, r18	; 0x06
    1792:	21 c0       	rjmp	.+66     	; 0x17d6 <KPD_get_key+0x186>
            case 6: return '6';
    1794:	36 e3       	ldi	r19, 0x36	; 54
    1796:	3e 83       	std	Y+6, r19	; 0x06
    1798:	1e c0       	rjmp	.+60     	; 0x17d6 <KPD_get_key+0x186>
            case 7: return '*';
    179a:	8a e2       	ldi	r24, 0x2A	; 42
    179c:	8e 83       	std	Y+6, r24	; 0x06
    179e:	1b c0       	rjmp	.+54     	; 0x17d6 <KPD_get_key+0x186>
            case 8: return '1';
    17a0:	91 e3       	ldi	r25, 0x31	; 49
    17a2:	9e 83       	std	Y+6, r25	; 0x06
    17a4:	18 c0       	rjmp	.+48     	; 0x17d6 <KPD_get_key+0x186>
            case 9: return '2';
    17a6:	22 e3       	ldi	r18, 0x32	; 50
    17a8:	2e 83       	std	Y+6, r18	; 0x06
    17aa:	15 c0       	rjmp	.+42     	; 0x17d6 <KPD_get_key+0x186>
            case 10: return '3';
    17ac:	33 e3       	ldi	r19, 0x33	; 51
    17ae:	3e 83       	std	Y+6, r19	; 0x06
    17b0:	12 c0       	rjmp	.+36     	; 0x17d6 <KPD_get_key+0x186>
            case 11: return '-';
    17b2:	8d e2       	ldi	r24, 0x2D	; 45
    17b4:	8e 83       	std	Y+6, r24	; 0x06
    17b6:	0f c0       	rjmp	.+30     	; 0x17d6 <KPD_get_key+0x186>
            case 12: return 'c';
    17b8:	93 e6       	ldi	r25, 0x63	; 99
    17ba:	9e 83       	std	Y+6, r25	; 0x06
    17bc:	0c c0       	rjmp	.+24     	; 0x17d6 <KPD_get_key+0x186>
            case 13: return '0';
    17be:	20 e3       	ldi	r18, 0x30	; 48
    17c0:	2e 83       	std	Y+6, r18	; 0x06
    17c2:	09 c0       	rjmp	.+18     	; 0x17d6 <KPD_get_key+0x186>
            case 14: return '=';
    17c4:	3d e3       	ldi	r19, 0x3D	; 61
    17c6:	3e 83       	std	Y+6, r19	; 0x06
    17c8:	06 c0       	rjmp	.+12     	; 0x17d6 <KPD_get_key+0x186>
            case 15: return '+';
    17ca:	8b e2       	ldi	r24, 0x2B	; 43
    17cc:	8e 83       	std	Y+6, r24	; 0x06
    17ce:	03 c0       	rjmp	.+6      	; 0x17d6 <KPD_get_key+0x186>
    17d0:	04 c0       	rjmp	.+8      	; 0x17da <KPD_get_key+0x18a>
          //  default: return 16;
        }
    }else{

    	return 16;
    17d2:	90 e1       	ldi	r25, 0x10	; 16
    17d4:	9e 83       	std	Y+6, r25	; 0x06
    17d6:	2e 81       	ldd	r18, Y+6	; 0x06
    17d8:	29 87       	std	Y+9, r18	; 0x09

    }


}
    17da:	89 85       	ldd	r24, Y+9	; 0x09
    17dc:	29 96       	adiw	r28, 0x09	; 9
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <array_Swap>:
#include "../Drivers/HAL/LCD/LCD_Config.h"
#include "LCD_Interface.h"
#include "../Drivers/HAL/LCD/LCD_Private.h"


static void array_Swap(u8* copy_pu8_arr, u8 copy_length){
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <array_Swap+0x6>
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <array_Swap+0x8>
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <array_Swap+0xa>
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    17fc:	9d 83       	std	Y+5, r25	; 0x05
    17fe:	8c 83       	std	Y+4, r24	; 0x04
    1800:	6e 83       	std	Y+6, r22	; 0x06
	 *
	 *
	 */


	u8 start = 0;
    1802:	1b 82       	std	Y+3, r1	; 0x03
	u8 end = copy_length - 1;
    1804:	8e 81       	ldd	r24, Y+6	; 0x06
    1806:	81 50       	subi	r24, 0x01	; 1
    1808:	8a 83       	std	Y+2, r24	; 0x02
    180a:	2c c0       	rjmp	.+88     	; 0x1864 <array_Swap+0x76>

	while(start < end){

		u8 temp = copy_pu8_arr[start];
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	8c 81       	ldd	r24, Y+4	; 0x04
    1814:	9d 81       	ldd	r25, Y+5	; 0x05
    1816:	fc 01       	movw	r30, r24
    1818:	e2 0f       	add	r30, r18
    181a:	f3 1f       	adc	r31, r19
    181c:	80 81       	ld	r24, Z
    181e:	89 83       	std	Y+1, r24	; 0x01
		copy_pu8_arr[start] = copy_pu8_arr[end];
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	8c 81       	ldd	r24, Y+4	; 0x04
    1828:	9d 81       	ldd	r25, Y+5	; 0x05
    182a:	dc 01       	movw	r26, r24
    182c:	a2 0f       	add	r26, r18
    182e:	b3 1f       	adc	r27, r19
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	8c 81       	ldd	r24, Y+4	; 0x04
    1838:	9d 81       	ldd	r25, Y+5	; 0x05
    183a:	fc 01       	movw	r30, r24
    183c:	e2 0f       	add	r30, r18
    183e:	f3 1f       	adc	r31, r19
    1840:	80 81       	ld	r24, Z
    1842:	8c 93       	st	X, r24
		copy_pu8_arr[end] = temp;
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	8c 81       	ldd	r24, Y+4	; 0x04
    184c:	9d 81       	ldd	r25, Y+5	; 0x05
    184e:	fc 01       	movw	r30, r24
    1850:	e2 0f       	add	r30, r18
    1852:	f3 1f       	adc	r31, r19
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	80 83       	st	Z, r24

		start++;
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	8f 5f       	subi	r24, 0xFF	; 255
    185c:	8b 83       	std	Y+3, r24	; 0x03
		end--;
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	81 50       	subi	r24, 0x01	; 1
    1862:	8a 83       	std	Y+2, r24	; 0x02


	u8 start = 0;
	u8 end = copy_length - 1;

	while(start < end){
    1864:	9b 81       	ldd	r25, Y+3	; 0x03
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	98 17       	cp	r25, r24
    186a:	80 f2       	brcs	.-96     	; 0x180c <array_Swap+0x1e>
	}




}
    186c:	26 96       	adiw	r28, 0x06	; 6
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	cd bf       	out	0x3d, r28	; 61
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <power_10>:

s32 power_10(u8 power){
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	00 d0       	rcall	.+0      	; 0x1884 <power_10+0x6>
    1884:	00 d0       	rcall	.+0      	; 0x1886 <power_10+0x8>
    1886:	0f 92       	push	r0
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	8d 83       	std	Y+5, r24	; 0x05
	 *
	 * do you not use this function outside this driver
	 *
	 */

	s32 result = 1;
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a0 e0       	ldi	r26, 0x00	; 0
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	9a 83       	std	Y+2, r25	; 0x02
    189a:	ab 83       	std	Y+3, r26	; 0x03
    189c:	bc 83       	std	Y+4, r27	; 0x04
    189e:	15 c0       	rjmp	.+42     	; 0x18ca <power_10+0x4c>

	while(power > 0){

		result *= 10;
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	9a 81       	ldd	r25, Y+2	; 0x02
    18a4:	ab 81       	ldd	r26, Y+3	; 0x03
    18a6:	bc 81       	ldd	r27, Y+4	; 0x04
    18a8:	2a e0       	ldi	r18, 0x0A	; 10
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e0       	ldi	r20, 0x00	; 0
    18ae:	50 e0       	ldi	r21, 0x00	; 0
    18b0:	bc 01       	movw	r22, r24
    18b2:	cd 01       	movw	r24, r26
    18b4:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <__mulsi3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	9a 83       	std	Y+2, r25	; 0x02
    18c0:	ab 83       	std	Y+3, r26	; 0x03
    18c2:	bc 83       	std	Y+4, r27	; 0x04
		power--;
    18c4:	8d 81       	ldd	r24, Y+5	; 0x05
    18c6:	81 50       	subi	r24, 0x01	; 1
    18c8:	8d 83       	std	Y+5, r24	; 0x05
	 *
	 */

	s32 result = 1;

	while(power > 0){
    18ca:	8d 81       	ldd	r24, Y+5	; 0x05
    18cc:	88 23       	and	r24, r24
    18ce:	41 f7       	brne	.-48     	; 0x18a0 <power_10+0x22>

		result *= 10;
		power--;
	}

	return result;
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	9a 81       	ldd	r25, Y+2	; 0x02
    18d4:	ab 81       	ldd	r26, Y+3	; 0x03
    18d6:	bc 81       	ldd	r27, Y+4	; 0x04
}
    18d8:	bc 01       	movw	r22, r24
    18da:	cd 01       	movw	r24, r26
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <LCD_write_data_8bit>:

/* 8bit mode functions */


static void LCD_write_data_8bit(u8 copy_data_8bit){
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	e1 97       	sbiw	r28, 0x31	; 49
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	89 ab       	std	Y+49, r24	; 0x31
	 *  function will only be used inside this source file
	 *  do you not use it in your code!
	 *
	 */

	DIO_void_set_pin(lcd_control_port, lcd_RS); // set RS pin high select data register
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	62 e0       	ldi	r22, 0x02	; 2
    1906:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_control_port, lcd_RW); // clear RW pin  0 for writing operation
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	61 e0       	ldi	r22, 0x01	; 1
    190e:	0e 94 21 09 	call	0x1242	; 0x1242 <DIO_void_clear_pin>
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	a8 e4       	ldi	r26, 0x48	; 72
    1918:	b2 e4       	ldi	r27, 0x42	; 66
    191a:	8d a7       	std	Y+45, r24	; 0x2d
    191c:	9e a7       	std	Y+46, r25	; 0x2e
    191e:	af a7       	std	Y+47, r26	; 0x2f
    1920:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1922:	6d a5       	ldd	r22, Y+45	; 0x2d
    1924:	7e a5       	ldd	r23, Y+46	; 0x2e
    1926:	8f a5       	ldd	r24, Y+47	; 0x2f
    1928:	98 a9       	ldd	r25, Y+48	; 0x30
    192a:	2b ea       	ldi	r18, 0xAB	; 171
    192c:	3a ea       	ldi	r19, 0xAA	; 170
    192e:	4a e2       	ldi	r20, 0x2A	; 42
    1930:	50 e4       	ldi	r21, 0x40	; 64
    1932:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	89 a7       	std	Y+41, r24	; 0x29
    193c:	9a a7       	std	Y+42, r25	; 0x2a
    193e:	ab a7       	std	Y+43, r26	; 0x2b
    1940:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1942:	69 a5       	ldd	r22, Y+41	; 0x29
    1944:	7a a5       	ldd	r23, Y+42	; 0x2a
    1946:	8b a5       	ldd	r24, Y+43	; 0x2b
    1948:	9c a5       	ldd	r25, Y+44	; 0x2c
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e8       	ldi	r20, 0x80	; 128
    1950:	5f e3       	ldi	r21, 0x3F	; 63
    1952:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1956:	88 23       	and	r24, r24
    1958:	1c f4       	brge	.+6      	; 0x1960 <LCD_write_data_8bit+0x74>
		__ticks = 1;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	88 a7       	std	Y+40, r24	; 0x28
    195e:	91 c0       	rjmp	.+290    	; 0x1a82 <LCD_write_data_8bit+0x196>
	else if (__tmp > 255)
    1960:	69 a5       	ldd	r22, Y+41	; 0x29
    1962:	7a a5       	ldd	r23, Y+42	; 0x2a
    1964:	8b a5       	ldd	r24, Y+43	; 0x2b
    1966:	9c a5       	ldd	r25, Y+44	; 0x2c
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	4f e7       	ldi	r20, 0x7F	; 127
    196e:	53 e4       	ldi	r21, 0x43	; 67
    1970:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1974:	18 16       	cp	r1, r24
    1976:	0c f0       	brlt	.+2      	; 0x197a <LCD_write_data_8bit+0x8e>
    1978:	7b c0       	rjmp	.+246    	; 0x1a70 <LCD_write_data_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    197a:	6d a5       	ldd	r22, Y+45	; 0x2d
    197c:	7e a5       	ldd	r23, Y+46	; 0x2e
    197e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1980:	98 a9       	ldd	r25, Y+48	; 0x30
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	4a e7       	ldi	r20, 0x7A	; 122
    1988:	54 e4       	ldi	r21, 0x44	; 68
    198a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	8c a3       	std	Y+36, r24	; 0x24
    1994:	9d a3       	std	Y+37, r25	; 0x25
    1996:	ae a3       	std	Y+38, r26	; 0x26
    1998:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199a:	6c a1       	ldd	r22, Y+36	; 0x24
    199c:	7d a1       	ldd	r23, Y+37	; 0x25
    199e:	8e a1       	ldd	r24, Y+38	; 0x26
    19a0:	9f a1       	ldd	r25, Y+39	; 0x27
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	4a ef       	ldi	r20, 0xFA	; 250
    19a8:	54 e4       	ldi	r21, 0x44	; 68
    19aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	88 a3       	std	Y+32, r24	; 0x20
    19b4:	99 a3       	std	Y+33, r25	; 0x21
    19b6:	aa a3       	std	Y+34, r26	; 0x22
    19b8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    19ba:	68 a1       	ldd	r22, Y+32	; 0x20
    19bc:	79 a1       	ldd	r23, Y+33	; 0x21
    19be:	8a a1       	ldd	r24, Y+34	; 0x22
    19c0:	9b a1       	ldd	r25, Y+35	; 0x23
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e8       	ldi	r20, 0x80	; 128
    19c8:	5f e3       	ldi	r21, 0x3F	; 63
    19ca:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    19ce:	88 23       	and	r24, r24
    19d0:	2c f4       	brge	.+10     	; 0x19dc <LCD_write_data_8bit+0xf0>
		__ticks = 1;
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	9f 8f       	std	Y+31, r25	; 0x1f
    19d8:	8e 8f       	std	Y+30, r24	; 0x1e
    19da:	3f c0       	rjmp	.+126    	; 0x1a5a <LCD_write_data_8bit+0x16e>
	else if (__tmp > 65535)
    19dc:	68 a1       	ldd	r22, Y+32	; 0x20
    19de:	79 a1       	ldd	r23, Y+33	; 0x21
    19e0:	8a a1       	ldd	r24, Y+34	; 0x22
    19e2:	9b a1       	ldd	r25, Y+35	; 0x23
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	3f ef       	ldi	r19, 0xFF	; 255
    19e8:	4f e7       	ldi	r20, 0x7F	; 127
    19ea:	57 e4       	ldi	r21, 0x47	; 71
    19ec:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    19f0:	18 16       	cp	r1, r24
    19f2:	4c f5       	brge	.+82     	; 0x1a46 <LCD_write_data_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f4:	6c a1       	ldd	r22, Y+36	; 0x24
    19f6:	7d a1       	ldd	r23, Y+37	; 0x25
    19f8:	8e a1       	ldd	r24, Y+38	; 0x26
    19fa:	9f a1       	ldd	r25, Y+39	; 0x27
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e2       	ldi	r20, 0x20	; 32
    1a02:	51 e4       	ldi	r21, 0x41	; 65
    1a04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	cd 01       	movw	r24, r26
    1a10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	9f 8f       	std	Y+31, r25	; 0x1f
    1a1a:	8e 8f       	std	Y+30, r24	; 0x1e
    1a1c:	0f c0       	rjmp	.+30     	; 0x1a3c <LCD_write_data_8bit+0x150>
    1a1e:	88 ec       	ldi	r24, 0xC8	; 200
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	9d 8f       	std	Y+29, r25	; 0x1d
    1a24:	8c 8f       	std	Y+28, r24	; 0x1c
    1a26:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a28:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	f1 f7       	brne	.-4      	; 0x1a2a <LCD_write_data_8bit+0x13e>
    1a2e:	9d 8f       	std	Y+29, r25	; 0x1d
    1a30:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a32:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a34:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	9f 8f       	std	Y+31, r25	; 0x1f
    1a3a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a3e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a40:	00 97       	sbiw	r24, 0x00	; 0
    1a42:	69 f7       	brne	.-38     	; 0x1a1e <LCD_write_data_8bit+0x132>
    1a44:	24 c0       	rjmp	.+72     	; 0x1a8e <LCD_write_data_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a46:	68 a1       	ldd	r22, Y+32	; 0x20
    1a48:	79 a1       	ldd	r23, Y+33	; 0x21
    1a4a:	8a a1       	ldd	r24, Y+34	; 0x22
    1a4c:	9b a1       	ldd	r25, Y+35	; 0x23
    1a4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	9f 8f       	std	Y+31, r25	; 0x1f
    1a58:	8e 8f       	std	Y+30, r24	; 0x1e
    1a5a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a5c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a5e:	9b 8f       	std	Y+27, r25	; 0x1b
    1a60:	8a 8f       	std	Y+26, r24	; 0x1a
    1a62:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a64:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	f1 f7       	brne	.-4      	; 0x1a66 <LCD_write_data_8bit+0x17a>
    1a6a:	9b 8f       	std	Y+27, r25	; 0x1b
    1a6c:	8a 8f       	std	Y+26, r24	; 0x1a
    1a6e:	0f c0       	rjmp	.+30     	; 0x1a8e <LCD_write_data_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a70:	69 a5       	ldd	r22, Y+41	; 0x29
    1a72:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a74:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a76:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	88 a7       	std	Y+40, r24	; 0x28
    1a82:	88 a5       	ldd	r24, Y+40	; 0x28
    1a84:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a86:	89 8d       	ldd	r24, Y+25	; 0x19
    1a88:	8a 95       	dec	r24
    1a8a:	f1 f7       	brne	.-4      	; 0x1a88 <LCD_write_data_8bit+0x19c>
    1a8c:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(50);
	//enable pin high
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <DIO_void_set_pin>
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	a8 e4       	ldi	r26, 0x48	; 72
    1a9c:	b2 e4       	ldi	r27, 0x42	; 66
    1a9e:	8d 8b       	std	Y+21, r24	; 0x15
    1aa0:	9e 8b       	std	Y+22, r25	; 0x16
    1aa2:	af 8b       	std	Y+23, r26	; 0x17
    1aa4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1aa6:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aaa:	8f 89       	ldd	r24, Y+23	; 0x17
    1aac:	98 8d       	ldd	r25, Y+24	; 0x18
    1aae:	2b ea       	ldi	r18, 0xAB	; 171
    1ab0:	3a ea       	ldi	r19, 0xAA	; 170
    1ab2:	4a e2       	ldi	r20, 0x2A	; 42
    1ab4:	50 e4       	ldi	r21, 0x40	; 64
    1ab6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	89 8b       	std	Y+17, r24	; 0x11
    1ac0:	9a 8b       	std	Y+18, r25	; 0x12
    1ac2:	ab 8b       	std	Y+19, r26	; 0x13
    1ac4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ac6:	69 89       	ldd	r22, Y+17	; 0x11
    1ac8:	7a 89       	ldd	r23, Y+18	; 0x12
    1aca:	8b 89       	ldd	r24, Y+19	; 0x13
    1acc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e8       	ldi	r20, 0x80	; 128
    1ad4:	5f e3       	ldi	r21, 0x3F	; 63
    1ad6:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1ada:	88 23       	and	r24, r24
    1adc:	1c f4       	brge	.+6      	; 0x1ae4 <LCD_write_data_8bit+0x1f8>
		__ticks = 1;
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	88 8b       	std	Y+16, r24	; 0x10
    1ae2:	91 c0       	rjmp	.+290    	; 0x1c06 <LCD_write_data_8bit+0x31a>
	else if (__tmp > 255)
    1ae4:	69 89       	ldd	r22, Y+17	; 0x11
    1ae6:	7a 89       	ldd	r23, Y+18	; 0x12
    1ae8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aea:	9c 89       	ldd	r25, Y+20	; 0x14
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	4f e7       	ldi	r20, 0x7F	; 127
    1af2:	53 e4       	ldi	r21, 0x43	; 67
    1af4:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1af8:	18 16       	cp	r1, r24
    1afa:	0c f0       	brlt	.+2      	; 0x1afe <LCD_write_data_8bit+0x212>
    1afc:	7b c0       	rjmp	.+246    	; 0x1bf4 <LCD_write_data_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    1afe:	6d 89       	ldd	r22, Y+21	; 0x15
    1b00:	7e 89       	ldd	r23, Y+22	; 0x16
    1b02:	8f 89       	ldd	r24, Y+23	; 0x17
    1b04:	98 8d       	ldd	r25, Y+24	; 0x18
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	4a e7       	ldi	r20, 0x7A	; 122
    1b0c:	54 e4       	ldi	r21, 0x44	; 68
    1b0e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	8c 87       	std	Y+12, r24	; 0x0c
    1b18:	9d 87       	std	Y+13, r25	; 0x0d
    1b1a:	ae 87       	std	Y+14, r26	; 0x0e
    1b1c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b20:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b22:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b24:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	4a ef       	ldi	r20, 0xFA	; 250
    1b2c:	54 e4       	ldi	r21, 0x44	; 68
    1b2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	88 87       	std	Y+8, r24	; 0x08
    1b38:	99 87       	std	Y+9, r25	; 0x09
    1b3a:	aa 87       	std	Y+10, r26	; 0x0a
    1b3c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1b3e:	68 85       	ldd	r22, Y+8	; 0x08
    1b40:	79 85       	ldd	r23, Y+9	; 0x09
    1b42:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b44:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e8       	ldi	r20, 0x80	; 128
    1b4c:	5f e3       	ldi	r21, 0x3F	; 63
    1b4e:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1b52:	88 23       	and	r24, r24
    1b54:	2c f4       	brge	.+10     	; 0x1b60 <LCD_write_data_8bit+0x274>
		__ticks = 1;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	9f 83       	std	Y+7, r25	; 0x07
    1b5c:	8e 83       	std	Y+6, r24	; 0x06
    1b5e:	3f c0       	rjmp	.+126    	; 0x1bde <LCD_write_data_8bit+0x2f2>
	else if (__tmp > 65535)
    1b60:	68 85       	ldd	r22, Y+8	; 0x08
    1b62:	79 85       	ldd	r23, Y+9	; 0x09
    1b64:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b66:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	3f ef       	ldi	r19, 0xFF	; 255
    1b6c:	4f e7       	ldi	r20, 0x7F	; 127
    1b6e:	57 e4       	ldi	r21, 0x47	; 71
    1b70:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1b74:	18 16       	cp	r1, r24
    1b76:	4c f5       	brge	.+82     	; 0x1bca <LCD_write_data_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b78:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b7a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b7c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b7e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e2       	ldi	r20, 0x20	; 32
    1b86:	51 e4       	ldi	r21, 0x41	; 65
    1b88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	bc 01       	movw	r22, r24
    1b92:	cd 01       	movw	r24, r26
    1b94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	9f 83       	std	Y+7, r25	; 0x07
    1b9e:	8e 83       	std	Y+6, r24	; 0x06
    1ba0:	0f c0       	rjmp	.+30     	; 0x1bc0 <LCD_write_data_8bit+0x2d4>
    1ba2:	88 ec       	ldi	r24, 0xC8	; 200
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	9d 83       	std	Y+5, r25	; 0x05
    1ba8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1baa:	8c 81       	ldd	r24, Y+4	; 0x04
    1bac:	9d 81       	ldd	r25, Y+5	; 0x05
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <LCD_write_data_8bit+0x2c2>
    1bb2:	9d 83       	std	Y+5, r25	; 0x05
    1bb4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb8:	9f 81       	ldd	r25, Y+7	; 0x07
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	9f 83       	std	Y+7, r25	; 0x07
    1bbe:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc2:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	69 f7       	brne	.-38     	; 0x1ba2 <LCD_write_data_8bit+0x2b6>
    1bc8:	24 c0       	rjmp	.+72     	; 0x1c12 <LCD_write_data_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bca:	68 85       	ldd	r22, Y+8	; 0x08
    1bcc:	79 85       	ldd	r23, Y+9	; 0x09
    1bce:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bd0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	9f 83       	std	Y+7, r25	; 0x07
    1bdc:	8e 83       	std	Y+6, r24	; 0x06
    1bde:	8e 81       	ldd	r24, Y+6	; 0x06
    1be0:	9f 81       	ldd	r25, Y+7	; 0x07
    1be2:	9b 83       	std	Y+3, r25	; 0x03
    1be4:	8a 83       	std	Y+2, r24	; 0x02
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	f1 f7       	brne	.-4      	; 0x1bea <LCD_write_data_8bit+0x2fe>
    1bee:	9b 83       	std	Y+3, r25	; 0x03
    1bf0:	8a 83       	std	Y+2, r24	; 0x02
    1bf2:	0f c0       	rjmp	.+30     	; 0x1c12 <LCD_write_data_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bf4:	69 89       	ldd	r22, Y+17	; 0x11
    1bf6:	7a 89       	ldd	r23, Y+18	; 0x12
    1bf8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	88 8b       	std	Y+16, r24	; 0x10
    1c06:	88 89       	ldd	r24, Y+16	; 0x10
    1c08:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	8a 95       	dec	r24
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <LCD_write_data_8bit+0x320>
    1c10:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	//send data to the entire port


	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	60 e0       	ldi	r22, 0x00	; 0
    1c16:	0e 94 21 09 	call	0x1242	; 0x1242 <DIO_void_clear_pin>


}
    1c1a:	e1 96       	adiw	r28, 0x31	; 49
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <LCD_write_command_8bit>:

static void LCD_write_command_8bit(u8 copy_command_8bit){
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	e1 97       	sbiw	r28, 0x31	; 49
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	89 ab       	std	Y+49, r24	; 0x31
		 *
		 *  function will only be used inside this source file
		 *  do you not use it in your code!
		 *
		 */
	DIO_void_clear_pin(lcd_control_port, lcd_RS); // clear the RS pin to select instruction register
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	62 e0       	ldi	r22, 0x02	; 2
    1c46:	0e 94 21 09 	call	0x1242	; 0x1242 <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_control_port, lcd_RW); // clear RW pin  0 for writing operation
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	61 e0       	ldi	r22, 0x01	; 1
    1c4e:	0e 94 21 09 	call	0x1242	; 0x1242 <DIO_void_clear_pin>
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	a0 e8       	ldi	r26, 0x80	; 128
    1c58:	bf e3       	ldi	r27, 0x3F	; 63
    1c5a:	8d a7       	std	Y+45, r24	; 0x2d
    1c5c:	9e a7       	std	Y+46, r25	; 0x2e
    1c5e:	af a7       	std	Y+47, r26	; 0x2f
    1c60:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c62:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c64:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c68:	98 a9       	ldd	r25, Y+48	; 0x30
    1c6a:	2b ea       	ldi	r18, 0xAB	; 171
    1c6c:	3a ea       	ldi	r19, 0xAA	; 170
    1c6e:	4a e2       	ldi	r20, 0x2A	; 42
    1c70:	50 e4       	ldi	r21, 0x40	; 64
    1c72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	89 a7       	std	Y+41, r24	; 0x29
    1c7c:	9a a7       	std	Y+42, r25	; 0x2a
    1c7e:	ab a7       	std	Y+43, r26	; 0x2b
    1c80:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1c82:	69 a5       	ldd	r22, Y+41	; 0x29
    1c84:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c86:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c88:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e8       	ldi	r20, 0x80	; 128
    1c90:	5f e3       	ldi	r21, 0x3F	; 63
    1c92:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1c96:	88 23       	and	r24, r24
    1c98:	1c f4       	brge	.+6      	; 0x1ca0 <LCD_write_command_8bit+0x74>
		__ticks = 1;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	88 a7       	std	Y+40, r24	; 0x28
    1c9e:	91 c0       	rjmp	.+290    	; 0x1dc2 <LCD_write_command_8bit+0x196>
	else if (__tmp > 255)
    1ca0:	69 a5       	ldd	r22, Y+41	; 0x29
    1ca2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ca4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ca6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	4f e7       	ldi	r20, 0x7F	; 127
    1cae:	53 e4       	ldi	r21, 0x43	; 67
    1cb0:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1cb4:	18 16       	cp	r1, r24
    1cb6:	0c f0       	brlt	.+2      	; 0x1cba <LCD_write_command_8bit+0x8e>
    1cb8:	7b c0       	rjmp	.+246    	; 0x1db0 <LCD_write_command_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    1cba:	6d a5       	ldd	r22, Y+45	; 0x2d
    1cbc:	7e a5       	ldd	r23, Y+46	; 0x2e
    1cbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cc0:	98 a9       	ldd	r25, Y+48	; 0x30
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	4a e7       	ldi	r20, 0x7A	; 122
    1cc8:	54 e4       	ldi	r21, 0x44	; 68
    1cca:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	8c a3       	std	Y+36, r24	; 0x24
    1cd4:	9d a3       	std	Y+37, r25	; 0x25
    1cd6:	ae a3       	std	Y+38, r26	; 0x26
    1cd8:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cda:	6c a1       	ldd	r22, Y+36	; 0x24
    1cdc:	7d a1       	ldd	r23, Y+37	; 0x25
    1cde:	8e a1       	ldd	r24, Y+38	; 0x26
    1ce0:	9f a1       	ldd	r25, Y+39	; 0x27
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	4a ef       	ldi	r20, 0xFA	; 250
    1ce8:	54 e4       	ldi	r21, 0x44	; 68
    1cea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	88 a3       	std	Y+32, r24	; 0x20
    1cf4:	99 a3       	std	Y+33, r25	; 0x21
    1cf6:	aa a3       	std	Y+34, r26	; 0x22
    1cf8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1cfa:	68 a1       	ldd	r22, Y+32	; 0x20
    1cfc:	79 a1       	ldd	r23, Y+33	; 0x21
    1cfe:	8a a1       	ldd	r24, Y+34	; 0x22
    1d00:	9b a1       	ldd	r25, Y+35	; 0x23
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e8       	ldi	r20, 0x80	; 128
    1d08:	5f e3       	ldi	r21, 0x3F	; 63
    1d0a:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1d0e:	88 23       	and	r24, r24
    1d10:	2c f4       	brge	.+10     	; 0x1d1c <LCD_write_command_8bit+0xf0>
		__ticks = 1;
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9f 8f       	std	Y+31, r25	; 0x1f
    1d18:	8e 8f       	std	Y+30, r24	; 0x1e
    1d1a:	3f c0       	rjmp	.+126    	; 0x1d9a <LCD_write_command_8bit+0x16e>
	else if (__tmp > 65535)
    1d1c:	68 a1       	ldd	r22, Y+32	; 0x20
    1d1e:	79 a1       	ldd	r23, Y+33	; 0x21
    1d20:	8a a1       	ldd	r24, Y+34	; 0x22
    1d22:	9b a1       	ldd	r25, Y+35	; 0x23
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	3f ef       	ldi	r19, 0xFF	; 255
    1d28:	4f e7       	ldi	r20, 0x7F	; 127
    1d2a:	57 e4       	ldi	r21, 0x47	; 71
    1d2c:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1d30:	18 16       	cp	r1, r24
    1d32:	4c f5       	brge	.+82     	; 0x1d86 <LCD_write_command_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d34:	6c a1       	ldd	r22, Y+36	; 0x24
    1d36:	7d a1       	ldd	r23, Y+37	; 0x25
    1d38:	8e a1       	ldd	r24, Y+38	; 0x26
    1d3a:	9f a1       	ldd	r25, Y+39	; 0x27
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e2       	ldi	r20, 0x20	; 32
    1d42:	51 e4       	ldi	r21, 0x41	; 65
    1d44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	bc 01       	movw	r22, r24
    1d4e:	cd 01       	movw	r24, r26
    1d50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	9f 8f       	std	Y+31, r25	; 0x1f
    1d5a:	8e 8f       	std	Y+30, r24	; 0x1e
    1d5c:	0f c0       	rjmp	.+30     	; 0x1d7c <LCD_write_command_8bit+0x150>
    1d5e:	88 ec       	ldi	r24, 0xC8	; 200
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	9d 8f       	std	Y+29, r25	; 0x1d
    1d64:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d66:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d68:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <LCD_write_command_8bit+0x13e>
    1d6e:	9d 8f       	std	Y+29, r25	; 0x1d
    1d70:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d72:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d74:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	9f 8f       	std	Y+31, r25	; 0x1f
    1d7a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d7e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	69 f7       	brne	.-38     	; 0x1d5e <LCD_write_command_8bit+0x132>
    1d84:	24 c0       	rjmp	.+72     	; 0x1dce <LCD_write_command_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d86:	68 a1       	ldd	r22, Y+32	; 0x20
    1d88:	79 a1       	ldd	r23, Y+33	; 0x21
    1d8a:	8a a1       	ldd	r24, Y+34	; 0x22
    1d8c:	9b a1       	ldd	r25, Y+35	; 0x23
    1d8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	9f 8f       	std	Y+31, r25	; 0x1f
    1d98:	8e 8f       	std	Y+30, r24	; 0x1e
    1d9a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d9c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d9e:	9b 8f       	std	Y+27, r25	; 0x1b
    1da0:	8a 8f       	std	Y+26, r24	; 0x1a
    1da2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1da4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <LCD_write_command_8bit+0x17a>
    1daa:	9b 8f       	std	Y+27, r25	; 0x1b
    1dac:	8a 8f       	std	Y+26, r24	; 0x1a
    1dae:	0f c0       	rjmp	.+30     	; 0x1dce <LCD_write_command_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1db0:	69 a5       	ldd	r22, Y+41	; 0x29
    1db2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1db4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1db6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1db8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	88 a7       	std	Y+40, r24	; 0x28
    1dc2:	88 a5       	ldd	r24, Y+40	; 0x28
    1dc4:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dc6:	89 8d       	ldd	r24, Y+25	; 0x19
    1dc8:	8a 95       	dec	r24
    1dca:	f1 f7       	brne	.-4      	; 0x1dc8 <LCD_write_command_8bit+0x19c>
    1dcc:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(1);
	//enable pin high
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	60 e0       	ldi	r22, 0x00	; 0
    1dd2:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <DIO_void_set_pin>
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	a0 e8       	ldi	r26, 0x80	; 128
    1ddc:	bf e3       	ldi	r27, 0x3F	; 63
    1dde:	8d 8b       	std	Y+21, r24	; 0x15
    1de0:	9e 8b       	std	Y+22, r25	; 0x16
    1de2:	af 8b       	std	Y+23, r26	; 0x17
    1de4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1de6:	6d 89       	ldd	r22, Y+21	; 0x15
    1de8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dea:	8f 89       	ldd	r24, Y+23	; 0x17
    1dec:	98 8d       	ldd	r25, Y+24	; 0x18
    1dee:	2b ea       	ldi	r18, 0xAB	; 171
    1df0:	3a ea       	ldi	r19, 0xAA	; 170
    1df2:	4a e2       	ldi	r20, 0x2A	; 42
    1df4:	50 e4       	ldi	r21, 0x40	; 64
    1df6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	89 8b       	std	Y+17, r24	; 0x11
    1e00:	9a 8b       	std	Y+18, r25	; 0x12
    1e02:	ab 8b       	std	Y+19, r26	; 0x13
    1e04:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e06:	69 89       	ldd	r22, Y+17	; 0x11
    1e08:	7a 89       	ldd	r23, Y+18	; 0x12
    1e0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e8       	ldi	r20, 0x80	; 128
    1e14:	5f e3       	ldi	r21, 0x3F	; 63
    1e16:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1e1a:	88 23       	and	r24, r24
    1e1c:	1c f4       	brge	.+6      	; 0x1e24 <LCD_write_command_8bit+0x1f8>
		__ticks = 1;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	88 8b       	std	Y+16, r24	; 0x10
    1e22:	91 c0       	rjmp	.+290    	; 0x1f46 <LCD_write_command_8bit+0x31a>
	else if (__tmp > 255)
    1e24:	69 89       	ldd	r22, Y+17	; 0x11
    1e26:	7a 89       	ldd	r23, Y+18	; 0x12
    1e28:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	4f e7       	ldi	r20, 0x7F	; 127
    1e32:	53 e4       	ldi	r21, 0x43	; 67
    1e34:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1e38:	18 16       	cp	r1, r24
    1e3a:	0c f0       	brlt	.+2      	; 0x1e3e <LCD_write_command_8bit+0x212>
    1e3c:	7b c0       	rjmp	.+246    	; 0x1f34 <LCD_write_command_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    1e3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e40:	7e 89       	ldd	r23, Y+22	; 0x16
    1e42:	8f 89       	ldd	r24, Y+23	; 0x17
    1e44:	98 8d       	ldd	r25, Y+24	; 0x18
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	4a e7       	ldi	r20, 0x7A	; 122
    1e4c:	54 e4       	ldi	r21, 0x44	; 68
    1e4e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	8c 87       	std	Y+12, r24	; 0x0c
    1e58:	9d 87       	std	Y+13, r25	; 0x0d
    1e5a:	ae 87       	std	Y+14, r26	; 0x0e
    1e5c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e60:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e62:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e64:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	4a ef       	ldi	r20, 0xFA	; 250
    1e6c:	54 e4       	ldi	r21, 0x44	; 68
    1e6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	88 87       	std	Y+8, r24	; 0x08
    1e78:	99 87       	std	Y+9, r25	; 0x09
    1e7a:	aa 87       	std	Y+10, r26	; 0x0a
    1e7c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e7e:	68 85       	ldd	r22, Y+8	; 0x08
    1e80:	79 85       	ldd	r23, Y+9	; 0x09
    1e82:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e84:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e8       	ldi	r20, 0x80	; 128
    1e8c:	5f e3       	ldi	r21, 0x3F	; 63
    1e8e:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1e92:	88 23       	and	r24, r24
    1e94:	2c f4       	brge	.+10     	; 0x1ea0 <LCD_write_command_8bit+0x274>
		__ticks = 1;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	9f 83       	std	Y+7, r25	; 0x07
    1e9c:	8e 83       	std	Y+6, r24	; 0x06
    1e9e:	3f c0       	rjmp	.+126    	; 0x1f1e <LCD_write_command_8bit+0x2f2>
	else if (__tmp > 65535)
    1ea0:	68 85       	ldd	r22, Y+8	; 0x08
    1ea2:	79 85       	ldd	r23, Y+9	; 0x09
    1ea4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ea6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	3f ef       	ldi	r19, 0xFF	; 255
    1eac:	4f e7       	ldi	r20, 0x7F	; 127
    1eae:	57 e4       	ldi	r21, 0x47	; 71
    1eb0:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1eb4:	18 16       	cp	r1, r24
    1eb6:	4c f5       	brge	.+82     	; 0x1f0a <LCD_write_command_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1eba:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ebc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ebe:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e2       	ldi	r20, 0x20	; 32
    1ec6:	51 e4       	ldi	r21, 0x41	; 65
    1ec8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	bc 01       	movw	r22, r24
    1ed2:	cd 01       	movw	r24, r26
    1ed4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	9f 83       	std	Y+7, r25	; 0x07
    1ede:	8e 83       	std	Y+6, r24	; 0x06
    1ee0:	0f c0       	rjmp	.+30     	; 0x1f00 <LCD_write_command_8bit+0x2d4>
    1ee2:	88 ec       	ldi	r24, 0xC8	; 200
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	9d 83       	std	Y+5, r25	; 0x05
    1ee8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1eea:	8c 81       	ldd	r24, Y+4	; 0x04
    1eec:	9d 81       	ldd	r25, Y+5	; 0x05
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	f1 f7       	brne	.-4      	; 0x1eee <LCD_write_command_8bit+0x2c2>
    1ef2:	9d 83       	std	Y+5, r25	; 0x05
    1ef4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ef8:	9f 81       	ldd	r25, Y+7	; 0x07
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	9f 83       	std	Y+7, r25	; 0x07
    1efe:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f00:	8e 81       	ldd	r24, Y+6	; 0x06
    1f02:	9f 81       	ldd	r25, Y+7	; 0x07
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	69 f7       	brne	.-38     	; 0x1ee2 <LCD_write_command_8bit+0x2b6>
    1f08:	24 c0       	rjmp	.+72     	; 0x1f52 <LCD_write_command_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0a:	68 85       	ldd	r22, Y+8	; 0x08
    1f0c:	79 85       	ldd	r23, Y+9	; 0x09
    1f0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f10:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	9f 83       	std	Y+7, r25	; 0x07
    1f1c:	8e 83       	std	Y+6, r24	; 0x06
    1f1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f20:	9f 81       	ldd	r25, Y+7	; 0x07
    1f22:	9b 83       	std	Y+3, r25	; 0x03
    1f24:	8a 83       	std	Y+2, r24	; 0x02
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	f1 f7       	brne	.-4      	; 0x1f2a <LCD_write_command_8bit+0x2fe>
    1f2e:	9b 83       	std	Y+3, r25	; 0x03
    1f30:	8a 83       	std	Y+2, r24	; 0x02
    1f32:	0f c0       	rjmp	.+30     	; 0x1f52 <LCD_write_command_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f34:	69 89       	ldd	r22, Y+17	; 0x11
    1f36:	7a 89       	ldd	r23, Y+18	; 0x12
    1f38:	8b 89       	ldd	r24, Y+19	; 0x13
    1f3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	88 8b       	std	Y+16, r24	; 0x10
    1f46:	88 89       	ldd	r24, Y+16	; 0x10
    1f48:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	8a 95       	dec	r24
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <LCD_write_command_8bit+0x320>
    1f50:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	//send command to the entire port
	DIO_void_assign_port(lcd_data_port, copy_command_8bit);
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	69 a9       	ldd	r22, Y+49	; 0x31
    1f56:	0e 94 b6 08 	call	0x116c	; 0x116c <DIO_void_assign_port>
	//enable pin low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	60 e0       	ldi	r22, 0x00	; 0
    1f5e:	0e 94 21 09 	call	0x1242	; 0x1242 <DIO_void_clear_pin>

}
    1f62:	e1 96       	adiw	r28, 0x31	; 49
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
    1f6e:	cf 91       	pop	r28
    1f70:	df 91       	pop	r29
    1f72:	08 95       	ret

00001f74 <LCD_write_data_4bit>:


/* 4bit mode functions */

static void LCD_write_data_4bit(u8 copy_data_4bit){
    1f74:	0f 93       	push	r16
    1f76:	1f 93       	push	r17
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	c3 56       	subi	r28, 0x63	; 99
    1f82:	d0 40       	sbci	r29, 0x00	; 0
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	de bf       	out	0x3e, r29	; 62
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	cd bf       	out	0x3d, r28	; 61
    1f8e:	fe 01       	movw	r30, r28
    1f90:	ed 59       	subi	r30, 0x9D	; 157
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	80 83       	st	Z, r24
		 *  function will only be used inside this source file
		 *  do you not use it in your code!
		 *
		 */

	DIO_void_set_pin(lcd_control_port, lcd_RS); // set RS pin high select data register
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	62 e0       	ldi	r22, 0x02	; 2
    1f9a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_control_port, lcd_RW); // clear RW pin  0 for writing operation
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	61 e0       	ldi	r22, 0x01	; 1
    1fa2:	0e 94 21 09 	call	0x1242	; 0x1242 <DIO_void_clear_pin>
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	e3 5a       	subi	r30, 0xA3	; 163
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a0 e8       	ldi	r26, 0x80	; 128
    1fb2:	bf e3       	ldi	r27, 0x3F	; 63
    1fb4:	80 83       	st	Z, r24
    1fb6:	91 83       	std	Z+1, r25	; 0x01
    1fb8:	a2 83       	std	Z+2, r26	; 0x02
    1fba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fbc:	8e 01       	movw	r16, r28
    1fbe:	07 5a       	subi	r16, 0xA7	; 167
    1fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	e3 5a       	subi	r30, 0xA3	; 163
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	60 81       	ld	r22, Z
    1fca:	71 81       	ldd	r23, Z+1	; 0x01
    1fcc:	82 81       	ldd	r24, Z+2	; 0x02
    1fce:	93 81       	ldd	r25, Z+3	; 0x03
    1fd0:	2b ea       	ldi	r18, 0xAB	; 171
    1fd2:	3a ea       	ldi	r19, 0xAA	; 170
    1fd4:	4a e2       	ldi	r20, 0x2A	; 42
    1fd6:	50 e4       	ldi	r21, 0x40	; 64
    1fd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	f8 01       	movw	r30, r16
    1fe2:	80 83       	st	Z, r24
    1fe4:	91 83       	std	Z+1, r25	; 0x01
    1fe6:	a2 83       	std	Z+2, r26	; 0x02
    1fe8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fea:	fe 01       	movw	r30, r28
    1fec:	e7 5a       	subi	r30, 0xA7	; 167
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	60 81       	ld	r22, Z
    1ff2:	71 81       	ldd	r23, Z+1	; 0x01
    1ff4:	82 81       	ldd	r24, Z+2	; 0x02
    1ff6:	93 81       	ldd	r25, Z+3	; 0x03
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e8       	ldi	r20, 0x80	; 128
    1ffe:	5f e3       	ldi	r21, 0x3F	; 63
    2000:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2004:	88 23       	and	r24, r24
    2006:	34 f4       	brge	.+12     	; 0x2014 <LCD_write_data_4bit+0xa0>
		__ticks = 1;
    2008:	fe 01       	movw	r30, r28
    200a:	e8 5a       	subi	r30, 0xA8	; 168
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	80 83       	st	Z, r24
    2012:	e0 c0       	rjmp	.+448    	; 0x21d4 <LCD_write_data_4bit+0x260>
	else if (__tmp > 255)
    2014:	fe 01       	movw	r30, r28
    2016:	e7 5a       	subi	r30, 0xA7	; 167
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	60 81       	ld	r22, Z
    201c:	71 81       	ldd	r23, Z+1	; 0x01
    201e:	82 81       	ldd	r24, Z+2	; 0x02
    2020:	93 81       	ldd	r25, Z+3	; 0x03
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	4f e7       	ldi	r20, 0x7F	; 127
    2028:	53 e4       	ldi	r21, 0x43	; 67
    202a:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    202e:	18 16       	cp	r1, r24
    2030:	0c f0       	brlt	.+2      	; 0x2034 <LCD_write_data_4bit+0xc0>
    2032:	c0 c0       	rjmp	.+384    	; 0x21b4 <LCD_write_data_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    2034:	fe 01       	movw	r30, r28
    2036:	e3 5a       	subi	r30, 0xA3	; 163
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	60 81       	ld	r22, Z
    203c:	71 81       	ldd	r23, Z+1	; 0x01
    203e:	82 81       	ldd	r24, Z+2	; 0x02
    2040:	93 81       	ldd	r25, Z+3	; 0x03
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	4a e7       	ldi	r20, 0x7A	; 122
    2048:	54 e4       	ldi	r21, 0x44	; 68
    204a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	fe 01       	movw	r30, r28
    2054:	ec 5a       	subi	r30, 0xAC	; 172
    2056:	ff 4f       	sbci	r31, 0xFF	; 255
    2058:	80 83       	st	Z, r24
    205a:	91 83       	std	Z+1, r25	; 0x01
    205c:	a2 83       	std	Z+2, r26	; 0x02
    205e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2060:	8e 01       	movw	r16, r28
    2062:	00 5b       	subi	r16, 0xB0	; 176
    2064:	1f 4f       	sbci	r17, 0xFF	; 255
    2066:	fe 01       	movw	r30, r28
    2068:	ec 5a       	subi	r30, 0xAC	; 172
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	60 81       	ld	r22, Z
    206e:	71 81       	ldd	r23, Z+1	; 0x01
    2070:	82 81       	ldd	r24, Z+2	; 0x02
    2072:	93 81       	ldd	r25, Z+3	; 0x03
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	4a ef       	ldi	r20, 0xFA	; 250
    207a:	54 e4       	ldi	r21, 0x44	; 68
    207c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	f8 01       	movw	r30, r16
    2086:	80 83       	st	Z, r24
    2088:	91 83       	std	Z+1, r25	; 0x01
    208a:	a2 83       	std	Z+2, r26	; 0x02
    208c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    208e:	fe 01       	movw	r30, r28
    2090:	e0 5b       	subi	r30, 0xB0	; 176
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	60 81       	ld	r22, Z
    2096:	71 81       	ldd	r23, Z+1	; 0x01
    2098:	82 81       	ldd	r24, Z+2	; 0x02
    209a:	93 81       	ldd	r25, Z+3	; 0x03
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	40 e8       	ldi	r20, 0x80	; 128
    20a2:	5f e3       	ldi	r21, 0x3F	; 63
    20a4:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    20a8:	88 23       	and	r24, r24
    20aa:	44 f4       	brge	.+16     	; 0x20bc <LCD_write_data_4bit+0x148>
		__ticks = 1;
    20ac:	fe 01       	movw	r30, r28
    20ae:	e2 5b       	subi	r30, 0xB2	; 178
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	91 83       	std	Z+1, r25	; 0x01
    20b8:	80 83       	st	Z, r24
    20ba:	64 c0       	rjmp	.+200    	; 0x2184 <LCD_write_data_4bit+0x210>
	else if (__tmp > 65535)
    20bc:	fe 01       	movw	r30, r28
    20be:	e0 5b       	subi	r30, 0xB0	; 176
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	60 81       	ld	r22, Z
    20c4:	71 81       	ldd	r23, Z+1	; 0x01
    20c6:	82 81       	ldd	r24, Z+2	; 0x02
    20c8:	93 81       	ldd	r25, Z+3	; 0x03
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	3f ef       	ldi	r19, 0xFF	; 255
    20ce:	4f e7       	ldi	r20, 0x7F	; 127
    20d0:	57 e4       	ldi	r21, 0x47	; 71
    20d2:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    20d6:	18 16       	cp	r1, r24
    20d8:	0c f0       	brlt	.+2      	; 0x20dc <LCD_write_data_4bit+0x168>
    20da:	43 c0       	rjmp	.+134    	; 0x2162 <LCD_write_data_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20dc:	fe 01       	movw	r30, r28
    20de:	ec 5a       	subi	r30, 0xAC	; 172
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	60 81       	ld	r22, Z
    20e4:	71 81       	ldd	r23, Z+1	; 0x01
    20e6:	82 81       	ldd	r24, Z+2	; 0x02
    20e8:	93 81       	ldd	r25, Z+3	; 0x03
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	40 e2       	ldi	r20, 0x20	; 32
    20f0:	51 e4       	ldi	r21, 0x41	; 65
    20f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	8e 01       	movw	r16, r28
    20fc:	02 5b       	subi	r16, 0xB2	; 178
    20fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2100:	bc 01       	movw	r22, r24
    2102:	cd 01       	movw	r24, r26
    2104:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	f8 01       	movw	r30, r16
    210e:	91 83       	std	Z+1, r25	; 0x01
    2110:	80 83       	st	Z, r24
    2112:	1f c0       	rjmp	.+62     	; 0x2152 <LCD_write_data_4bit+0x1de>
    2114:	fe 01       	movw	r30, r28
    2116:	e4 5b       	subi	r30, 0xB4	; 180
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	88 ec       	ldi	r24, 0xC8	; 200
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	91 83       	std	Z+1, r25	; 0x01
    2120:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2122:	fe 01       	movw	r30, r28
    2124:	e4 5b       	subi	r30, 0xB4	; 180
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	80 81       	ld	r24, Z
    212a:	91 81       	ldd	r25, Z+1	; 0x01
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	f1 f7       	brne	.-4      	; 0x212c <LCD_write_data_4bit+0x1b8>
    2130:	fe 01       	movw	r30, r28
    2132:	e4 5b       	subi	r30, 0xB4	; 180
    2134:	ff 4f       	sbci	r31, 0xFF	; 255
    2136:	91 83       	std	Z+1, r25	; 0x01
    2138:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213a:	de 01       	movw	r26, r28
    213c:	a2 5b       	subi	r26, 0xB2	; 178
    213e:	bf 4f       	sbci	r27, 0xFF	; 255
    2140:	fe 01       	movw	r30, r28
    2142:	e2 5b       	subi	r30, 0xB2	; 178
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	80 81       	ld	r24, Z
    2148:	91 81       	ldd	r25, Z+1	; 0x01
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	11 96       	adiw	r26, 0x01	; 1
    214e:	9c 93       	st	X, r25
    2150:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2152:	fe 01       	movw	r30, r28
    2154:	e2 5b       	subi	r30, 0xB2	; 178
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	80 81       	ld	r24, Z
    215a:	91 81       	ldd	r25, Z+1	; 0x01
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	d1 f6       	brne	.-76     	; 0x2114 <LCD_write_data_4bit+0x1a0>
    2160:	4b c0       	rjmp	.+150    	; 0x21f8 <LCD_write_data_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2162:	8e 01       	movw	r16, r28
    2164:	02 5b       	subi	r16, 0xB2	; 178
    2166:	1f 4f       	sbci	r17, 0xFF	; 255
    2168:	fe 01       	movw	r30, r28
    216a:	e0 5b       	subi	r30, 0xB0	; 176
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	60 81       	ld	r22, Z
    2170:	71 81       	ldd	r23, Z+1	; 0x01
    2172:	82 81       	ldd	r24, Z+2	; 0x02
    2174:	93 81       	ldd	r25, Z+3	; 0x03
    2176:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	f8 01       	movw	r30, r16
    2180:	91 83       	std	Z+1, r25	; 0x01
    2182:	80 83       	st	Z, r24
    2184:	de 01       	movw	r26, r28
    2186:	a6 5b       	subi	r26, 0xB6	; 182
    2188:	bf 4f       	sbci	r27, 0xFF	; 255
    218a:	fe 01       	movw	r30, r28
    218c:	e2 5b       	subi	r30, 0xB2	; 178
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	80 81       	ld	r24, Z
    2192:	91 81       	ldd	r25, Z+1	; 0x01
    2194:	11 96       	adiw	r26, 0x01	; 1
    2196:	9c 93       	st	X, r25
    2198:	8e 93       	st	-X, r24
    219a:	fe 01       	movw	r30, r28
    219c:	e6 5b       	subi	r30, 0xB6	; 182
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	80 81       	ld	r24, Z
    21a2:	91 81       	ldd	r25, Z+1	; 0x01
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	f1 f7       	brne	.-4      	; 0x21a4 <LCD_write_data_4bit+0x230>
    21a8:	fe 01       	movw	r30, r28
    21aa:	e6 5b       	subi	r30, 0xB6	; 182
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	91 83       	std	Z+1, r25	; 0x01
    21b0:	80 83       	st	Z, r24
    21b2:	22 c0       	rjmp	.+68     	; 0x21f8 <LCD_write_data_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21b4:	8e 01       	movw	r16, r28
    21b6:	08 5a       	subi	r16, 0xA8	; 168
    21b8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ba:	fe 01       	movw	r30, r28
    21bc:	e7 5a       	subi	r30, 0xA7	; 167
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	60 81       	ld	r22, Z
    21c2:	71 81       	ldd	r23, Z+1	; 0x01
    21c4:	82 81       	ldd	r24, Z+2	; 0x02
    21c6:	93 81       	ldd	r25, Z+3	; 0x03
    21c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	f8 01       	movw	r30, r16
    21d2:	80 83       	st	Z, r24
    21d4:	de 01       	movw	r26, r28
    21d6:	a7 5b       	subi	r26, 0xB7	; 183
    21d8:	bf 4f       	sbci	r27, 0xFF	; 255
    21da:	fe 01       	movw	r30, r28
    21dc:	e8 5a       	subi	r30, 0xA8	; 168
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	80 81       	ld	r24, Z
    21e2:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21e4:	fe 01       	movw	r30, r28
    21e6:	e7 5b       	subi	r30, 0xB7	; 183
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	80 81       	ld	r24, Z
    21ec:	8a 95       	dec	r24
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <LCD_write_data_4bit+0x278>
    21f0:	fe 01       	movw	r30, r28
    21f2:	e7 5b       	subi	r30, 0xB7	; 183
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	80 83       	st	Z, r24

	_delay_us(1);
	//enable pin high
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	60 e0       	ldi	r22, 0x00	; 0
    21fc:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <DIO_void_set_pin>
    2200:	fe 01       	movw	r30, r28
    2202:	eb 5b       	subi	r30, 0xBB	; 187
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	a0 e8       	ldi	r26, 0x80	; 128
    220c:	bf e3       	ldi	r27, 0x3F	; 63
    220e:	80 83       	st	Z, r24
    2210:	91 83       	std	Z+1, r25	; 0x01
    2212:	a2 83       	std	Z+2, r26	; 0x02
    2214:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2216:	8e 01       	movw	r16, r28
    2218:	0f 5b       	subi	r16, 0xBF	; 191
    221a:	1f 4f       	sbci	r17, 0xFF	; 255
    221c:	fe 01       	movw	r30, r28
    221e:	eb 5b       	subi	r30, 0xBB	; 187
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	60 81       	ld	r22, Z
    2224:	71 81       	ldd	r23, Z+1	; 0x01
    2226:	82 81       	ldd	r24, Z+2	; 0x02
    2228:	93 81       	ldd	r25, Z+3	; 0x03
    222a:	2b ea       	ldi	r18, 0xAB	; 171
    222c:	3a ea       	ldi	r19, 0xAA	; 170
    222e:	4a e2       	ldi	r20, 0x2A	; 42
    2230:	50 e4       	ldi	r21, 0x40	; 64
    2232:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	f8 01       	movw	r30, r16
    223c:	80 83       	st	Z, r24
    223e:	91 83       	std	Z+1, r25	; 0x01
    2240:	a2 83       	std	Z+2, r26	; 0x02
    2242:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2244:	fe 01       	movw	r30, r28
    2246:	ef 5b       	subi	r30, 0xBF	; 191
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	60 81       	ld	r22, Z
    224c:	71 81       	ldd	r23, Z+1	; 0x01
    224e:	82 81       	ldd	r24, Z+2	; 0x02
    2250:	93 81       	ldd	r25, Z+3	; 0x03
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e8       	ldi	r20, 0x80	; 128
    2258:	5f e3       	ldi	r21, 0x3F	; 63
    225a:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    225e:	88 23       	and	r24, r24
    2260:	34 f4       	brge	.+12     	; 0x226e <LCD_write_data_4bit+0x2fa>
		__ticks = 1;
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	fe 01       	movw	r30, r28
    2266:	e0 5c       	subi	r30, 0xC0	; 192
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	80 83       	st	Z, r24
    226c:	9d c0       	rjmp	.+314    	; 0x23a8 <LCD_write_data_4bit+0x434>
	else if (__tmp > 255)
    226e:	fe 01       	movw	r30, r28
    2270:	ef 5b       	subi	r30, 0xBF	; 191
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	60 81       	ld	r22, Z
    2276:	71 81       	ldd	r23, Z+1	; 0x01
    2278:	82 81       	ldd	r24, Z+2	; 0x02
    227a:	93 81       	ldd	r25, Z+3	; 0x03
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	4f e7       	ldi	r20, 0x7F	; 127
    2282:	53 e4       	ldi	r21, 0x43	; 67
    2284:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2288:	18 16       	cp	r1, r24
    228a:	0c f0       	brlt	.+2      	; 0x228e <LCD_write_data_4bit+0x31a>
    228c:	7e c0       	rjmp	.+252    	; 0x238a <LCD_write_data_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    228e:	fe 01       	movw	r30, r28
    2290:	eb 5b       	subi	r30, 0xBB	; 187
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	60 81       	ld	r22, Z
    2296:	71 81       	ldd	r23, Z+1	; 0x01
    2298:	82 81       	ldd	r24, Z+2	; 0x02
    229a:	93 81       	ldd	r25, Z+3	; 0x03
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	4a e7       	ldi	r20, 0x7A	; 122
    22a2:	54 e4       	ldi	r21, 0x44	; 68
    22a4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	8c af       	std	Y+60, r24	; 0x3c
    22ae:	9d af       	std	Y+61, r25	; 0x3d
    22b0:	ae af       	std	Y+62, r26	; 0x3e
    22b2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b4:	6c ad       	ldd	r22, Y+60	; 0x3c
    22b6:	7d ad       	ldd	r23, Y+61	; 0x3d
    22b8:	8e ad       	ldd	r24, Y+62	; 0x3e
    22ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	4a ef       	ldi	r20, 0xFA	; 250
    22c2:	54 e4       	ldi	r21, 0x44	; 68
    22c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	88 af       	std	Y+56, r24	; 0x38
    22ce:	99 af       	std	Y+57, r25	; 0x39
    22d0:	aa af       	std	Y+58, r26	; 0x3a
    22d2:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    22d4:	68 ad       	ldd	r22, Y+56	; 0x38
    22d6:	79 ad       	ldd	r23, Y+57	; 0x39
    22d8:	8a ad       	ldd	r24, Y+58	; 0x3a
    22da:	9b ad       	ldd	r25, Y+59	; 0x3b
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e8       	ldi	r20, 0x80	; 128
    22e2:	5f e3       	ldi	r21, 0x3F	; 63
    22e4:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    22e8:	88 23       	and	r24, r24
    22ea:	2c f4       	brge	.+10     	; 0x22f6 <LCD_write_data_4bit+0x382>
		__ticks = 1;
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	9f ab       	std	Y+55, r25	; 0x37
    22f2:	8e ab       	std	Y+54, r24	; 0x36
    22f4:	3f c0       	rjmp	.+126    	; 0x2374 <LCD_write_data_4bit+0x400>
	else if (__tmp > 65535)
    22f6:	68 ad       	ldd	r22, Y+56	; 0x38
    22f8:	79 ad       	ldd	r23, Y+57	; 0x39
    22fa:	8a ad       	ldd	r24, Y+58	; 0x3a
    22fc:	9b ad       	ldd	r25, Y+59	; 0x3b
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	3f ef       	ldi	r19, 0xFF	; 255
    2302:	4f e7       	ldi	r20, 0x7F	; 127
    2304:	57 e4       	ldi	r21, 0x47	; 71
    2306:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    230a:	18 16       	cp	r1, r24
    230c:	4c f5       	brge	.+82     	; 0x2360 <LCD_write_data_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2310:	7d ad       	ldd	r23, Y+61	; 0x3d
    2312:	8e ad       	ldd	r24, Y+62	; 0x3e
    2314:	9f ad       	ldd	r25, Y+63	; 0x3f
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e2       	ldi	r20, 0x20	; 32
    231c:	51 e4       	ldi	r21, 0x41	; 65
    231e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	9f ab       	std	Y+55, r25	; 0x37
    2334:	8e ab       	std	Y+54, r24	; 0x36
    2336:	0f c0       	rjmp	.+30     	; 0x2356 <LCD_write_data_4bit+0x3e2>
    2338:	88 ec       	ldi	r24, 0xC8	; 200
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	9d ab       	std	Y+53, r25	; 0x35
    233e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2340:	8c a9       	ldd	r24, Y+52	; 0x34
    2342:	9d a9       	ldd	r25, Y+53	; 0x35
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <LCD_write_data_4bit+0x3d0>
    2348:	9d ab       	std	Y+53, r25	; 0x35
    234a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234c:	8e a9       	ldd	r24, Y+54	; 0x36
    234e:	9f a9       	ldd	r25, Y+55	; 0x37
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	9f ab       	std	Y+55, r25	; 0x37
    2354:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2356:	8e a9       	ldd	r24, Y+54	; 0x36
    2358:	9f a9       	ldd	r25, Y+55	; 0x37
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	69 f7       	brne	.-38     	; 0x2338 <LCD_write_data_4bit+0x3c4>
    235e:	2d c0       	rjmp	.+90     	; 0x23ba <LCD_write_data_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2360:	68 ad       	ldd	r22, Y+56	; 0x38
    2362:	79 ad       	ldd	r23, Y+57	; 0x39
    2364:	8a ad       	ldd	r24, Y+58	; 0x3a
    2366:	9b ad       	ldd	r25, Y+59	; 0x3b
    2368:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	9f ab       	std	Y+55, r25	; 0x37
    2372:	8e ab       	std	Y+54, r24	; 0x36
    2374:	8e a9       	ldd	r24, Y+54	; 0x36
    2376:	9f a9       	ldd	r25, Y+55	; 0x37
    2378:	9b ab       	std	Y+51, r25	; 0x33
    237a:	8a ab       	std	Y+50, r24	; 0x32
    237c:	8a a9       	ldd	r24, Y+50	; 0x32
    237e:	9b a9       	ldd	r25, Y+51	; 0x33
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	f1 f7       	brne	.-4      	; 0x2380 <LCD_write_data_4bit+0x40c>
    2384:	9b ab       	std	Y+51, r25	; 0x33
    2386:	8a ab       	std	Y+50, r24	; 0x32
    2388:	18 c0       	rjmp	.+48     	; 0x23ba <LCD_write_data_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    238a:	fe 01       	movw	r30, r28
    238c:	ef 5b       	subi	r30, 0xBF	; 191
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	60 81       	ld	r22, Z
    2392:	71 81       	ldd	r23, Z+1	; 0x01
    2394:	82 81       	ldd	r24, Z+2	; 0x02
    2396:	93 81       	ldd	r25, Z+3	; 0x03
    2398:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	fe 01       	movw	r30, r28
    23a2:	e0 5c       	subi	r30, 0xC0	; 192
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	80 83       	st	Z, r24
    23a8:	fe 01       	movw	r30, r28
    23aa:	e0 5c       	subi	r30, 0xC0	; 192
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	80 81       	ld	r24, Z
    23b0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23b2:	89 a9       	ldd	r24, Y+49	; 0x31
    23b4:	8a 95       	dec	r24
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <LCD_write_data_4bit+0x440>
    23b8:	89 ab       	std	Y+49, r24	; 0x31
	 *  any change in this sequence will result in a wrong behavior
	 *  i will try to make it more generic in the next versions
	 *
	 */

	for(u8 i = 4; i < 8; i++){
    23ba:	fe 01       	movw	r30, r28
    23bc:	ee 59       	subi	r30, 0x9E	; 158
    23be:	ff 4f       	sbci	r31, 0xFF	; 255
    23c0:	84 e0       	ldi	r24, 0x04	; 4
    23c2:	80 83       	st	Z, r24
    23c4:	26 c0       	rjmp	.+76     	; 0x2412 <LCD_write_data_4bit+0x49e>

		DIO_void_assign_pin(lcd_data_port, i, get_Bit(copy_data_4bit,i));
    23c6:	fe 01       	movw	r30, r28
    23c8:	ed 59       	subi	r30, 0x9D	; 157
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	80 81       	ld	r24, Z
    23ce:	28 2f       	mov	r18, r24
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	fe 01       	movw	r30, r28
    23d4:	ee 59       	subi	r30, 0x9E	; 158
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	80 81       	ld	r24, Z
    23da:	88 2f       	mov	r24, r24
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	a9 01       	movw	r20, r18
    23e0:	02 c0       	rjmp	.+4      	; 0x23e6 <LCD_write_data_4bit+0x472>
    23e2:	55 95       	asr	r21
    23e4:	47 95       	ror	r20
    23e6:	8a 95       	dec	r24
    23e8:	e2 f7       	brpl	.-8      	; 0x23e2 <LCD_write_data_4bit+0x46e>
    23ea:	ca 01       	movw	r24, r20
    23ec:	98 2f       	mov	r25, r24
    23ee:	91 70       	andi	r25, 0x01	; 1
    23f0:	fe 01       	movw	r30, r28
    23f2:	ee 59       	subi	r30, 0x9E	; 158
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	60 81       	ld	r22, Z
    23fa:	49 2f       	mov	r20, r25
    23fc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_void_assign_pin>
	 *  any change in this sequence will result in a wrong behavior
	 *  i will try to make it more generic in the next versions
	 *
	 */

	for(u8 i = 4; i < 8; i++){
    2400:	de 01       	movw	r26, r28
    2402:	ae 59       	subi	r26, 0x9E	; 158
    2404:	bf 4f       	sbci	r27, 0xFF	; 255
    2406:	fe 01       	movw	r30, r28
    2408:	ee 59       	subi	r30, 0x9E	; 158
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	80 81       	ld	r24, Z
    240e:	8f 5f       	subi	r24, 0xFF	; 255
    2410:	8c 93       	st	X, r24
    2412:	fe 01       	movw	r30, r28
    2414:	ee 59       	subi	r30, 0x9E	; 158
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	80 81       	ld	r24, Z
    241a:	88 30       	cpi	r24, 0x08	; 8
    241c:	a0 f2       	brcs	.-88     	; 0x23c6 <LCD_write_data_4bit+0x452>
		// the for loop assigns the data value in the function input
		// by starting by the most significant 4 bits b4-b7

	}
	// set enable to low to send the lower nibble
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	60 e0       	ldi	r22, 0x00	; 0
    2422:	0e 94 21 09 	call	0x1242	; 0x1242 <DIO_void_clear_pin>
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	a0 e2       	ldi	r26, 0x20	; 32
    242c:	b1 e4       	ldi	r27, 0x41	; 65
    242e:	8d a7       	std	Y+45, r24	; 0x2d
    2430:	9e a7       	std	Y+46, r25	; 0x2e
    2432:	af a7       	std	Y+47, r26	; 0x2f
    2434:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2436:	6d a5       	ldd	r22, Y+45	; 0x2d
    2438:	7e a5       	ldd	r23, Y+46	; 0x2e
    243a:	8f a5       	ldd	r24, Y+47	; 0x2f
    243c:	98 a9       	ldd	r25, Y+48	; 0x30
    243e:	2b ea       	ldi	r18, 0xAB	; 171
    2440:	3a ea       	ldi	r19, 0xAA	; 170
    2442:	4a e2       	ldi	r20, 0x2A	; 42
    2444:	50 e4       	ldi	r21, 0x40	; 64
    2446:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	89 a7       	std	Y+41, r24	; 0x29
    2450:	9a a7       	std	Y+42, r25	; 0x2a
    2452:	ab a7       	std	Y+43, r26	; 0x2b
    2454:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2456:	69 a5       	ldd	r22, Y+41	; 0x29
    2458:	7a a5       	ldd	r23, Y+42	; 0x2a
    245a:	8b a5       	ldd	r24, Y+43	; 0x2b
    245c:	9c a5       	ldd	r25, Y+44	; 0x2c
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e8       	ldi	r20, 0x80	; 128
    2464:	5f e3       	ldi	r21, 0x3F	; 63
    2466:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    246a:	88 23       	and	r24, r24
    246c:	1c f4       	brge	.+6      	; 0x2474 <LCD_write_data_4bit+0x500>
		__ticks = 1;
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	88 a7       	std	Y+40, r24	; 0x28
    2472:	91 c0       	rjmp	.+290    	; 0x2596 <LCD_write_data_4bit+0x622>
	else if (__tmp > 255)
    2474:	69 a5       	ldd	r22, Y+41	; 0x29
    2476:	7a a5       	ldd	r23, Y+42	; 0x2a
    2478:	8b a5       	ldd	r24, Y+43	; 0x2b
    247a:	9c a5       	ldd	r25, Y+44	; 0x2c
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	4f e7       	ldi	r20, 0x7F	; 127
    2482:	53 e4       	ldi	r21, 0x43	; 67
    2484:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2488:	18 16       	cp	r1, r24
    248a:	0c f0       	brlt	.+2      	; 0x248e <LCD_write_data_4bit+0x51a>
    248c:	7b c0       	rjmp	.+246    	; 0x2584 <LCD_write_data_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    248e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2490:	7e a5       	ldd	r23, Y+46	; 0x2e
    2492:	8f a5       	ldd	r24, Y+47	; 0x2f
    2494:	98 a9       	ldd	r25, Y+48	; 0x30
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	4a e7       	ldi	r20, 0x7A	; 122
    249c:	54 e4       	ldi	r21, 0x44	; 68
    249e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	8c a3       	std	Y+36, r24	; 0x24
    24a8:	9d a3       	std	Y+37, r25	; 0x25
    24aa:	ae a3       	std	Y+38, r26	; 0x26
    24ac:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ae:	6c a1       	ldd	r22, Y+36	; 0x24
    24b0:	7d a1       	ldd	r23, Y+37	; 0x25
    24b2:	8e a1       	ldd	r24, Y+38	; 0x26
    24b4:	9f a1       	ldd	r25, Y+39	; 0x27
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	4a ef       	ldi	r20, 0xFA	; 250
    24bc:	54 e4       	ldi	r21, 0x44	; 68
    24be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	88 a3       	std	Y+32, r24	; 0x20
    24c8:	99 a3       	std	Y+33, r25	; 0x21
    24ca:	aa a3       	std	Y+34, r26	; 0x22
    24cc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    24ce:	68 a1       	ldd	r22, Y+32	; 0x20
    24d0:	79 a1       	ldd	r23, Y+33	; 0x21
    24d2:	8a a1       	ldd	r24, Y+34	; 0x22
    24d4:	9b a1       	ldd	r25, Y+35	; 0x23
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e8       	ldi	r20, 0x80	; 128
    24dc:	5f e3       	ldi	r21, 0x3F	; 63
    24de:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    24e2:	88 23       	and	r24, r24
    24e4:	2c f4       	brge	.+10     	; 0x24f0 <LCD_write_data_4bit+0x57c>
		__ticks = 1;
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	9f 8f       	std	Y+31, r25	; 0x1f
    24ec:	8e 8f       	std	Y+30, r24	; 0x1e
    24ee:	3f c0       	rjmp	.+126    	; 0x256e <LCD_write_data_4bit+0x5fa>
	else if (__tmp > 65535)
    24f0:	68 a1       	ldd	r22, Y+32	; 0x20
    24f2:	79 a1       	ldd	r23, Y+33	; 0x21
    24f4:	8a a1       	ldd	r24, Y+34	; 0x22
    24f6:	9b a1       	ldd	r25, Y+35	; 0x23
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	3f ef       	ldi	r19, 0xFF	; 255
    24fc:	4f e7       	ldi	r20, 0x7F	; 127
    24fe:	57 e4       	ldi	r21, 0x47	; 71
    2500:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2504:	18 16       	cp	r1, r24
    2506:	4c f5       	brge	.+82     	; 0x255a <LCD_write_data_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2508:	6c a1       	ldd	r22, Y+36	; 0x24
    250a:	7d a1       	ldd	r23, Y+37	; 0x25
    250c:	8e a1       	ldd	r24, Y+38	; 0x26
    250e:	9f a1       	ldd	r25, Y+39	; 0x27
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e2       	ldi	r20, 0x20	; 32
    2516:	51 e4       	ldi	r21, 0x41	; 65
    2518:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	9f 8f       	std	Y+31, r25	; 0x1f
    252e:	8e 8f       	std	Y+30, r24	; 0x1e
    2530:	0f c0       	rjmp	.+30     	; 0x2550 <LCD_write_data_4bit+0x5dc>
    2532:	88 ec       	ldi	r24, 0xC8	; 200
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9d 8f       	std	Y+29, r25	; 0x1d
    2538:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    253a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    253c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <LCD_write_data_4bit+0x5ca>
    2542:	9d 8f       	std	Y+29, r25	; 0x1d
    2544:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2546:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2548:	9f 8d       	ldd	r25, Y+31	; 0x1f
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	9f 8f       	std	Y+31, r25	; 0x1f
    254e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2550:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2552:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	69 f7       	brne	.-38     	; 0x2532 <LCD_write_data_4bit+0x5be>
    2558:	24 c0       	rjmp	.+72     	; 0x25a2 <LCD_write_data_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255a:	68 a1       	ldd	r22, Y+32	; 0x20
    255c:	79 a1       	ldd	r23, Y+33	; 0x21
    255e:	8a a1       	ldd	r24, Y+34	; 0x22
    2560:	9b a1       	ldd	r25, Y+35	; 0x23
    2562:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	9f 8f       	std	Y+31, r25	; 0x1f
    256c:	8e 8f       	std	Y+30, r24	; 0x1e
    256e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2570:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2572:	9b 8f       	std	Y+27, r25	; 0x1b
    2574:	8a 8f       	std	Y+26, r24	; 0x1a
    2576:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2578:	9b 8d       	ldd	r25, Y+27	; 0x1b
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <LCD_write_data_4bit+0x606>
    257e:	9b 8f       	std	Y+27, r25	; 0x1b
    2580:	8a 8f       	std	Y+26, r24	; 0x1a
    2582:	0f c0       	rjmp	.+30     	; 0x25a2 <LCD_write_data_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2584:	69 a5       	ldd	r22, Y+41	; 0x29
    2586:	7a a5       	ldd	r23, Y+42	; 0x2a
    2588:	8b a5       	ldd	r24, Y+43	; 0x2b
    258a:	9c a5       	ldd	r25, Y+44	; 0x2c
    258c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	88 a7       	std	Y+40, r24	; 0x28
    2596:	88 a5       	ldd	r24, Y+40	; 0x28
    2598:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    259a:	89 8d       	ldd	r24, Y+25	; 0x19
    259c:	8a 95       	dec	r24
    259e:	f1 f7       	brne	.-4      	; 0x259c <LCD_write_data_4bit+0x628>
    25a0:	89 8f       	std	Y+25, r24	; 0x19
	//delay to smooth things out
	_delay_us(10);
	//enable HIGH
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	60 e0       	ldi	r22, 0x00	; 0
    25a6:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <DIO_void_set_pin>
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	a0 e8       	ldi	r26, 0x80	; 128
    25b0:	bf e3       	ldi	r27, 0x3F	; 63
    25b2:	8d 8b       	std	Y+21, r24	; 0x15
    25b4:	9e 8b       	std	Y+22, r25	; 0x16
    25b6:	af 8b       	std	Y+23, r26	; 0x17
    25b8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25ba:	6d 89       	ldd	r22, Y+21	; 0x15
    25bc:	7e 89       	ldd	r23, Y+22	; 0x16
    25be:	8f 89       	ldd	r24, Y+23	; 0x17
    25c0:	98 8d       	ldd	r25, Y+24	; 0x18
    25c2:	2b ea       	ldi	r18, 0xAB	; 171
    25c4:	3a ea       	ldi	r19, 0xAA	; 170
    25c6:	4a e2       	ldi	r20, 0x2A	; 42
    25c8:	50 e4       	ldi	r21, 0x40	; 64
    25ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	89 8b       	std	Y+17, r24	; 0x11
    25d4:	9a 8b       	std	Y+18, r25	; 0x12
    25d6:	ab 8b       	std	Y+19, r26	; 0x13
    25d8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    25da:	69 89       	ldd	r22, Y+17	; 0x11
    25dc:	7a 89       	ldd	r23, Y+18	; 0x12
    25de:	8b 89       	ldd	r24, Y+19	; 0x13
    25e0:	9c 89       	ldd	r25, Y+20	; 0x14
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e8       	ldi	r20, 0x80	; 128
    25e8:	5f e3       	ldi	r21, 0x3F	; 63
    25ea:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    25ee:	88 23       	and	r24, r24
    25f0:	1c f4       	brge	.+6      	; 0x25f8 <LCD_write_data_4bit+0x684>
		__ticks = 1;
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	88 8b       	std	Y+16, r24	; 0x10
    25f6:	91 c0       	rjmp	.+290    	; 0x271a <LCD_write_data_4bit+0x7a6>
	else if (__tmp > 255)
    25f8:	69 89       	ldd	r22, Y+17	; 0x11
    25fa:	7a 89       	ldd	r23, Y+18	; 0x12
    25fc:	8b 89       	ldd	r24, Y+19	; 0x13
    25fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	4f e7       	ldi	r20, 0x7F	; 127
    2606:	53 e4       	ldi	r21, 0x43	; 67
    2608:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    260c:	18 16       	cp	r1, r24
    260e:	0c f0       	brlt	.+2      	; 0x2612 <LCD_write_data_4bit+0x69e>
    2610:	7b c0       	rjmp	.+246    	; 0x2708 <LCD_write_data_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    2612:	6d 89       	ldd	r22, Y+21	; 0x15
    2614:	7e 89       	ldd	r23, Y+22	; 0x16
    2616:	8f 89       	ldd	r24, Y+23	; 0x17
    2618:	98 8d       	ldd	r25, Y+24	; 0x18
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	4a e7       	ldi	r20, 0x7A	; 122
    2620:	54 e4       	ldi	r21, 0x44	; 68
    2622:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	8c 87       	std	Y+12, r24	; 0x0c
    262c:	9d 87       	std	Y+13, r25	; 0x0d
    262e:	ae 87       	std	Y+14, r26	; 0x0e
    2630:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2632:	6c 85       	ldd	r22, Y+12	; 0x0c
    2634:	7d 85       	ldd	r23, Y+13	; 0x0d
    2636:	8e 85       	ldd	r24, Y+14	; 0x0e
    2638:	9f 85       	ldd	r25, Y+15	; 0x0f
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	4a ef       	ldi	r20, 0xFA	; 250
    2640:	54 e4       	ldi	r21, 0x44	; 68
    2642:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	88 87       	std	Y+8, r24	; 0x08
    264c:	99 87       	std	Y+9, r25	; 0x09
    264e:	aa 87       	std	Y+10, r26	; 0x0a
    2650:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2652:	68 85       	ldd	r22, Y+8	; 0x08
    2654:	79 85       	ldd	r23, Y+9	; 0x09
    2656:	8a 85       	ldd	r24, Y+10	; 0x0a
    2658:	9b 85       	ldd	r25, Y+11	; 0x0b
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e8       	ldi	r20, 0x80	; 128
    2660:	5f e3       	ldi	r21, 0x3F	; 63
    2662:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2666:	88 23       	and	r24, r24
    2668:	2c f4       	brge	.+10     	; 0x2674 <LCD_write_data_4bit+0x700>
		__ticks = 1;
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	9f 83       	std	Y+7, r25	; 0x07
    2670:	8e 83       	std	Y+6, r24	; 0x06
    2672:	3f c0       	rjmp	.+126    	; 0x26f2 <LCD_write_data_4bit+0x77e>
	else if (__tmp > 65535)
    2674:	68 85       	ldd	r22, Y+8	; 0x08
    2676:	79 85       	ldd	r23, Y+9	; 0x09
    2678:	8a 85       	ldd	r24, Y+10	; 0x0a
    267a:	9b 85       	ldd	r25, Y+11	; 0x0b
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	3f ef       	ldi	r19, 0xFF	; 255
    2680:	4f e7       	ldi	r20, 0x7F	; 127
    2682:	57 e4       	ldi	r21, 0x47	; 71
    2684:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2688:	18 16       	cp	r1, r24
    268a:	4c f5       	brge	.+82     	; 0x26de <LCD_write_data_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268c:	6c 85       	ldd	r22, Y+12	; 0x0c
    268e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2690:	8e 85       	ldd	r24, Y+14	; 0x0e
    2692:	9f 85       	ldd	r25, Y+15	; 0x0f
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e2       	ldi	r20, 0x20	; 32
    269a:	51 e4       	ldi	r21, 0x41	; 65
    269c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	bc 01       	movw	r22, r24
    26a6:	cd 01       	movw	r24, r26
    26a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	9f 83       	std	Y+7, r25	; 0x07
    26b2:	8e 83       	std	Y+6, r24	; 0x06
    26b4:	0f c0       	rjmp	.+30     	; 0x26d4 <LCD_write_data_4bit+0x760>
    26b6:	88 ec       	ldi	r24, 0xC8	; 200
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	9d 83       	std	Y+5, r25	; 0x05
    26bc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26be:	8c 81       	ldd	r24, Y+4	; 0x04
    26c0:	9d 81       	ldd	r25, Y+5	; 0x05
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <LCD_write_data_4bit+0x74e>
    26c6:	9d 83       	std	Y+5, r25	; 0x05
    26c8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ca:	8e 81       	ldd	r24, Y+6	; 0x06
    26cc:	9f 81       	ldd	r25, Y+7	; 0x07
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	9f 83       	std	Y+7, r25	; 0x07
    26d2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d4:	8e 81       	ldd	r24, Y+6	; 0x06
    26d6:	9f 81       	ldd	r25, Y+7	; 0x07
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	69 f7       	brne	.-38     	; 0x26b6 <LCD_write_data_4bit+0x742>
    26dc:	24 c0       	rjmp	.+72     	; 0x2726 <LCD_write_data_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26de:	68 85       	ldd	r22, Y+8	; 0x08
    26e0:	79 85       	ldd	r23, Y+9	; 0x09
    26e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    26e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    26e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	9f 83       	std	Y+7, r25	; 0x07
    26f0:	8e 83       	std	Y+6, r24	; 0x06
    26f2:	8e 81       	ldd	r24, Y+6	; 0x06
    26f4:	9f 81       	ldd	r25, Y+7	; 0x07
    26f6:	9b 83       	std	Y+3, r25	; 0x03
    26f8:	8a 83       	std	Y+2, r24	; 0x02
    26fa:	8a 81       	ldd	r24, Y+2	; 0x02
    26fc:	9b 81       	ldd	r25, Y+3	; 0x03
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <LCD_write_data_4bit+0x78a>
    2702:	9b 83       	std	Y+3, r25	; 0x03
    2704:	8a 83       	std	Y+2, r24	; 0x02
    2706:	0f c0       	rjmp	.+30     	; 0x2726 <LCD_write_data_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2708:	69 89       	ldd	r22, Y+17	; 0x11
    270a:	7a 89       	ldd	r23, Y+18	; 0x12
    270c:	8b 89       	ldd	r24, Y+19	; 0x13
    270e:	9c 89       	ldd	r25, Y+20	; 0x14
    2710:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	88 8b       	std	Y+16, r24	; 0x10
    271a:	88 89       	ldd	r24, Y+16	; 0x10
    271c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	8a 95       	dec	r24
    2722:	f1 f7       	brne	.-4      	; 0x2720 <LCD_write_data_4bit+0x7ac>
    2724:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	//send lower nibble
	for(u8 i = 4; i < 8; i++){
    2726:	fe 01       	movw	r30, r28
    2728:	ef 59       	subi	r30, 0x9F	; 159
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	84 e0       	ldi	r24, 0x04	; 4
    272e:	80 83       	st	Z, r24
    2730:	27 c0       	rjmp	.+78     	; 0x2780 <LCD_write_data_4bit+0x80c>

			DIO_void_assign_pin(lcd_data_port, i, get_Bit(copy_data_4bit,i-4));
    2732:	fe 01       	movw	r30, r28
    2734:	ed 59       	subi	r30, 0x9D	; 157
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	80 81       	ld	r24, Z
    273a:	28 2f       	mov	r18, r24
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	fe 01       	movw	r30, r28
    2740:	ef 59       	subi	r30, 0x9F	; 159
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	80 81       	ld	r24, Z
    2746:	88 2f       	mov	r24, r24
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	04 97       	sbiw	r24, 0x04	; 4
    274c:	f9 01       	movw	r30, r18
    274e:	02 c0       	rjmp	.+4      	; 0x2754 <LCD_write_data_4bit+0x7e0>
    2750:	f5 95       	asr	r31
    2752:	e7 95       	ror	r30
    2754:	8a 95       	dec	r24
    2756:	e2 f7       	brpl	.-8      	; 0x2750 <LCD_write_data_4bit+0x7dc>
    2758:	cf 01       	movw	r24, r30
    275a:	98 2f       	mov	r25, r24
    275c:	91 70       	andi	r25, 0x01	; 1
    275e:	fe 01       	movw	r30, r28
    2760:	ef 59       	subi	r30, 0x9F	; 159
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	60 81       	ld	r22, Z
    2768:	49 2f       	mov	r20, r25
    276a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_void_assign_pin>
	_delay_us(10);
	//enable HIGH
	DIO_void_set_pin(lcd_control_port, lcd_enable);
	_delay_us(1);
	//send lower nibble
	for(u8 i = 4; i < 8; i++){
    276e:	de 01       	movw	r26, r28
    2770:	af 59       	subi	r26, 0x9F	; 159
    2772:	bf 4f       	sbci	r27, 0xFF	; 255
    2774:	fe 01       	movw	r30, r28
    2776:	ef 59       	subi	r30, 0x9F	; 159
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	80 81       	ld	r24, Z
    277c:	8f 5f       	subi	r24, 0xFF	; 255
    277e:	8c 93       	st	X, r24
    2780:	fe 01       	movw	r30, r28
    2782:	ef 59       	subi	r30, 0x9F	; 159
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	80 81       	ld	r24, Z
    2788:	88 30       	cpi	r24, 0x08	; 8
    278a:	98 f2       	brcs	.-90     	; 0x2732 <LCD_write_data_4bit+0x7be>
			// the for loop assigns the data value in the function input
			// by starting by the least significant 4 bits b0-b3

		}
	//enable low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	0e 94 21 09 	call	0x1242	; 0x1242 <DIO_void_clear_pin>


}
    2794:	cd 59       	subi	r28, 0x9D	; 157
    2796:	df 4f       	sbci	r29, 0xFF	; 255
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	de bf       	out	0x3e, r29	; 62
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	cd bf       	out	0x3d, r28	; 61
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	1f 91       	pop	r17
    27a8:	0f 91       	pop	r16
    27aa:	08 95       	ret

000027ac <LCD_write_command_4bit>:

static void LCD_write_command_4bit(u8 copy_command_4bit){
    27ac:	0f 93       	push	r16
    27ae:	1f 93       	push	r17
    27b0:	df 93       	push	r29
    27b2:	cf 93       	push	r28
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
    27b8:	c3 56       	subi	r28, 0x63	; 99
    27ba:	d0 40       	sbci	r29, 0x00	; 0
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	de bf       	out	0x3e, r29	; 62
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	cd bf       	out	0x3d, r28	; 61
    27c6:	fe 01       	movw	r30, r28
    27c8:	ed 59       	subi	r30, 0x9D	; 157
    27ca:	ff 4f       	sbci	r31, 0xFF	; 255
    27cc:	80 83       	st	Z, r24
		 *  function will only be used inside this source file
		 *  do you not use it in your code!
		 *
		 */

	DIO_void_clear_pin(lcd_control_port, lcd_RS); // set RS pin high select data register
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	62 e0       	ldi	r22, 0x02	; 2
    27d2:	0e 94 21 09 	call	0x1242	; 0x1242 <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_control_port, lcd_RW); // clear RW pin  0 for writing operation
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	61 e0       	ldi	r22, 0x01	; 1
    27da:	0e 94 21 09 	call	0x1242	; 0x1242 <DIO_void_clear_pin>
    27de:	fe 01       	movw	r30, r28
    27e0:	e3 5a       	subi	r30, 0xA3	; 163
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	a0 e8       	ldi	r26, 0x80	; 128
    27ea:	bf e3       	ldi	r27, 0x3F	; 63
    27ec:	80 83       	st	Z, r24
    27ee:	91 83       	std	Z+1, r25	; 0x01
    27f0:	a2 83       	std	Z+2, r26	; 0x02
    27f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    27f4:	8e 01       	movw	r16, r28
    27f6:	07 5a       	subi	r16, 0xA7	; 167
    27f8:	1f 4f       	sbci	r17, 0xFF	; 255
    27fa:	fe 01       	movw	r30, r28
    27fc:	e3 5a       	subi	r30, 0xA3	; 163
    27fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2800:	60 81       	ld	r22, Z
    2802:	71 81       	ldd	r23, Z+1	; 0x01
    2804:	82 81       	ldd	r24, Z+2	; 0x02
    2806:	93 81       	ldd	r25, Z+3	; 0x03
    2808:	2b ea       	ldi	r18, 0xAB	; 171
    280a:	3a ea       	ldi	r19, 0xAA	; 170
    280c:	4a e2       	ldi	r20, 0x2A	; 42
    280e:	50 e4       	ldi	r21, 0x40	; 64
    2810:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	f8 01       	movw	r30, r16
    281a:	80 83       	st	Z, r24
    281c:	91 83       	std	Z+1, r25	; 0x01
    281e:	a2 83       	std	Z+2, r26	; 0x02
    2820:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2822:	fe 01       	movw	r30, r28
    2824:	e7 5a       	subi	r30, 0xA7	; 167
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	60 81       	ld	r22, Z
    282a:	71 81       	ldd	r23, Z+1	; 0x01
    282c:	82 81       	ldd	r24, Z+2	; 0x02
    282e:	93 81       	ldd	r25, Z+3	; 0x03
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e8       	ldi	r20, 0x80	; 128
    2836:	5f e3       	ldi	r21, 0x3F	; 63
    2838:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    283c:	88 23       	and	r24, r24
    283e:	34 f4       	brge	.+12     	; 0x284c <LCD_write_command_4bit+0xa0>
		__ticks = 1;
    2840:	fe 01       	movw	r30, r28
    2842:	e8 5a       	subi	r30, 0xA8	; 168
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	80 83       	st	Z, r24
    284a:	e0 c0       	rjmp	.+448    	; 0x2a0c <LCD_write_command_4bit+0x260>
	else if (__tmp > 255)
    284c:	fe 01       	movw	r30, r28
    284e:	e7 5a       	subi	r30, 0xA7	; 167
    2850:	ff 4f       	sbci	r31, 0xFF	; 255
    2852:	60 81       	ld	r22, Z
    2854:	71 81       	ldd	r23, Z+1	; 0x01
    2856:	82 81       	ldd	r24, Z+2	; 0x02
    2858:	93 81       	ldd	r25, Z+3	; 0x03
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	4f e7       	ldi	r20, 0x7F	; 127
    2860:	53 e4       	ldi	r21, 0x43	; 67
    2862:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2866:	18 16       	cp	r1, r24
    2868:	0c f0       	brlt	.+2      	; 0x286c <LCD_write_command_4bit+0xc0>
    286a:	c0 c0       	rjmp	.+384    	; 0x29ec <LCD_write_command_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    286c:	fe 01       	movw	r30, r28
    286e:	e3 5a       	subi	r30, 0xA3	; 163
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	60 81       	ld	r22, Z
    2874:	71 81       	ldd	r23, Z+1	; 0x01
    2876:	82 81       	ldd	r24, Z+2	; 0x02
    2878:	93 81       	ldd	r25, Z+3	; 0x03
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	4a e7       	ldi	r20, 0x7A	; 122
    2880:	54 e4       	ldi	r21, 0x44	; 68
    2882:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	fe 01       	movw	r30, r28
    288c:	ec 5a       	subi	r30, 0xAC	; 172
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	80 83       	st	Z, r24
    2892:	91 83       	std	Z+1, r25	; 0x01
    2894:	a2 83       	std	Z+2, r26	; 0x02
    2896:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2898:	8e 01       	movw	r16, r28
    289a:	00 5b       	subi	r16, 0xB0	; 176
    289c:	1f 4f       	sbci	r17, 0xFF	; 255
    289e:	fe 01       	movw	r30, r28
    28a0:	ec 5a       	subi	r30, 0xAC	; 172
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	60 81       	ld	r22, Z
    28a6:	71 81       	ldd	r23, Z+1	; 0x01
    28a8:	82 81       	ldd	r24, Z+2	; 0x02
    28aa:	93 81       	ldd	r25, Z+3	; 0x03
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	4a ef       	ldi	r20, 0xFA	; 250
    28b2:	54 e4       	ldi	r21, 0x44	; 68
    28b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	f8 01       	movw	r30, r16
    28be:	80 83       	st	Z, r24
    28c0:	91 83       	std	Z+1, r25	; 0x01
    28c2:	a2 83       	std	Z+2, r26	; 0x02
    28c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28c6:	fe 01       	movw	r30, r28
    28c8:	e0 5b       	subi	r30, 0xB0	; 176
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	60 81       	ld	r22, Z
    28ce:	71 81       	ldd	r23, Z+1	; 0x01
    28d0:	82 81       	ldd	r24, Z+2	; 0x02
    28d2:	93 81       	ldd	r25, Z+3	; 0x03
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	40 e8       	ldi	r20, 0x80	; 128
    28da:	5f e3       	ldi	r21, 0x3F	; 63
    28dc:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    28e0:	88 23       	and	r24, r24
    28e2:	44 f4       	brge	.+16     	; 0x28f4 <LCD_write_command_4bit+0x148>
		__ticks = 1;
    28e4:	fe 01       	movw	r30, r28
    28e6:	e2 5b       	subi	r30, 0xB2	; 178
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	91 83       	std	Z+1, r25	; 0x01
    28f0:	80 83       	st	Z, r24
    28f2:	64 c0       	rjmp	.+200    	; 0x29bc <LCD_write_command_4bit+0x210>
	else if (__tmp > 65535)
    28f4:	fe 01       	movw	r30, r28
    28f6:	e0 5b       	subi	r30, 0xB0	; 176
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	60 81       	ld	r22, Z
    28fc:	71 81       	ldd	r23, Z+1	; 0x01
    28fe:	82 81       	ldd	r24, Z+2	; 0x02
    2900:	93 81       	ldd	r25, Z+3	; 0x03
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	3f ef       	ldi	r19, 0xFF	; 255
    2906:	4f e7       	ldi	r20, 0x7F	; 127
    2908:	57 e4       	ldi	r21, 0x47	; 71
    290a:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    290e:	18 16       	cp	r1, r24
    2910:	0c f0       	brlt	.+2      	; 0x2914 <LCD_write_command_4bit+0x168>
    2912:	43 c0       	rjmp	.+134    	; 0x299a <LCD_write_command_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2914:	fe 01       	movw	r30, r28
    2916:	ec 5a       	subi	r30, 0xAC	; 172
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	60 81       	ld	r22, Z
    291c:	71 81       	ldd	r23, Z+1	; 0x01
    291e:	82 81       	ldd	r24, Z+2	; 0x02
    2920:	93 81       	ldd	r25, Z+3	; 0x03
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	40 e2       	ldi	r20, 0x20	; 32
    2928:	51 e4       	ldi	r21, 0x41	; 65
    292a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	8e 01       	movw	r16, r28
    2934:	02 5b       	subi	r16, 0xB2	; 178
    2936:	1f 4f       	sbci	r17, 0xFF	; 255
    2938:	bc 01       	movw	r22, r24
    293a:	cd 01       	movw	r24, r26
    293c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	f8 01       	movw	r30, r16
    2946:	91 83       	std	Z+1, r25	; 0x01
    2948:	80 83       	st	Z, r24
    294a:	1f c0       	rjmp	.+62     	; 0x298a <LCD_write_command_4bit+0x1de>
    294c:	fe 01       	movw	r30, r28
    294e:	e4 5b       	subi	r30, 0xB4	; 180
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	88 ec       	ldi	r24, 0xC8	; 200
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	91 83       	std	Z+1, r25	; 0x01
    2958:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    295a:	fe 01       	movw	r30, r28
    295c:	e4 5b       	subi	r30, 0xB4	; 180
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	80 81       	ld	r24, Z
    2962:	91 81       	ldd	r25, Z+1	; 0x01
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	f1 f7       	brne	.-4      	; 0x2964 <LCD_write_command_4bit+0x1b8>
    2968:	fe 01       	movw	r30, r28
    296a:	e4 5b       	subi	r30, 0xB4	; 180
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	91 83       	std	Z+1, r25	; 0x01
    2970:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2972:	de 01       	movw	r26, r28
    2974:	a2 5b       	subi	r26, 0xB2	; 178
    2976:	bf 4f       	sbci	r27, 0xFF	; 255
    2978:	fe 01       	movw	r30, r28
    297a:	e2 5b       	subi	r30, 0xB2	; 178
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	80 81       	ld	r24, Z
    2980:	91 81       	ldd	r25, Z+1	; 0x01
    2982:	01 97       	sbiw	r24, 0x01	; 1
    2984:	11 96       	adiw	r26, 0x01	; 1
    2986:	9c 93       	st	X, r25
    2988:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298a:	fe 01       	movw	r30, r28
    298c:	e2 5b       	subi	r30, 0xB2	; 178
    298e:	ff 4f       	sbci	r31, 0xFF	; 255
    2990:	80 81       	ld	r24, Z
    2992:	91 81       	ldd	r25, Z+1	; 0x01
    2994:	00 97       	sbiw	r24, 0x00	; 0
    2996:	d1 f6       	brne	.-76     	; 0x294c <LCD_write_command_4bit+0x1a0>
    2998:	4b c0       	rjmp	.+150    	; 0x2a30 <LCD_write_command_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299a:	8e 01       	movw	r16, r28
    299c:	02 5b       	subi	r16, 0xB2	; 178
    299e:	1f 4f       	sbci	r17, 0xFF	; 255
    29a0:	fe 01       	movw	r30, r28
    29a2:	e0 5b       	subi	r30, 0xB0	; 176
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	60 81       	ld	r22, Z
    29a8:	71 81       	ldd	r23, Z+1	; 0x01
    29aa:	82 81       	ldd	r24, Z+2	; 0x02
    29ac:	93 81       	ldd	r25, Z+3	; 0x03
    29ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	f8 01       	movw	r30, r16
    29b8:	91 83       	std	Z+1, r25	; 0x01
    29ba:	80 83       	st	Z, r24
    29bc:	de 01       	movw	r26, r28
    29be:	a6 5b       	subi	r26, 0xB6	; 182
    29c0:	bf 4f       	sbci	r27, 0xFF	; 255
    29c2:	fe 01       	movw	r30, r28
    29c4:	e2 5b       	subi	r30, 0xB2	; 178
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	80 81       	ld	r24, Z
    29ca:	91 81       	ldd	r25, Z+1	; 0x01
    29cc:	11 96       	adiw	r26, 0x01	; 1
    29ce:	9c 93       	st	X, r25
    29d0:	8e 93       	st	-X, r24
    29d2:	fe 01       	movw	r30, r28
    29d4:	e6 5b       	subi	r30, 0xB6	; 182
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	80 81       	ld	r24, Z
    29da:	91 81       	ldd	r25, Z+1	; 0x01
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	f1 f7       	brne	.-4      	; 0x29dc <LCD_write_command_4bit+0x230>
    29e0:	fe 01       	movw	r30, r28
    29e2:	e6 5b       	subi	r30, 0xB6	; 182
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	91 83       	std	Z+1, r25	; 0x01
    29e8:	80 83       	st	Z, r24
    29ea:	22 c0       	rjmp	.+68     	; 0x2a30 <LCD_write_command_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29ec:	8e 01       	movw	r16, r28
    29ee:	08 5a       	subi	r16, 0xA8	; 168
    29f0:	1f 4f       	sbci	r17, 0xFF	; 255
    29f2:	fe 01       	movw	r30, r28
    29f4:	e7 5a       	subi	r30, 0xA7	; 167
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	60 81       	ld	r22, Z
    29fa:	71 81       	ldd	r23, Z+1	; 0x01
    29fc:	82 81       	ldd	r24, Z+2	; 0x02
    29fe:	93 81       	ldd	r25, Z+3	; 0x03
    2a00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	f8 01       	movw	r30, r16
    2a0a:	80 83       	st	Z, r24
    2a0c:	de 01       	movw	r26, r28
    2a0e:	a7 5b       	subi	r26, 0xB7	; 183
    2a10:	bf 4f       	sbci	r27, 0xFF	; 255
    2a12:	fe 01       	movw	r30, r28
    2a14:	e8 5a       	subi	r30, 0xA8	; 168
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	80 81       	ld	r24, Z
    2a1a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	e7 5b       	subi	r30, 0xB7	; 183
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	80 81       	ld	r24, Z
    2a24:	8a 95       	dec	r24
    2a26:	f1 f7       	brne	.-4      	; 0x2a24 <LCD_write_command_4bit+0x278>
    2a28:	fe 01       	movw	r30, r28
    2a2a:	e7 5b       	subi	r30, 0xB7	; 183
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	80 83       	st	Z, r24

	_delay_us(1);
	//enable pin high
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	60 e0       	ldi	r22, 0x00	; 0
    2a34:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <DIO_void_set_pin>
    2a38:	fe 01       	movw	r30, r28
    2a3a:	eb 5b       	subi	r30, 0xBB	; 187
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	a0 e8       	ldi	r26, 0x80	; 128
    2a44:	bf e3       	ldi	r27, 0x3F	; 63
    2a46:	80 83       	st	Z, r24
    2a48:	91 83       	std	Z+1, r25	; 0x01
    2a4a:	a2 83       	std	Z+2, r26	; 0x02
    2a4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a4e:	8e 01       	movw	r16, r28
    2a50:	0f 5b       	subi	r16, 0xBF	; 191
    2a52:	1f 4f       	sbci	r17, 0xFF	; 255
    2a54:	fe 01       	movw	r30, r28
    2a56:	eb 5b       	subi	r30, 0xBB	; 187
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	60 81       	ld	r22, Z
    2a5c:	71 81       	ldd	r23, Z+1	; 0x01
    2a5e:	82 81       	ldd	r24, Z+2	; 0x02
    2a60:	93 81       	ldd	r25, Z+3	; 0x03
    2a62:	2b ea       	ldi	r18, 0xAB	; 171
    2a64:	3a ea       	ldi	r19, 0xAA	; 170
    2a66:	4a e2       	ldi	r20, 0x2A	; 42
    2a68:	50 e4       	ldi	r21, 0x40	; 64
    2a6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	f8 01       	movw	r30, r16
    2a74:	80 83       	st	Z, r24
    2a76:	91 83       	std	Z+1, r25	; 0x01
    2a78:	a2 83       	std	Z+2, r26	; 0x02
    2a7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	ef 5b       	subi	r30, 0xBF	; 191
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	60 81       	ld	r22, Z
    2a84:	71 81       	ldd	r23, Z+1	; 0x01
    2a86:	82 81       	ldd	r24, Z+2	; 0x02
    2a88:	93 81       	ldd	r25, Z+3	; 0x03
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e8       	ldi	r20, 0x80	; 128
    2a90:	5f e3       	ldi	r21, 0x3F	; 63
    2a92:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2a96:	88 23       	and	r24, r24
    2a98:	34 f4       	brge	.+12     	; 0x2aa6 <LCD_write_command_4bit+0x2fa>
		__ticks = 1;
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	e0 5c       	subi	r30, 0xC0	; 192
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	80 83       	st	Z, r24
    2aa4:	9d c0       	rjmp	.+314    	; 0x2be0 <LCD_write_command_4bit+0x434>
	else if (__tmp > 255)
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	ef 5b       	subi	r30, 0xBF	; 191
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	60 81       	ld	r22, Z
    2aae:	71 81       	ldd	r23, Z+1	; 0x01
    2ab0:	82 81       	ldd	r24, Z+2	; 0x02
    2ab2:	93 81       	ldd	r25, Z+3	; 0x03
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	4f e7       	ldi	r20, 0x7F	; 127
    2aba:	53 e4       	ldi	r21, 0x43	; 67
    2abc:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2ac0:	18 16       	cp	r1, r24
    2ac2:	0c f0       	brlt	.+2      	; 0x2ac6 <LCD_write_command_4bit+0x31a>
    2ac4:	7e c0       	rjmp	.+252    	; 0x2bc2 <LCD_write_command_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	eb 5b       	subi	r30, 0xBB	; 187
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	60 81       	ld	r22, Z
    2ace:	71 81       	ldd	r23, Z+1	; 0x01
    2ad0:	82 81       	ldd	r24, Z+2	; 0x02
    2ad2:	93 81       	ldd	r25, Z+3	; 0x03
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	4a e7       	ldi	r20, 0x7A	; 122
    2ada:	54 e4       	ldi	r21, 0x44	; 68
    2adc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	8c af       	std	Y+60, r24	; 0x3c
    2ae6:	9d af       	std	Y+61, r25	; 0x3d
    2ae8:	ae af       	std	Y+62, r26	; 0x3e
    2aea:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aec:	6c ad       	ldd	r22, Y+60	; 0x3c
    2aee:	7d ad       	ldd	r23, Y+61	; 0x3d
    2af0:	8e ad       	ldd	r24, Y+62	; 0x3e
    2af2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	4a ef       	ldi	r20, 0xFA	; 250
    2afa:	54 e4       	ldi	r21, 0x44	; 68
    2afc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	88 af       	std	Y+56, r24	; 0x38
    2b06:	99 af       	std	Y+57, r25	; 0x39
    2b08:	aa af       	std	Y+58, r26	; 0x3a
    2b0a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2b0c:	68 ad       	ldd	r22, Y+56	; 0x38
    2b0e:	79 ad       	ldd	r23, Y+57	; 0x39
    2b10:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b12:	9b ad       	ldd	r25, Y+59	; 0x3b
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	40 e8       	ldi	r20, 0x80	; 128
    2b1a:	5f e3       	ldi	r21, 0x3F	; 63
    2b1c:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2b20:	88 23       	and	r24, r24
    2b22:	2c f4       	brge	.+10     	; 0x2b2e <LCD_write_command_4bit+0x382>
		__ticks = 1;
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	9f ab       	std	Y+55, r25	; 0x37
    2b2a:	8e ab       	std	Y+54, r24	; 0x36
    2b2c:	3f c0       	rjmp	.+126    	; 0x2bac <LCD_write_command_4bit+0x400>
	else if (__tmp > 65535)
    2b2e:	68 ad       	ldd	r22, Y+56	; 0x38
    2b30:	79 ad       	ldd	r23, Y+57	; 0x39
    2b32:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b34:	9b ad       	ldd	r25, Y+59	; 0x3b
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	3f ef       	ldi	r19, 0xFF	; 255
    2b3a:	4f e7       	ldi	r20, 0x7F	; 127
    2b3c:	57 e4       	ldi	r21, 0x47	; 71
    2b3e:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2b42:	18 16       	cp	r1, r24
    2b44:	4c f5       	brge	.+82     	; 0x2b98 <LCD_write_command_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b46:	6c ad       	ldd	r22, Y+60	; 0x3c
    2b48:	7d ad       	ldd	r23, Y+61	; 0x3d
    2b4a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 e2       	ldi	r20, 0x20	; 32
    2b54:	51 e4       	ldi	r21, 0x41	; 65
    2b56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	bc 01       	movw	r22, r24
    2b60:	cd 01       	movw	r24, r26
    2b62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	9f ab       	std	Y+55, r25	; 0x37
    2b6c:	8e ab       	std	Y+54, r24	; 0x36
    2b6e:	0f c0       	rjmp	.+30     	; 0x2b8e <LCD_write_command_4bit+0x3e2>
    2b70:	88 ec       	ldi	r24, 0xC8	; 200
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	9d ab       	std	Y+53, r25	; 0x35
    2b76:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b78:	8c a9       	ldd	r24, Y+52	; 0x34
    2b7a:	9d a9       	ldd	r25, Y+53	; 0x35
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	f1 f7       	brne	.-4      	; 0x2b7c <LCD_write_command_4bit+0x3d0>
    2b80:	9d ab       	std	Y+53, r25	; 0x35
    2b82:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b84:	8e a9       	ldd	r24, Y+54	; 0x36
    2b86:	9f a9       	ldd	r25, Y+55	; 0x37
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	9f ab       	std	Y+55, r25	; 0x37
    2b8c:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8e:	8e a9       	ldd	r24, Y+54	; 0x36
    2b90:	9f a9       	ldd	r25, Y+55	; 0x37
    2b92:	00 97       	sbiw	r24, 0x00	; 0
    2b94:	69 f7       	brne	.-38     	; 0x2b70 <LCD_write_command_4bit+0x3c4>
    2b96:	2d c0       	rjmp	.+90     	; 0x2bf2 <LCD_write_command_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b98:	68 ad       	ldd	r22, Y+56	; 0x38
    2b9a:	79 ad       	ldd	r23, Y+57	; 0x39
    2b9c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b9e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2ba0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	9f ab       	std	Y+55, r25	; 0x37
    2baa:	8e ab       	std	Y+54, r24	; 0x36
    2bac:	8e a9       	ldd	r24, Y+54	; 0x36
    2bae:	9f a9       	ldd	r25, Y+55	; 0x37
    2bb0:	9b ab       	std	Y+51, r25	; 0x33
    2bb2:	8a ab       	std	Y+50, r24	; 0x32
    2bb4:	8a a9       	ldd	r24, Y+50	; 0x32
    2bb6:	9b a9       	ldd	r25, Y+51	; 0x33
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <LCD_write_command_4bit+0x40c>
    2bbc:	9b ab       	std	Y+51, r25	; 0x33
    2bbe:	8a ab       	std	Y+50, r24	; 0x32
    2bc0:	18 c0       	rjmp	.+48     	; 0x2bf2 <LCD_write_command_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	ef 5b       	subi	r30, 0xBF	; 191
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	60 81       	ld	r22, Z
    2bca:	71 81       	ldd	r23, Z+1	; 0x01
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	93 81       	ldd	r25, Z+3	; 0x03
    2bd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e0 5c       	subi	r30, 0xC0	; 192
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	80 83       	st	Z, r24
    2be0:	fe 01       	movw	r30, r28
    2be2:	e0 5c       	subi	r30, 0xC0	; 192
    2be4:	ff 4f       	sbci	r31, 0xFF	; 255
    2be6:	80 81       	ld	r24, Z
    2be8:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bea:	89 a9       	ldd	r24, Y+49	; 0x31
    2bec:	8a 95       	dec	r24
    2bee:	f1 f7       	brne	.-4      	; 0x2bec <LCD_write_command_4bit+0x440>
    2bf0:	89 ab       	std	Y+49, r24	; 0x31
	 *  any change in this sequence will result in a wrong behavior
	 *  i will try to make it more generic in the next versions
	 *
	 */

	for(u8 i = 4; i < 8; i++){
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	ee 59       	subi	r30, 0x9E	; 158
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	84 e0       	ldi	r24, 0x04	; 4
    2bfa:	80 83       	st	Z, r24
    2bfc:	26 c0       	rjmp	.+76     	; 0x2c4a <LCD_write_command_4bit+0x49e>

		DIO_void_assign_pin(lcd_data_port, i, get_Bit(copy_command_4bit,i));
    2bfe:	fe 01       	movw	r30, r28
    2c00:	ed 59       	subi	r30, 0x9D	; 157
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	80 81       	ld	r24, Z
    2c06:	28 2f       	mov	r18, r24
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	ee 59       	subi	r30, 0x9E	; 158
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	80 81       	ld	r24, Z
    2c12:	88 2f       	mov	r24, r24
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	a9 01       	movw	r20, r18
    2c18:	02 c0       	rjmp	.+4      	; 0x2c1e <LCD_write_command_4bit+0x472>
    2c1a:	55 95       	asr	r21
    2c1c:	47 95       	ror	r20
    2c1e:	8a 95       	dec	r24
    2c20:	e2 f7       	brpl	.-8      	; 0x2c1a <LCD_write_command_4bit+0x46e>
    2c22:	ca 01       	movw	r24, r20
    2c24:	98 2f       	mov	r25, r24
    2c26:	91 70       	andi	r25, 0x01	; 1
    2c28:	fe 01       	movw	r30, r28
    2c2a:	ee 59       	subi	r30, 0x9E	; 158
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	60 81       	ld	r22, Z
    2c32:	49 2f       	mov	r20, r25
    2c34:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_void_assign_pin>
	 *  any change in this sequence will result in a wrong behavior
	 *  i will try to make it more generic in the next versions
	 *
	 */

	for(u8 i = 4; i < 8; i++){
    2c38:	de 01       	movw	r26, r28
    2c3a:	ae 59       	subi	r26, 0x9E	; 158
    2c3c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c3e:	fe 01       	movw	r30, r28
    2c40:	ee 59       	subi	r30, 0x9E	; 158
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	80 81       	ld	r24, Z
    2c46:	8f 5f       	subi	r24, 0xFF	; 255
    2c48:	8c 93       	st	X, r24
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	ee 59       	subi	r30, 0x9E	; 158
    2c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c50:	80 81       	ld	r24, Z
    2c52:	88 30       	cpi	r24, 0x08	; 8
    2c54:	a0 f2       	brcs	.-88     	; 0x2bfe <LCD_write_command_4bit+0x452>
		// the for loop assigns the data value in the function input
		// by starting by the most significant 4 bits b4-b7

	}
	// set enable to low to send the lower nibble
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	60 e0       	ldi	r22, 0x00	; 0
    2c5a:	0e 94 21 09 	call	0x1242	; 0x1242 <DIO_void_clear_pin>
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	a0 e2       	ldi	r26, 0x20	; 32
    2c64:	b1 e4       	ldi	r27, 0x41	; 65
    2c66:	8d a7       	std	Y+45, r24	; 0x2d
    2c68:	9e a7       	std	Y+46, r25	; 0x2e
    2c6a:	af a7       	std	Y+47, r26	; 0x2f
    2c6c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c6e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2c70:	7e a5       	ldd	r23, Y+46	; 0x2e
    2c72:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c74:	98 a9       	ldd	r25, Y+48	; 0x30
    2c76:	2b ea       	ldi	r18, 0xAB	; 171
    2c78:	3a ea       	ldi	r19, 0xAA	; 170
    2c7a:	4a e2       	ldi	r20, 0x2A	; 42
    2c7c:	50 e4       	ldi	r21, 0x40	; 64
    2c7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	89 a7       	std	Y+41, r24	; 0x29
    2c88:	9a a7       	std	Y+42, r25	; 0x2a
    2c8a:	ab a7       	std	Y+43, r26	; 0x2b
    2c8c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2c8e:	69 a5       	ldd	r22, Y+41	; 0x29
    2c90:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c92:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c94:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e8       	ldi	r20, 0x80	; 128
    2c9c:	5f e3       	ldi	r21, 0x3F	; 63
    2c9e:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2ca2:	88 23       	and	r24, r24
    2ca4:	1c f4       	brge	.+6      	; 0x2cac <LCD_write_command_4bit+0x500>
		__ticks = 1;
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	88 a7       	std	Y+40, r24	; 0x28
    2caa:	91 c0       	rjmp	.+290    	; 0x2dce <LCD_write_command_4bit+0x622>
	else if (__tmp > 255)
    2cac:	69 a5       	ldd	r22, Y+41	; 0x29
    2cae:	7a a5       	ldd	r23, Y+42	; 0x2a
    2cb0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cb2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	4f e7       	ldi	r20, 0x7F	; 127
    2cba:	53 e4       	ldi	r21, 0x43	; 67
    2cbc:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2cc0:	18 16       	cp	r1, r24
    2cc2:	0c f0       	brlt	.+2      	; 0x2cc6 <LCD_write_command_4bit+0x51a>
    2cc4:	7b c0       	rjmp	.+246    	; 0x2dbc <LCD_write_command_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    2cc6:	6d a5       	ldd	r22, Y+45	; 0x2d
    2cc8:	7e a5       	ldd	r23, Y+46	; 0x2e
    2cca:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ccc:	98 a9       	ldd	r25, Y+48	; 0x30
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	4a e7       	ldi	r20, 0x7A	; 122
    2cd4:	54 e4       	ldi	r21, 0x44	; 68
    2cd6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	8c a3       	std	Y+36, r24	; 0x24
    2ce0:	9d a3       	std	Y+37, r25	; 0x25
    2ce2:	ae a3       	std	Y+38, r26	; 0x26
    2ce4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce6:	6c a1       	ldd	r22, Y+36	; 0x24
    2ce8:	7d a1       	ldd	r23, Y+37	; 0x25
    2cea:	8e a1       	ldd	r24, Y+38	; 0x26
    2cec:	9f a1       	ldd	r25, Y+39	; 0x27
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	4a ef       	ldi	r20, 0xFA	; 250
    2cf4:	54 e4       	ldi	r21, 0x44	; 68
    2cf6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	88 a3       	std	Y+32, r24	; 0x20
    2d00:	99 a3       	std	Y+33, r25	; 0x21
    2d02:	aa a3       	std	Y+34, r26	; 0x22
    2d04:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2d06:	68 a1       	ldd	r22, Y+32	; 0x20
    2d08:	79 a1       	ldd	r23, Y+33	; 0x21
    2d0a:	8a a1       	ldd	r24, Y+34	; 0x22
    2d0c:	9b a1       	ldd	r25, Y+35	; 0x23
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e8       	ldi	r20, 0x80	; 128
    2d14:	5f e3       	ldi	r21, 0x3F	; 63
    2d16:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2d1a:	88 23       	and	r24, r24
    2d1c:	2c f4       	brge	.+10     	; 0x2d28 <LCD_write_command_4bit+0x57c>
		__ticks = 1;
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	9f 8f       	std	Y+31, r25	; 0x1f
    2d24:	8e 8f       	std	Y+30, r24	; 0x1e
    2d26:	3f c0       	rjmp	.+126    	; 0x2da6 <LCD_write_command_4bit+0x5fa>
	else if (__tmp > 65535)
    2d28:	68 a1       	ldd	r22, Y+32	; 0x20
    2d2a:	79 a1       	ldd	r23, Y+33	; 0x21
    2d2c:	8a a1       	ldd	r24, Y+34	; 0x22
    2d2e:	9b a1       	ldd	r25, Y+35	; 0x23
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	3f ef       	ldi	r19, 0xFF	; 255
    2d34:	4f e7       	ldi	r20, 0x7F	; 127
    2d36:	57 e4       	ldi	r21, 0x47	; 71
    2d38:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2d3c:	18 16       	cp	r1, r24
    2d3e:	4c f5       	brge	.+82     	; 0x2d92 <LCD_write_command_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d40:	6c a1       	ldd	r22, Y+36	; 0x24
    2d42:	7d a1       	ldd	r23, Y+37	; 0x25
    2d44:	8e a1       	ldd	r24, Y+38	; 0x26
    2d46:	9f a1       	ldd	r25, Y+39	; 0x27
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	40 e2       	ldi	r20, 0x20	; 32
    2d4e:	51 e4       	ldi	r21, 0x41	; 65
    2d50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	bc 01       	movw	r22, r24
    2d5a:	cd 01       	movw	r24, r26
    2d5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	9f 8f       	std	Y+31, r25	; 0x1f
    2d66:	8e 8f       	std	Y+30, r24	; 0x1e
    2d68:	0f c0       	rjmp	.+30     	; 0x2d88 <LCD_write_command_4bit+0x5dc>
    2d6a:	88 ec       	ldi	r24, 0xC8	; 200
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	9d 8f       	std	Y+29, r25	; 0x1d
    2d70:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d72:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d74:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	f1 f7       	brne	.-4      	; 0x2d76 <LCD_write_command_4bit+0x5ca>
    2d7a:	9d 8f       	std	Y+29, r25	; 0x1d
    2d7c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d80:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d82:	01 97       	sbiw	r24, 0x01	; 1
    2d84:	9f 8f       	std	Y+31, r25	; 0x1f
    2d86:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d88:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d8a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d8c:	00 97       	sbiw	r24, 0x00	; 0
    2d8e:	69 f7       	brne	.-38     	; 0x2d6a <LCD_write_command_4bit+0x5be>
    2d90:	24 c0       	rjmp	.+72     	; 0x2dda <LCD_write_command_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d92:	68 a1       	ldd	r22, Y+32	; 0x20
    2d94:	79 a1       	ldd	r23, Y+33	; 0x21
    2d96:	8a a1       	ldd	r24, Y+34	; 0x22
    2d98:	9b a1       	ldd	r25, Y+35	; 0x23
    2d9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	9f 8f       	std	Y+31, r25	; 0x1f
    2da4:	8e 8f       	std	Y+30, r24	; 0x1e
    2da6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2da8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2daa:	9b 8f       	std	Y+27, r25	; 0x1b
    2dac:	8a 8f       	std	Y+26, r24	; 0x1a
    2dae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2db0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2db2:	01 97       	sbiw	r24, 0x01	; 1
    2db4:	f1 f7       	brne	.-4      	; 0x2db2 <LCD_write_command_4bit+0x606>
    2db6:	9b 8f       	std	Y+27, r25	; 0x1b
    2db8:	8a 8f       	std	Y+26, r24	; 0x1a
    2dba:	0f c0       	rjmp	.+30     	; 0x2dda <LCD_write_command_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2dbc:	69 a5       	ldd	r22, Y+41	; 0x29
    2dbe:	7a a5       	ldd	r23, Y+42	; 0x2a
    2dc0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dc2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	88 a7       	std	Y+40, r24	; 0x28
    2dce:	88 a5       	ldd	r24, Y+40	; 0x28
    2dd0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2dd2:	89 8d       	ldd	r24, Y+25	; 0x19
    2dd4:	8a 95       	dec	r24
    2dd6:	f1 f7       	brne	.-4      	; 0x2dd4 <LCD_write_command_4bit+0x628>
    2dd8:	89 8f       	std	Y+25, r24	; 0x19
	//delay to smooth things out
	_delay_us(10);
	//enable HIGH
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	60 e0       	ldi	r22, 0x00	; 0
    2dde:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <DIO_void_set_pin>
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	a0 e8       	ldi	r26, 0x80	; 128
    2de8:	bf e3       	ldi	r27, 0x3F	; 63
    2dea:	8d 8b       	std	Y+21, r24	; 0x15
    2dec:	9e 8b       	std	Y+22, r25	; 0x16
    2dee:	af 8b       	std	Y+23, r26	; 0x17
    2df0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2df2:	6d 89       	ldd	r22, Y+21	; 0x15
    2df4:	7e 89       	ldd	r23, Y+22	; 0x16
    2df6:	8f 89       	ldd	r24, Y+23	; 0x17
    2df8:	98 8d       	ldd	r25, Y+24	; 0x18
    2dfa:	2b ea       	ldi	r18, 0xAB	; 171
    2dfc:	3a ea       	ldi	r19, 0xAA	; 170
    2dfe:	4a e2       	ldi	r20, 0x2A	; 42
    2e00:	50 e4       	ldi	r21, 0x40	; 64
    2e02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	89 8b       	std	Y+17, r24	; 0x11
    2e0c:	9a 8b       	std	Y+18, r25	; 0x12
    2e0e:	ab 8b       	std	Y+19, r26	; 0x13
    2e10:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2e12:	69 89       	ldd	r22, Y+17	; 0x11
    2e14:	7a 89       	ldd	r23, Y+18	; 0x12
    2e16:	8b 89       	ldd	r24, Y+19	; 0x13
    2e18:	9c 89       	ldd	r25, Y+20	; 0x14
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	40 e8       	ldi	r20, 0x80	; 128
    2e20:	5f e3       	ldi	r21, 0x3F	; 63
    2e22:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2e26:	88 23       	and	r24, r24
    2e28:	1c f4       	brge	.+6      	; 0x2e30 <LCD_write_command_4bit+0x684>
		__ticks = 1;
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	88 8b       	std	Y+16, r24	; 0x10
    2e2e:	91 c0       	rjmp	.+290    	; 0x2f52 <LCD_write_command_4bit+0x7a6>
	else if (__tmp > 255)
    2e30:	69 89       	ldd	r22, Y+17	; 0x11
    2e32:	7a 89       	ldd	r23, Y+18	; 0x12
    2e34:	8b 89       	ldd	r24, Y+19	; 0x13
    2e36:	9c 89       	ldd	r25, Y+20	; 0x14
    2e38:	20 e0       	ldi	r18, 0x00	; 0
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	4f e7       	ldi	r20, 0x7F	; 127
    2e3e:	53 e4       	ldi	r21, 0x43	; 67
    2e40:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2e44:	18 16       	cp	r1, r24
    2e46:	0c f0       	brlt	.+2      	; 0x2e4a <LCD_write_command_4bit+0x69e>
    2e48:	7b c0       	rjmp	.+246    	; 0x2f40 <LCD_write_command_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    2e4a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e4c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e50:	98 8d       	ldd	r25, Y+24	; 0x18
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	4a e7       	ldi	r20, 0x7A	; 122
    2e58:	54 e4       	ldi	r21, 0x44	; 68
    2e5a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	8c 87       	std	Y+12, r24	; 0x0c
    2e64:	9d 87       	std	Y+13, r25	; 0x0d
    2e66:	ae 87       	std	Y+14, r26	; 0x0e
    2e68:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e6a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e6c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e70:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	4a ef       	ldi	r20, 0xFA	; 250
    2e78:	54 e4       	ldi	r21, 0x44	; 68
    2e7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	88 87       	std	Y+8, r24	; 0x08
    2e84:	99 87       	std	Y+9, r25	; 0x09
    2e86:	aa 87       	std	Y+10, r26	; 0x0a
    2e88:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2e8a:	68 85       	ldd	r22, Y+8	; 0x08
    2e8c:	79 85       	ldd	r23, Y+9	; 0x09
    2e8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e90:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	40 e8       	ldi	r20, 0x80	; 128
    2e98:	5f e3       	ldi	r21, 0x3F	; 63
    2e9a:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2e9e:	88 23       	and	r24, r24
    2ea0:	2c f4       	brge	.+10     	; 0x2eac <LCD_write_command_4bit+0x700>
		__ticks = 1;
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	9f 83       	std	Y+7, r25	; 0x07
    2ea8:	8e 83       	std	Y+6, r24	; 0x06
    2eaa:	3f c0       	rjmp	.+126    	; 0x2f2a <LCD_write_command_4bit+0x77e>
	else if (__tmp > 65535)
    2eac:	68 85       	ldd	r22, Y+8	; 0x08
    2eae:	79 85       	ldd	r23, Y+9	; 0x09
    2eb0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2eb2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	3f ef       	ldi	r19, 0xFF	; 255
    2eb8:	4f e7       	ldi	r20, 0x7F	; 127
    2eba:	57 e4       	ldi	r21, 0x47	; 71
    2ebc:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2ec0:	18 16       	cp	r1, r24
    2ec2:	4c f5       	brge	.+82     	; 0x2f16 <LCD_write_command_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec4:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ec6:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ec8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2eca:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e2       	ldi	r20, 0x20	; 32
    2ed2:	51 e4       	ldi	r21, 0x41	; 65
    2ed4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	bc 01       	movw	r22, r24
    2ede:	cd 01       	movw	r24, r26
    2ee0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	9f 83       	std	Y+7, r25	; 0x07
    2eea:	8e 83       	std	Y+6, r24	; 0x06
    2eec:	0f c0       	rjmp	.+30     	; 0x2f0c <LCD_write_command_4bit+0x760>
    2eee:	88 ec       	ldi	r24, 0xC8	; 200
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	9d 83       	std	Y+5, r25	; 0x05
    2ef4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ef6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef8:	9d 81       	ldd	r25, Y+5	; 0x05
    2efa:	01 97       	sbiw	r24, 0x01	; 1
    2efc:	f1 f7       	brne	.-4      	; 0x2efa <LCD_write_command_4bit+0x74e>
    2efe:	9d 83       	std	Y+5, r25	; 0x05
    2f00:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f02:	8e 81       	ldd	r24, Y+6	; 0x06
    2f04:	9f 81       	ldd	r25, Y+7	; 0x07
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	9f 83       	std	Y+7, r25	; 0x07
    2f0a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f0e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f10:	00 97       	sbiw	r24, 0x00	; 0
    2f12:	69 f7       	brne	.-38     	; 0x2eee <LCD_write_command_4bit+0x742>
    2f14:	24 c0       	rjmp	.+72     	; 0x2f5e <LCD_write_command_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f16:	68 85       	ldd	r22, Y+8	; 0x08
    2f18:	79 85       	ldd	r23, Y+9	; 0x09
    2f1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	9f 83       	std	Y+7, r25	; 0x07
    2f28:	8e 83       	std	Y+6, r24	; 0x06
    2f2a:	8e 81       	ldd	r24, Y+6	; 0x06
    2f2c:	9f 81       	ldd	r25, Y+7	; 0x07
    2f2e:	9b 83       	std	Y+3, r25	; 0x03
    2f30:	8a 83       	std	Y+2, r24	; 0x02
    2f32:	8a 81       	ldd	r24, Y+2	; 0x02
    2f34:	9b 81       	ldd	r25, Y+3	; 0x03
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	f1 f7       	brne	.-4      	; 0x2f36 <LCD_write_command_4bit+0x78a>
    2f3a:	9b 83       	std	Y+3, r25	; 0x03
    2f3c:	8a 83       	std	Y+2, r24	; 0x02
    2f3e:	0f c0       	rjmp	.+30     	; 0x2f5e <LCD_write_command_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f40:	69 89       	ldd	r22, Y+17	; 0x11
    2f42:	7a 89       	ldd	r23, Y+18	; 0x12
    2f44:	8b 89       	ldd	r24, Y+19	; 0x13
    2f46:	9c 89       	ldd	r25, Y+20	; 0x14
    2f48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	88 8b       	std	Y+16, r24	; 0x10
    2f52:	88 89       	ldd	r24, Y+16	; 0x10
    2f54:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f56:	89 81       	ldd	r24, Y+1	; 0x01
    2f58:	8a 95       	dec	r24
    2f5a:	f1 f7       	brne	.-4      	; 0x2f58 <LCD_write_command_4bit+0x7ac>
    2f5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	//send lower nibble
	for(u8 i = 4; i < 8; i++){
    2f5e:	fe 01       	movw	r30, r28
    2f60:	ef 59       	subi	r30, 0x9F	; 159
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	84 e0       	ldi	r24, 0x04	; 4
    2f66:	80 83       	st	Z, r24
    2f68:	27 c0       	rjmp	.+78     	; 0x2fb8 <LCD_write_command_4bit+0x80c>

			DIO_void_assign_pin(lcd_data_port, i, get_Bit(copy_command_4bit,i-4));
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	ed 59       	subi	r30, 0x9D	; 157
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	80 81       	ld	r24, Z
    2f72:	28 2f       	mov	r18, r24
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	fe 01       	movw	r30, r28
    2f78:	ef 59       	subi	r30, 0x9F	; 159
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	80 81       	ld	r24, Z
    2f7e:	88 2f       	mov	r24, r24
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	04 97       	sbiw	r24, 0x04	; 4
    2f84:	f9 01       	movw	r30, r18
    2f86:	02 c0       	rjmp	.+4      	; 0x2f8c <LCD_write_command_4bit+0x7e0>
    2f88:	f5 95       	asr	r31
    2f8a:	e7 95       	ror	r30
    2f8c:	8a 95       	dec	r24
    2f8e:	e2 f7       	brpl	.-8      	; 0x2f88 <LCD_write_command_4bit+0x7dc>
    2f90:	cf 01       	movw	r24, r30
    2f92:	98 2f       	mov	r25, r24
    2f94:	91 70       	andi	r25, 0x01	; 1
    2f96:	fe 01       	movw	r30, r28
    2f98:	ef 59       	subi	r30, 0x9F	; 159
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	60 81       	ld	r22, Z
    2fa0:	49 2f       	mov	r20, r25
    2fa2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_void_assign_pin>
	_delay_us(10);
	//enable HIGH
	DIO_void_set_pin(lcd_control_port, lcd_enable);
	_delay_us(1);
	//send lower nibble
	for(u8 i = 4; i < 8; i++){
    2fa6:	de 01       	movw	r26, r28
    2fa8:	af 59       	subi	r26, 0x9F	; 159
    2faa:	bf 4f       	sbci	r27, 0xFF	; 255
    2fac:	fe 01       	movw	r30, r28
    2fae:	ef 59       	subi	r30, 0x9F	; 159
    2fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb2:	80 81       	ld	r24, Z
    2fb4:	8f 5f       	subi	r24, 0xFF	; 255
    2fb6:	8c 93       	st	X, r24
    2fb8:	fe 01       	movw	r30, r28
    2fba:	ef 59       	subi	r30, 0x9F	; 159
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	80 81       	ld	r24, Z
    2fc0:	88 30       	cpi	r24, 0x08	; 8
    2fc2:	98 f2       	brcs	.-90     	; 0x2f6a <LCD_write_command_4bit+0x7be>
			// the for loop assigns the data value in the function input
			// by starting by the least significant 4 bits b0-b3

		}
	//enable low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	60 e0       	ldi	r22, 0x00	; 0
    2fc8:	0e 94 21 09 	call	0x1242	; 0x1242 <DIO_void_clear_pin>


}
    2fcc:	cd 59       	subi	r28, 0x9D	; 157
    2fce:	df 4f       	sbci	r29, 0xFF	; 255
    2fd0:	0f b6       	in	r0, 0x3f	; 63
    2fd2:	f8 94       	cli
    2fd4:	de bf       	out	0x3e, r29	; 62
    2fd6:	0f be       	out	0x3f, r0	; 63
    2fd8:	cd bf       	out	0x3d, r28	; 61
    2fda:	cf 91       	pop	r28
    2fdc:	df 91       	pop	r29
    2fde:	1f 91       	pop	r17
    2fe0:	0f 91       	pop	r16
    2fe2:	08 95       	ret

00002fe4 <LCD_function_Set_4bit>:

static void LCD_function_Set_4bit(){
    2fe4:	0f 93       	push	r16
    2fe6:	1f 93       	push	r17
    2fe8:	df 93       	push	r29
    2fea:	cf 93       	push	r28
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
    2ff0:	cb 5a       	subi	r28, 0xAB	; 171
    2ff2:	d0 40       	sbci	r29, 0x00	; 0
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	f8 94       	cli
    2ff8:	de bf       	out	0x3e, r29	; 62
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	cd bf       	out	0x3d, r28	; 61
			 *
			 */



	DIO_void_clear_pin(lcd_control_port, lcd_RS);// RS:0 to select instruction register
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	62 e0       	ldi	r22, 0x02	; 2
    3002:	0e 94 21 09 	call	0x1242	; 0x1242 <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_control_port, lcd_RW);// RW:0 write operation
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	61 e0       	ldi	r22, 0x01	; 1
    300a:	0e 94 21 09 	call	0x1242	; 0x1242 <DIO_void_clear_pin>
    300e:	fe 01       	movw	r30, r28
    3010:	eb 55       	subi	r30, 0x5B	; 91
    3012:	ff 4f       	sbci	r31, 0xFF	; 255
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	a0 e8       	ldi	r26, 0x80	; 128
    301a:	bf e3       	ldi	r27, 0x3F	; 63
    301c:	80 83       	st	Z, r24
    301e:	91 83       	std	Z+1, r25	; 0x01
    3020:	a2 83       	std	Z+2, r26	; 0x02
    3022:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3024:	8e 01       	movw	r16, r28
    3026:	0f 55       	subi	r16, 0x5F	; 95
    3028:	1f 4f       	sbci	r17, 0xFF	; 255
    302a:	fe 01       	movw	r30, r28
    302c:	eb 55       	subi	r30, 0x5B	; 91
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	60 81       	ld	r22, Z
    3032:	71 81       	ldd	r23, Z+1	; 0x01
    3034:	82 81       	ldd	r24, Z+2	; 0x02
    3036:	93 81       	ldd	r25, Z+3	; 0x03
    3038:	2b ea       	ldi	r18, 0xAB	; 171
    303a:	3a ea       	ldi	r19, 0xAA	; 170
    303c:	4a e2       	ldi	r20, 0x2A	; 42
    303e:	50 e4       	ldi	r21, 0x40	; 64
    3040:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	f8 01       	movw	r30, r16
    304a:	80 83       	st	Z, r24
    304c:	91 83       	std	Z+1, r25	; 0x01
    304e:	a2 83       	std	Z+2, r26	; 0x02
    3050:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3052:	fe 01       	movw	r30, r28
    3054:	ef 55       	subi	r30, 0x5F	; 95
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	60 81       	ld	r22, Z
    305a:	71 81       	ldd	r23, Z+1	; 0x01
    305c:	82 81       	ldd	r24, Z+2	; 0x02
    305e:	93 81       	ldd	r25, Z+3	; 0x03
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	40 e8       	ldi	r20, 0x80	; 128
    3066:	5f e3       	ldi	r21, 0x3F	; 63
    3068:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    306c:	88 23       	and	r24, r24
    306e:	34 f4       	brge	.+12     	; 0x307c <LCD_function_Set_4bit+0x98>
		__ticks = 1;
    3070:	fe 01       	movw	r30, r28
    3072:	e0 56       	subi	r30, 0x60	; 96
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	80 83       	st	Z, r24
    307a:	e0 c0       	rjmp	.+448    	; 0x323c <LCD_function_Set_4bit+0x258>
	else if (__tmp > 255)
    307c:	fe 01       	movw	r30, r28
    307e:	ef 55       	subi	r30, 0x5F	; 95
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	60 81       	ld	r22, Z
    3084:	71 81       	ldd	r23, Z+1	; 0x01
    3086:	82 81       	ldd	r24, Z+2	; 0x02
    3088:	93 81       	ldd	r25, Z+3	; 0x03
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	4f e7       	ldi	r20, 0x7F	; 127
    3090:	53 e4       	ldi	r21, 0x43	; 67
    3092:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    3096:	18 16       	cp	r1, r24
    3098:	0c f0       	brlt	.+2      	; 0x309c <LCD_function_Set_4bit+0xb8>
    309a:	c0 c0       	rjmp	.+384    	; 0x321c <LCD_function_Set_4bit+0x238>
	{
		_delay_ms(__us / 1000.0);
    309c:	fe 01       	movw	r30, r28
    309e:	eb 55       	subi	r30, 0x5B	; 91
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	60 81       	ld	r22, Z
    30a4:	71 81       	ldd	r23, Z+1	; 0x01
    30a6:	82 81       	ldd	r24, Z+2	; 0x02
    30a8:	93 81       	ldd	r25, Z+3	; 0x03
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	4a e7       	ldi	r20, 0x7A	; 122
    30b0:	54 e4       	ldi	r21, 0x44	; 68
    30b2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	fe 01       	movw	r30, r28
    30bc:	e4 56       	subi	r30, 0x64	; 100
    30be:	ff 4f       	sbci	r31, 0xFF	; 255
    30c0:	80 83       	st	Z, r24
    30c2:	91 83       	std	Z+1, r25	; 0x01
    30c4:	a2 83       	std	Z+2, r26	; 0x02
    30c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c8:	8e 01       	movw	r16, r28
    30ca:	08 56       	subi	r16, 0x68	; 104
    30cc:	1f 4f       	sbci	r17, 0xFF	; 255
    30ce:	fe 01       	movw	r30, r28
    30d0:	e4 56       	subi	r30, 0x64	; 100
    30d2:	ff 4f       	sbci	r31, 0xFF	; 255
    30d4:	60 81       	ld	r22, Z
    30d6:	71 81       	ldd	r23, Z+1	; 0x01
    30d8:	82 81       	ldd	r24, Z+2	; 0x02
    30da:	93 81       	ldd	r25, Z+3	; 0x03
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	4a ef       	ldi	r20, 0xFA	; 250
    30e2:	54 e4       	ldi	r21, 0x44	; 68
    30e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	f8 01       	movw	r30, r16
    30ee:	80 83       	st	Z, r24
    30f0:	91 83       	std	Z+1, r25	; 0x01
    30f2:	a2 83       	std	Z+2, r26	; 0x02
    30f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30f6:	fe 01       	movw	r30, r28
    30f8:	e8 56       	subi	r30, 0x68	; 104
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	60 81       	ld	r22, Z
    30fe:	71 81       	ldd	r23, Z+1	; 0x01
    3100:	82 81       	ldd	r24, Z+2	; 0x02
    3102:	93 81       	ldd	r25, Z+3	; 0x03
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	40 e8       	ldi	r20, 0x80	; 128
    310a:	5f e3       	ldi	r21, 0x3F	; 63
    310c:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    3110:	88 23       	and	r24, r24
    3112:	44 f4       	brge	.+16     	; 0x3124 <LCD_function_Set_4bit+0x140>
		__ticks = 1;
    3114:	fe 01       	movw	r30, r28
    3116:	ea 56       	subi	r30, 0x6A	; 106
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	91 83       	std	Z+1, r25	; 0x01
    3120:	80 83       	st	Z, r24
    3122:	64 c0       	rjmp	.+200    	; 0x31ec <LCD_function_Set_4bit+0x208>
	else if (__tmp > 65535)
    3124:	fe 01       	movw	r30, r28
    3126:	e8 56       	subi	r30, 0x68	; 104
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	60 81       	ld	r22, Z
    312c:	71 81       	ldd	r23, Z+1	; 0x01
    312e:	82 81       	ldd	r24, Z+2	; 0x02
    3130:	93 81       	ldd	r25, Z+3	; 0x03
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	3f ef       	ldi	r19, 0xFF	; 255
    3136:	4f e7       	ldi	r20, 0x7F	; 127
    3138:	57 e4       	ldi	r21, 0x47	; 71
    313a:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    313e:	18 16       	cp	r1, r24
    3140:	0c f0       	brlt	.+2      	; 0x3144 <LCD_function_Set_4bit+0x160>
    3142:	43 c0       	rjmp	.+134    	; 0x31ca <LCD_function_Set_4bit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3144:	fe 01       	movw	r30, r28
    3146:	e4 56       	subi	r30, 0x64	; 100
    3148:	ff 4f       	sbci	r31, 0xFF	; 255
    314a:	60 81       	ld	r22, Z
    314c:	71 81       	ldd	r23, Z+1	; 0x01
    314e:	82 81       	ldd	r24, Z+2	; 0x02
    3150:	93 81       	ldd	r25, Z+3	; 0x03
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	40 e2       	ldi	r20, 0x20	; 32
    3158:	51 e4       	ldi	r21, 0x41	; 65
    315a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	8e 01       	movw	r16, r28
    3164:	0a 56       	subi	r16, 0x6A	; 106
    3166:	1f 4f       	sbci	r17, 0xFF	; 255
    3168:	bc 01       	movw	r22, r24
    316a:	cd 01       	movw	r24, r26
    316c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	f8 01       	movw	r30, r16
    3176:	91 83       	std	Z+1, r25	; 0x01
    3178:	80 83       	st	Z, r24
    317a:	1f c0       	rjmp	.+62     	; 0x31ba <LCD_function_Set_4bit+0x1d6>
    317c:	fe 01       	movw	r30, r28
    317e:	ec 56       	subi	r30, 0x6C	; 108
    3180:	ff 4f       	sbci	r31, 0xFF	; 255
    3182:	88 ec       	ldi	r24, 0xC8	; 200
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	91 83       	std	Z+1, r25	; 0x01
    3188:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    318a:	fe 01       	movw	r30, r28
    318c:	ec 56       	subi	r30, 0x6C	; 108
    318e:	ff 4f       	sbci	r31, 0xFF	; 255
    3190:	80 81       	ld	r24, Z
    3192:	91 81       	ldd	r25, Z+1	; 0x01
    3194:	01 97       	sbiw	r24, 0x01	; 1
    3196:	f1 f7       	brne	.-4      	; 0x3194 <LCD_function_Set_4bit+0x1b0>
    3198:	fe 01       	movw	r30, r28
    319a:	ec 56       	subi	r30, 0x6C	; 108
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	91 83       	std	Z+1, r25	; 0x01
    31a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a2:	de 01       	movw	r26, r28
    31a4:	aa 56       	subi	r26, 0x6A	; 106
    31a6:	bf 4f       	sbci	r27, 0xFF	; 255
    31a8:	fe 01       	movw	r30, r28
    31aa:	ea 56       	subi	r30, 0x6A	; 106
    31ac:	ff 4f       	sbci	r31, 0xFF	; 255
    31ae:	80 81       	ld	r24, Z
    31b0:	91 81       	ldd	r25, Z+1	; 0x01
    31b2:	01 97       	sbiw	r24, 0x01	; 1
    31b4:	11 96       	adiw	r26, 0x01	; 1
    31b6:	9c 93       	st	X, r25
    31b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ba:	fe 01       	movw	r30, r28
    31bc:	ea 56       	subi	r30, 0x6A	; 106
    31be:	ff 4f       	sbci	r31, 0xFF	; 255
    31c0:	80 81       	ld	r24, Z
    31c2:	91 81       	ldd	r25, Z+1	; 0x01
    31c4:	00 97       	sbiw	r24, 0x00	; 0
    31c6:	d1 f6       	brne	.-76     	; 0x317c <LCD_function_Set_4bit+0x198>
    31c8:	4b c0       	rjmp	.+150    	; 0x3260 <LCD_function_Set_4bit+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ca:	8e 01       	movw	r16, r28
    31cc:	0a 56       	subi	r16, 0x6A	; 106
    31ce:	1f 4f       	sbci	r17, 0xFF	; 255
    31d0:	fe 01       	movw	r30, r28
    31d2:	e8 56       	subi	r30, 0x68	; 104
    31d4:	ff 4f       	sbci	r31, 0xFF	; 255
    31d6:	60 81       	ld	r22, Z
    31d8:	71 81       	ldd	r23, Z+1	; 0x01
    31da:	82 81       	ldd	r24, Z+2	; 0x02
    31dc:	93 81       	ldd	r25, Z+3	; 0x03
    31de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	f8 01       	movw	r30, r16
    31e8:	91 83       	std	Z+1, r25	; 0x01
    31ea:	80 83       	st	Z, r24
    31ec:	de 01       	movw	r26, r28
    31ee:	ae 56       	subi	r26, 0x6E	; 110
    31f0:	bf 4f       	sbci	r27, 0xFF	; 255
    31f2:	fe 01       	movw	r30, r28
    31f4:	ea 56       	subi	r30, 0x6A	; 106
    31f6:	ff 4f       	sbci	r31, 0xFF	; 255
    31f8:	80 81       	ld	r24, Z
    31fa:	91 81       	ldd	r25, Z+1	; 0x01
    31fc:	11 96       	adiw	r26, 0x01	; 1
    31fe:	9c 93       	st	X, r25
    3200:	8e 93       	st	-X, r24
    3202:	fe 01       	movw	r30, r28
    3204:	ee 56       	subi	r30, 0x6E	; 110
    3206:	ff 4f       	sbci	r31, 0xFF	; 255
    3208:	80 81       	ld	r24, Z
    320a:	91 81       	ldd	r25, Z+1	; 0x01
    320c:	01 97       	sbiw	r24, 0x01	; 1
    320e:	f1 f7       	brne	.-4      	; 0x320c <LCD_function_Set_4bit+0x228>
    3210:	fe 01       	movw	r30, r28
    3212:	ee 56       	subi	r30, 0x6E	; 110
    3214:	ff 4f       	sbci	r31, 0xFF	; 255
    3216:	91 83       	std	Z+1, r25	; 0x01
    3218:	80 83       	st	Z, r24
    321a:	22 c0       	rjmp	.+68     	; 0x3260 <LCD_function_Set_4bit+0x27c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    321c:	8e 01       	movw	r16, r28
    321e:	00 56       	subi	r16, 0x60	; 96
    3220:	1f 4f       	sbci	r17, 0xFF	; 255
    3222:	fe 01       	movw	r30, r28
    3224:	ef 55       	subi	r30, 0x5F	; 95
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	60 81       	ld	r22, Z
    322a:	71 81       	ldd	r23, Z+1	; 0x01
    322c:	82 81       	ldd	r24, Z+2	; 0x02
    322e:	93 81       	ldd	r25, Z+3	; 0x03
    3230:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	f8 01       	movw	r30, r16
    323a:	80 83       	st	Z, r24
    323c:	de 01       	movw	r26, r28
    323e:	af 56       	subi	r26, 0x6F	; 111
    3240:	bf 4f       	sbci	r27, 0xFF	; 255
    3242:	fe 01       	movw	r30, r28
    3244:	e0 56       	subi	r30, 0x60	; 96
    3246:	ff 4f       	sbci	r31, 0xFF	; 255
    3248:	80 81       	ld	r24, Z
    324a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    324c:	fe 01       	movw	r30, r28
    324e:	ef 56       	subi	r30, 0x6F	; 111
    3250:	ff 4f       	sbci	r31, 0xFF	; 255
    3252:	80 81       	ld	r24, Z
    3254:	8a 95       	dec	r24
    3256:	f1 f7       	brne	.-4      	; 0x3254 <LCD_function_Set_4bit+0x270>
    3258:	fe 01       	movw	r30, r28
    325a:	ef 56       	subi	r30, 0x6F	; 111
    325c:	ff 4f       	sbci	r31, 0xFF	; 255
    325e:	80 83       	st	Z, r24
	_delay_us(1);
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	60 e0       	ldi	r22, 0x00	; 0
    3264:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <DIO_void_set_pin>
    3268:	fe 01       	movw	r30, r28
    326a:	e3 57       	subi	r30, 0x73	; 115
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	80 e0       	ldi	r24, 0x00	; 0
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	a0 e8       	ldi	r26, 0x80	; 128
    3274:	bf e3       	ldi	r27, 0x3F	; 63
    3276:	80 83       	st	Z, r24
    3278:	91 83       	std	Z+1, r25	; 0x01
    327a:	a2 83       	std	Z+2, r26	; 0x02
    327c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    327e:	8e 01       	movw	r16, r28
    3280:	07 57       	subi	r16, 0x77	; 119
    3282:	1f 4f       	sbci	r17, 0xFF	; 255
    3284:	fe 01       	movw	r30, r28
    3286:	e3 57       	subi	r30, 0x73	; 115
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	60 81       	ld	r22, Z
    328c:	71 81       	ldd	r23, Z+1	; 0x01
    328e:	82 81       	ldd	r24, Z+2	; 0x02
    3290:	93 81       	ldd	r25, Z+3	; 0x03
    3292:	2b ea       	ldi	r18, 0xAB	; 171
    3294:	3a ea       	ldi	r19, 0xAA	; 170
    3296:	4a e2       	ldi	r20, 0x2A	; 42
    3298:	50 e4       	ldi	r21, 0x40	; 64
    329a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    329e:	dc 01       	movw	r26, r24
    32a0:	cb 01       	movw	r24, r22
    32a2:	f8 01       	movw	r30, r16
    32a4:	80 83       	st	Z, r24
    32a6:	91 83       	std	Z+1, r25	; 0x01
    32a8:	a2 83       	std	Z+2, r26	; 0x02
    32aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32ac:	fe 01       	movw	r30, r28
    32ae:	e7 57       	subi	r30, 0x77	; 119
    32b0:	ff 4f       	sbci	r31, 0xFF	; 255
    32b2:	60 81       	ld	r22, Z
    32b4:	71 81       	ldd	r23, Z+1	; 0x01
    32b6:	82 81       	ldd	r24, Z+2	; 0x02
    32b8:	93 81       	ldd	r25, Z+3	; 0x03
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	40 e8       	ldi	r20, 0x80	; 128
    32c0:	5f e3       	ldi	r21, 0x3F	; 63
    32c2:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    32c6:	88 23       	and	r24, r24
    32c8:	34 f4       	brge	.+12     	; 0x32d6 <LCD_function_Set_4bit+0x2f2>
		__ticks = 1;
    32ca:	fe 01       	movw	r30, r28
    32cc:	e8 57       	subi	r30, 0x78	; 120
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	80 83       	st	Z, r24
    32d4:	e0 c0       	rjmp	.+448    	; 0x3496 <LCD_function_Set_4bit+0x4b2>
	else if (__tmp > 255)
    32d6:	fe 01       	movw	r30, r28
    32d8:	e7 57       	subi	r30, 0x77	; 119
    32da:	ff 4f       	sbci	r31, 0xFF	; 255
    32dc:	60 81       	ld	r22, Z
    32de:	71 81       	ldd	r23, Z+1	; 0x01
    32e0:	82 81       	ldd	r24, Z+2	; 0x02
    32e2:	93 81       	ldd	r25, Z+3	; 0x03
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	4f e7       	ldi	r20, 0x7F	; 127
    32ea:	53 e4       	ldi	r21, 0x43	; 67
    32ec:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    32f0:	18 16       	cp	r1, r24
    32f2:	0c f0       	brlt	.+2      	; 0x32f6 <LCD_function_Set_4bit+0x312>
    32f4:	c0 c0       	rjmp	.+384    	; 0x3476 <LCD_function_Set_4bit+0x492>
	{
		_delay_ms(__us / 1000.0);
    32f6:	fe 01       	movw	r30, r28
    32f8:	e3 57       	subi	r30, 0x73	; 115
    32fa:	ff 4f       	sbci	r31, 0xFF	; 255
    32fc:	60 81       	ld	r22, Z
    32fe:	71 81       	ldd	r23, Z+1	; 0x01
    3300:	82 81       	ldd	r24, Z+2	; 0x02
    3302:	93 81       	ldd	r25, Z+3	; 0x03
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	4a e7       	ldi	r20, 0x7A	; 122
    330a:	54 e4       	ldi	r21, 0x44	; 68
    330c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	fe 01       	movw	r30, r28
    3316:	ec 57       	subi	r30, 0x7C	; 124
    3318:	ff 4f       	sbci	r31, 0xFF	; 255
    331a:	80 83       	st	Z, r24
    331c:	91 83       	std	Z+1, r25	; 0x01
    331e:	a2 83       	std	Z+2, r26	; 0x02
    3320:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3322:	8e 01       	movw	r16, r28
    3324:	00 58       	subi	r16, 0x80	; 128
    3326:	1f 4f       	sbci	r17, 0xFF	; 255
    3328:	fe 01       	movw	r30, r28
    332a:	ec 57       	subi	r30, 0x7C	; 124
    332c:	ff 4f       	sbci	r31, 0xFF	; 255
    332e:	60 81       	ld	r22, Z
    3330:	71 81       	ldd	r23, Z+1	; 0x01
    3332:	82 81       	ldd	r24, Z+2	; 0x02
    3334:	93 81       	ldd	r25, Z+3	; 0x03
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	4a ef       	ldi	r20, 0xFA	; 250
    333c:	54 e4       	ldi	r21, 0x44	; 68
    333e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	f8 01       	movw	r30, r16
    3348:	80 83       	st	Z, r24
    334a:	91 83       	std	Z+1, r25	; 0x01
    334c:	a2 83       	std	Z+2, r26	; 0x02
    334e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3350:	fe 01       	movw	r30, r28
    3352:	e0 58       	subi	r30, 0x80	; 128
    3354:	ff 4f       	sbci	r31, 0xFF	; 255
    3356:	60 81       	ld	r22, Z
    3358:	71 81       	ldd	r23, Z+1	; 0x01
    335a:	82 81       	ldd	r24, Z+2	; 0x02
    335c:	93 81       	ldd	r25, Z+3	; 0x03
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	40 e8       	ldi	r20, 0x80	; 128
    3364:	5f e3       	ldi	r21, 0x3F	; 63
    3366:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    336a:	88 23       	and	r24, r24
    336c:	44 f4       	brge	.+16     	; 0x337e <LCD_function_Set_4bit+0x39a>
		__ticks = 1;
    336e:	fe 01       	movw	r30, r28
    3370:	e2 58       	subi	r30, 0x82	; 130
    3372:	ff 4f       	sbci	r31, 0xFF	; 255
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	91 83       	std	Z+1, r25	; 0x01
    337a:	80 83       	st	Z, r24
    337c:	64 c0       	rjmp	.+200    	; 0x3446 <LCD_function_Set_4bit+0x462>
	else if (__tmp > 65535)
    337e:	fe 01       	movw	r30, r28
    3380:	e0 58       	subi	r30, 0x80	; 128
    3382:	ff 4f       	sbci	r31, 0xFF	; 255
    3384:	60 81       	ld	r22, Z
    3386:	71 81       	ldd	r23, Z+1	; 0x01
    3388:	82 81       	ldd	r24, Z+2	; 0x02
    338a:	93 81       	ldd	r25, Z+3	; 0x03
    338c:	20 e0       	ldi	r18, 0x00	; 0
    338e:	3f ef       	ldi	r19, 0xFF	; 255
    3390:	4f e7       	ldi	r20, 0x7F	; 127
    3392:	57 e4       	ldi	r21, 0x47	; 71
    3394:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    3398:	18 16       	cp	r1, r24
    339a:	0c f0       	brlt	.+2      	; 0x339e <LCD_function_Set_4bit+0x3ba>
    339c:	43 c0       	rjmp	.+134    	; 0x3424 <LCD_function_Set_4bit+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339e:	fe 01       	movw	r30, r28
    33a0:	ec 57       	subi	r30, 0x7C	; 124
    33a2:	ff 4f       	sbci	r31, 0xFF	; 255
    33a4:	60 81       	ld	r22, Z
    33a6:	71 81       	ldd	r23, Z+1	; 0x01
    33a8:	82 81       	ldd	r24, Z+2	; 0x02
    33aa:	93 81       	ldd	r25, Z+3	; 0x03
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	40 e2       	ldi	r20, 0x20	; 32
    33b2:	51 e4       	ldi	r21, 0x41	; 65
    33b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	8e 01       	movw	r16, r28
    33be:	02 58       	subi	r16, 0x82	; 130
    33c0:	1f 4f       	sbci	r17, 0xFF	; 255
    33c2:	bc 01       	movw	r22, r24
    33c4:	cd 01       	movw	r24, r26
    33c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33ca:	dc 01       	movw	r26, r24
    33cc:	cb 01       	movw	r24, r22
    33ce:	f8 01       	movw	r30, r16
    33d0:	91 83       	std	Z+1, r25	; 0x01
    33d2:	80 83       	st	Z, r24
    33d4:	1f c0       	rjmp	.+62     	; 0x3414 <LCD_function_Set_4bit+0x430>
    33d6:	fe 01       	movw	r30, r28
    33d8:	e4 58       	subi	r30, 0x84	; 132
    33da:	ff 4f       	sbci	r31, 0xFF	; 255
    33dc:	88 ec       	ldi	r24, 0xC8	; 200
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	91 83       	std	Z+1, r25	; 0x01
    33e2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33e4:	fe 01       	movw	r30, r28
    33e6:	e4 58       	subi	r30, 0x84	; 132
    33e8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ea:	80 81       	ld	r24, Z
    33ec:	91 81       	ldd	r25, Z+1	; 0x01
    33ee:	01 97       	sbiw	r24, 0x01	; 1
    33f0:	f1 f7       	brne	.-4      	; 0x33ee <LCD_function_Set_4bit+0x40a>
    33f2:	fe 01       	movw	r30, r28
    33f4:	e4 58       	subi	r30, 0x84	; 132
    33f6:	ff 4f       	sbci	r31, 0xFF	; 255
    33f8:	91 83       	std	Z+1, r25	; 0x01
    33fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33fc:	de 01       	movw	r26, r28
    33fe:	a2 58       	subi	r26, 0x82	; 130
    3400:	bf 4f       	sbci	r27, 0xFF	; 255
    3402:	fe 01       	movw	r30, r28
    3404:	e2 58       	subi	r30, 0x82	; 130
    3406:	ff 4f       	sbci	r31, 0xFF	; 255
    3408:	80 81       	ld	r24, Z
    340a:	91 81       	ldd	r25, Z+1	; 0x01
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	11 96       	adiw	r26, 0x01	; 1
    3410:	9c 93       	st	X, r25
    3412:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3414:	fe 01       	movw	r30, r28
    3416:	e2 58       	subi	r30, 0x82	; 130
    3418:	ff 4f       	sbci	r31, 0xFF	; 255
    341a:	80 81       	ld	r24, Z
    341c:	91 81       	ldd	r25, Z+1	; 0x01
    341e:	00 97       	sbiw	r24, 0x00	; 0
    3420:	d1 f6       	brne	.-76     	; 0x33d6 <LCD_function_Set_4bit+0x3f2>
    3422:	4b c0       	rjmp	.+150    	; 0x34ba <LCD_function_Set_4bit+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3424:	8e 01       	movw	r16, r28
    3426:	02 58       	subi	r16, 0x82	; 130
    3428:	1f 4f       	sbci	r17, 0xFF	; 255
    342a:	fe 01       	movw	r30, r28
    342c:	e0 58       	subi	r30, 0x80	; 128
    342e:	ff 4f       	sbci	r31, 0xFF	; 255
    3430:	60 81       	ld	r22, Z
    3432:	71 81       	ldd	r23, Z+1	; 0x01
    3434:	82 81       	ldd	r24, Z+2	; 0x02
    3436:	93 81       	ldd	r25, Z+3	; 0x03
    3438:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    343c:	dc 01       	movw	r26, r24
    343e:	cb 01       	movw	r24, r22
    3440:	f8 01       	movw	r30, r16
    3442:	91 83       	std	Z+1, r25	; 0x01
    3444:	80 83       	st	Z, r24
    3446:	de 01       	movw	r26, r28
    3448:	a6 58       	subi	r26, 0x86	; 134
    344a:	bf 4f       	sbci	r27, 0xFF	; 255
    344c:	fe 01       	movw	r30, r28
    344e:	e2 58       	subi	r30, 0x82	; 130
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	80 81       	ld	r24, Z
    3454:	91 81       	ldd	r25, Z+1	; 0x01
    3456:	11 96       	adiw	r26, 0x01	; 1
    3458:	9c 93       	st	X, r25
    345a:	8e 93       	st	-X, r24
    345c:	fe 01       	movw	r30, r28
    345e:	e6 58       	subi	r30, 0x86	; 134
    3460:	ff 4f       	sbci	r31, 0xFF	; 255
    3462:	80 81       	ld	r24, Z
    3464:	91 81       	ldd	r25, Z+1	; 0x01
    3466:	01 97       	sbiw	r24, 0x01	; 1
    3468:	f1 f7       	brne	.-4      	; 0x3466 <LCD_function_Set_4bit+0x482>
    346a:	fe 01       	movw	r30, r28
    346c:	e6 58       	subi	r30, 0x86	; 134
    346e:	ff 4f       	sbci	r31, 0xFF	; 255
    3470:	91 83       	std	Z+1, r25	; 0x01
    3472:	80 83       	st	Z, r24
    3474:	22 c0       	rjmp	.+68     	; 0x34ba <LCD_function_Set_4bit+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3476:	8e 01       	movw	r16, r28
    3478:	08 57       	subi	r16, 0x78	; 120
    347a:	1f 4f       	sbci	r17, 0xFF	; 255
    347c:	fe 01       	movw	r30, r28
    347e:	e7 57       	subi	r30, 0x77	; 119
    3480:	ff 4f       	sbci	r31, 0xFF	; 255
    3482:	60 81       	ld	r22, Z
    3484:	71 81       	ldd	r23, Z+1	; 0x01
    3486:	82 81       	ldd	r24, Z+2	; 0x02
    3488:	93 81       	ldd	r25, Z+3	; 0x03
    348a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    348e:	dc 01       	movw	r26, r24
    3490:	cb 01       	movw	r24, r22
    3492:	f8 01       	movw	r30, r16
    3494:	80 83       	st	Z, r24
    3496:	de 01       	movw	r26, r28
    3498:	a7 58       	subi	r26, 0x87	; 135
    349a:	bf 4f       	sbci	r27, 0xFF	; 255
    349c:	fe 01       	movw	r30, r28
    349e:	e8 57       	subi	r30, 0x78	; 120
    34a0:	ff 4f       	sbci	r31, 0xFF	; 255
    34a2:	80 81       	ld	r24, Z
    34a4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34a6:	fe 01       	movw	r30, r28
    34a8:	e7 58       	subi	r30, 0x87	; 135
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	80 81       	ld	r24, Z
    34ae:	8a 95       	dec	r24
    34b0:	f1 f7       	brne	.-4      	; 0x34ae <LCD_function_Set_4bit+0x4ca>
    34b2:	fe 01       	movw	r30, r28
    34b4:	e7 58       	subi	r30, 0x87	; 135
    34b6:	ff 4f       	sbci	r31, 0xFF	; 255
    34b8:	80 83       	st	Z, r24
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    34ba:	fe 01       	movw	r30, r28
    34bc:	e5 55       	subi	r30, 0x55	; 85
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	10 82       	st	Z, r1
    34c2:	23 c0       	rjmp	.+70     	; 0x350a <LCD_function_Set_4bit+0x526>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b0010,i));
    34c4:	fe 01       	movw	r30, r28
    34c6:	e5 55       	subi	r30, 0x55	; 85
    34c8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ca:	80 81       	ld	r24, Z
    34cc:	48 2f       	mov	r20, r24
    34ce:	4c 5f       	subi	r20, 0xFC	; 252
    34d0:	fe 01       	movw	r30, r28
    34d2:	e5 55       	subi	r30, 0x55	; 85
    34d4:	ff 4f       	sbci	r31, 0xFF	; 255
    34d6:	80 81       	ld	r24, Z
    34d8:	28 2f       	mov	r18, r24
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	82 e0       	ldi	r24, 0x02	; 2
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	02 c0       	rjmp	.+4      	; 0x34e6 <LCD_function_Set_4bit+0x502>
    34e2:	95 95       	asr	r25
    34e4:	87 95       	ror	r24
    34e6:	2a 95       	dec	r18
    34e8:	e2 f7       	brpl	.-8      	; 0x34e2 <LCD_function_Set_4bit+0x4fe>
    34ea:	98 2f       	mov	r25, r24
    34ec:	91 70       	andi	r25, 0x01	; 1
    34ee:	80 e0       	ldi	r24, 0x00	; 0
    34f0:	64 2f       	mov	r22, r20
    34f2:	49 2f       	mov	r20, r25
    34f4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_void_assign_pin>
	_delay_us(1);
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    34f8:	de 01       	movw	r26, r28
    34fa:	a5 55       	subi	r26, 0x55	; 85
    34fc:	bf 4f       	sbci	r27, 0xFF	; 255
    34fe:	fe 01       	movw	r30, r28
    3500:	e5 55       	subi	r30, 0x55	; 85
    3502:	ff 4f       	sbci	r31, 0xFF	; 255
    3504:	80 81       	ld	r24, Z
    3506:	8f 5f       	subi	r24, 0xFF	; 255
    3508:	8c 93       	st	X, r24
    350a:	fe 01       	movw	r30, r28
    350c:	e5 55       	subi	r30, 0x55	; 85
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	80 81       	ld	r24, Z
    3512:	84 30       	cpi	r24, 0x04	; 4
    3514:	b8 f2       	brcs	.-82     	; 0x34c4 <LCD_function_Set_4bit+0x4e0>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b0010,i));
	}
	//enable pin low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	60 e0       	ldi	r22, 0x00	; 0
    351a:	0e 94 21 09 	call	0x1242	; 0x1242 <DIO_void_clear_pin>
    351e:	fe 01       	movw	r30, r28
    3520:	eb 58       	subi	r30, 0x8B	; 139
    3522:	ff 4f       	sbci	r31, 0xFF	; 255
    3524:	80 e0       	ldi	r24, 0x00	; 0
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	a0 e2       	ldi	r26, 0x20	; 32
    352a:	b1 e4       	ldi	r27, 0x41	; 65
    352c:	80 83       	st	Z, r24
    352e:	91 83       	std	Z+1, r25	; 0x01
    3530:	a2 83       	std	Z+2, r26	; 0x02
    3532:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3534:	8e 01       	movw	r16, r28
    3536:	0f 58       	subi	r16, 0x8F	; 143
    3538:	1f 4f       	sbci	r17, 0xFF	; 255
    353a:	fe 01       	movw	r30, r28
    353c:	eb 58       	subi	r30, 0x8B	; 139
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	60 81       	ld	r22, Z
    3542:	71 81       	ldd	r23, Z+1	; 0x01
    3544:	82 81       	ldd	r24, Z+2	; 0x02
    3546:	93 81       	ldd	r25, Z+3	; 0x03
    3548:	2b ea       	ldi	r18, 0xAB	; 171
    354a:	3a ea       	ldi	r19, 0xAA	; 170
    354c:	4a e2       	ldi	r20, 0x2A	; 42
    354e:	50 e4       	ldi	r21, 0x40	; 64
    3550:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3554:	dc 01       	movw	r26, r24
    3556:	cb 01       	movw	r24, r22
    3558:	f8 01       	movw	r30, r16
    355a:	80 83       	st	Z, r24
    355c:	91 83       	std	Z+1, r25	; 0x01
    355e:	a2 83       	std	Z+2, r26	; 0x02
    3560:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3562:	fe 01       	movw	r30, r28
    3564:	ef 58       	subi	r30, 0x8F	; 143
    3566:	ff 4f       	sbci	r31, 0xFF	; 255
    3568:	60 81       	ld	r22, Z
    356a:	71 81       	ldd	r23, Z+1	; 0x01
    356c:	82 81       	ldd	r24, Z+2	; 0x02
    356e:	93 81       	ldd	r25, Z+3	; 0x03
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	40 e8       	ldi	r20, 0x80	; 128
    3576:	5f e3       	ldi	r21, 0x3F	; 63
    3578:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    357c:	88 23       	and	r24, r24
    357e:	34 f4       	brge	.+12     	; 0x358c <LCD_function_Set_4bit+0x5a8>
		__ticks = 1;
    3580:	fe 01       	movw	r30, r28
    3582:	e0 59       	subi	r30, 0x90	; 144
    3584:	ff 4f       	sbci	r31, 0xFF	; 255
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	80 83       	st	Z, r24
    358a:	e0 c0       	rjmp	.+448    	; 0x374c <LCD_function_Set_4bit+0x768>
	else if (__tmp > 255)
    358c:	fe 01       	movw	r30, r28
    358e:	ef 58       	subi	r30, 0x8F	; 143
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	60 81       	ld	r22, Z
    3594:	71 81       	ldd	r23, Z+1	; 0x01
    3596:	82 81       	ldd	r24, Z+2	; 0x02
    3598:	93 81       	ldd	r25, Z+3	; 0x03
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	30 e0       	ldi	r19, 0x00	; 0
    359e:	4f e7       	ldi	r20, 0x7F	; 127
    35a0:	53 e4       	ldi	r21, 0x43	; 67
    35a2:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    35a6:	18 16       	cp	r1, r24
    35a8:	0c f0       	brlt	.+2      	; 0x35ac <LCD_function_Set_4bit+0x5c8>
    35aa:	c0 c0       	rjmp	.+384    	; 0x372c <LCD_function_Set_4bit+0x748>
	{
		_delay_ms(__us / 1000.0);
    35ac:	fe 01       	movw	r30, r28
    35ae:	eb 58       	subi	r30, 0x8B	; 139
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	60 81       	ld	r22, Z
    35b4:	71 81       	ldd	r23, Z+1	; 0x01
    35b6:	82 81       	ldd	r24, Z+2	; 0x02
    35b8:	93 81       	ldd	r25, Z+3	; 0x03
    35ba:	20 e0       	ldi	r18, 0x00	; 0
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	4a e7       	ldi	r20, 0x7A	; 122
    35c0:	54 e4       	ldi	r21, 0x44	; 68
    35c2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    35c6:	dc 01       	movw	r26, r24
    35c8:	cb 01       	movw	r24, r22
    35ca:	fe 01       	movw	r30, r28
    35cc:	e4 59       	subi	r30, 0x94	; 148
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	80 83       	st	Z, r24
    35d2:	91 83       	std	Z+1, r25	; 0x01
    35d4:	a2 83       	std	Z+2, r26	; 0x02
    35d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d8:	8e 01       	movw	r16, r28
    35da:	08 59       	subi	r16, 0x98	; 152
    35dc:	1f 4f       	sbci	r17, 0xFF	; 255
    35de:	fe 01       	movw	r30, r28
    35e0:	e4 59       	subi	r30, 0x94	; 148
    35e2:	ff 4f       	sbci	r31, 0xFF	; 255
    35e4:	60 81       	ld	r22, Z
    35e6:	71 81       	ldd	r23, Z+1	; 0x01
    35e8:	82 81       	ldd	r24, Z+2	; 0x02
    35ea:	93 81       	ldd	r25, Z+3	; 0x03
    35ec:	20 e0       	ldi	r18, 0x00	; 0
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	4a ef       	ldi	r20, 0xFA	; 250
    35f2:	54 e4       	ldi	r21, 0x44	; 68
    35f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	f8 01       	movw	r30, r16
    35fe:	80 83       	st	Z, r24
    3600:	91 83       	std	Z+1, r25	; 0x01
    3602:	a2 83       	std	Z+2, r26	; 0x02
    3604:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3606:	fe 01       	movw	r30, r28
    3608:	e8 59       	subi	r30, 0x98	; 152
    360a:	ff 4f       	sbci	r31, 0xFF	; 255
    360c:	60 81       	ld	r22, Z
    360e:	71 81       	ldd	r23, Z+1	; 0x01
    3610:	82 81       	ldd	r24, Z+2	; 0x02
    3612:	93 81       	ldd	r25, Z+3	; 0x03
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	40 e8       	ldi	r20, 0x80	; 128
    361a:	5f e3       	ldi	r21, 0x3F	; 63
    361c:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    3620:	88 23       	and	r24, r24
    3622:	44 f4       	brge	.+16     	; 0x3634 <LCD_function_Set_4bit+0x650>
		__ticks = 1;
    3624:	fe 01       	movw	r30, r28
    3626:	ea 59       	subi	r30, 0x9A	; 154
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	91 83       	std	Z+1, r25	; 0x01
    3630:	80 83       	st	Z, r24
    3632:	64 c0       	rjmp	.+200    	; 0x36fc <LCD_function_Set_4bit+0x718>
	else if (__tmp > 65535)
    3634:	fe 01       	movw	r30, r28
    3636:	e8 59       	subi	r30, 0x98	; 152
    3638:	ff 4f       	sbci	r31, 0xFF	; 255
    363a:	60 81       	ld	r22, Z
    363c:	71 81       	ldd	r23, Z+1	; 0x01
    363e:	82 81       	ldd	r24, Z+2	; 0x02
    3640:	93 81       	ldd	r25, Z+3	; 0x03
    3642:	20 e0       	ldi	r18, 0x00	; 0
    3644:	3f ef       	ldi	r19, 0xFF	; 255
    3646:	4f e7       	ldi	r20, 0x7F	; 127
    3648:	57 e4       	ldi	r21, 0x47	; 71
    364a:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    364e:	18 16       	cp	r1, r24
    3650:	0c f0       	brlt	.+2      	; 0x3654 <LCD_function_Set_4bit+0x670>
    3652:	43 c0       	rjmp	.+134    	; 0x36da <LCD_function_Set_4bit+0x6f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3654:	fe 01       	movw	r30, r28
    3656:	e4 59       	subi	r30, 0x94	; 148
    3658:	ff 4f       	sbci	r31, 0xFF	; 255
    365a:	60 81       	ld	r22, Z
    365c:	71 81       	ldd	r23, Z+1	; 0x01
    365e:	82 81       	ldd	r24, Z+2	; 0x02
    3660:	93 81       	ldd	r25, Z+3	; 0x03
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	40 e2       	ldi	r20, 0x20	; 32
    3668:	51 e4       	ldi	r21, 0x41	; 65
    366a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    366e:	dc 01       	movw	r26, r24
    3670:	cb 01       	movw	r24, r22
    3672:	8e 01       	movw	r16, r28
    3674:	0a 59       	subi	r16, 0x9A	; 154
    3676:	1f 4f       	sbci	r17, 0xFF	; 255
    3678:	bc 01       	movw	r22, r24
    367a:	cd 01       	movw	r24, r26
    367c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3680:	dc 01       	movw	r26, r24
    3682:	cb 01       	movw	r24, r22
    3684:	f8 01       	movw	r30, r16
    3686:	91 83       	std	Z+1, r25	; 0x01
    3688:	80 83       	st	Z, r24
    368a:	1f c0       	rjmp	.+62     	; 0x36ca <LCD_function_Set_4bit+0x6e6>
    368c:	fe 01       	movw	r30, r28
    368e:	ec 59       	subi	r30, 0x9C	; 156
    3690:	ff 4f       	sbci	r31, 0xFF	; 255
    3692:	88 ec       	ldi	r24, 0xC8	; 200
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	91 83       	std	Z+1, r25	; 0x01
    3698:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    369a:	fe 01       	movw	r30, r28
    369c:	ec 59       	subi	r30, 0x9C	; 156
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	80 81       	ld	r24, Z
    36a2:	91 81       	ldd	r25, Z+1	; 0x01
    36a4:	01 97       	sbiw	r24, 0x01	; 1
    36a6:	f1 f7       	brne	.-4      	; 0x36a4 <LCD_function_Set_4bit+0x6c0>
    36a8:	fe 01       	movw	r30, r28
    36aa:	ec 59       	subi	r30, 0x9C	; 156
    36ac:	ff 4f       	sbci	r31, 0xFF	; 255
    36ae:	91 83       	std	Z+1, r25	; 0x01
    36b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b2:	de 01       	movw	r26, r28
    36b4:	aa 59       	subi	r26, 0x9A	; 154
    36b6:	bf 4f       	sbci	r27, 0xFF	; 255
    36b8:	fe 01       	movw	r30, r28
    36ba:	ea 59       	subi	r30, 0x9A	; 154
    36bc:	ff 4f       	sbci	r31, 0xFF	; 255
    36be:	80 81       	ld	r24, Z
    36c0:	91 81       	ldd	r25, Z+1	; 0x01
    36c2:	01 97       	sbiw	r24, 0x01	; 1
    36c4:	11 96       	adiw	r26, 0x01	; 1
    36c6:	9c 93       	st	X, r25
    36c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ca:	fe 01       	movw	r30, r28
    36cc:	ea 59       	subi	r30, 0x9A	; 154
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	80 81       	ld	r24, Z
    36d2:	91 81       	ldd	r25, Z+1	; 0x01
    36d4:	00 97       	sbiw	r24, 0x00	; 0
    36d6:	d1 f6       	brne	.-76     	; 0x368c <LCD_function_Set_4bit+0x6a8>
    36d8:	4b c0       	rjmp	.+150    	; 0x3770 <LCD_function_Set_4bit+0x78c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36da:	8e 01       	movw	r16, r28
    36dc:	0a 59       	subi	r16, 0x9A	; 154
    36de:	1f 4f       	sbci	r17, 0xFF	; 255
    36e0:	fe 01       	movw	r30, r28
    36e2:	e8 59       	subi	r30, 0x98	; 152
    36e4:	ff 4f       	sbci	r31, 0xFF	; 255
    36e6:	60 81       	ld	r22, Z
    36e8:	71 81       	ldd	r23, Z+1	; 0x01
    36ea:	82 81       	ldd	r24, Z+2	; 0x02
    36ec:	93 81       	ldd	r25, Z+3	; 0x03
    36ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	f8 01       	movw	r30, r16
    36f8:	91 83       	std	Z+1, r25	; 0x01
    36fa:	80 83       	st	Z, r24
    36fc:	de 01       	movw	r26, r28
    36fe:	ae 59       	subi	r26, 0x9E	; 158
    3700:	bf 4f       	sbci	r27, 0xFF	; 255
    3702:	fe 01       	movw	r30, r28
    3704:	ea 59       	subi	r30, 0x9A	; 154
    3706:	ff 4f       	sbci	r31, 0xFF	; 255
    3708:	80 81       	ld	r24, Z
    370a:	91 81       	ldd	r25, Z+1	; 0x01
    370c:	11 96       	adiw	r26, 0x01	; 1
    370e:	9c 93       	st	X, r25
    3710:	8e 93       	st	-X, r24
    3712:	fe 01       	movw	r30, r28
    3714:	ee 59       	subi	r30, 0x9E	; 158
    3716:	ff 4f       	sbci	r31, 0xFF	; 255
    3718:	80 81       	ld	r24, Z
    371a:	91 81       	ldd	r25, Z+1	; 0x01
    371c:	01 97       	sbiw	r24, 0x01	; 1
    371e:	f1 f7       	brne	.-4      	; 0x371c <LCD_function_Set_4bit+0x738>
    3720:	fe 01       	movw	r30, r28
    3722:	ee 59       	subi	r30, 0x9E	; 158
    3724:	ff 4f       	sbci	r31, 0xFF	; 255
    3726:	91 83       	std	Z+1, r25	; 0x01
    3728:	80 83       	st	Z, r24
    372a:	22 c0       	rjmp	.+68     	; 0x3770 <LCD_function_Set_4bit+0x78c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    372c:	8e 01       	movw	r16, r28
    372e:	00 59       	subi	r16, 0x90	; 144
    3730:	1f 4f       	sbci	r17, 0xFF	; 255
    3732:	fe 01       	movw	r30, r28
    3734:	ef 58       	subi	r30, 0x8F	; 143
    3736:	ff 4f       	sbci	r31, 0xFF	; 255
    3738:	60 81       	ld	r22, Z
    373a:	71 81       	ldd	r23, Z+1	; 0x01
    373c:	82 81       	ldd	r24, Z+2	; 0x02
    373e:	93 81       	ldd	r25, Z+3	; 0x03
    3740:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	f8 01       	movw	r30, r16
    374a:	80 83       	st	Z, r24
    374c:	de 01       	movw	r26, r28
    374e:	af 59       	subi	r26, 0x9F	; 159
    3750:	bf 4f       	sbci	r27, 0xFF	; 255
    3752:	fe 01       	movw	r30, r28
    3754:	e0 59       	subi	r30, 0x90	; 144
    3756:	ff 4f       	sbci	r31, 0xFF	; 255
    3758:	80 81       	ld	r24, Z
    375a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    375c:	fe 01       	movw	r30, r28
    375e:	ef 59       	subi	r30, 0x9F	; 159
    3760:	ff 4f       	sbci	r31, 0xFF	; 255
    3762:	80 81       	ld	r24, Z
    3764:	8a 95       	dec	r24
    3766:	f1 f7       	brne	.-4      	; 0x3764 <LCD_function_Set_4bit+0x780>
    3768:	fe 01       	movw	r30, r28
    376a:	ef 59       	subi	r30, 0x9F	; 159
    376c:	ff 4f       	sbci	r31, 0xFF	; 255
    376e:	80 83       	st	Z, r24
	_delay_us(10);
	//send again high nibble to make sure
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
    3770:	81 e0       	ldi	r24, 0x01	; 1
    3772:	60 e0       	ldi	r22, 0x00	; 0
    3774:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <DIO_void_set_pin>
    3778:	fe 01       	movw	r30, r28
    377a:	e3 5a       	subi	r30, 0xA3	; 163
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	80 e0       	ldi	r24, 0x00	; 0
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	a0 e8       	ldi	r26, 0x80	; 128
    3784:	bf e3       	ldi	r27, 0x3F	; 63
    3786:	80 83       	st	Z, r24
    3788:	91 83       	std	Z+1, r25	; 0x01
    378a:	a2 83       	std	Z+2, r26	; 0x02
    378c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    378e:	8e 01       	movw	r16, r28
    3790:	07 5a       	subi	r16, 0xA7	; 167
    3792:	1f 4f       	sbci	r17, 0xFF	; 255
    3794:	fe 01       	movw	r30, r28
    3796:	e3 5a       	subi	r30, 0xA3	; 163
    3798:	ff 4f       	sbci	r31, 0xFF	; 255
    379a:	60 81       	ld	r22, Z
    379c:	71 81       	ldd	r23, Z+1	; 0x01
    379e:	82 81       	ldd	r24, Z+2	; 0x02
    37a0:	93 81       	ldd	r25, Z+3	; 0x03
    37a2:	2b ea       	ldi	r18, 0xAB	; 171
    37a4:	3a ea       	ldi	r19, 0xAA	; 170
    37a6:	4a e2       	ldi	r20, 0x2A	; 42
    37a8:	50 e4       	ldi	r21, 0x40	; 64
    37aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37ae:	dc 01       	movw	r26, r24
    37b0:	cb 01       	movw	r24, r22
    37b2:	f8 01       	movw	r30, r16
    37b4:	80 83       	st	Z, r24
    37b6:	91 83       	std	Z+1, r25	; 0x01
    37b8:	a2 83       	std	Z+2, r26	; 0x02
    37ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37bc:	fe 01       	movw	r30, r28
    37be:	e7 5a       	subi	r30, 0xA7	; 167
    37c0:	ff 4f       	sbci	r31, 0xFF	; 255
    37c2:	60 81       	ld	r22, Z
    37c4:	71 81       	ldd	r23, Z+1	; 0x01
    37c6:	82 81       	ldd	r24, Z+2	; 0x02
    37c8:	93 81       	ldd	r25, Z+3	; 0x03
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	40 e8       	ldi	r20, 0x80	; 128
    37d0:	5f e3       	ldi	r21, 0x3F	; 63
    37d2:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    37d6:	88 23       	and	r24, r24
    37d8:	34 f4       	brge	.+12     	; 0x37e6 <LCD_function_Set_4bit+0x802>
		__ticks = 1;
    37da:	fe 01       	movw	r30, r28
    37dc:	e8 5a       	subi	r30, 0xA8	; 168
    37de:	ff 4f       	sbci	r31, 0xFF	; 255
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	80 83       	st	Z, r24
    37e4:	e0 c0       	rjmp	.+448    	; 0x39a6 <LCD_function_Set_4bit+0x9c2>
	else if (__tmp > 255)
    37e6:	fe 01       	movw	r30, r28
    37e8:	e7 5a       	subi	r30, 0xA7	; 167
    37ea:	ff 4f       	sbci	r31, 0xFF	; 255
    37ec:	60 81       	ld	r22, Z
    37ee:	71 81       	ldd	r23, Z+1	; 0x01
    37f0:	82 81       	ldd	r24, Z+2	; 0x02
    37f2:	93 81       	ldd	r25, Z+3	; 0x03
    37f4:	20 e0       	ldi	r18, 0x00	; 0
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	4f e7       	ldi	r20, 0x7F	; 127
    37fa:	53 e4       	ldi	r21, 0x43	; 67
    37fc:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    3800:	18 16       	cp	r1, r24
    3802:	0c f0       	brlt	.+2      	; 0x3806 <LCD_function_Set_4bit+0x822>
    3804:	c0 c0       	rjmp	.+384    	; 0x3986 <LCD_function_Set_4bit+0x9a2>
	{
		_delay_ms(__us / 1000.0);
    3806:	fe 01       	movw	r30, r28
    3808:	e3 5a       	subi	r30, 0xA3	; 163
    380a:	ff 4f       	sbci	r31, 0xFF	; 255
    380c:	60 81       	ld	r22, Z
    380e:	71 81       	ldd	r23, Z+1	; 0x01
    3810:	82 81       	ldd	r24, Z+2	; 0x02
    3812:	93 81       	ldd	r25, Z+3	; 0x03
    3814:	20 e0       	ldi	r18, 0x00	; 0
    3816:	30 e0       	ldi	r19, 0x00	; 0
    3818:	4a e7       	ldi	r20, 0x7A	; 122
    381a:	54 e4       	ldi	r21, 0x44	; 68
    381c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3820:	dc 01       	movw	r26, r24
    3822:	cb 01       	movw	r24, r22
    3824:	fe 01       	movw	r30, r28
    3826:	ec 5a       	subi	r30, 0xAC	; 172
    3828:	ff 4f       	sbci	r31, 0xFF	; 255
    382a:	80 83       	st	Z, r24
    382c:	91 83       	std	Z+1, r25	; 0x01
    382e:	a2 83       	std	Z+2, r26	; 0x02
    3830:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3832:	8e 01       	movw	r16, r28
    3834:	00 5b       	subi	r16, 0xB0	; 176
    3836:	1f 4f       	sbci	r17, 0xFF	; 255
    3838:	fe 01       	movw	r30, r28
    383a:	ec 5a       	subi	r30, 0xAC	; 172
    383c:	ff 4f       	sbci	r31, 0xFF	; 255
    383e:	60 81       	ld	r22, Z
    3840:	71 81       	ldd	r23, Z+1	; 0x01
    3842:	82 81       	ldd	r24, Z+2	; 0x02
    3844:	93 81       	ldd	r25, Z+3	; 0x03
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	4a ef       	ldi	r20, 0xFA	; 250
    384c:	54 e4       	ldi	r21, 0x44	; 68
    384e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	f8 01       	movw	r30, r16
    3858:	80 83       	st	Z, r24
    385a:	91 83       	std	Z+1, r25	; 0x01
    385c:	a2 83       	std	Z+2, r26	; 0x02
    385e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3860:	fe 01       	movw	r30, r28
    3862:	e0 5b       	subi	r30, 0xB0	; 176
    3864:	ff 4f       	sbci	r31, 0xFF	; 255
    3866:	60 81       	ld	r22, Z
    3868:	71 81       	ldd	r23, Z+1	; 0x01
    386a:	82 81       	ldd	r24, Z+2	; 0x02
    386c:	93 81       	ldd	r25, Z+3	; 0x03
    386e:	20 e0       	ldi	r18, 0x00	; 0
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	40 e8       	ldi	r20, 0x80	; 128
    3874:	5f e3       	ldi	r21, 0x3F	; 63
    3876:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    387a:	88 23       	and	r24, r24
    387c:	44 f4       	brge	.+16     	; 0x388e <LCD_function_Set_4bit+0x8aa>
		__ticks = 1;
    387e:	fe 01       	movw	r30, r28
    3880:	e2 5b       	subi	r30, 0xB2	; 178
    3882:	ff 4f       	sbci	r31, 0xFF	; 255
    3884:	81 e0       	ldi	r24, 0x01	; 1
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	91 83       	std	Z+1, r25	; 0x01
    388a:	80 83       	st	Z, r24
    388c:	64 c0       	rjmp	.+200    	; 0x3956 <LCD_function_Set_4bit+0x972>
	else if (__tmp > 65535)
    388e:	fe 01       	movw	r30, r28
    3890:	e0 5b       	subi	r30, 0xB0	; 176
    3892:	ff 4f       	sbci	r31, 0xFF	; 255
    3894:	60 81       	ld	r22, Z
    3896:	71 81       	ldd	r23, Z+1	; 0x01
    3898:	82 81       	ldd	r24, Z+2	; 0x02
    389a:	93 81       	ldd	r25, Z+3	; 0x03
    389c:	20 e0       	ldi	r18, 0x00	; 0
    389e:	3f ef       	ldi	r19, 0xFF	; 255
    38a0:	4f e7       	ldi	r20, 0x7F	; 127
    38a2:	57 e4       	ldi	r21, 0x47	; 71
    38a4:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    38a8:	18 16       	cp	r1, r24
    38aa:	0c f0       	brlt	.+2      	; 0x38ae <LCD_function_Set_4bit+0x8ca>
    38ac:	43 c0       	rjmp	.+134    	; 0x3934 <LCD_function_Set_4bit+0x950>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ae:	fe 01       	movw	r30, r28
    38b0:	ec 5a       	subi	r30, 0xAC	; 172
    38b2:	ff 4f       	sbci	r31, 0xFF	; 255
    38b4:	60 81       	ld	r22, Z
    38b6:	71 81       	ldd	r23, Z+1	; 0x01
    38b8:	82 81       	ldd	r24, Z+2	; 0x02
    38ba:	93 81       	ldd	r25, Z+3	; 0x03
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	40 e2       	ldi	r20, 0x20	; 32
    38c2:	51 e4       	ldi	r21, 0x41	; 65
    38c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38c8:	dc 01       	movw	r26, r24
    38ca:	cb 01       	movw	r24, r22
    38cc:	8e 01       	movw	r16, r28
    38ce:	02 5b       	subi	r16, 0xB2	; 178
    38d0:	1f 4f       	sbci	r17, 0xFF	; 255
    38d2:	bc 01       	movw	r22, r24
    38d4:	cd 01       	movw	r24, r26
    38d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38da:	dc 01       	movw	r26, r24
    38dc:	cb 01       	movw	r24, r22
    38de:	f8 01       	movw	r30, r16
    38e0:	91 83       	std	Z+1, r25	; 0x01
    38e2:	80 83       	st	Z, r24
    38e4:	1f c0       	rjmp	.+62     	; 0x3924 <LCD_function_Set_4bit+0x940>
    38e6:	fe 01       	movw	r30, r28
    38e8:	e4 5b       	subi	r30, 0xB4	; 180
    38ea:	ff 4f       	sbci	r31, 0xFF	; 255
    38ec:	88 ec       	ldi	r24, 0xC8	; 200
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	91 83       	std	Z+1, r25	; 0x01
    38f2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    38f4:	fe 01       	movw	r30, r28
    38f6:	e4 5b       	subi	r30, 0xB4	; 180
    38f8:	ff 4f       	sbci	r31, 0xFF	; 255
    38fa:	80 81       	ld	r24, Z
    38fc:	91 81       	ldd	r25, Z+1	; 0x01
    38fe:	01 97       	sbiw	r24, 0x01	; 1
    3900:	f1 f7       	brne	.-4      	; 0x38fe <LCD_function_Set_4bit+0x91a>
    3902:	fe 01       	movw	r30, r28
    3904:	e4 5b       	subi	r30, 0xB4	; 180
    3906:	ff 4f       	sbci	r31, 0xFF	; 255
    3908:	91 83       	std	Z+1, r25	; 0x01
    390a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    390c:	de 01       	movw	r26, r28
    390e:	a2 5b       	subi	r26, 0xB2	; 178
    3910:	bf 4f       	sbci	r27, 0xFF	; 255
    3912:	fe 01       	movw	r30, r28
    3914:	e2 5b       	subi	r30, 0xB2	; 178
    3916:	ff 4f       	sbci	r31, 0xFF	; 255
    3918:	80 81       	ld	r24, Z
    391a:	91 81       	ldd	r25, Z+1	; 0x01
    391c:	01 97       	sbiw	r24, 0x01	; 1
    391e:	11 96       	adiw	r26, 0x01	; 1
    3920:	9c 93       	st	X, r25
    3922:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3924:	fe 01       	movw	r30, r28
    3926:	e2 5b       	subi	r30, 0xB2	; 178
    3928:	ff 4f       	sbci	r31, 0xFF	; 255
    392a:	80 81       	ld	r24, Z
    392c:	91 81       	ldd	r25, Z+1	; 0x01
    392e:	00 97       	sbiw	r24, 0x00	; 0
    3930:	d1 f6       	brne	.-76     	; 0x38e6 <LCD_function_Set_4bit+0x902>
    3932:	4b c0       	rjmp	.+150    	; 0x39ca <LCD_function_Set_4bit+0x9e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3934:	8e 01       	movw	r16, r28
    3936:	02 5b       	subi	r16, 0xB2	; 178
    3938:	1f 4f       	sbci	r17, 0xFF	; 255
    393a:	fe 01       	movw	r30, r28
    393c:	e0 5b       	subi	r30, 0xB0	; 176
    393e:	ff 4f       	sbci	r31, 0xFF	; 255
    3940:	60 81       	ld	r22, Z
    3942:	71 81       	ldd	r23, Z+1	; 0x01
    3944:	82 81       	ldd	r24, Z+2	; 0x02
    3946:	93 81       	ldd	r25, Z+3	; 0x03
    3948:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	f8 01       	movw	r30, r16
    3952:	91 83       	std	Z+1, r25	; 0x01
    3954:	80 83       	st	Z, r24
    3956:	de 01       	movw	r26, r28
    3958:	a6 5b       	subi	r26, 0xB6	; 182
    395a:	bf 4f       	sbci	r27, 0xFF	; 255
    395c:	fe 01       	movw	r30, r28
    395e:	e2 5b       	subi	r30, 0xB2	; 178
    3960:	ff 4f       	sbci	r31, 0xFF	; 255
    3962:	80 81       	ld	r24, Z
    3964:	91 81       	ldd	r25, Z+1	; 0x01
    3966:	11 96       	adiw	r26, 0x01	; 1
    3968:	9c 93       	st	X, r25
    396a:	8e 93       	st	-X, r24
    396c:	fe 01       	movw	r30, r28
    396e:	e6 5b       	subi	r30, 0xB6	; 182
    3970:	ff 4f       	sbci	r31, 0xFF	; 255
    3972:	80 81       	ld	r24, Z
    3974:	91 81       	ldd	r25, Z+1	; 0x01
    3976:	01 97       	sbiw	r24, 0x01	; 1
    3978:	f1 f7       	brne	.-4      	; 0x3976 <LCD_function_Set_4bit+0x992>
    397a:	fe 01       	movw	r30, r28
    397c:	e6 5b       	subi	r30, 0xB6	; 182
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	91 83       	std	Z+1, r25	; 0x01
    3982:	80 83       	st	Z, r24
    3984:	22 c0       	rjmp	.+68     	; 0x39ca <LCD_function_Set_4bit+0x9e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3986:	8e 01       	movw	r16, r28
    3988:	08 5a       	subi	r16, 0xA8	; 168
    398a:	1f 4f       	sbci	r17, 0xFF	; 255
    398c:	fe 01       	movw	r30, r28
    398e:	e7 5a       	subi	r30, 0xA7	; 167
    3990:	ff 4f       	sbci	r31, 0xFF	; 255
    3992:	60 81       	ld	r22, Z
    3994:	71 81       	ldd	r23, Z+1	; 0x01
    3996:	82 81       	ldd	r24, Z+2	; 0x02
    3998:	93 81       	ldd	r25, Z+3	; 0x03
    399a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    399e:	dc 01       	movw	r26, r24
    39a0:	cb 01       	movw	r24, r22
    39a2:	f8 01       	movw	r30, r16
    39a4:	80 83       	st	Z, r24
    39a6:	de 01       	movw	r26, r28
    39a8:	a7 5b       	subi	r26, 0xB7	; 183
    39aa:	bf 4f       	sbci	r27, 0xFF	; 255
    39ac:	fe 01       	movw	r30, r28
    39ae:	e8 5a       	subi	r30, 0xA8	; 168
    39b0:	ff 4f       	sbci	r31, 0xFF	; 255
    39b2:	80 81       	ld	r24, Z
    39b4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    39b6:	fe 01       	movw	r30, r28
    39b8:	e7 5b       	subi	r30, 0xB7	; 183
    39ba:	ff 4f       	sbci	r31, 0xFF	; 255
    39bc:	80 81       	ld	r24, Z
    39be:	8a 95       	dec	r24
    39c0:	f1 f7       	brne	.-4      	; 0x39be <LCD_function_Set_4bit+0x9da>
    39c2:	fe 01       	movw	r30, r28
    39c4:	e7 5b       	subi	r30, 0xB7	; 183
    39c6:	ff 4f       	sbci	r31, 0xFF	; 255
    39c8:	80 83       	st	Z, r24
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    39ca:	fe 01       	movw	r30, r28
    39cc:	e6 55       	subi	r30, 0x56	; 86
    39ce:	ff 4f       	sbci	r31, 0xFF	; 255
    39d0:	10 82       	st	Z, r1
    39d2:	23 c0       	rjmp	.+70     	; 0x3a1a <LCD_function_Set_4bit+0xa36>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b0010,i));
    39d4:	fe 01       	movw	r30, r28
    39d6:	e6 55       	subi	r30, 0x56	; 86
    39d8:	ff 4f       	sbci	r31, 0xFF	; 255
    39da:	80 81       	ld	r24, Z
    39dc:	48 2f       	mov	r20, r24
    39de:	4c 5f       	subi	r20, 0xFC	; 252
    39e0:	fe 01       	movw	r30, r28
    39e2:	e6 55       	subi	r30, 0x56	; 86
    39e4:	ff 4f       	sbci	r31, 0xFF	; 255
    39e6:	80 81       	ld	r24, Z
    39e8:	28 2f       	mov	r18, r24
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	82 e0       	ldi	r24, 0x02	; 2
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	02 c0       	rjmp	.+4      	; 0x39f6 <LCD_function_Set_4bit+0xa12>
    39f2:	95 95       	asr	r25
    39f4:	87 95       	ror	r24
    39f6:	2a 95       	dec	r18
    39f8:	e2 f7       	brpl	.-8      	; 0x39f2 <LCD_function_Set_4bit+0xa0e>
    39fa:	98 2f       	mov	r25, r24
    39fc:	91 70       	andi	r25, 0x01	; 1
    39fe:	80 e0       	ldi	r24, 0x00	; 0
    3a00:	64 2f       	mov	r22, r20
    3a02:	49 2f       	mov	r20, r25
    3a04:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_void_assign_pin>
	//send again high nibble to make sure
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    3a08:	de 01       	movw	r26, r28
    3a0a:	a6 55       	subi	r26, 0x56	; 86
    3a0c:	bf 4f       	sbci	r27, 0xFF	; 255
    3a0e:	fe 01       	movw	r30, r28
    3a10:	e6 55       	subi	r30, 0x56	; 86
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	80 81       	ld	r24, Z
    3a16:	8f 5f       	subi	r24, 0xFF	; 255
    3a18:	8c 93       	st	X, r24
    3a1a:	fe 01       	movw	r30, r28
    3a1c:	e6 55       	subi	r30, 0x56	; 86
    3a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a20:	80 81       	ld	r24, Z
    3a22:	84 30       	cpi	r24, 0x04	; 4
    3a24:	b8 f2       	brcs	.-82     	; 0x39d4 <LCD_function_Set_4bit+0x9f0>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b0010,i));
	}
	//enable pin low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    3a26:	81 e0       	ldi	r24, 0x01	; 1
    3a28:	60 e0       	ldi	r22, 0x00	; 0
    3a2a:	0e 94 21 09 	call	0x1242	; 0x1242 <DIO_void_clear_pin>
    3a2e:	fe 01       	movw	r30, r28
    3a30:	eb 5b       	subi	r30, 0xBB	; 187
    3a32:	ff 4f       	sbci	r31, 0xFF	; 255
    3a34:	80 e0       	ldi	r24, 0x00	; 0
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	a0 e2       	ldi	r26, 0x20	; 32
    3a3a:	b1 e4       	ldi	r27, 0x41	; 65
    3a3c:	80 83       	st	Z, r24
    3a3e:	91 83       	std	Z+1, r25	; 0x01
    3a40:	a2 83       	std	Z+2, r26	; 0x02
    3a42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3a44:	8e 01       	movw	r16, r28
    3a46:	0f 5b       	subi	r16, 0xBF	; 191
    3a48:	1f 4f       	sbci	r17, 0xFF	; 255
    3a4a:	fe 01       	movw	r30, r28
    3a4c:	eb 5b       	subi	r30, 0xBB	; 187
    3a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a50:	60 81       	ld	r22, Z
    3a52:	71 81       	ldd	r23, Z+1	; 0x01
    3a54:	82 81       	ldd	r24, Z+2	; 0x02
    3a56:	93 81       	ldd	r25, Z+3	; 0x03
    3a58:	2b ea       	ldi	r18, 0xAB	; 171
    3a5a:	3a ea       	ldi	r19, 0xAA	; 170
    3a5c:	4a e2       	ldi	r20, 0x2A	; 42
    3a5e:	50 e4       	ldi	r21, 0x40	; 64
    3a60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a64:	dc 01       	movw	r26, r24
    3a66:	cb 01       	movw	r24, r22
    3a68:	f8 01       	movw	r30, r16
    3a6a:	80 83       	st	Z, r24
    3a6c:	91 83       	std	Z+1, r25	; 0x01
    3a6e:	a2 83       	std	Z+2, r26	; 0x02
    3a70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a72:	fe 01       	movw	r30, r28
    3a74:	ef 5b       	subi	r30, 0xBF	; 191
    3a76:	ff 4f       	sbci	r31, 0xFF	; 255
    3a78:	60 81       	ld	r22, Z
    3a7a:	71 81       	ldd	r23, Z+1	; 0x01
    3a7c:	82 81       	ldd	r24, Z+2	; 0x02
    3a7e:	93 81       	ldd	r25, Z+3	; 0x03
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	40 e8       	ldi	r20, 0x80	; 128
    3a86:	5f e3       	ldi	r21, 0x3F	; 63
    3a88:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    3a8c:	88 23       	and	r24, r24
    3a8e:	34 f4       	brge	.+12     	; 0x3a9c <LCD_function_Set_4bit+0xab8>
		__ticks = 1;
    3a90:	81 e0       	ldi	r24, 0x01	; 1
    3a92:	fe 01       	movw	r30, r28
    3a94:	e0 5c       	subi	r30, 0xC0	; 192
    3a96:	ff 4f       	sbci	r31, 0xFF	; 255
    3a98:	80 83       	st	Z, r24
    3a9a:	9d c0       	rjmp	.+314    	; 0x3bd6 <LCD_function_Set_4bit+0xbf2>
	else if (__tmp > 255)
    3a9c:	fe 01       	movw	r30, r28
    3a9e:	ef 5b       	subi	r30, 0xBF	; 191
    3aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa2:	60 81       	ld	r22, Z
    3aa4:	71 81       	ldd	r23, Z+1	; 0x01
    3aa6:	82 81       	ldd	r24, Z+2	; 0x02
    3aa8:	93 81       	ldd	r25, Z+3	; 0x03
    3aaa:	20 e0       	ldi	r18, 0x00	; 0
    3aac:	30 e0       	ldi	r19, 0x00	; 0
    3aae:	4f e7       	ldi	r20, 0x7F	; 127
    3ab0:	53 e4       	ldi	r21, 0x43	; 67
    3ab2:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    3ab6:	18 16       	cp	r1, r24
    3ab8:	0c f0       	brlt	.+2      	; 0x3abc <LCD_function_Set_4bit+0xad8>
    3aba:	7e c0       	rjmp	.+252    	; 0x3bb8 <LCD_function_Set_4bit+0xbd4>
	{
		_delay_ms(__us / 1000.0);
    3abc:	fe 01       	movw	r30, r28
    3abe:	eb 5b       	subi	r30, 0xBB	; 187
    3ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac2:	60 81       	ld	r22, Z
    3ac4:	71 81       	ldd	r23, Z+1	; 0x01
    3ac6:	82 81       	ldd	r24, Z+2	; 0x02
    3ac8:	93 81       	ldd	r25, Z+3	; 0x03
    3aca:	20 e0       	ldi	r18, 0x00	; 0
    3acc:	30 e0       	ldi	r19, 0x00	; 0
    3ace:	4a e7       	ldi	r20, 0x7A	; 122
    3ad0:	54 e4       	ldi	r21, 0x44	; 68
    3ad2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3ad6:	dc 01       	movw	r26, r24
    3ad8:	cb 01       	movw	r24, r22
    3ada:	8c af       	std	Y+60, r24	; 0x3c
    3adc:	9d af       	std	Y+61, r25	; 0x3d
    3ade:	ae af       	std	Y+62, r26	; 0x3e
    3ae0:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ae2:	6c ad       	ldd	r22, Y+60	; 0x3c
    3ae4:	7d ad       	ldd	r23, Y+61	; 0x3d
    3ae6:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ae8:	9f ad       	ldd	r25, Y+63	; 0x3f
    3aea:	20 e0       	ldi	r18, 0x00	; 0
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	4a ef       	ldi	r20, 0xFA	; 250
    3af0:	54 e4       	ldi	r21, 0x44	; 68
    3af2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3af6:	dc 01       	movw	r26, r24
    3af8:	cb 01       	movw	r24, r22
    3afa:	88 af       	std	Y+56, r24	; 0x38
    3afc:	99 af       	std	Y+57, r25	; 0x39
    3afe:	aa af       	std	Y+58, r26	; 0x3a
    3b00:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3b02:	68 ad       	ldd	r22, Y+56	; 0x38
    3b04:	79 ad       	ldd	r23, Y+57	; 0x39
    3b06:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b08:	9b ad       	ldd	r25, Y+59	; 0x3b
    3b0a:	20 e0       	ldi	r18, 0x00	; 0
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	40 e8       	ldi	r20, 0x80	; 128
    3b10:	5f e3       	ldi	r21, 0x3F	; 63
    3b12:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    3b16:	88 23       	and	r24, r24
    3b18:	2c f4       	brge	.+10     	; 0x3b24 <LCD_function_Set_4bit+0xb40>
		__ticks = 1;
    3b1a:	81 e0       	ldi	r24, 0x01	; 1
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	9f ab       	std	Y+55, r25	; 0x37
    3b20:	8e ab       	std	Y+54, r24	; 0x36
    3b22:	3f c0       	rjmp	.+126    	; 0x3ba2 <LCD_function_Set_4bit+0xbbe>
	else if (__tmp > 65535)
    3b24:	68 ad       	ldd	r22, Y+56	; 0x38
    3b26:	79 ad       	ldd	r23, Y+57	; 0x39
    3b28:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b2a:	9b ad       	ldd	r25, Y+59	; 0x3b
    3b2c:	20 e0       	ldi	r18, 0x00	; 0
    3b2e:	3f ef       	ldi	r19, 0xFF	; 255
    3b30:	4f e7       	ldi	r20, 0x7F	; 127
    3b32:	57 e4       	ldi	r21, 0x47	; 71
    3b34:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    3b38:	18 16       	cp	r1, r24
    3b3a:	4c f5       	brge	.+82     	; 0x3b8e <LCD_function_Set_4bit+0xbaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b3c:	6c ad       	ldd	r22, Y+60	; 0x3c
    3b3e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3b40:	8e ad       	ldd	r24, Y+62	; 0x3e
    3b42:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	40 e2       	ldi	r20, 0x20	; 32
    3b4a:	51 e4       	ldi	r21, 0x41	; 65
    3b4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b50:	dc 01       	movw	r26, r24
    3b52:	cb 01       	movw	r24, r22
    3b54:	bc 01       	movw	r22, r24
    3b56:	cd 01       	movw	r24, r26
    3b58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b5c:	dc 01       	movw	r26, r24
    3b5e:	cb 01       	movw	r24, r22
    3b60:	9f ab       	std	Y+55, r25	; 0x37
    3b62:	8e ab       	std	Y+54, r24	; 0x36
    3b64:	0f c0       	rjmp	.+30     	; 0x3b84 <LCD_function_Set_4bit+0xba0>
    3b66:	88 ec       	ldi	r24, 0xC8	; 200
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	9d ab       	std	Y+53, r25	; 0x35
    3b6c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b6e:	8c a9       	ldd	r24, Y+52	; 0x34
    3b70:	9d a9       	ldd	r25, Y+53	; 0x35
    3b72:	01 97       	sbiw	r24, 0x01	; 1
    3b74:	f1 f7       	brne	.-4      	; 0x3b72 <LCD_function_Set_4bit+0xb8e>
    3b76:	9d ab       	std	Y+53, r25	; 0x35
    3b78:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b7a:	8e a9       	ldd	r24, Y+54	; 0x36
    3b7c:	9f a9       	ldd	r25, Y+55	; 0x37
    3b7e:	01 97       	sbiw	r24, 0x01	; 1
    3b80:	9f ab       	std	Y+55, r25	; 0x37
    3b82:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b84:	8e a9       	ldd	r24, Y+54	; 0x36
    3b86:	9f a9       	ldd	r25, Y+55	; 0x37
    3b88:	00 97       	sbiw	r24, 0x00	; 0
    3b8a:	69 f7       	brne	.-38     	; 0x3b66 <LCD_function_Set_4bit+0xb82>
    3b8c:	2d c0       	rjmp	.+90     	; 0x3be8 <LCD_function_Set_4bit+0xc04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b8e:	68 ad       	ldd	r22, Y+56	; 0x38
    3b90:	79 ad       	ldd	r23, Y+57	; 0x39
    3b92:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b94:	9b ad       	ldd	r25, Y+59	; 0x3b
    3b96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b9a:	dc 01       	movw	r26, r24
    3b9c:	cb 01       	movw	r24, r22
    3b9e:	9f ab       	std	Y+55, r25	; 0x37
    3ba0:	8e ab       	std	Y+54, r24	; 0x36
    3ba2:	8e a9       	ldd	r24, Y+54	; 0x36
    3ba4:	9f a9       	ldd	r25, Y+55	; 0x37
    3ba6:	9b ab       	std	Y+51, r25	; 0x33
    3ba8:	8a ab       	std	Y+50, r24	; 0x32
    3baa:	8a a9       	ldd	r24, Y+50	; 0x32
    3bac:	9b a9       	ldd	r25, Y+51	; 0x33
    3bae:	01 97       	sbiw	r24, 0x01	; 1
    3bb0:	f1 f7       	brne	.-4      	; 0x3bae <LCD_function_Set_4bit+0xbca>
    3bb2:	9b ab       	std	Y+51, r25	; 0x33
    3bb4:	8a ab       	std	Y+50, r24	; 0x32
    3bb6:	18 c0       	rjmp	.+48     	; 0x3be8 <LCD_function_Set_4bit+0xc04>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3bb8:	fe 01       	movw	r30, r28
    3bba:	ef 5b       	subi	r30, 0xBF	; 191
    3bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbe:	60 81       	ld	r22, Z
    3bc0:	71 81       	ldd	r23, Z+1	; 0x01
    3bc2:	82 81       	ldd	r24, Z+2	; 0x02
    3bc4:	93 81       	ldd	r25, Z+3	; 0x03
    3bc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bca:	dc 01       	movw	r26, r24
    3bcc:	cb 01       	movw	r24, r22
    3bce:	fe 01       	movw	r30, r28
    3bd0:	e0 5c       	subi	r30, 0xC0	; 192
    3bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd4:	80 83       	st	Z, r24
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	e0 5c       	subi	r30, 0xC0	; 192
    3bda:	ff 4f       	sbci	r31, 0xFF	; 255
    3bdc:	80 81       	ld	r24, Z
    3bde:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3be0:	89 a9       	ldd	r24, Y+49	; 0x31
    3be2:	8a 95       	dec	r24
    3be4:	f1 f7       	brne	.-4      	; 0x3be2 <LCD_function_Set_4bit+0xbfe>
    3be6:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(10);
	//send the low nibble
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
    3be8:	81 e0       	ldi	r24, 0x01	; 1
    3bea:	60 e0       	ldi	r22, 0x00	; 0
    3bec:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <DIO_void_set_pin>
    3bf0:	80 e0       	ldi	r24, 0x00	; 0
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	a0 e8       	ldi	r26, 0x80	; 128
    3bf6:	bf e3       	ldi	r27, 0x3F	; 63
    3bf8:	8d a7       	std	Y+45, r24	; 0x2d
    3bfa:	9e a7       	std	Y+46, r25	; 0x2e
    3bfc:	af a7       	std	Y+47, r26	; 0x2f
    3bfe:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c00:	6d a5       	ldd	r22, Y+45	; 0x2d
    3c02:	7e a5       	ldd	r23, Y+46	; 0x2e
    3c04:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c06:	98 a9       	ldd	r25, Y+48	; 0x30
    3c08:	2b ea       	ldi	r18, 0xAB	; 171
    3c0a:	3a ea       	ldi	r19, 0xAA	; 170
    3c0c:	4a e2       	ldi	r20, 0x2A	; 42
    3c0e:	50 e4       	ldi	r21, 0x40	; 64
    3c10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c14:	dc 01       	movw	r26, r24
    3c16:	cb 01       	movw	r24, r22
    3c18:	89 a7       	std	Y+41, r24	; 0x29
    3c1a:	9a a7       	std	Y+42, r25	; 0x2a
    3c1c:	ab a7       	std	Y+43, r26	; 0x2b
    3c1e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3c20:	69 a5       	ldd	r22, Y+41	; 0x29
    3c22:	7a a5       	ldd	r23, Y+42	; 0x2a
    3c24:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c26:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c28:	20 e0       	ldi	r18, 0x00	; 0
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	40 e8       	ldi	r20, 0x80	; 128
    3c2e:	5f e3       	ldi	r21, 0x3F	; 63
    3c30:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    3c34:	88 23       	and	r24, r24
    3c36:	1c f4       	brge	.+6      	; 0x3c3e <LCD_function_Set_4bit+0xc5a>
		__ticks = 1;
    3c38:	81 e0       	ldi	r24, 0x01	; 1
    3c3a:	88 a7       	std	Y+40, r24	; 0x28
    3c3c:	91 c0       	rjmp	.+290    	; 0x3d60 <LCD_function_Set_4bit+0xd7c>
	else if (__tmp > 255)
    3c3e:	69 a5       	ldd	r22, Y+41	; 0x29
    3c40:	7a a5       	ldd	r23, Y+42	; 0x2a
    3c42:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c44:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c46:	20 e0       	ldi	r18, 0x00	; 0
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	4f e7       	ldi	r20, 0x7F	; 127
    3c4c:	53 e4       	ldi	r21, 0x43	; 67
    3c4e:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    3c52:	18 16       	cp	r1, r24
    3c54:	0c f0       	brlt	.+2      	; 0x3c58 <LCD_function_Set_4bit+0xc74>
    3c56:	7b c0       	rjmp	.+246    	; 0x3d4e <LCD_function_Set_4bit+0xd6a>
	{
		_delay_ms(__us / 1000.0);
    3c58:	6d a5       	ldd	r22, Y+45	; 0x2d
    3c5a:	7e a5       	ldd	r23, Y+46	; 0x2e
    3c5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c5e:	98 a9       	ldd	r25, Y+48	; 0x30
    3c60:	20 e0       	ldi	r18, 0x00	; 0
    3c62:	30 e0       	ldi	r19, 0x00	; 0
    3c64:	4a e7       	ldi	r20, 0x7A	; 122
    3c66:	54 e4       	ldi	r21, 0x44	; 68
    3c68:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	cb 01       	movw	r24, r22
    3c70:	8c a3       	std	Y+36, r24	; 0x24
    3c72:	9d a3       	std	Y+37, r25	; 0x25
    3c74:	ae a3       	std	Y+38, r26	; 0x26
    3c76:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c78:	6c a1       	ldd	r22, Y+36	; 0x24
    3c7a:	7d a1       	ldd	r23, Y+37	; 0x25
    3c7c:	8e a1       	ldd	r24, Y+38	; 0x26
    3c7e:	9f a1       	ldd	r25, Y+39	; 0x27
    3c80:	20 e0       	ldi	r18, 0x00	; 0
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	4a ef       	ldi	r20, 0xFA	; 250
    3c86:	54 e4       	ldi	r21, 0x44	; 68
    3c88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	cb 01       	movw	r24, r22
    3c90:	88 a3       	std	Y+32, r24	; 0x20
    3c92:	99 a3       	std	Y+33, r25	; 0x21
    3c94:	aa a3       	std	Y+34, r26	; 0x22
    3c96:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3c98:	68 a1       	ldd	r22, Y+32	; 0x20
    3c9a:	79 a1       	ldd	r23, Y+33	; 0x21
    3c9c:	8a a1       	ldd	r24, Y+34	; 0x22
    3c9e:	9b a1       	ldd	r25, Y+35	; 0x23
    3ca0:	20 e0       	ldi	r18, 0x00	; 0
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	40 e8       	ldi	r20, 0x80	; 128
    3ca6:	5f e3       	ldi	r21, 0x3F	; 63
    3ca8:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    3cac:	88 23       	and	r24, r24
    3cae:	2c f4       	brge	.+10     	; 0x3cba <LCD_function_Set_4bit+0xcd6>
		__ticks = 1;
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	9f 8f       	std	Y+31, r25	; 0x1f
    3cb6:	8e 8f       	std	Y+30, r24	; 0x1e
    3cb8:	3f c0       	rjmp	.+126    	; 0x3d38 <LCD_function_Set_4bit+0xd54>
	else if (__tmp > 65535)
    3cba:	68 a1       	ldd	r22, Y+32	; 0x20
    3cbc:	79 a1       	ldd	r23, Y+33	; 0x21
    3cbe:	8a a1       	ldd	r24, Y+34	; 0x22
    3cc0:	9b a1       	ldd	r25, Y+35	; 0x23
    3cc2:	20 e0       	ldi	r18, 0x00	; 0
    3cc4:	3f ef       	ldi	r19, 0xFF	; 255
    3cc6:	4f e7       	ldi	r20, 0x7F	; 127
    3cc8:	57 e4       	ldi	r21, 0x47	; 71
    3cca:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    3cce:	18 16       	cp	r1, r24
    3cd0:	4c f5       	brge	.+82     	; 0x3d24 <LCD_function_Set_4bit+0xd40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cd2:	6c a1       	ldd	r22, Y+36	; 0x24
    3cd4:	7d a1       	ldd	r23, Y+37	; 0x25
    3cd6:	8e a1       	ldd	r24, Y+38	; 0x26
    3cd8:	9f a1       	ldd	r25, Y+39	; 0x27
    3cda:	20 e0       	ldi	r18, 0x00	; 0
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	40 e2       	ldi	r20, 0x20	; 32
    3ce0:	51 e4       	ldi	r21, 0x41	; 65
    3ce2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ce6:	dc 01       	movw	r26, r24
    3ce8:	cb 01       	movw	r24, r22
    3cea:	bc 01       	movw	r22, r24
    3cec:	cd 01       	movw	r24, r26
    3cee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cf2:	dc 01       	movw	r26, r24
    3cf4:	cb 01       	movw	r24, r22
    3cf6:	9f 8f       	std	Y+31, r25	; 0x1f
    3cf8:	8e 8f       	std	Y+30, r24	; 0x1e
    3cfa:	0f c0       	rjmp	.+30     	; 0x3d1a <LCD_function_Set_4bit+0xd36>
    3cfc:	88 ec       	ldi	r24, 0xC8	; 200
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	9d 8f       	std	Y+29, r25	; 0x1d
    3d02:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d04:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d06:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3d08:	01 97       	sbiw	r24, 0x01	; 1
    3d0a:	f1 f7       	brne	.-4      	; 0x3d08 <LCD_function_Set_4bit+0xd24>
    3d0c:	9d 8f       	std	Y+29, r25	; 0x1d
    3d0e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d10:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d12:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3d14:	01 97       	sbiw	r24, 0x01	; 1
    3d16:	9f 8f       	std	Y+31, r25	; 0x1f
    3d18:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d1c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3d1e:	00 97       	sbiw	r24, 0x00	; 0
    3d20:	69 f7       	brne	.-38     	; 0x3cfc <LCD_function_Set_4bit+0xd18>
    3d22:	24 c0       	rjmp	.+72     	; 0x3d6c <LCD_function_Set_4bit+0xd88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d24:	68 a1       	ldd	r22, Y+32	; 0x20
    3d26:	79 a1       	ldd	r23, Y+33	; 0x21
    3d28:	8a a1       	ldd	r24, Y+34	; 0x22
    3d2a:	9b a1       	ldd	r25, Y+35	; 0x23
    3d2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d30:	dc 01       	movw	r26, r24
    3d32:	cb 01       	movw	r24, r22
    3d34:	9f 8f       	std	Y+31, r25	; 0x1f
    3d36:	8e 8f       	std	Y+30, r24	; 0x1e
    3d38:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d3a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3d3c:	9b 8f       	std	Y+27, r25	; 0x1b
    3d3e:	8a 8f       	std	Y+26, r24	; 0x1a
    3d40:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3d42:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3d44:	01 97       	sbiw	r24, 0x01	; 1
    3d46:	f1 f7       	brne	.-4      	; 0x3d44 <LCD_function_Set_4bit+0xd60>
    3d48:	9b 8f       	std	Y+27, r25	; 0x1b
    3d4a:	8a 8f       	std	Y+26, r24	; 0x1a
    3d4c:	0f c0       	rjmp	.+30     	; 0x3d6c <LCD_function_Set_4bit+0xd88>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3d4e:	69 a5       	ldd	r22, Y+41	; 0x29
    3d50:	7a a5       	ldd	r23, Y+42	; 0x2a
    3d52:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d54:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	cb 01       	movw	r24, r22
    3d5e:	88 a7       	std	Y+40, r24	; 0x28
    3d60:	88 a5       	ldd	r24, Y+40	; 0x28
    3d62:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3d64:	89 8d       	ldd	r24, Y+25	; 0x19
    3d66:	8a 95       	dec	r24
    3d68:	f1 f7       	brne	.-4      	; 0x3d66 <LCD_function_Set_4bit+0xd82>
    3d6a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    3d6c:	fe 01       	movw	r30, r28
    3d6e:	e7 55       	subi	r30, 0x57	; 87
    3d70:	ff 4f       	sbci	r31, 0xFF	; 255
    3d72:	10 82       	st	Z, r1
    3d74:	23 c0       	rjmp	.+70     	; 0x3dbc <LCD_function_Set_4bit+0xdd8>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b1000,i));
    3d76:	fe 01       	movw	r30, r28
    3d78:	e7 55       	subi	r30, 0x57	; 87
    3d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7c:	80 81       	ld	r24, Z
    3d7e:	48 2f       	mov	r20, r24
    3d80:	4c 5f       	subi	r20, 0xFC	; 252
    3d82:	fe 01       	movw	r30, r28
    3d84:	e7 55       	subi	r30, 0x57	; 87
    3d86:	ff 4f       	sbci	r31, 0xFF	; 255
    3d88:	80 81       	ld	r24, Z
    3d8a:	28 2f       	mov	r18, r24
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	88 e0       	ldi	r24, 0x08	; 8
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	02 c0       	rjmp	.+4      	; 0x3d98 <LCD_function_Set_4bit+0xdb4>
    3d94:	95 95       	asr	r25
    3d96:	87 95       	ror	r24
    3d98:	2a 95       	dec	r18
    3d9a:	e2 f7       	brpl	.-8      	; 0x3d94 <LCD_function_Set_4bit+0xdb0>
    3d9c:	98 2f       	mov	r25, r24
    3d9e:	91 70       	andi	r25, 0x01	; 1
    3da0:	80 e0       	ldi	r24, 0x00	; 0
    3da2:	64 2f       	mov	r22, r20
    3da4:	49 2f       	mov	r20, r25
    3da6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_void_assign_pin>
	//send the low nibble
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    3daa:	de 01       	movw	r26, r28
    3dac:	a7 55       	subi	r26, 0x57	; 87
    3dae:	bf 4f       	sbci	r27, 0xFF	; 255
    3db0:	fe 01       	movw	r30, r28
    3db2:	e7 55       	subi	r30, 0x57	; 87
    3db4:	ff 4f       	sbci	r31, 0xFF	; 255
    3db6:	80 81       	ld	r24, Z
    3db8:	8f 5f       	subi	r24, 0xFF	; 255
    3dba:	8c 93       	st	X, r24
    3dbc:	fe 01       	movw	r30, r28
    3dbe:	e7 55       	subi	r30, 0x57	; 87
    3dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc2:	80 81       	ld	r24, Z
    3dc4:	84 30       	cpi	r24, 0x04	; 4
    3dc6:	b8 f2       	brcs	.-82     	; 0x3d76 <LCD_function_Set_4bit+0xd92>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b1000,i));
	}
	//enable pin low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    3dc8:	81 e0       	ldi	r24, 0x01	; 1
    3dca:	60 e0       	ldi	r22, 0x00	; 0
    3dcc:	0e 94 21 09 	call	0x1242	; 0x1242 <DIO_void_clear_pin>
    3dd0:	80 e0       	ldi	r24, 0x00	; 0
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	a0 e2       	ldi	r26, 0x20	; 32
    3dd6:	b1 e4       	ldi	r27, 0x41	; 65
    3dd8:	8d 8b       	std	Y+21, r24	; 0x15
    3dda:	9e 8b       	std	Y+22, r25	; 0x16
    3ddc:	af 8b       	std	Y+23, r26	; 0x17
    3dde:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3de0:	6d 89       	ldd	r22, Y+21	; 0x15
    3de2:	7e 89       	ldd	r23, Y+22	; 0x16
    3de4:	8f 89       	ldd	r24, Y+23	; 0x17
    3de6:	98 8d       	ldd	r25, Y+24	; 0x18
    3de8:	2b ea       	ldi	r18, 0xAB	; 171
    3dea:	3a ea       	ldi	r19, 0xAA	; 170
    3dec:	4a e2       	ldi	r20, 0x2A	; 42
    3dee:	50 e4       	ldi	r21, 0x40	; 64
    3df0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3df4:	dc 01       	movw	r26, r24
    3df6:	cb 01       	movw	r24, r22
    3df8:	89 8b       	std	Y+17, r24	; 0x11
    3dfa:	9a 8b       	std	Y+18, r25	; 0x12
    3dfc:	ab 8b       	std	Y+19, r26	; 0x13
    3dfe:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3e00:	69 89       	ldd	r22, Y+17	; 0x11
    3e02:	7a 89       	ldd	r23, Y+18	; 0x12
    3e04:	8b 89       	ldd	r24, Y+19	; 0x13
    3e06:	9c 89       	ldd	r25, Y+20	; 0x14
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	40 e8       	ldi	r20, 0x80	; 128
    3e0e:	5f e3       	ldi	r21, 0x3F	; 63
    3e10:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    3e14:	88 23       	and	r24, r24
    3e16:	1c f4       	brge	.+6      	; 0x3e1e <LCD_function_Set_4bit+0xe3a>
		__ticks = 1;
    3e18:	81 e0       	ldi	r24, 0x01	; 1
    3e1a:	88 8b       	std	Y+16, r24	; 0x10
    3e1c:	91 c0       	rjmp	.+290    	; 0x3f40 <LCD_function_Set_4bit+0xf5c>
	else if (__tmp > 255)
    3e1e:	69 89       	ldd	r22, Y+17	; 0x11
    3e20:	7a 89       	ldd	r23, Y+18	; 0x12
    3e22:	8b 89       	ldd	r24, Y+19	; 0x13
    3e24:	9c 89       	ldd	r25, Y+20	; 0x14
    3e26:	20 e0       	ldi	r18, 0x00	; 0
    3e28:	30 e0       	ldi	r19, 0x00	; 0
    3e2a:	4f e7       	ldi	r20, 0x7F	; 127
    3e2c:	53 e4       	ldi	r21, 0x43	; 67
    3e2e:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    3e32:	18 16       	cp	r1, r24
    3e34:	0c f0       	brlt	.+2      	; 0x3e38 <LCD_function_Set_4bit+0xe54>
    3e36:	7b c0       	rjmp	.+246    	; 0x3f2e <LCD_function_Set_4bit+0xf4a>
	{
		_delay_ms(__us / 1000.0);
    3e38:	6d 89       	ldd	r22, Y+21	; 0x15
    3e3a:	7e 89       	ldd	r23, Y+22	; 0x16
    3e3c:	8f 89       	ldd	r24, Y+23	; 0x17
    3e3e:	98 8d       	ldd	r25, Y+24	; 0x18
    3e40:	20 e0       	ldi	r18, 0x00	; 0
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	4a e7       	ldi	r20, 0x7A	; 122
    3e46:	54 e4       	ldi	r21, 0x44	; 68
    3e48:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3e4c:	dc 01       	movw	r26, r24
    3e4e:	cb 01       	movw	r24, r22
    3e50:	8c 87       	std	Y+12, r24	; 0x0c
    3e52:	9d 87       	std	Y+13, r25	; 0x0d
    3e54:	ae 87       	std	Y+14, r26	; 0x0e
    3e56:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e58:	6c 85       	ldd	r22, Y+12	; 0x0c
    3e5a:	7d 85       	ldd	r23, Y+13	; 0x0d
    3e5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e5e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e60:	20 e0       	ldi	r18, 0x00	; 0
    3e62:	30 e0       	ldi	r19, 0x00	; 0
    3e64:	4a ef       	ldi	r20, 0xFA	; 250
    3e66:	54 e4       	ldi	r21, 0x44	; 68
    3e68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e6c:	dc 01       	movw	r26, r24
    3e6e:	cb 01       	movw	r24, r22
    3e70:	88 87       	std	Y+8, r24	; 0x08
    3e72:	99 87       	std	Y+9, r25	; 0x09
    3e74:	aa 87       	std	Y+10, r26	; 0x0a
    3e76:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3e78:	68 85       	ldd	r22, Y+8	; 0x08
    3e7a:	79 85       	ldd	r23, Y+9	; 0x09
    3e7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e80:	20 e0       	ldi	r18, 0x00	; 0
    3e82:	30 e0       	ldi	r19, 0x00	; 0
    3e84:	40 e8       	ldi	r20, 0x80	; 128
    3e86:	5f e3       	ldi	r21, 0x3F	; 63
    3e88:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    3e8c:	88 23       	and	r24, r24
    3e8e:	2c f4       	brge	.+10     	; 0x3e9a <LCD_function_Set_4bit+0xeb6>
		__ticks = 1;
    3e90:	81 e0       	ldi	r24, 0x01	; 1
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	9f 83       	std	Y+7, r25	; 0x07
    3e96:	8e 83       	std	Y+6, r24	; 0x06
    3e98:	3f c0       	rjmp	.+126    	; 0x3f18 <LCD_function_Set_4bit+0xf34>
	else if (__tmp > 65535)
    3e9a:	68 85       	ldd	r22, Y+8	; 0x08
    3e9c:	79 85       	ldd	r23, Y+9	; 0x09
    3e9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ea0:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ea2:	20 e0       	ldi	r18, 0x00	; 0
    3ea4:	3f ef       	ldi	r19, 0xFF	; 255
    3ea6:	4f e7       	ldi	r20, 0x7F	; 127
    3ea8:	57 e4       	ldi	r21, 0x47	; 71
    3eaa:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    3eae:	18 16       	cp	r1, r24
    3eb0:	4c f5       	brge	.+82     	; 0x3f04 <LCD_function_Set_4bit+0xf20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eb2:	6c 85       	ldd	r22, Y+12	; 0x0c
    3eb4:	7d 85       	ldd	r23, Y+13	; 0x0d
    3eb6:	8e 85       	ldd	r24, Y+14	; 0x0e
    3eb8:	9f 85       	ldd	r25, Y+15	; 0x0f
    3eba:	20 e0       	ldi	r18, 0x00	; 0
    3ebc:	30 e0       	ldi	r19, 0x00	; 0
    3ebe:	40 e2       	ldi	r20, 0x20	; 32
    3ec0:	51 e4       	ldi	r21, 0x41	; 65
    3ec2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ec6:	dc 01       	movw	r26, r24
    3ec8:	cb 01       	movw	r24, r22
    3eca:	bc 01       	movw	r22, r24
    3ecc:	cd 01       	movw	r24, r26
    3ece:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ed2:	dc 01       	movw	r26, r24
    3ed4:	cb 01       	movw	r24, r22
    3ed6:	9f 83       	std	Y+7, r25	; 0x07
    3ed8:	8e 83       	std	Y+6, r24	; 0x06
    3eda:	0f c0       	rjmp	.+30     	; 0x3efa <LCD_function_Set_4bit+0xf16>
    3edc:	88 ec       	ldi	r24, 0xC8	; 200
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	9d 83       	std	Y+5, r25	; 0x05
    3ee2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ee6:	9d 81       	ldd	r25, Y+5	; 0x05
    3ee8:	01 97       	sbiw	r24, 0x01	; 1
    3eea:	f1 f7       	brne	.-4      	; 0x3ee8 <LCD_function_Set_4bit+0xf04>
    3eec:	9d 83       	std	Y+5, r25	; 0x05
    3eee:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ef0:	8e 81       	ldd	r24, Y+6	; 0x06
    3ef2:	9f 81       	ldd	r25, Y+7	; 0x07
    3ef4:	01 97       	sbiw	r24, 0x01	; 1
    3ef6:	9f 83       	std	Y+7, r25	; 0x07
    3ef8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3efa:	8e 81       	ldd	r24, Y+6	; 0x06
    3efc:	9f 81       	ldd	r25, Y+7	; 0x07
    3efe:	00 97       	sbiw	r24, 0x00	; 0
    3f00:	69 f7       	brne	.-38     	; 0x3edc <LCD_function_Set_4bit+0xef8>
    3f02:	24 c0       	rjmp	.+72     	; 0x3f4c <LCD_function_Set_4bit+0xf68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f04:	68 85       	ldd	r22, Y+8	; 0x08
    3f06:	79 85       	ldd	r23, Y+9	; 0x09
    3f08:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f0a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f10:	dc 01       	movw	r26, r24
    3f12:	cb 01       	movw	r24, r22
    3f14:	9f 83       	std	Y+7, r25	; 0x07
    3f16:	8e 83       	std	Y+6, r24	; 0x06
    3f18:	8e 81       	ldd	r24, Y+6	; 0x06
    3f1a:	9f 81       	ldd	r25, Y+7	; 0x07
    3f1c:	9b 83       	std	Y+3, r25	; 0x03
    3f1e:	8a 83       	std	Y+2, r24	; 0x02
    3f20:	8a 81       	ldd	r24, Y+2	; 0x02
    3f22:	9b 81       	ldd	r25, Y+3	; 0x03
    3f24:	01 97       	sbiw	r24, 0x01	; 1
    3f26:	f1 f7       	brne	.-4      	; 0x3f24 <LCD_function_Set_4bit+0xf40>
    3f28:	9b 83       	std	Y+3, r25	; 0x03
    3f2a:	8a 83       	std	Y+2, r24	; 0x02
    3f2c:	0f c0       	rjmp	.+30     	; 0x3f4c <LCD_function_Set_4bit+0xf68>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3f2e:	69 89       	ldd	r22, Y+17	; 0x11
    3f30:	7a 89       	ldd	r23, Y+18	; 0x12
    3f32:	8b 89       	ldd	r24, Y+19	; 0x13
    3f34:	9c 89       	ldd	r25, Y+20	; 0x14
    3f36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f3a:	dc 01       	movw	r26, r24
    3f3c:	cb 01       	movw	r24, r22
    3f3e:	88 8b       	std	Y+16, r24	; 0x10
    3f40:	88 89       	ldd	r24, Y+16	; 0x10
    3f42:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3f44:	89 81       	ldd	r24, Y+1	; 0x01
    3f46:	8a 95       	dec	r24
    3f48:	f1 f7       	brne	.-4      	; 0x3f46 <LCD_function_Set_4bit+0xf62>
    3f4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);

}
    3f4c:	c5 55       	subi	r28, 0x55	; 85
    3f4e:	df 4f       	sbci	r29, 0xFF	; 255
    3f50:	0f b6       	in	r0, 0x3f	; 63
    3f52:	f8 94       	cli
    3f54:	de bf       	out	0x3e, r29	; 62
    3f56:	0f be       	out	0x3f, r0	; 63
    3f58:	cd bf       	out	0x3d, r28	; 61
    3f5a:	cf 91       	pop	r28
    3f5c:	df 91       	pop	r29
    3f5e:	1f 91       	pop	r17
    3f60:	0f 91       	pop	r16
    3f62:	08 95       	ret

00003f64 <LCD_init>:



/* Driver features functions for the user */

void LCD_init(){
    3f64:	0f 93       	push	r16
    3f66:	1f 93       	push	r17
    3f68:	df 93       	push	r29
    3f6a:	cf 93       	push	r28
    3f6c:	cd b7       	in	r28, 0x3d	; 61
    3f6e:	de b7       	in	r29, 0x3e	; 62
    3f70:	cc 54       	subi	r28, 0x4C	; 76
    3f72:	d0 40       	sbci	r29, 0x00	; 0
    3f74:	0f b6       	in	r0, 0x3f	; 63
    3f76:	f8 94       	cli
    3f78:	de bf       	out	0x3e, r29	; 62
    3f7a:	0f be       	out	0x3f, r0	; 63
    3f7c:	cd bf       	out	0x3d, r28	; 61

#elif LCD_interface_mode == interface_4bit


	// configure data pins direction
	DIO_void_set_pin_dir(lcd_data_port, B7, OUTPUT);
    3f7e:	80 e0       	ldi	r24, 0x00	; 0
    3f80:	67 e0       	ldi	r22, 0x07	; 7
    3f82:	41 e0       	ldi	r20, 0x01	; 1
    3f84:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, OUTPUT);
    3f88:	80 e0       	ldi	r24, 0x00	; 0
    3f8a:	66 e0       	ldi	r22, 0x06	; 6
    3f8c:	41 e0       	ldi	r20, 0x01	; 1
    3f8e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, OUTPUT);
    3f92:	80 e0       	ldi	r24, 0x00	; 0
    3f94:	65 e0       	ldi	r22, 0x05	; 5
    3f96:	41 e0       	ldi	r20, 0x01	; 1
    3f98:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, OUTPUT);
    3f9c:	80 e0       	ldi	r24, 0x00	; 0
    3f9e:	64 e0       	ldi	r22, 0x04	; 4
    3fa0:	41 e0       	ldi	r20, 0x01	; 1
    3fa2:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_void_set_pin_dir>
	// RS,RW,E as  output
	DIO_void_set_pin_dir(lcd_control_port, lcd_RS, OUTPUT);
    3fa6:	81 e0       	ldi	r24, 0x01	; 1
    3fa8:	62 e0       	ldi	r22, 0x02	; 2
    3faa:	41 e0       	ldi	r20, 0x01	; 1
    3fac:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_control_port, lcd_RW, OUTPUT);
    3fb0:	81 e0       	ldi	r24, 0x01	; 1
    3fb2:	61 e0       	ldi	r22, 0x01	; 1
    3fb4:	41 e0       	ldi	r20, 0x01	; 1
    3fb6:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_control_port, lcd_enable, OUTPUT);
    3fba:	81 e0       	ldi	r24, 0x01	; 1
    3fbc:	60 e0       	ldi	r22, 0x00	; 0
    3fbe:	41 e0       	ldi	r20, 0x01	; 1
    3fc0:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_void_set_pin_dir>
    3fc4:	fe 01       	movw	r30, r28
    3fc6:	e7 5b       	subi	r30, 0xB7	; 183
    3fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fca:	80 e0       	ldi	r24, 0x00	; 0
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	a8 e4       	ldi	r26, 0x48	; 72
    3fd0:	b2 e4       	ldi	r27, 0x42	; 66
    3fd2:	80 83       	st	Z, r24
    3fd4:	91 83       	std	Z+1, r25	; 0x01
    3fd6:	a2 83       	std	Z+2, r26	; 0x02
    3fd8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fda:	8e 01       	movw	r16, r28
    3fdc:	0b 5b       	subi	r16, 0xBB	; 187
    3fde:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe0:	fe 01       	movw	r30, r28
    3fe2:	e7 5b       	subi	r30, 0xB7	; 183
    3fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe6:	60 81       	ld	r22, Z
    3fe8:	71 81       	ldd	r23, Z+1	; 0x01
    3fea:	82 81       	ldd	r24, Z+2	; 0x02
    3fec:	93 81       	ldd	r25, Z+3	; 0x03
    3fee:	20 e0       	ldi	r18, 0x00	; 0
    3ff0:	30 e0       	ldi	r19, 0x00	; 0
    3ff2:	4a ef       	ldi	r20, 0xFA	; 250
    3ff4:	54 e4       	ldi	r21, 0x44	; 68
    3ff6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ffa:	dc 01       	movw	r26, r24
    3ffc:	cb 01       	movw	r24, r22
    3ffe:	f8 01       	movw	r30, r16
    4000:	80 83       	st	Z, r24
    4002:	91 83       	std	Z+1, r25	; 0x01
    4004:	a2 83       	std	Z+2, r26	; 0x02
    4006:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4008:	fe 01       	movw	r30, r28
    400a:	eb 5b       	subi	r30, 0xBB	; 187
    400c:	ff 4f       	sbci	r31, 0xFF	; 255
    400e:	60 81       	ld	r22, Z
    4010:	71 81       	ldd	r23, Z+1	; 0x01
    4012:	82 81       	ldd	r24, Z+2	; 0x02
    4014:	93 81       	ldd	r25, Z+3	; 0x03
    4016:	20 e0       	ldi	r18, 0x00	; 0
    4018:	30 e0       	ldi	r19, 0x00	; 0
    401a:	40 e8       	ldi	r20, 0x80	; 128
    401c:	5f e3       	ldi	r21, 0x3F	; 63
    401e:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    4022:	88 23       	and	r24, r24
    4024:	44 f4       	brge	.+16     	; 0x4036 <LCD_init+0xd2>
		__ticks = 1;
    4026:	fe 01       	movw	r30, r28
    4028:	ed 5b       	subi	r30, 0xBD	; 189
    402a:	ff 4f       	sbci	r31, 0xFF	; 255
    402c:	81 e0       	ldi	r24, 0x01	; 1
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	91 83       	std	Z+1, r25	; 0x01
    4032:	80 83       	st	Z, r24
    4034:	64 c0       	rjmp	.+200    	; 0x40fe <LCD_init+0x19a>
	else if (__tmp > 65535)
    4036:	fe 01       	movw	r30, r28
    4038:	eb 5b       	subi	r30, 0xBB	; 187
    403a:	ff 4f       	sbci	r31, 0xFF	; 255
    403c:	60 81       	ld	r22, Z
    403e:	71 81       	ldd	r23, Z+1	; 0x01
    4040:	82 81       	ldd	r24, Z+2	; 0x02
    4042:	93 81       	ldd	r25, Z+3	; 0x03
    4044:	20 e0       	ldi	r18, 0x00	; 0
    4046:	3f ef       	ldi	r19, 0xFF	; 255
    4048:	4f e7       	ldi	r20, 0x7F	; 127
    404a:	57 e4       	ldi	r21, 0x47	; 71
    404c:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    4050:	18 16       	cp	r1, r24
    4052:	0c f0       	brlt	.+2      	; 0x4056 <LCD_init+0xf2>
    4054:	43 c0       	rjmp	.+134    	; 0x40dc <LCD_init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4056:	fe 01       	movw	r30, r28
    4058:	e7 5b       	subi	r30, 0xB7	; 183
    405a:	ff 4f       	sbci	r31, 0xFF	; 255
    405c:	60 81       	ld	r22, Z
    405e:	71 81       	ldd	r23, Z+1	; 0x01
    4060:	82 81       	ldd	r24, Z+2	; 0x02
    4062:	93 81       	ldd	r25, Z+3	; 0x03
    4064:	20 e0       	ldi	r18, 0x00	; 0
    4066:	30 e0       	ldi	r19, 0x00	; 0
    4068:	40 e2       	ldi	r20, 0x20	; 32
    406a:	51 e4       	ldi	r21, 0x41	; 65
    406c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4070:	dc 01       	movw	r26, r24
    4072:	cb 01       	movw	r24, r22
    4074:	8e 01       	movw	r16, r28
    4076:	0d 5b       	subi	r16, 0xBD	; 189
    4078:	1f 4f       	sbci	r17, 0xFF	; 255
    407a:	bc 01       	movw	r22, r24
    407c:	cd 01       	movw	r24, r26
    407e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4082:	dc 01       	movw	r26, r24
    4084:	cb 01       	movw	r24, r22
    4086:	f8 01       	movw	r30, r16
    4088:	91 83       	std	Z+1, r25	; 0x01
    408a:	80 83       	st	Z, r24
    408c:	1f c0       	rjmp	.+62     	; 0x40cc <LCD_init+0x168>
    408e:	fe 01       	movw	r30, r28
    4090:	ef 5b       	subi	r30, 0xBF	; 191
    4092:	ff 4f       	sbci	r31, 0xFF	; 255
    4094:	88 ec       	ldi	r24, 0xC8	; 200
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	91 83       	std	Z+1, r25	; 0x01
    409a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    409c:	fe 01       	movw	r30, r28
    409e:	ef 5b       	subi	r30, 0xBF	; 191
    40a0:	ff 4f       	sbci	r31, 0xFF	; 255
    40a2:	80 81       	ld	r24, Z
    40a4:	91 81       	ldd	r25, Z+1	; 0x01
    40a6:	01 97       	sbiw	r24, 0x01	; 1
    40a8:	f1 f7       	brne	.-4      	; 0x40a6 <LCD_init+0x142>
    40aa:	fe 01       	movw	r30, r28
    40ac:	ef 5b       	subi	r30, 0xBF	; 191
    40ae:	ff 4f       	sbci	r31, 0xFF	; 255
    40b0:	91 83       	std	Z+1, r25	; 0x01
    40b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40b4:	de 01       	movw	r26, r28
    40b6:	ad 5b       	subi	r26, 0xBD	; 189
    40b8:	bf 4f       	sbci	r27, 0xFF	; 255
    40ba:	fe 01       	movw	r30, r28
    40bc:	ed 5b       	subi	r30, 0xBD	; 189
    40be:	ff 4f       	sbci	r31, 0xFF	; 255
    40c0:	80 81       	ld	r24, Z
    40c2:	91 81       	ldd	r25, Z+1	; 0x01
    40c4:	01 97       	sbiw	r24, 0x01	; 1
    40c6:	11 96       	adiw	r26, 0x01	; 1
    40c8:	9c 93       	st	X, r25
    40ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40cc:	fe 01       	movw	r30, r28
    40ce:	ed 5b       	subi	r30, 0xBD	; 189
    40d0:	ff 4f       	sbci	r31, 0xFF	; 255
    40d2:	80 81       	ld	r24, Z
    40d4:	91 81       	ldd	r25, Z+1	; 0x01
    40d6:	00 97       	sbiw	r24, 0x00	; 0
    40d8:	d1 f6       	brne	.-76     	; 0x408e <LCD_init+0x12a>
    40da:	24 c0       	rjmp	.+72     	; 0x4124 <LCD_init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40dc:	8e 01       	movw	r16, r28
    40de:	0d 5b       	subi	r16, 0xBD	; 189
    40e0:	1f 4f       	sbci	r17, 0xFF	; 255
    40e2:	fe 01       	movw	r30, r28
    40e4:	eb 5b       	subi	r30, 0xBB	; 187
    40e6:	ff 4f       	sbci	r31, 0xFF	; 255
    40e8:	60 81       	ld	r22, Z
    40ea:	71 81       	ldd	r23, Z+1	; 0x01
    40ec:	82 81       	ldd	r24, Z+2	; 0x02
    40ee:	93 81       	ldd	r25, Z+3	; 0x03
    40f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    40f4:	dc 01       	movw	r26, r24
    40f6:	cb 01       	movw	r24, r22
    40f8:	f8 01       	movw	r30, r16
    40fa:	91 83       	std	Z+1, r25	; 0x01
    40fc:	80 83       	st	Z, r24
    40fe:	fe 01       	movw	r30, r28
    4100:	ed 5b       	subi	r30, 0xBD	; 189
    4102:	ff 4f       	sbci	r31, 0xFF	; 255
    4104:	80 81       	ld	r24, Z
    4106:	91 81       	ldd	r25, Z+1	; 0x01
    4108:	fe 01       	movw	r30, r28
    410a:	ff 96       	adiw	r30, 0x3f	; 63
    410c:	91 83       	std	Z+1, r25	; 0x01
    410e:	80 83       	st	Z, r24
    4110:	fe 01       	movw	r30, r28
    4112:	ff 96       	adiw	r30, 0x3f	; 63
    4114:	80 81       	ld	r24, Z
    4116:	91 81       	ldd	r25, Z+1	; 0x01
    4118:	01 97       	sbiw	r24, 0x01	; 1
    411a:	f1 f7       	brne	.-4      	; 0x4118 <LCD_init+0x1b4>
    411c:	fe 01       	movw	r30, r28
    411e:	ff 96       	adiw	r30, 0x3f	; 63
    4120:	91 83       	std	Z+1, r25	; 0x01
    4122:	80 83       	st	Z, r24
	//wait for
	_delay_ms(50);
	// init 4bit
	LCD_function_Set_4bit();
    4124:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <LCD_function_Set_4bit>
    4128:	80 e0       	ldi	r24, 0x00	; 0
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	a8 e4       	ldi	r26, 0x48	; 72
    412e:	b2 e4       	ldi	r27, 0x42	; 66
    4130:	8b af       	std	Y+59, r24	; 0x3b
    4132:	9c af       	std	Y+60, r25	; 0x3c
    4134:	ad af       	std	Y+61, r26	; 0x3d
    4136:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4138:	6b ad       	ldd	r22, Y+59	; 0x3b
    413a:	7c ad       	ldd	r23, Y+60	; 0x3c
    413c:	8d ad       	ldd	r24, Y+61	; 0x3d
    413e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4140:	2b ea       	ldi	r18, 0xAB	; 171
    4142:	3a ea       	ldi	r19, 0xAA	; 170
    4144:	4a e2       	ldi	r20, 0x2A	; 42
    4146:	50 e4       	ldi	r21, 0x40	; 64
    4148:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    414c:	dc 01       	movw	r26, r24
    414e:	cb 01       	movw	r24, r22
    4150:	8f ab       	std	Y+55, r24	; 0x37
    4152:	98 af       	std	Y+56, r25	; 0x38
    4154:	a9 af       	std	Y+57, r26	; 0x39
    4156:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    4158:	6f a9       	ldd	r22, Y+55	; 0x37
    415a:	78 ad       	ldd	r23, Y+56	; 0x38
    415c:	89 ad       	ldd	r24, Y+57	; 0x39
    415e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4160:	20 e0       	ldi	r18, 0x00	; 0
    4162:	30 e0       	ldi	r19, 0x00	; 0
    4164:	40 e8       	ldi	r20, 0x80	; 128
    4166:	5f e3       	ldi	r21, 0x3F	; 63
    4168:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    416c:	88 23       	and	r24, r24
    416e:	1c f4       	brge	.+6      	; 0x4176 <LCD_init+0x212>
		__ticks = 1;
    4170:	81 e0       	ldi	r24, 0x01	; 1
    4172:	8e ab       	std	Y+54, r24	; 0x36
    4174:	91 c0       	rjmp	.+290    	; 0x4298 <LCD_init+0x334>
	else if (__tmp > 255)
    4176:	6f a9       	ldd	r22, Y+55	; 0x37
    4178:	78 ad       	ldd	r23, Y+56	; 0x38
    417a:	89 ad       	ldd	r24, Y+57	; 0x39
    417c:	9a ad       	ldd	r25, Y+58	; 0x3a
    417e:	20 e0       	ldi	r18, 0x00	; 0
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	4f e7       	ldi	r20, 0x7F	; 127
    4184:	53 e4       	ldi	r21, 0x43	; 67
    4186:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    418a:	18 16       	cp	r1, r24
    418c:	0c f0       	brlt	.+2      	; 0x4190 <LCD_init+0x22c>
    418e:	7b c0       	rjmp	.+246    	; 0x4286 <LCD_init+0x322>
	{
		_delay_ms(__us / 1000.0);
    4190:	6b ad       	ldd	r22, Y+59	; 0x3b
    4192:	7c ad       	ldd	r23, Y+60	; 0x3c
    4194:	8d ad       	ldd	r24, Y+61	; 0x3d
    4196:	9e ad       	ldd	r25, Y+62	; 0x3e
    4198:	20 e0       	ldi	r18, 0x00	; 0
    419a:	30 e0       	ldi	r19, 0x00	; 0
    419c:	4a e7       	ldi	r20, 0x7A	; 122
    419e:	54 e4       	ldi	r21, 0x44	; 68
    41a0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    41a4:	dc 01       	movw	r26, r24
    41a6:	cb 01       	movw	r24, r22
    41a8:	8a ab       	std	Y+50, r24	; 0x32
    41aa:	9b ab       	std	Y+51, r25	; 0x33
    41ac:	ac ab       	std	Y+52, r26	; 0x34
    41ae:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41b0:	6a a9       	ldd	r22, Y+50	; 0x32
    41b2:	7b a9       	ldd	r23, Y+51	; 0x33
    41b4:	8c a9       	ldd	r24, Y+52	; 0x34
    41b6:	9d a9       	ldd	r25, Y+53	; 0x35
    41b8:	20 e0       	ldi	r18, 0x00	; 0
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	4a ef       	ldi	r20, 0xFA	; 250
    41be:	54 e4       	ldi	r21, 0x44	; 68
    41c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    41c4:	dc 01       	movw	r26, r24
    41c6:	cb 01       	movw	r24, r22
    41c8:	8e a7       	std	Y+46, r24	; 0x2e
    41ca:	9f a7       	std	Y+47, r25	; 0x2f
    41cc:	a8 ab       	std	Y+48, r26	; 0x30
    41ce:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    41d0:	6e a5       	ldd	r22, Y+46	; 0x2e
    41d2:	7f a5       	ldd	r23, Y+47	; 0x2f
    41d4:	88 a9       	ldd	r24, Y+48	; 0x30
    41d6:	99 a9       	ldd	r25, Y+49	; 0x31
    41d8:	20 e0       	ldi	r18, 0x00	; 0
    41da:	30 e0       	ldi	r19, 0x00	; 0
    41dc:	40 e8       	ldi	r20, 0x80	; 128
    41de:	5f e3       	ldi	r21, 0x3F	; 63
    41e0:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    41e4:	88 23       	and	r24, r24
    41e6:	2c f4       	brge	.+10     	; 0x41f2 <LCD_init+0x28e>
		__ticks = 1;
    41e8:	81 e0       	ldi	r24, 0x01	; 1
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	9d a7       	std	Y+45, r25	; 0x2d
    41ee:	8c a7       	std	Y+44, r24	; 0x2c
    41f0:	3f c0       	rjmp	.+126    	; 0x4270 <LCD_init+0x30c>
	else if (__tmp > 65535)
    41f2:	6e a5       	ldd	r22, Y+46	; 0x2e
    41f4:	7f a5       	ldd	r23, Y+47	; 0x2f
    41f6:	88 a9       	ldd	r24, Y+48	; 0x30
    41f8:	99 a9       	ldd	r25, Y+49	; 0x31
    41fa:	20 e0       	ldi	r18, 0x00	; 0
    41fc:	3f ef       	ldi	r19, 0xFF	; 255
    41fe:	4f e7       	ldi	r20, 0x7F	; 127
    4200:	57 e4       	ldi	r21, 0x47	; 71
    4202:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    4206:	18 16       	cp	r1, r24
    4208:	4c f5       	brge	.+82     	; 0x425c <LCD_init+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    420a:	6a a9       	ldd	r22, Y+50	; 0x32
    420c:	7b a9       	ldd	r23, Y+51	; 0x33
    420e:	8c a9       	ldd	r24, Y+52	; 0x34
    4210:	9d a9       	ldd	r25, Y+53	; 0x35
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	40 e2       	ldi	r20, 0x20	; 32
    4218:	51 e4       	ldi	r21, 0x41	; 65
    421a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    421e:	dc 01       	movw	r26, r24
    4220:	cb 01       	movw	r24, r22
    4222:	bc 01       	movw	r22, r24
    4224:	cd 01       	movw	r24, r26
    4226:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    422a:	dc 01       	movw	r26, r24
    422c:	cb 01       	movw	r24, r22
    422e:	9d a7       	std	Y+45, r25	; 0x2d
    4230:	8c a7       	std	Y+44, r24	; 0x2c
    4232:	0f c0       	rjmp	.+30     	; 0x4252 <LCD_init+0x2ee>
    4234:	88 ec       	ldi	r24, 0xC8	; 200
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	9b a7       	std	Y+43, r25	; 0x2b
    423a:	8a a7       	std	Y+42, r24	; 0x2a
    423c:	8a a5       	ldd	r24, Y+42	; 0x2a
    423e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4240:	01 97       	sbiw	r24, 0x01	; 1
    4242:	f1 f7       	brne	.-4      	; 0x4240 <LCD_init+0x2dc>
    4244:	9b a7       	std	Y+43, r25	; 0x2b
    4246:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4248:	8c a5       	ldd	r24, Y+44	; 0x2c
    424a:	9d a5       	ldd	r25, Y+45	; 0x2d
    424c:	01 97       	sbiw	r24, 0x01	; 1
    424e:	9d a7       	std	Y+45, r25	; 0x2d
    4250:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4252:	8c a5       	ldd	r24, Y+44	; 0x2c
    4254:	9d a5       	ldd	r25, Y+45	; 0x2d
    4256:	00 97       	sbiw	r24, 0x00	; 0
    4258:	69 f7       	brne	.-38     	; 0x4234 <LCD_init+0x2d0>
    425a:	24 c0       	rjmp	.+72     	; 0x42a4 <LCD_init+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    425c:	6e a5       	ldd	r22, Y+46	; 0x2e
    425e:	7f a5       	ldd	r23, Y+47	; 0x2f
    4260:	88 a9       	ldd	r24, Y+48	; 0x30
    4262:	99 a9       	ldd	r25, Y+49	; 0x31
    4264:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4268:	dc 01       	movw	r26, r24
    426a:	cb 01       	movw	r24, r22
    426c:	9d a7       	std	Y+45, r25	; 0x2d
    426e:	8c a7       	std	Y+44, r24	; 0x2c
    4270:	8c a5       	ldd	r24, Y+44	; 0x2c
    4272:	9d a5       	ldd	r25, Y+45	; 0x2d
    4274:	99 a7       	std	Y+41, r25	; 0x29
    4276:	88 a7       	std	Y+40, r24	; 0x28
    4278:	88 a5       	ldd	r24, Y+40	; 0x28
    427a:	99 a5       	ldd	r25, Y+41	; 0x29
    427c:	01 97       	sbiw	r24, 0x01	; 1
    427e:	f1 f7       	brne	.-4      	; 0x427c <LCD_init+0x318>
    4280:	99 a7       	std	Y+41, r25	; 0x29
    4282:	88 a7       	std	Y+40, r24	; 0x28
    4284:	0f c0       	rjmp	.+30     	; 0x42a4 <LCD_init+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4286:	6f a9       	ldd	r22, Y+55	; 0x37
    4288:	78 ad       	ldd	r23, Y+56	; 0x38
    428a:	89 ad       	ldd	r24, Y+57	; 0x39
    428c:	9a ad       	ldd	r25, Y+58	; 0x3a
    428e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4292:	dc 01       	movw	r26, r24
    4294:	cb 01       	movw	r24, r22
    4296:	8e ab       	std	Y+54, r24	; 0x36
    4298:	8e a9       	ldd	r24, Y+54	; 0x36
    429a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    429c:	8f a1       	ldd	r24, Y+39	; 0x27
    429e:	8a 95       	dec	r24
    42a0:	f1 f7       	brne	.-4      	; 0x429e <LCD_init+0x33a>
    42a2:	8f a3       	std	Y+39, r24	; 0x27
	// wait > 30 us
	_delay_us(50);
	LCD_write_command_4bit(display_On);
    42a4:	8c e0       	ldi	r24, 0x0C	; 12
    42a6:	0e 94 d6 13 	call	0x27ac	; 0x27ac <LCD_write_command_4bit>
    42aa:	80 e0       	ldi	r24, 0x00	; 0
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	a8 e4       	ldi	r26, 0x48	; 72
    42b0:	b2 e4       	ldi	r27, 0x42	; 66
    42b2:	8b a3       	std	Y+35, r24	; 0x23
    42b4:	9c a3       	std	Y+36, r25	; 0x24
    42b6:	ad a3       	std	Y+37, r26	; 0x25
    42b8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    42ba:	6b a1       	ldd	r22, Y+35	; 0x23
    42bc:	7c a1       	ldd	r23, Y+36	; 0x24
    42be:	8d a1       	ldd	r24, Y+37	; 0x25
    42c0:	9e a1       	ldd	r25, Y+38	; 0x26
    42c2:	2b ea       	ldi	r18, 0xAB	; 171
    42c4:	3a ea       	ldi	r19, 0xAA	; 170
    42c6:	4a e2       	ldi	r20, 0x2A	; 42
    42c8:	50 e4       	ldi	r21, 0x40	; 64
    42ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    42ce:	dc 01       	movw	r26, r24
    42d0:	cb 01       	movw	r24, r22
    42d2:	8f 8f       	std	Y+31, r24	; 0x1f
    42d4:	98 a3       	std	Y+32, r25	; 0x20
    42d6:	a9 a3       	std	Y+33, r26	; 0x21
    42d8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    42da:	6f 8d       	ldd	r22, Y+31	; 0x1f
    42dc:	78 a1       	ldd	r23, Y+32	; 0x20
    42de:	89 a1       	ldd	r24, Y+33	; 0x21
    42e0:	9a a1       	ldd	r25, Y+34	; 0x22
    42e2:	20 e0       	ldi	r18, 0x00	; 0
    42e4:	30 e0       	ldi	r19, 0x00	; 0
    42e6:	40 e8       	ldi	r20, 0x80	; 128
    42e8:	5f e3       	ldi	r21, 0x3F	; 63
    42ea:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    42ee:	88 23       	and	r24, r24
    42f0:	1c f4       	brge	.+6      	; 0x42f8 <LCD_init+0x394>
		__ticks = 1;
    42f2:	81 e0       	ldi	r24, 0x01	; 1
    42f4:	8e 8f       	std	Y+30, r24	; 0x1e
    42f6:	91 c0       	rjmp	.+290    	; 0x441a <LCD_init+0x4b6>
	else if (__tmp > 255)
    42f8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    42fa:	78 a1       	ldd	r23, Y+32	; 0x20
    42fc:	89 a1       	ldd	r24, Y+33	; 0x21
    42fe:	9a a1       	ldd	r25, Y+34	; 0x22
    4300:	20 e0       	ldi	r18, 0x00	; 0
    4302:	30 e0       	ldi	r19, 0x00	; 0
    4304:	4f e7       	ldi	r20, 0x7F	; 127
    4306:	53 e4       	ldi	r21, 0x43	; 67
    4308:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    430c:	18 16       	cp	r1, r24
    430e:	0c f0       	brlt	.+2      	; 0x4312 <LCD_init+0x3ae>
    4310:	7b c0       	rjmp	.+246    	; 0x4408 <LCD_init+0x4a4>
	{
		_delay_ms(__us / 1000.0);
    4312:	6b a1       	ldd	r22, Y+35	; 0x23
    4314:	7c a1       	ldd	r23, Y+36	; 0x24
    4316:	8d a1       	ldd	r24, Y+37	; 0x25
    4318:	9e a1       	ldd	r25, Y+38	; 0x26
    431a:	20 e0       	ldi	r18, 0x00	; 0
    431c:	30 e0       	ldi	r19, 0x00	; 0
    431e:	4a e7       	ldi	r20, 0x7A	; 122
    4320:	54 e4       	ldi	r21, 0x44	; 68
    4322:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    4326:	dc 01       	movw	r26, r24
    4328:	cb 01       	movw	r24, r22
    432a:	8a 8f       	std	Y+26, r24	; 0x1a
    432c:	9b 8f       	std	Y+27, r25	; 0x1b
    432e:	ac 8f       	std	Y+28, r26	; 0x1c
    4330:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4332:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4334:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4336:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4338:	9d 8d       	ldd	r25, Y+29	; 0x1d
    433a:	20 e0       	ldi	r18, 0x00	; 0
    433c:	30 e0       	ldi	r19, 0x00	; 0
    433e:	4a ef       	ldi	r20, 0xFA	; 250
    4340:	54 e4       	ldi	r21, 0x44	; 68
    4342:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4346:	dc 01       	movw	r26, r24
    4348:	cb 01       	movw	r24, r22
    434a:	8e 8b       	std	Y+22, r24	; 0x16
    434c:	9f 8b       	std	Y+23, r25	; 0x17
    434e:	a8 8f       	std	Y+24, r26	; 0x18
    4350:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    4352:	6e 89       	ldd	r22, Y+22	; 0x16
    4354:	7f 89       	ldd	r23, Y+23	; 0x17
    4356:	88 8d       	ldd	r24, Y+24	; 0x18
    4358:	99 8d       	ldd	r25, Y+25	; 0x19
    435a:	20 e0       	ldi	r18, 0x00	; 0
    435c:	30 e0       	ldi	r19, 0x00	; 0
    435e:	40 e8       	ldi	r20, 0x80	; 128
    4360:	5f e3       	ldi	r21, 0x3F	; 63
    4362:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    4366:	88 23       	and	r24, r24
    4368:	2c f4       	brge	.+10     	; 0x4374 <LCD_init+0x410>
		__ticks = 1;
    436a:	81 e0       	ldi	r24, 0x01	; 1
    436c:	90 e0       	ldi	r25, 0x00	; 0
    436e:	9d 8b       	std	Y+21, r25	; 0x15
    4370:	8c 8b       	std	Y+20, r24	; 0x14
    4372:	3f c0       	rjmp	.+126    	; 0x43f2 <LCD_init+0x48e>
	else if (__tmp > 65535)
    4374:	6e 89       	ldd	r22, Y+22	; 0x16
    4376:	7f 89       	ldd	r23, Y+23	; 0x17
    4378:	88 8d       	ldd	r24, Y+24	; 0x18
    437a:	99 8d       	ldd	r25, Y+25	; 0x19
    437c:	20 e0       	ldi	r18, 0x00	; 0
    437e:	3f ef       	ldi	r19, 0xFF	; 255
    4380:	4f e7       	ldi	r20, 0x7F	; 127
    4382:	57 e4       	ldi	r21, 0x47	; 71
    4384:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    4388:	18 16       	cp	r1, r24
    438a:	4c f5       	brge	.+82     	; 0x43de <LCD_init+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    438c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    438e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4390:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4392:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4394:	20 e0       	ldi	r18, 0x00	; 0
    4396:	30 e0       	ldi	r19, 0x00	; 0
    4398:	40 e2       	ldi	r20, 0x20	; 32
    439a:	51 e4       	ldi	r21, 0x41	; 65
    439c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    43a0:	dc 01       	movw	r26, r24
    43a2:	cb 01       	movw	r24, r22
    43a4:	bc 01       	movw	r22, r24
    43a6:	cd 01       	movw	r24, r26
    43a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    43ac:	dc 01       	movw	r26, r24
    43ae:	cb 01       	movw	r24, r22
    43b0:	9d 8b       	std	Y+21, r25	; 0x15
    43b2:	8c 8b       	std	Y+20, r24	; 0x14
    43b4:	0f c0       	rjmp	.+30     	; 0x43d4 <LCD_init+0x470>
    43b6:	88 ec       	ldi	r24, 0xC8	; 200
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	9b 8b       	std	Y+19, r25	; 0x13
    43bc:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    43be:	8a 89       	ldd	r24, Y+18	; 0x12
    43c0:	9b 89       	ldd	r25, Y+19	; 0x13
    43c2:	01 97       	sbiw	r24, 0x01	; 1
    43c4:	f1 f7       	brne	.-4      	; 0x43c2 <LCD_init+0x45e>
    43c6:	9b 8b       	std	Y+19, r25	; 0x13
    43c8:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43ca:	8c 89       	ldd	r24, Y+20	; 0x14
    43cc:	9d 89       	ldd	r25, Y+21	; 0x15
    43ce:	01 97       	sbiw	r24, 0x01	; 1
    43d0:	9d 8b       	std	Y+21, r25	; 0x15
    43d2:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43d4:	8c 89       	ldd	r24, Y+20	; 0x14
    43d6:	9d 89       	ldd	r25, Y+21	; 0x15
    43d8:	00 97       	sbiw	r24, 0x00	; 0
    43da:	69 f7       	brne	.-38     	; 0x43b6 <LCD_init+0x452>
    43dc:	24 c0       	rjmp	.+72     	; 0x4426 <LCD_init+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43de:	6e 89       	ldd	r22, Y+22	; 0x16
    43e0:	7f 89       	ldd	r23, Y+23	; 0x17
    43e2:	88 8d       	ldd	r24, Y+24	; 0x18
    43e4:	99 8d       	ldd	r25, Y+25	; 0x19
    43e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    43ea:	dc 01       	movw	r26, r24
    43ec:	cb 01       	movw	r24, r22
    43ee:	9d 8b       	std	Y+21, r25	; 0x15
    43f0:	8c 8b       	std	Y+20, r24	; 0x14
    43f2:	8c 89       	ldd	r24, Y+20	; 0x14
    43f4:	9d 89       	ldd	r25, Y+21	; 0x15
    43f6:	99 8b       	std	Y+17, r25	; 0x11
    43f8:	88 8b       	std	Y+16, r24	; 0x10
    43fa:	88 89       	ldd	r24, Y+16	; 0x10
    43fc:	99 89       	ldd	r25, Y+17	; 0x11
    43fe:	01 97       	sbiw	r24, 0x01	; 1
    4400:	f1 f7       	brne	.-4      	; 0x43fe <LCD_init+0x49a>
    4402:	99 8b       	std	Y+17, r25	; 0x11
    4404:	88 8b       	std	Y+16, r24	; 0x10
    4406:	0f c0       	rjmp	.+30     	; 0x4426 <LCD_init+0x4c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4408:	6f 8d       	ldd	r22, Y+31	; 0x1f
    440a:	78 a1       	ldd	r23, Y+32	; 0x20
    440c:	89 a1       	ldd	r24, Y+33	; 0x21
    440e:	9a a1       	ldd	r25, Y+34	; 0x22
    4410:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4414:	dc 01       	movw	r26, r24
    4416:	cb 01       	movw	r24, r22
    4418:	8e 8f       	std	Y+30, r24	; 0x1e
    441a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    441c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    441e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4420:	8a 95       	dec	r24
    4422:	f1 f7       	brne	.-4      	; 0x4420 <LCD_init+0x4bc>
    4424:	8f 87       	std	Y+15, r24	; 0x0f
	// wait > 30 us
	_delay_us(50);
	LCD_write_command_4bit(clear_Display);
    4426:	81 e0       	ldi	r24, 0x01	; 1
    4428:	0e 94 d6 13 	call	0x27ac	; 0x27ac <LCD_write_command_4bit>
    442c:	80 e0       	ldi	r24, 0x00	; 0
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	a0 e0       	ldi	r26, 0x00	; 0
    4432:	b0 e4       	ldi	r27, 0x40	; 64
    4434:	8b 87       	std	Y+11, r24	; 0x0b
    4436:	9c 87       	std	Y+12, r25	; 0x0c
    4438:	ad 87       	std	Y+13, r26	; 0x0d
    443a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    443c:	6b 85       	ldd	r22, Y+11	; 0x0b
    443e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4440:	8d 85       	ldd	r24, Y+13	; 0x0d
    4442:	9e 85       	ldd	r25, Y+14	; 0x0e
    4444:	20 e0       	ldi	r18, 0x00	; 0
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	4a ef       	ldi	r20, 0xFA	; 250
    444a:	54 e4       	ldi	r21, 0x44	; 68
    444c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4450:	dc 01       	movw	r26, r24
    4452:	cb 01       	movw	r24, r22
    4454:	8f 83       	std	Y+7, r24	; 0x07
    4456:	98 87       	std	Y+8, r25	; 0x08
    4458:	a9 87       	std	Y+9, r26	; 0x09
    445a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    445c:	6f 81       	ldd	r22, Y+7	; 0x07
    445e:	78 85       	ldd	r23, Y+8	; 0x08
    4460:	89 85       	ldd	r24, Y+9	; 0x09
    4462:	9a 85       	ldd	r25, Y+10	; 0x0a
    4464:	20 e0       	ldi	r18, 0x00	; 0
    4466:	30 e0       	ldi	r19, 0x00	; 0
    4468:	40 e8       	ldi	r20, 0x80	; 128
    446a:	5f e3       	ldi	r21, 0x3F	; 63
    446c:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    4470:	88 23       	and	r24, r24
    4472:	2c f4       	brge	.+10     	; 0x447e <LCD_init+0x51a>
		__ticks = 1;
    4474:	81 e0       	ldi	r24, 0x01	; 1
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	9e 83       	std	Y+6, r25	; 0x06
    447a:	8d 83       	std	Y+5, r24	; 0x05
    447c:	3f c0       	rjmp	.+126    	; 0x44fc <LCD_init+0x598>
	else if (__tmp > 65535)
    447e:	6f 81       	ldd	r22, Y+7	; 0x07
    4480:	78 85       	ldd	r23, Y+8	; 0x08
    4482:	89 85       	ldd	r24, Y+9	; 0x09
    4484:	9a 85       	ldd	r25, Y+10	; 0x0a
    4486:	20 e0       	ldi	r18, 0x00	; 0
    4488:	3f ef       	ldi	r19, 0xFF	; 255
    448a:	4f e7       	ldi	r20, 0x7F	; 127
    448c:	57 e4       	ldi	r21, 0x47	; 71
    448e:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    4492:	18 16       	cp	r1, r24
    4494:	4c f5       	brge	.+82     	; 0x44e8 <LCD_init+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4496:	6b 85       	ldd	r22, Y+11	; 0x0b
    4498:	7c 85       	ldd	r23, Y+12	; 0x0c
    449a:	8d 85       	ldd	r24, Y+13	; 0x0d
    449c:	9e 85       	ldd	r25, Y+14	; 0x0e
    449e:	20 e0       	ldi	r18, 0x00	; 0
    44a0:	30 e0       	ldi	r19, 0x00	; 0
    44a2:	40 e2       	ldi	r20, 0x20	; 32
    44a4:	51 e4       	ldi	r21, 0x41	; 65
    44a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    44aa:	dc 01       	movw	r26, r24
    44ac:	cb 01       	movw	r24, r22
    44ae:	bc 01       	movw	r22, r24
    44b0:	cd 01       	movw	r24, r26
    44b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    44b6:	dc 01       	movw	r26, r24
    44b8:	cb 01       	movw	r24, r22
    44ba:	9e 83       	std	Y+6, r25	; 0x06
    44bc:	8d 83       	std	Y+5, r24	; 0x05
    44be:	0f c0       	rjmp	.+30     	; 0x44de <LCD_init+0x57a>
    44c0:	88 ec       	ldi	r24, 0xC8	; 200
    44c2:	90 e0       	ldi	r25, 0x00	; 0
    44c4:	9c 83       	std	Y+4, r25	; 0x04
    44c6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    44c8:	8b 81       	ldd	r24, Y+3	; 0x03
    44ca:	9c 81       	ldd	r25, Y+4	; 0x04
    44cc:	01 97       	sbiw	r24, 0x01	; 1
    44ce:	f1 f7       	brne	.-4      	; 0x44cc <LCD_init+0x568>
    44d0:	9c 83       	std	Y+4, r25	; 0x04
    44d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44d4:	8d 81       	ldd	r24, Y+5	; 0x05
    44d6:	9e 81       	ldd	r25, Y+6	; 0x06
    44d8:	01 97       	sbiw	r24, 0x01	; 1
    44da:	9e 83       	std	Y+6, r25	; 0x06
    44dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44de:	8d 81       	ldd	r24, Y+5	; 0x05
    44e0:	9e 81       	ldd	r25, Y+6	; 0x06
    44e2:	00 97       	sbiw	r24, 0x00	; 0
    44e4:	69 f7       	brne	.-38     	; 0x44c0 <LCD_init+0x55c>
    44e6:	14 c0       	rjmp	.+40     	; 0x4510 <LCD_init+0x5ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44e8:	6f 81       	ldd	r22, Y+7	; 0x07
    44ea:	78 85       	ldd	r23, Y+8	; 0x08
    44ec:	89 85       	ldd	r24, Y+9	; 0x09
    44ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    44f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    44f4:	dc 01       	movw	r26, r24
    44f6:	cb 01       	movw	r24, r22
    44f8:	9e 83       	std	Y+6, r25	; 0x06
    44fa:	8d 83       	std	Y+5, r24	; 0x05
    44fc:	8d 81       	ldd	r24, Y+5	; 0x05
    44fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4500:	9a 83       	std	Y+2, r25	; 0x02
    4502:	89 83       	std	Y+1, r24	; 0x01
    4504:	89 81       	ldd	r24, Y+1	; 0x01
    4506:	9a 81       	ldd	r25, Y+2	; 0x02
    4508:	01 97       	sbiw	r24, 0x01	; 1
    450a:	f1 f7       	brne	.-4      	; 0x4508 <LCD_init+0x5a4>
    450c:	9a 83       	std	Y+2, r25	; 0x02
    450e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
//	LCD_write_data_4bit(entry_Mode);

#endif

}
    4510:	c4 5b       	subi	r28, 0xB4	; 180
    4512:	df 4f       	sbci	r29, 0xFF	; 255
    4514:	0f b6       	in	r0, 0x3f	; 63
    4516:	f8 94       	cli
    4518:	de bf       	out	0x3e, r29	; 62
    451a:	0f be       	out	0x3f, r0	; 63
    451c:	cd bf       	out	0x3d, r28	; 61
    451e:	cf 91       	pop	r28
    4520:	df 91       	pop	r29
    4522:	1f 91       	pop	r17
    4524:	0f 91       	pop	r16
    4526:	08 95       	ret

00004528 <LCD_set_cursor>:

void LCD_set_cursor(u8 copy_u8_row , u8 copy_u8_Column){
    4528:	df 93       	push	r29
    452a:	cf 93       	push	r28
    452c:	cd b7       	in	r28, 0x3d	; 61
    452e:	de b7       	in	r29, 0x3e	; 62
    4530:	6b 97       	sbiw	r28, 0x1b	; 27
    4532:	0f b6       	in	r0, 0x3f	; 63
    4534:	f8 94       	cli
    4536:	de bf       	out	0x3e, r29	; 62
    4538:	0f be       	out	0x3f, r0	; 63
    453a:	cd bf       	out	0x3d, r28	; 61
    453c:	8a 8f       	std	Y+26, r24	; 0x1a
    453e:	6b 8f       	std	Y+27, r22	; 0x1b
	//delay to smooth things out
	_delay_us(50);

#elif LCD_interface_mode == interface_4bit

	u8 loc_Address = 128+(copy_u8_row*line2_Start)+(copy_u8_Column);
    4540:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4542:	88 2f       	mov	r24, r24
    4544:	90 e0       	ldi	r25, 0x00	; 0
    4546:	02 96       	adiw	r24, 0x02	; 2
    4548:	00 24       	eor	r0, r0
    454a:	96 95       	lsr	r25
    454c:	87 95       	ror	r24
    454e:	07 94       	ror	r0
    4550:	96 95       	lsr	r25
    4552:	87 95       	ror	r24
    4554:	07 94       	ror	r0
    4556:	98 2f       	mov	r25, r24
    4558:	80 2d       	mov	r24, r0
    455a:	98 2f       	mov	r25, r24
    455c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    455e:	89 0f       	add	r24, r25
    4560:	89 8f       	std	Y+25, r24	; 0x19
		LCD_write_command_4bit(loc_Address);
    4562:	89 8d       	ldd	r24, Y+25	; 0x19
    4564:	0e 94 d6 13 	call	0x27ac	; 0x27ac <LCD_write_command_4bit>
    4568:	80 e0       	ldi	r24, 0x00	; 0
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	a8 e4       	ldi	r26, 0x48	; 72
    456e:	b2 e4       	ldi	r27, 0x42	; 66
    4570:	8d 8b       	std	Y+21, r24	; 0x15
    4572:	9e 8b       	std	Y+22, r25	; 0x16
    4574:	af 8b       	std	Y+23, r26	; 0x17
    4576:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4578:	6d 89       	ldd	r22, Y+21	; 0x15
    457a:	7e 89       	ldd	r23, Y+22	; 0x16
    457c:	8f 89       	ldd	r24, Y+23	; 0x17
    457e:	98 8d       	ldd	r25, Y+24	; 0x18
    4580:	2b ea       	ldi	r18, 0xAB	; 171
    4582:	3a ea       	ldi	r19, 0xAA	; 170
    4584:	4a e2       	ldi	r20, 0x2A	; 42
    4586:	50 e4       	ldi	r21, 0x40	; 64
    4588:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    458c:	dc 01       	movw	r26, r24
    458e:	cb 01       	movw	r24, r22
    4590:	89 8b       	std	Y+17, r24	; 0x11
    4592:	9a 8b       	std	Y+18, r25	; 0x12
    4594:	ab 8b       	std	Y+19, r26	; 0x13
    4596:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4598:	69 89       	ldd	r22, Y+17	; 0x11
    459a:	7a 89       	ldd	r23, Y+18	; 0x12
    459c:	8b 89       	ldd	r24, Y+19	; 0x13
    459e:	9c 89       	ldd	r25, Y+20	; 0x14
    45a0:	20 e0       	ldi	r18, 0x00	; 0
    45a2:	30 e0       	ldi	r19, 0x00	; 0
    45a4:	40 e8       	ldi	r20, 0x80	; 128
    45a6:	5f e3       	ldi	r21, 0x3F	; 63
    45a8:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    45ac:	88 23       	and	r24, r24
    45ae:	1c f4       	brge	.+6      	; 0x45b6 <LCD_set_cursor+0x8e>
		__ticks = 1;
    45b0:	81 e0       	ldi	r24, 0x01	; 1
    45b2:	88 8b       	std	Y+16, r24	; 0x10
    45b4:	91 c0       	rjmp	.+290    	; 0x46d8 <LCD_set_cursor+0x1b0>
	else if (__tmp > 255)
    45b6:	69 89       	ldd	r22, Y+17	; 0x11
    45b8:	7a 89       	ldd	r23, Y+18	; 0x12
    45ba:	8b 89       	ldd	r24, Y+19	; 0x13
    45bc:	9c 89       	ldd	r25, Y+20	; 0x14
    45be:	20 e0       	ldi	r18, 0x00	; 0
    45c0:	30 e0       	ldi	r19, 0x00	; 0
    45c2:	4f e7       	ldi	r20, 0x7F	; 127
    45c4:	53 e4       	ldi	r21, 0x43	; 67
    45c6:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    45ca:	18 16       	cp	r1, r24
    45cc:	0c f0       	brlt	.+2      	; 0x45d0 <LCD_set_cursor+0xa8>
    45ce:	7b c0       	rjmp	.+246    	; 0x46c6 <LCD_set_cursor+0x19e>
	{
		_delay_ms(__us / 1000.0);
    45d0:	6d 89       	ldd	r22, Y+21	; 0x15
    45d2:	7e 89       	ldd	r23, Y+22	; 0x16
    45d4:	8f 89       	ldd	r24, Y+23	; 0x17
    45d6:	98 8d       	ldd	r25, Y+24	; 0x18
    45d8:	20 e0       	ldi	r18, 0x00	; 0
    45da:	30 e0       	ldi	r19, 0x00	; 0
    45dc:	4a e7       	ldi	r20, 0x7A	; 122
    45de:	54 e4       	ldi	r21, 0x44	; 68
    45e0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    45e4:	dc 01       	movw	r26, r24
    45e6:	cb 01       	movw	r24, r22
    45e8:	8c 87       	std	Y+12, r24	; 0x0c
    45ea:	9d 87       	std	Y+13, r25	; 0x0d
    45ec:	ae 87       	std	Y+14, r26	; 0x0e
    45ee:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45f0:	6c 85       	ldd	r22, Y+12	; 0x0c
    45f2:	7d 85       	ldd	r23, Y+13	; 0x0d
    45f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    45f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    45f8:	20 e0       	ldi	r18, 0x00	; 0
    45fa:	30 e0       	ldi	r19, 0x00	; 0
    45fc:	4a ef       	ldi	r20, 0xFA	; 250
    45fe:	54 e4       	ldi	r21, 0x44	; 68
    4600:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4604:	dc 01       	movw	r26, r24
    4606:	cb 01       	movw	r24, r22
    4608:	88 87       	std	Y+8, r24	; 0x08
    460a:	99 87       	std	Y+9, r25	; 0x09
    460c:	aa 87       	std	Y+10, r26	; 0x0a
    460e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4610:	68 85       	ldd	r22, Y+8	; 0x08
    4612:	79 85       	ldd	r23, Y+9	; 0x09
    4614:	8a 85       	ldd	r24, Y+10	; 0x0a
    4616:	9b 85       	ldd	r25, Y+11	; 0x0b
    4618:	20 e0       	ldi	r18, 0x00	; 0
    461a:	30 e0       	ldi	r19, 0x00	; 0
    461c:	40 e8       	ldi	r20, 0x80	; 128
    461e:	5f e3       	ldi	r21, 0x3F	; 63
    4620:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    4624:	88 23       	and	r24, r24
    4626:	2c f4       	brge	.+10     	; 0x4632 <LCD_set_cursor+0x10a>
		__ticks = 1;
    4628:	81 e0       	ldi	r24, 0x01	; 1
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	9f 83       	std	Y+7, r25	; 0x07
    462e:	8e 83       	std	Y+6, r24	; 0x06
    4630:	3f c0       	rjmp	.+126    	; 0x46b0 <LCD_set_cursor+0x188>
	else if (__tmp > 65535)
    4632:	68 85       	ldd	r22, Y+8	; 0x08
    4634:	79 85       	ldd	r23, Y+9	; 0x09
    4636:	8a 85       	ldd	r24, Y+10	; 0x0a
    4638:	9b 85       	ldd	r25, Y+11	; 0x0b
    463a:	20 e0       	ldi	r18, 0x00	; 0
    463c:	3f ef       	ldi	r19, 0xFF	; 255
    463e:	4f e7       	ldi	r20, 0x7F	; 127
    4640:	57 e4       	ldi	r21, 0x47	; 71
    4642:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    4646:	18 16       	cp	r1, r24
    4648:	4c f5       	brge	.+82     	; 0x469c <LCD_set_cursor+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    464a:	6c 85       	ldd	r22, Y+12	; 0x0c
    464c:	7d 85       	ldd	r23, Y+13	; 0x0d
    464e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4650:	9f 85       	ldd	r25, Y+15	; 0x0f
    4652:	20 e0       	ldi	r18, 0x00	; 0
    4654:	30 e0       	ldi	r19, 0x00	; 0
    4656:	40 e2       	ldi	r20, 0x20	; 32
    4658:	51 e4       	ldi	r21, 0x41	; 65
    465a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    465e:	dc 01       	movw	r26, r24
    4660:	cb 01       	movw	r24, r22
    4662:	bc 01       	movw	r22, r24
    4664:	cd 01       	movw	r24, r26
    4666:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    466a:	dc 01       	movw	r26, r24
    466c:	cb 01       	movw	r24, r22
    466e:	9f 83       	std	Y+7, r25	; 0x07
    4670:	8e 83       	std	Y+6, r24	; 0x06
    4672:	0f c0       	rjmp	.+30     	; 0x4692 <LCD_set_cursor+0x16a>
    4674:	88 ec       	ldi	r24, 0xC8	; 200
    4676:	90 e0       	ldi	r25, 0x00	; 0
    4678:	9d 83       	std	Y+5, r25	; 0x05
    467a:	8c 83       	std	Y+4, r24	; 0x04
    467c:	8c 81       	ldd	r24, Y+4	; 0x04
    467e:	9d 81       	ldd	r25, Y+5	; 0x05
    4680:	01 97       	sbiw	r24, 0x01	; 1
    4682:	f1 f7       	brne	.-4      	; 0x4680 <LCD_set_cursor+0x158>
    4684:	9d 83       	std	Y+5, r25	; 0x05
    4686:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4688:	8e 81       	ldd	r24, Y+6	; 0x06
    468a:	9f 81       	ldd	r25, Y+7	; 0x07
    468c:	01 97       	sbiw	r24, 0x01	; 1
    468e:	9f 83       	std	Y+7, r25	; 0x07
    4690:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4692:	8e 81       	ldd	r24, Y+6	; 0x06
    4694:	9f 81       	ldd	r25, Y+7	; 0x07
    4696:	00 97       	sbiw	r24, 0x00	; 0
    4698:	69 f7       	brne	.-38     	; 0x4674 <LCD_set_cursor+0x14c>
    469a:	24 c0       	rjmp	.+72     	; 0x46e4 <LCD_set_cursor+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    469c:	68 85       	ldd	r22, Y+8	; 0x08
    469e:	79 85       	ldd	r23, Y+9	; 0x09
    46a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    46a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    46a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    46a8:	dc 01       	movw	r26, r24
    46aa:	cb 01       	movw	r24, r22
    46ac:	9f 83       	std	Y+7, r25	; 0x07
    46ae:	8e 83       	std	Y+6, r24	; 0x06
    46b0:	8e 81       	ldd	r24, Y+6	; 0x06
    46b2:	9f 81       	ldd	r25, Y+7	; 0x07
    46b4:	9b 83       	std	Y+3, r25	; 0x03
    46b6:	8a 83       	std	Y+2, r24	; 0x02
    46b8:	8a 81       	ldd	r24, Y+2	; 0x02
    46ba:	9b 81       	ldd	r25, Y+3	; 0x03
    46bc:	01 97       	sbiw	r24, 0x01	; 1
    46be:	f1 f7       	brne	.-4      	; 0x46bc <LCD_set_cursor+0x194>
    46c0:	9b 83       	std	Y+3, r25	; 0x03
    46c2:	8a 83       	std	Y+2, r24	; 0x02
    46c4:	0f c0       	rjmp	.+30     	; 0x46e4 <LCD_set_cursor+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    46c6:	69 89       	ldd	r22, Y+17	; 0x11
    46c8:	7a 89       	ldd	r23, Y+18	; 0x12
    46ca:	8b 89       	ldd	r24, Y+19	; 0x13
    46cc:	9c 89       	ldd	r25, Y+20	; 0x14
    46ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    46d2:	dc 01       	movw	r26, r24
    46d4:	cb 01       	movw	r24, r22
    46d6:	88 8b       	std	Y+16, r24	; 0x10
    46d8:	88 89       	ldd	r24, Y+16	; 0x10
    46da:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    46dc:	89 81       	ldd	r24, Y+1	; 0x01
    46de:	8a 95       	dec	r24
    46e0:	f1 f7       	brne	.-4      	; 0x46de <LCD_set_cursor+0x1b6>
    46e2:	89 83       	std	Y+1, r24	; 0x01

#endif



}
    46e4:	6b 96       	adiw	r28, 0x1b	; 27
    46e6:	0f b6       	in	r0, 0x3f	; 63
    46e8:	f8 94       	cli
    46ea:	de bf       	out	0x3e, r29	; 62
    46ec:	0f be       	out	0x3f, r0	; 63
    46ee:	cd bf       	out	0x3d, r28	; 61
    46f0:	cf 91       	pop	r28
    46f2:	df 91       	pop	r29
    46f4:	08 95       	ret

000046f6 <LCD_on>:

void LCD_on(){
    46f6:	df 93       	push	r29
    46f8:	cf 93       	push	r28
    46fa:	cd b7       	in	r28, 0x3d	; 61
    46fc:	de b7       	in	r29, 0x3e	; 62
    46fe:	68 97       	sbiw	r28, 0x18	; 24
    4700:	0f b6       	in	r0, 0x3f	; 63
    4702:	f8 94       	cli
    4704:	de bf       	out	0x3e, r29	; 62
    4706:	0f be       	out	0x3f, r0	; 63
    4708:	cd bf       	out	0x3d, r28	; 61
	LCD_write_command_8bit(display_On);
	_delay_us(50);

#elif LCD_interface_mode == interface_4bit

	LCD_write_command_4bit(display_On);
    470a:	8c e0       	ldi	r24, 0x0C	; 12
    470c:	0e 94 d6 13 	call	0x27ac	; 0x27ac <LCD_write_command_4bit>
    4710:	80 e0       	ldi	r24, 0x00	; 0
    4712:	90 e0       	ldi	r25, 0x00	; 0
    4714:	a8 e4       	ldi	r26, 0x48	; 72
    4716:	b2 e4       	ldi	r27, 0x42	; 66
    4718:	8d 8b       	std	Y+21, r24	; 0x15
    471a:	9e 8b       	std	Y+22, r25	; 0x16
    471c:	af 8b       	std	Y+23, r26	; 0x17
    471e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4720:	6d 89       	ldd	r22, Y+21	; 0x15
    4722:	7e 89       	ldd	r23, Y+22	; 0x16
    4724:	8f 89       	ldd	r24, Y+23	; 0x17
    4726:	98 8d       	ldd	r25, Y+24	; 0x18
    4728:	2b ea       	ldi	r18, 0xAB	; 171
    472a:	3a ea       	ldi	r19, 0xAA	; 170
    472c:	4a e2       	ldi	r20, 0x2A	; 42
    472e:	50 e4       	ldi	r21, 0x40	; 64
    4730:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4734:	dc 01       	movw	r26, r24
    4736:	cb 01       	movw	r24, r22
    4738:	89 8b       	std	Y+17, r24	; 0x11
    473a:	9a 8b       	std	Y+18, r25	; 0x12
    473c:	ab 8b       	std	Y+19, r26	; 0x13
    473e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4740:	69 89       	ldd	r22, Y+17	; 0x11
    4742:	7a 89       	ldd	r23, Y+18	; 0x12
    4744:	8b 89       	ldd	r24, Y+19	; 0x13
    4746:	9c 89       	ldd	r25, Y+20	; 0x14
    4748:	20 e0       	ldi	r18, 0x00	; 0
    474a:	30 e0       	ldi	r19, 0x00	; 0
    474c:	40 e8       	ldi	r20, 0x80	; 128
    474e:	5f e3       	ldi	r21, 0x3F	; 63
    4750:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    4754:	88 23       	and	r24, r24
    4756:	1c f4       	brge	.+6      	; 0x475e <LCD_on+0x68>
		__ticks = 1;
    4758:	81 e0       	ldi	r24, 0x01	; 1
    475a:	88 8b       	std	Y+16, r24	; 0x10
    475c:	91 c0       	rjmp	.+290    	; 0x4880 <LCD_on+0x18a>
	else if (__tmp > 255)
    475e:	69 89       	ldd	r22, Y+17	; 0x11
    4760:	7a 89       	ldd	r23, Y+18	; 0x12
    4762:	8b 89       	ldd	r24, Y+19	; 0x13
    4764:	9c 89       	ldd	r25, Y+20	; 0x14
    4766:	20 e0       	ldi	r18, 0x00	; 0
    4768:	30 e0       	ldi	r19, 0x00	; 0
    476a:	4f e7       	ldi	r20, 0x7F	; 127
    476c:	53 e4       	ldi	r21, 0x43	; 67
    476e:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    4772:	18 16       	cp	r1, r24
    4774:	0c f0       	brlt	.+2      	; 0x4778 <LCD_on+0x82>
    4776:	7b c0       	rjmp	.+246    	; 0x486e <LCD_on+0x178>
	{
		_delay_ms(__us / 1000.0);
    4778:	6d 89       	ldd	r22, Y+21	; 0x15
    477a:	7e 89       	ldd	r23, Y+22	; 0x16
    477c:	8f 89       	ldd	r24, Y+23	; 0x17
    477e:	98 8d       	ldd	r25, Y+24	; 0x18
    4780:	20 e0       	ldi	r18, 0x00	; 0
    4782:	30 e0       	ldi	r19, 0x00	; 0
    4784:	4a e7       	ldi	r20, 0x7A	; 122
    4786:	54 e4       	ldi	r21, 0x44	; 68
    4788:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    478c:	dc 01       	movw	r26, r24
    478e:	cb 01       	movw	r24, r22
    4790:	8c 87       	std	Y+12, r24	; 0x0c
    4792:	9d 87       	std	Y+13, r25	; 0x0d
    4794:	ae 87       	std	Y+14, r26	; 0x0e
    4796:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4798:	6c 85       	ldd	r22, Y+12	; 0x0c
    479a:	7d 85       	ldd	r23, Y+13	; 0x0d
    479c:	8e 85       	ldd	r24, Y+14	; 0x0e
    479e:	9f 85       	ldd	r25, Y+15	; 0x0f
    47a0:	20 e0       	ldi	r18, 0x00	; 0
    47a2:	30 e0       	ldi	r19, 0x00	; 0
    47a4:	4a ef       	ldi	r20, 0xFA	; 250
    47a6:	54 e4       	ldi	r21, 0x44	; 68
    47a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    47ac:	dc 01       	movw	r26, r24
    47ae:	cb 01       	movw	r24, r22
    47b0:	88 87       	std	Y+8, r24	; 0x08
    47b2:	99 87       	std	Y+9, r25	; 0x09
    47b4:	aa 87       	std	Y+10, r26	; 0x0a
    47b6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    47b8:	68 85       	ldd	r22, Y+8	; 0x08
    47ba:	79 85       	ldd	r23, Y+9	; 0x09
    47bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    47be:	9b 85       	ldd	r25, Y+11	; 0x0b
    47c0:	20 e0       	ldi	r18, 0x00	; 0
    47c2:	30 e0       	ldi	r19, 0x00	; 0
    47c4:	40 e8       	ldi	r20, 0x80	; 128
    47c6:	5f e3       	ldi	r21, 0x3F	; 63
    47c8:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    47cc:	88 23       	and	r24, r24
    47ce:	2c f4       	brge	.+10     	; 0x47da <LCD_on+0xe4>
		__ticks = 1;
    47d0:	81 e0       	ldi	r24, 0x01	; 1
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	9f 83       	std	Y+7, r25	; 0x07
    47d6:	8e 83       	std	Y+6, r24	; 0x06
    47d8:	3f c0       	rjmp	.+126    	; 0x4858 <LCD_on+0x162>
	else if (__tmp > 65535)
    47da:	68 85       	ldd	r22, Y+8	; 0x08
    47dc:	79 85       	ldd	r23, Y+9	; 0x09
    47de:	8a 85       	ldd	r24, Y+10	; 0x0a
    47e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    47e2:	20 e0       	ldi	r18, 0x00	; 0
    47e4:	3f ef       	ldi	r19, 0xFF	; 255
    47e6:	4f e7       	ldi	r20, 0x7F	; 127
    47e8:	57 e4       	ldi	r21, 0x47	; 71
    47ea:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    47ee:	18 16       	cp	r1, r24
    47f0:	4c f5       	brge	.+82     	; 0x4844 <LCD_on+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    47f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    47f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    47f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    47fa:	20 e0       	ldi	r18, 0x00	; 0
    47fc:	30 e0       	ldi	r19, 0x00	; 0
    47fe:	40 e2       	ldi	r20, 0x20	; 32
    4800:	51 e4       	ldi	r21, 0x41	; 65
    4802:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4806:	dc 01       	movw	r26, r24
    4808:	cb 01       	movw	r24, r22
    480a:	bc 01       	movw	r22, r24
    480c:	cd 01       	movw	r24, r26
    480e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4812:	dc 01       	movw	r26, r24
    4814:	cb 01       	movw	r24, r22
    4816:	9f 83       	std	Y+7, r25	; 0x07
    4818:	8e 83       	std	Y+6, r24	; 0x06
    481a:	0f c0       	rjmp	.+30     	; 0x483a <LCD_on+0x144>
    481c:	88 ec       	ldi	r24, 0xC8	; 200
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	9d 83       	std	Y+5, r25	; 0x05
    4822:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4824:	8c 81       	ldd	r24, Y+4	; 0x04
    4826:	9d 81       	ldd	r25, Y+5	; 0x05
    4828:	01 97       	sbiw	r24, 0x01	; 1
    482a:	f1 f7       	brne	.-4      	; 0x4828 <LCD_on+0x132>
    482c:	9d 83       	std	Y+5, r25	; 0x05
    482e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4830:	8e 81       	ldd	r24, Y+6	; 0x06
    4832:	9f 81       	ldd	r25, Y+7	; 0x07
    4834:	01 97       	sbiw	r24, 0x01	; 1
    4836:	9f 83       	std	Y+7, r25	; 0x07
    4838:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    483a:	8e 81       	ldd	r24, Y+6	; 0x06
    483c:	9f 81       	ldd	r25, Y+7	; 0x07
    483e:	00 97       	sbiw	r24, 0x00	; 0
    4840:	69 f7       	brne	.-38     	; 0x481c <LCD_on+0x126>
    4842:	24 c0       	rjmp	.+72     	; 0x488c <LCD_on+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4844:	68 85       	ldd	r22, Y+8	; 0x08
    4846:	79 85       	ldd	r23, Y+9	; 0x09
    4848:	8a 85       	ldd	r24, Y+10	; 0x0a
    484a:	9b 85       	ldd	r25, Y+11	; 0x0b
    484c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4850:	dc 01       	movw	r26, r24
    4852:	cb 01       	movw	r24, r22
    4854:	9f 83       	std	Y+7, r25	; 0x07
    4856:	8e 83       	std	Y+6, r24	; 0x06
    4858:	8e 81       	ldd	r24, Y+6	; 0x06
    485a:	9f 81       	ldd	r25, Y+7	; 0x07
    485c:	9b 83       	std	Y+3, r25	; 0x03
    485e:	8a 83       	std	Y+2, r24	; 0x02
    4860:	8a 81       	ldd	r24, Y+2	; 0x02
    4862:	9b 81       	ldd	r25, Y+3	; 0x03
    4864:	01 97       	sbiw	r24, 0x01	; 1
    4866:	f1 f7       	brne	.-4      	; 0x4864 <LCD_on+0x16e>
    4868:	9b 83       	std	Y+3, r25	; 0x03
    486a:	8a 83       	std	Y+2, r24	; 0x02
    486c:	0f c0       	rjmp	.+30     	; 0x488c <LCD_on+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    486e:	69 89       	ldd	r22, Y+17	; 0x11
    4870:	7a 89       	ldd	r23, Y+18	; 0x12
    4872:	8b 89       	ldd	r24, Y+19	; 0x13
    4874:	9c 89       	ldd	r25, Y+20	; 0x14
    4876:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    487a:	dc 01       	movw	r26, r24
    487c:	cb 01       	movw	r24, r22
    487e:	88 8b       	std	Y+16, r24	; 0x10
    4880:	88 89       	ldd	r24, Y+16	; 0x10
    4882:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4884:	89 81       	ldd	r24, Y+1	; 0x01
    4886:	8a 95       	dec	r24
    4888:	f1 f7       	brne	.-4      	; 0x4886 <LCD_on+0x190>
    488a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);

#endif


}
    488c:	68 96       	adiw	r28, 0x18	; 24
    488e:	0f b6       	in	r0, 0x3f	; 63
    4890:	f8 94       	cli
    4892:	de bf       	out	0x3e, r29	; 62
    4894:	0f be       	out	0x3f, r0	; 63
    4896:	cd bf       	out	0x3d, r28	; 61
    4898:	cf 91       	pop	r28
    489a:	df 91       	pop	r29
    489c:	08 95       	ret

0000489e <LCD_off>:

void LCD_off(){
    489e:	df 93       	push	r29
    48a0:	cf 93       	push	r28
    48a2:	cd b7       	in	r28, 0x3d	; 61
    48a4:	de b7       	in	r29, 0x3e	; 62
    48a6:	68 97       	sbiw	r28, 0x18	; 24
    48a8:	0f b6       	in	r0, 0x3f	; 63
    48aa:	f8 94       	cli
    48ac:	de bf       	out	0x3e, r29	; 62
    48ae:	0f be       	out	0x3f, r0	; 63
    48b0:	cd bf       	out	0x3d, r28	; 61
	LCD_write_command_8bit(display_Off);
	_delay_us(50);

#elif LCD_interface_mode == interface_4bit

	LCD_write_command_4bit(display_Off);
    48b2:	88 e0       	ldi	r24, 0x08	; 8
    48b4:	0e 94 d6 13 	call	0x27ac	; 0x27ac <LCD_write_command_4bit>
    48b8:	80 e0       	ldi	r24, 0x00	; 0
    48ba:	90 e0       	ldi	r25, 0x00	; 0
    48bc:	a8 e4       	ldi	r26, 0x48	; 72
    48be:	b2 e4       	ldi	r27, 0x42	; 66
    48c0:	8d 8b       	std	Y+21, r24	; 0x15
    48c2:	9e 8b       	std	Y+22, r25	; 0x16
    48c4:	af 8b       	std	Y+23, r26	; 0x17
    48c6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    48c8:	6d 89       	ldd	r22, Y+21	; 0x15
    48ca:	7e 89       	ldd	r23, Y+22	; 0x16
    48cc:	8f 89       	ldd	r24, Y+23	; 0x17
    48ce:	98 8d       	ldd	r25, Y+24	; 0x18
    48d0:	2b ea       	ldi	r18, 0xAB	; 171
    48d2:	3a ea       	ldi	r19, 0xAA	; 170
    48d4:	4a e2       	ldi	r20, 0x2A	; 42
    48d6:	50 e4       	ldi	r21, 0x40	; 64
    48d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    48dc:	dc 01       	movw	r26, r24
    48de:	cb 01       	movw	r24, r22
    48e0:	89 8b       	std	Y+17, r24	; 0x11
    48e2:	9a 8b       	std	Y+18, r25	; 0x12
    48e4:	ab 8b       	std	Y+19, r26	; 0x13
    48e6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    48e8:	69 89       	ldd	r22, Y+17	; 0x11
    48ea:	7a 89       	ldd	r23, Y+18	; 0x12
    48ec:	8b 89       	ldd	r24, Y+19	; 0x13
    48ee:	9c 89       	ldd	r25, Y+20	; 0x14
    48f0:	20 e0       	ldi	r18, 0x00	; 0
    48f2:	30 e0       	ldi	r19, 0x00	; 0
    48f4:	40 e8       	ldi	r20, 0x80	; 128
    48f6:	5f e3       	ldi	r21, 0x3F	; 63
    48f8:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    48fc:	88 23       	and	r24, r24
    48fe:	1c f4       	brge	.+6      	; 0x4906 <LCD_off+0x68>
		__ticks = 1;
    4900:	81 e0       	ldi	r24, 0x01	; 1
    4902:	88 8b       	std	Y+16, r24	; 0x10
    4904:	91 c0       	rjmp	.+290    	; 0x4a28 <LCD_off+0x18a>
	else if (__tmp > 255)
    4906:	69 89       	ldd	r22, Y+17	; 0x11
    4908:	7a 89       	ldd	r23, Y+18	; 0x12
    490a:	8b 89       	ldd	r24, Y+19	; 0x13
    490c:	9c 89       	ldd	r25, Y+20	; 0x14
    490e:	20 e0       	ldi	r18, 0x00	; 0
    4910:	30 e0       	ldi	r19, 0x00	; 0
    4912:	4f e7       	ldi	r20, 0x7F	; 127
    4914:	53 e4       	ldi	r21, 0x43	; 67
    4916:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    491a:	18 16       	cp	r1, r24
    491c:	0c f0       	brlt	.+2      	; 0x4920 <LCD_off+0x82>
    491e:	7b c0       	rjmp	.+246    	; 0x4a16 <LCD_off+0x178>
	{
		_delay_ms(__us / 1000.0);
    4920:	6d 89       	ldd	r22, Y+21	; 0x15
    4922:	7e 89       	ldd	r23, Y+22	; 0x16
    4924:	8f 89       	ldd	r24, Y+23	; 0x17
    4926:	98 8d       	ldd	r25, Y+24	; 0x18
    4928:	20 e0       	ldi	r18, 0x00	; 0
    492a:	30 e0       	ldi	r19, 0x00	; 0
    492c:	4a e7       	ldi	r20, 0x7A	; 122
    492e:	54 e4       	ldi	r21, 0x44	; 68
    4930:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    4934:	dc 01       	movw	r26, r24
    4936:	cb 01       	movw	r24, r22
    4938:	8c 87       	std	Y+12, r24	; 0x0c
    493a:	9d 87       	std	Y+13, r25	; 0x0d
    493c:	ae 87       	std	Y+14, r26	; 0x0e
    493e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4940:	6c 85       	ldd	r22, Y+12	; 0x0c
    4942:	7d 85       	ldd	r23, Y+13	; 0x0d
    4944:	8e 85       	ldd	r24, Y+14	; 0x0e
    4946:	9f 85       	ldd	r25, Y+15	; 0x0f
    4948:	20 e0       	ldi	r18, 0x00	; 0
    494a:	30 e0       	ldi	r19, 0x00	; 0
    494c:	4a ef       	ldi	r20, 0xFA	; 250
    494e:	54 e4       	ldi	r21, 0x44	; 68
    4950:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4954:	dc 01       	movw	r26, r24
    4956:	cb 01       	movw	r24, r22
    4958:	88 87       	std	Y+8, r24	; 0x08
    495a:	99 87       	std	Y+9, r25	; 0x09
    495c:	aa 87       	std	Y+10, r26	; 0x0a
    495e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4960:	68 85       	ldd	r22, Y+8	; 0x08
    4962:	79 85       	ldd	r23, Y+9	; 0x09
    4964:	8a 85       	ldd	r24, Y+10	; 0x0a
    4966:	9b 85       	ldd	r25, Y+11	; 0x0b
    4968:	20 e0       	ldi	r18, 0x00	; 0
    496a:	30 e0       	ldi	r19, 0x00	; 0
    496c:	40 e8       	ldi	r20, 0x80	; 128
    496e:	5f e3       	ldi	r21, 0x3F	; 63
    4970:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    4974:	88 23       	and	r24, r24
    4976:	2c f4       	brge	.+10     	; 0x4982 <LCD_off+0xe4>
		__ticks = 1;
    4978:	81 e0       	ldi	r24, 0x01	; 1
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	9f 83       	std	Y+7, r25	; 0x07
    497e:	8e 83       	std	Y+6, r24	; 0x06
    4980:	3f c0       	rjmp	.+126    	; 0x4a00 <LCD_off+0x162>
	else if (__tmp > 65535)
    4982:	68 85       	ldd	r22, Y+8	; 0x08
    4984:	79 85       	ldd	r23, Y+9	; 0x09
    4986:	8a 85       	ldd	r24, Y+10	; 0x0a
    4988:	9b 85       	ldd	r25, Y+11	; 0x0b
    498a:	20 e0       	ldi	r18, 0x00	; 0
    498c:	3f ef       	ldi	r19, 0xFF	; 255
    498e:	4f e7       	ldi	r20, 0x7F	; 127
    4990:	57 e4       	ldi	r21, 0x47	; 71
    4992:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    4996:	18 16       	cp	r1, r24
    4998:	4c f5       	brge	.+82     	; 0x49ec <LCD_off+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    499a:	6c 85       	ldd	r22, Y+12	; 0x0c
    499c:	7d 85       	ldd	r23, Y+13	; 0x0d
    499e:	8e 85       	ldd	r24, Y+14	; 0x0e
    49a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    49a2:	20 e0       	ldi	r18, 0x00	; 0
    49a4:	30 e0       	ldi	r19, 0x00	; 0
    49a6:	40 e2       	ldi	r20, 0x20	; 32
    49a8:	51 e4       	ldi	r21, 0x41	; 65
    49aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    49ae:	dc 01       	movw	r26, r24
    49b0:	cb 01       	movw	r24, r22
    49b2:	bc 01       	movw	r22, r24
    49b4:	cd 01       	movw	r24, r26
    49b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    49ba:	dc 01       	movw	r26, r24
    49bc:	cb 01       	movw	r24, r22
    49be:	9f 83       	std	Y+7, r25	; 0x07
    49c0:	8e 83       	std	Y+6, r24	; 0x06
    49c2:	0f c0       	rjmp	.+30     	; 0x49e2 <LCD_off+0x144>
    49c4:	88 ec       	ldi	r24, 0xC8	; 200
    49c6:	90 e0       	ldi	r25, 0x00	; 0
    49c8:	9d 83       	std	Y+5, r25	; 0x05
    49ca:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    49cc:	8c 81       	ldd	r24, Y+4	; 0x04
    49ce:	9d 81       	ldd	r25, Y+5	; 0x05
    49d0:	01 97       	sbiw	r24, 0x01	; 1
    49d2:	f1 f7       	brne	.-4      	; 0x49d0 <LCD_off+0x132>
    49d4:	9d 83       	std	Y+5, r25	; 0x05
    49d6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49d8:	8e 81       	ldd	r24, Y+6	; 0x06
    49da:	9f 81       	ldd	r25, Y+7	; 0x07
    49dc:	01 97       	sbiw	r24, 0x01	; 1
    49de:	9f 83       	std	Y+7, r25	; 0x07
    49e0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49e2:	8e 81       	ldd	r24, Y+6	; 0x06
    49e4:	9f 81       	ldd	r25, Y+7	; 0x07
    49e6:	00 97       	sbiw	r24, 0x00	; 0
    49e8:	69 f7       	brne	.-38     	; 0x49c4 <LCD_off+0x126>
    49ea:	24 c0       	rjmp	.+72     	; 0x4a34 <LCD_off+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49ec:	68 85       	ldd	r22, Y+8	; 0x08
    49ee:	79 85       	ldd	r23, Y+9	; 0x09
    49f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    49f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    49f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    49f8:	dc 01       	movw	r26, r24
    49fa:	cb 01       	movw	r24, r22
    49fc:	9f 83       	std	Y+7, r25	; 0x07
    49fe:	8e 83       	std	Y+6, r24	; 0x06
    4a00:	8e 81       	ldd	r24, Y+6	; 0x06
    4a02:	9f 81       	ldd	r25, Y+7	; 0x07
    4a04:	9b 83       	std	Y+3, r25	; 0x03
    4a06:	8a 83       	std	Y+2, r24	; 0x02
    4a08:	8a 81       	ldd	r24, Y+2	; 0x02
    4a0a:	9b 81       	ldd	r25, Y+3	; 0x03
    4a0c:	01 97       	sbiw	r24, 0x01	; 1
    4a0e:	f1 f7       	brne	.-4      	; 0x4a0c <LCD_off+0x16e>
    4a10:	9b 83       	std	Y+3, r25	; 0x03
    4a12:	8a 83       	std	Y+2, r24	; 0x02
    4a14:	0f c0       	rjmp	.+30     	; 0x4a34 <LCD_off+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4a16:	69 89       	ldd	r22, Y+17	; 0x11
    4a18:	7a 89       	ldd	r23, Y+18	; 0x12
    4a1a:	8b 89       	ldd	r24, Y+19	; 0x13
    4a1c:	9c 89       	ldd	r25, Y+20	; 0x14
    4a1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4a22:	dc 01       	movw	r26, r24
    4a24:	cb 01       	movw	r24, r22
    4a26:	88 8b       	std	Y+16, r24	; 0x10
    4a28:	88 89       	ldd	r24, Y+16	; 0x10
    4a2a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4a2c:	89 81       	ldd	r24, Y+1	; 0x01
    4a2e:	8a 95       	dec	r24
    4a30:	f1 f7       	brne	.-4      	; 0x4a2e <LCD_off+0x190>
    4a32:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);

#endif


}
    4a34:	68 96       	adiw	r28, 0x18	; 24
    4a36:	0f b6       	in	r0, 0x3f	; 63
    4a38:	f8 94       	cli
    4a3a:	de bf       	out	0x3e, r29	; 62
    4a3c:	0f be       	out	0x3f, r0	; 63
    4a3e:	cd bf       	out	0x3d, r28	; 61
    4a40:	cf 91       	pop	r28
    4a42:	df 91       	pop	r29
    4a44:	08 95       	ret

00004a46 <LCD_clear_display>:

void LCD_clear_display(){
    4a46:	df 93       	push	r29
    4a48:	cf 93       	push	r28
    4a4a:	cd b7       	in	r28, 0x3d	; 61
    4a4c:	de b7       	in	r29, 0x3e	; 62
    4a4e:	6c 97       	sbiw	r28, 0x1c	; 28
    4a50:	0f b6       	in	r0, 0x3f	; 63
    4a52:	f8 94       	cli
    4a54:	de bf       	out	0x3e, r29	; 62
    4a56:	0f be       	out	0x3f, r0	; 63
    4a58:	cd bf       	out	0x3d, r28	; 61
	//return home
	LCD_write_command_8bit(return_Home);
	_delay_ms(2);

#elif LCD_interface_mode == interface_4bit
	LCD_write_command_4bit(clear_Display);
    4a5a:	81 e0       	ldi	r24, 0x01	; 1
    4a5c:	0e 94 d6 13 	call	0x27ac	; 0x27ac <LCD_write_command_4bit>
    4a60:	80 e0       	ldi	r24, 0x00	; 0
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	a0 e0       	ldi	r26, 0x00	; 0
    4a66:	b0 e4       	ldi	r27, 0x40	; 64
    4a68:	89 8f       	std	Y+25, r24	; 0x19
    4a6a:	9a 8f       	std	Y+26, r25	; 0x1a
    4a6c:	ab 8f       	std	Y+27, r26	; 0x1b
    4a6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a70:	69 8d       	ldd	r22, Y+25	; 0x19
    4a72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a78:	20 e0       	ldi	r18, 0x00	; 0
    4a7a:	30 e0       	ldi	r19, 0x00	; 0
    4a7c:	4a ef       	ldi	r20, 0xFA	; 250
    4a7e:	54 e4       	ldi	r21, 0x44	; 68
    4a80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4a84:	dc 01       	movw	r26, r24
    4a86:	cb 01       	movw	r24, r22
    4a88:	8d 8b       	std	Y+21, r24	; 0x15
    4a8a:	9e 8b       	std	Y+22, r25	; 0x16
    4a8c:	af 8b       	std	Y+23, r26	; 0x17
    4a8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4a90:	6d 89       	ldd	r22, Y+21	; 0x15
    4a92:	7e 89       	ldd	r23, Y+22	; 0x16
    4a94:	8f 89       	ldd	r24, Y+23	; 0x17
    4a96:	98 8d       	ldd	r25, Y+24	; 0x18
    4a98:	20 e0       	ldi	r18, 0x00	; 0
    4a9a:	30 e0       	ldi	r19, 0x00	; 0
    4a9c:	40 e8       	ldi	r20, 0x80	; 128
    4a9e:	5f e3       	ldi	r21, 0x3F	; 63
    4aa0:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    4aa4:	88 23       	and	r24, r24
    4aa6:	2c f4       	brge	.+10     	; 0x4ab2 <LCD_clear_display+0x6c>
		__ticks = 1;
    4aa8:	81 e0       	ldi	r24, 0x01	; 1
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	9c 8b       	std	Y+20, r25	; 0x14
    4aae:	8b 8b       	std	Y+19, r24	; 0x13
    4ab0:	3f c0       	rjmp	.+126    	; 0x4b30 <LCD_clear_display+0xea>
	else if (__tmp > 65535)
    4ab2:	6d 89       	ldd	r22, Y+21	; 0x15
    4ab4:	7e 89       	ldd	r23, Y+22	; 0x16
    4ab6:	8f 89       	ldd	r24, Y+23	; 0x17
    4ab8:	98 8d       	ldd	r25, Y+24	; 0x18
    4aba:	20 e0       	ldi	r18, 0x00	; 0
    4abc:	3f ef       	ldi	r19, 0xFF	; 255
    4abe:	4f e7       	ldi	r20, 0x7F	; 127
    4ac0:	57 e4       	ldi	r21, 0x47	; 71
    4ac2:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    4ac6:	18 16       	cp	r1, r24
    4ac8:	4c f5       	brge	.+82     	; 0x4b1c <LCD_clear_display+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aca:	69 8d       	ldd	r22, Y+25	; 0x19
    4acc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ace:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ad0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ad2:	20 e0       	ldi	r18, 0x00	; 0
    4ad4:	30 e0       	ldi	r19, 0x00	; 0
    4ad6:	40 e2       	ldi	r20, 0x20	; 32
    4ad8:	51 e4       	ldi	r21, 0x41	; 65
    4ada:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ade:	dc 01       	movw	r26, r24
    4ae0:	cb 01       	movw	r24, r22
    4ae2:	bc 01       	movw	r22, r24
    4ae4:	cd 01       	movw	r24, r26
    4ae6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4aea:	dc 01       	movw	r26, r24
    4aec:	cb 01       	movw	r24, r22
    4aee:	9c 8b       	std	Y+20, r25	; 0x14
    4af0:	8b 8b       	std	Y+19, r24	; 0x13
    4af2:	0f c0       	rjmp	.+30     	; 0x4b12 <LCD_clear_display+0xcc>
    4af4:	88 ec       	ldi	r24, 0xC8	; 200
    4af6:	90 e0       	ldi	r25, 0x00	; 0
    4af8:	9a 8b       	std	Y+18, r25	; 0x12
    4afa:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4afc:	89 89       	ldd	r24, Y+17	; 0x11
    4afe:	9a 89       	ldd	r25, Y+18	; 0x12
    4b00:	01 97       	sbiw	r24, 0x01	; 1
    4b02:	f1 f7       	brne	.-4      	; 0x4b00 <LCD_clear_display+0xba>
    4b04:	9a 8b       	std	Y+18, r25	; 0x12
    4b06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b08:	8b 89       	ldd	r24, Y+19	; 0x13
    4b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    4b0c:	01 97       	sbiw	r24, 0x01	; 1
    4b0e:	9c 8b       	std	Y+20, r25	; 0x14
    4b10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b12:	8b 89       	ldd	r24, Y+19	; 0x13
    4b14:	9c 89       	ldd	r25, Y+20	; 0x14
    4b16:	00 97       	sbiw	r24, 0x00	; 0
    4b18:	69 f7       	brne	.-38     	; 0x4af4 <LCD_clear_display+0xae>
    4b1a:	14 c0       	rjmp	.+40     	; 0x4b44 <LCD_clear_display+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b1c:	6d 89       	ldd	r22, Y+21	; 0x15
    4b1e:	7e 89       	ldd	r23, Y+22	; 0x16
    4b20:	8f 89       	ldd	r24, Y+23	; 0x17
    4b22:	98 8d       	ldd	r25, Y+24	; 0x18
    4b24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4b28:	dc 01       	movw	r26, r24
    4b2a:	cb 01       	movw	r24, r22
    4b2c:	9c 8b       	std	Y+20, r25	; 0x14
    4b2e:	8b 8b       	std	Y+19, r24	; 0x13
    4b30:	8b 89       	ldd	r24, Y+19	; 0x13
    4b32:	9c 89       	ldd	r25, Y+20	; 0x14
    4b34:	98 8b       	std	Y+16, r25	; 0x10
    4b36:	8f 87       	std	Y+15, r24	; 0x0f
    4b38:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b3a:	98 89       	ldd	r25, Y+16	; 0x10
    4b3c:	01 97       	sbiw	r24, 0x01	; 1
    4b3e:	f1 f7       	brne	.-4      	; 0x4b3c <LCD_clear_display+0xf6>
    4b40:	98 8b       	std	Y+16, r25	; 0x10
    4b42:	8f 87       	std	Y+15, r24	; 0x0f
	//wait more than 1.53 ms
	_delay_ms(2);
	//return home
	LCD_write_command_4bit(return_Home);
    4b44:	82 e0       	ldi	r24, 0x02	; 2
    4b46:	0e 94 d6 13 	call	0x27ac	; 0x27ac <LCD_write_command_4bit>
    4b4a:	80 e0       	ldi	r24, 0x00	; 0
    4b4c:	90 e0       	ldi	r25, 0x00	; 0
    4b4e:	a0 e0       	ldi	r26, 0x00	; 0
    4b50:	b0 e4       	ldi	r27, 0x40	; 64
    4b52:	8b 87       	std	Y+11, r24	; 0x0b
    4b54:	9c 87       	std	Y+12, r25	; 0x0c
    4b56:	ad 87       	std	Y+13, r26	; 0x0d
    4b58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b60:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b62:	20 e0       	ldi	r18, 0x00	; 0
    4b64:	30 e0       	ldi	r19, 0x00	; 0
    4b66:	4a ef       	ldi	r20, 0xFA	; 250
    4b68:	54 e4       	ldi	r21, 0x44	; 68
    4b6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4b6e:	dc 01       	movw	r26, r24
    4b70:	cb 01       	movw	r24, r22
    4b72:	8f 83       	std	Y+7, r24	; 0x07
    4b74:	98 87       	std	Y+8, r25	; 0x08
    4b76:	a9 87       	std	Y+9, r26	; 0x09
    4b78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b7a:	6f 81       	ldd	r22, Y+7	; 0x07
    4b7c:	78 85       	ldd	r23, Y+8	; 0x08
    4b7e:	89 85       	ldd	r24, Y+9	; 0x09
    4b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b82:	20 e0       	ldi	r18, 0x00	; 0
    4b84:	30 e0       	ldi	r19, 0x00	; 0
    4b86:	40 e8       	ldi	r20, 0x80	; 128
    4b88:	5f e3       	ldi	r21, 0x3F	; 63
    4b8a:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    4b8e:	88 23       	and	r24, r24
    4b90:	2c f4       	brge	.+10     	; 0x4b9c <LCD_clear_display+0x156>
		__ticks = 1;
    4b92:	81 e0       	ldi	r24, 0x01	; 1
    4b94:	90 e0       	ldi	r25, 0x00	; 0
    4b96:	9e 83       	std	Y+6, r25	; 0x06
    4b98:	8d 83       	std	Y+5, r24	; 0x05
    4b9a:	3f c0       	rjmp	.+126    	; 0x4c1a <LCD_clear_display+0x1d4>
	else if (__tmp > 65535)
    4b9c:	6f 81       	ldd	r22, Y+7	; 0x07
    4b9e:	78 85       	ldd	r23, Y+8	; 0x08
    4ba0:	89 85       	ldd	r24, Y+9	; 0x09
    4ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ba4:	20 e0       	ldi	r18, 0x00	; 0
    4ba6:	3f ef       	ldi	r19, 0xFF	; 255
    4ba8:	4f e7       	ldi	r20, 0x7F	; 127
    4baa:	57 e4       	ldi	r21, 0x47	; 71
    4bac:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    4bb0:	18 16       	cp	r1, r24
    4bb2:	4c f5       	brge	.+82     	; 0x4c06 <LCD_clear_display+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bba:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bbc:	20 e0       	ldi	r18, 0x00	; 0
    4bbe:	30 e0       	ldi	r19, 0x00	; 0
    4bc0:	40 e2       	ldi	r20, 0x20	; 32
    4bc2:	51 e4       	ldi	r21, 0x41	; 65
    4bc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4bc8:	dc 01       	movw	r26, r24
    4bca:	cb 01       	movw	r24, r22
    4bcc:	bc 01       	movw	r22, r24
    4bce:	cd 01       	movw	r24, r26
    4bd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4bd4:	dc 01       	movw	r26, r24
    4bd6:	cb 01       	movw	r24, r22
    4bd8:	9e 83       	std	Y+6, r25	; 0x06
    4bda:	8d 83       	std	Y+5, r24	; 0x05
    4bdc:	0f c0       	rjmp	.+30     	; 0x4bfc <LCD_clear_display+0x1b6>
    4bde:	88 ec       	ldi	r24, 0xC8	; 200
    4be0:	90 e0       	ldi	r25, 0x00	; 0
    4be2:	9c 83       	std	Y+4, r25	; 0x04
    4be4:	8b 83       	std	Y+3, r24	; 0x03
    4be6:	8b 81       	ldd	r24, Y+3	; 0x03
    4be8:	9c 81       	ldd	r25, Y+4	; 0x04
    4bea:	01 97       	sbiw	r24, 0x01	; 1
    4bec:	f1 f7       	brne	.-4      	; 0x4bea <LCD_clear_display+0x1a4>
    4bee:	9c 83       	std	Y+4, r25	; 0x04
    4bf0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    4bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    4bf6:	01 97       	sbiw	r24, 0x01	; 1
    4bf8:	9e 83       	std	Y+6, r25	; 0x06
    4bfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    4bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    4c00:	00 97       	sbiw	r24, 0x00	; 0
    4c02:	69 f7       	brne	.-38     	; 0x4bde <LCD_clear_display+0x198>
    4c04:	14 c0       	rjmp	.+40     	; 0x4c2e <LCD_clear_display+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c06:	6f 81       	ldd	r22, Y+7	; 0x07
    4c08:	78 85       	ldd	r23, Y+8	; 0x08
    4c0a:	89 85       	ldd	r24, Y+9	; 0x09
    4c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4c12:	dc 01       	movw	r26, r24
    4c14:	cb 01       	movw	r24, r22
    4c16:	9e 83       	std	Y+6, r25	; 0x06
    4c18:	8d 83       	std	Y+5, r24	; 0x05
    4c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c1c:	9e 81       	ldd	r25, Y+6	; 0x06
    4c1e:	9a 83       	std	Y+2, r25	; 0x02
    4c20:	89 83       	std	Y+1, r24	; 0x01
    4c22:	89 81       	ldd	r24, Y+1	; 0x01
    4c24:	9a 81       	ldd	r25, Y+2	; 0x02
    4c26:	01 97       	sbiw	r24, 0x01	; 1
    4c28:	f1 f7       	brne	.-4      	; 0x4c26 <LCD_clear_display+0x1e0>
    4c2a:	9a 83       	std	Y+2, r25	; 0x02
    4c2c:	89 83       	std	Y+1, r24	; 0x01
	// wait more han 1.53 ms
	_delay_ms(2);
#endif


}
    4c2e:	6c 96       	adiw	r28, 0x1c	; 28
    4c30:	0f b6       	in	r0, 0x3f	; 63
    4c32:	f8 94       	cli
    4c34:	de bf       	out	0x3e, r29	; 62
    4c36:	0f be       	out	0x3f, r0	; 63
    4c38:	cd bf       	out	0x3d, r28	; 61
    4c3a:	cf 91       	pop	r28
    4c3c:	df 91       	pop	r29
    4c3e:	08 95       	ret

00004c40 <LCD_write_char>:

void LCD_write_char(u8 copy_u8_char){
    4c40:	df 93       	push	r29
    4c42:	cf 93       	push	r28
    4c44:	cd b7       	in	r28, 0x3d	; 61
    4c46:	de b7       	in	r29, 0x3e	; 62
    4c48:	69 97       	sbiw	r28, 0x19	; 25
    4c4a:	0f b6       	in	r0, 0x3f	; 63
    4c4c:	f8 94       	cli
    4c4e:	de bf       	out	0x3e, r29	; 62
    4c50:	0f be       	out	0x3f, r0	; 63
    4c52:	cd bf       	out	0x3d, r28	; 61
    4c54:	89 8f       	std	Y+25, r24	; 0x19
	LCD_write_data_8bit(copy_u8_char);
	// wait more than 39 us
	_delay_us(50);
#elif LCD_interface_mode == interface_4bit
	// send character
	LCD_write_data_4bit(copy_u8_char);
    4c56:	89 8d       	ldd	r24, Y+25	; 0x19
    4c58:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <LCD_write_data_4bit>
    4c5c:	80 e0       	ldi	r24, 0x00	; 0
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	a8 e4       	ldi	r26, 0x48	; 72
    4c62:	b2 e4       	ldi	r27, 0x42	; 66
    4c64:	8d 8b       	std	Y+21, r24	; 0x15
    4c66:	9e 8b       	std	Y+22, r25	; 0x16
    4c68:	af 8b       	std	Y+23, r26	; 0x17
    4c6a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4c6c:	6d 89       	ldd	r22, Y+21	; 0x15
    4c6e:	7e 89       	ldd	r23, Y+22	; 0x16
    4c70:	8f 89       	ldd	r24, Y+23	; 0x17
    4c72:	98 8d       	ldd	r25, Y+24	; 0x18
    4c74:	2b ea       	ldi	r18, 0xAB	; 171
    4c76:	3a ea       	ldi	r19, 0xAA	; 170
    4c78:	4a e2       	ldi	r20, 0x2A	; 42
    4c7a:	50 e4       	ldi	r21, 0x40	; 64
    4c7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4c80:	dc 01       	movw	r26, r24
    4c82:	cb 01       	movw	r24, r22
    4c84:	89 8b       	std	Y+17, r24	; 0x11
    4c86:	9a 8b       	std	Y+18, r25	; 0x12
    4c88:	ab 8b       	std	Y+19, r26	; 0x13
    4c8a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4c8c:	69 89       	ldd	r22, Y+17	; 0x11
    4c8e:	7a 89       	ldd	r23, Y+18	; 0x12
    4c90:	8b 89       	ldd	r24, Y+19	; 0x13
    4c92:	9c 89       	ldd	r25, Y+20	; 0x14
    4c94:	20 e0       	ldi	r18, 0x00	; 0
    4c96:	30 e0       	ldi	r19, 0x00	; 0
    4c98:	40 e8       	ldi	r20, 0x80	; 128
    4c9a:	5f e3       	ldi	r21, 0x3F	; 63
    4c9c:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    4ca0:	88 23       	and	r24, r24
    4ca2:	1c f4       	brge	.+6      	; 0x4caa <LCD_write_char+0x6a>
		__ticks = 1;
    4ca4:	81 e0       	ldi	r24, 0x01	; 1
    4ca6:	88 8b       	std	Y+16, r24	; 0x10
    4ca8:	91 c0       	rjmp	.+290    	; 0x4dcc <LCD_write_char+0x18c>
	else if (__tmp > 255)
    4caa:	69 89       	ldd	r22, Y+17	; 0x11
    4cac:	7a 89       	ldd	r23, Y+18	; 0x12
    4cae:	8b 89       	ldd	r24, Y+19	; 0x13
    4cb0:	9c 89       	ldd	r25, Y+20	; 0x14
    4cb2:	20 e0       	ldi	r18, 0x00	; 0
    4cb4:	30 e0       	ldi	r19, 0x00	; 0
    4cb6:	4f e7       	ldi	r20, 0x7F	; 127
    4cb8:	53 e4       	ldi	r21, 0x43	; 67
    4cba:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    4cbe:	18 16       	cp	r1, r24
    4cc0:	0c f0       	brlt	.+2      	; 0x4cc4 <LCD_write_char+0x84>
    4cc2:	7b c0       	rjmp	.+246    	; 0x4dba <LCD_write_char+0x17a>
	{
		_delay_ms(__us / 1000.0);
    4cc4:	6d 89       	ldd	r22, Y+21	; 0x15
    4cc6:	7e 89       	ldd	r23, Y+22	; 0x16
    4cc8:	8f 89       	ldd	r24, Y+23	; 0x17
    4cca:	98 8d       	ldd	r25, Y+24	; 0x18
    4ccc:	20 e0       	ldi	r18, 0x00	; 0
    4cce:	30 e0       	ldi	r19, 0x00	; 0
    4cd0:	4a e7       	ldi	r20, 0x7A	; 122
    4cd2:	54 e4       	ldi	r21, 0x44	; 68
    4cd4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    4cd8:	dc 01       	movw	r26, r24
    4cda:	cb 01       	movw	r24, r22
    4cdc:	8c 87       	std	Y+12, r24	; 0x0c
    4cde:	9d 87       	std	Y+13, r25	; 0x0d
    4ce0:	ae 87       	std	Y+14, r26	; 0x0e
    4ce2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ce4:	6c 85       	ldd	r22, Y+12	; 0x0c
    4ce6:	7d 85       	ldd	r23, Y+13	; 0x0d
    4ce8:	8e 85       	ldd	r24, Y+14	; 0x0e
    4cea:	9f 85       	ldd	r25, Y+15	; 0x0f
    4cec:	20 e0       	ldi	r18, 0x00	; 0
    4cee:	30 e0       	ldi	r19, 0x00	; 0
    4cf0:	4a ef       	ldi	r20, 0xFA	; 250
    4cf2:	54 e4       	ldi	r21, 0x44	; 68
    4cf4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4cf8:	dc 01       	movw	r26, r24
    4cfa:	cb 01       	movw	r24, r22
    4cfc:	88 87       	std	Y+8, r24	; 0x08
    4cfe:	99 87       	std	Y+9, r25	; 0x09
    4d00:	aa 87       	std	Y+10, r26	; 0x0a
    4d02:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4d04:	68 85       	ldd	r22, Y+8	; 0x08
    4d06:	79 85       	ldd	r23, Y+9	; 0x09
    4d08:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d0a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d0c:	20 e0       	ldi	r18, 0x00	; 0
    4d0e:	30 e0       	ldi	r19, 0x00	; 0
    4d10:	40 e8       	ldi	r20, 0x80	; 128
    4d12:	5f e3       	ldi	r21, 0x3F	; 63
    4d14:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    4d18:	88 23       	and	r24, r24
    4d1a:	2c f4       	brge	.+10     	; 0x4d26 <LCD_write_char+0xe6>
		__ticks = 1;
    4d1c:	81 e0       	ldi	r24, 0x01	; 1
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	9f 83       	std	Y+7, r25	; 0x07
    4d22:	8e 83       	std	Y+6, r24	; 0x06
    4d24:	3f c0       	rjmp	.+126    	; 0x4da4 <LCD_write_char+0x164>
	else if (__tmp > 65535)
    4d26:	68 85       	ldd	r22, Y+8	; 0x08
    4d28:	79 85       	ldd	r23, Y+9	; 0x09
    4d2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d2e:	20 e0       	ldi	r18, 0x00	; 0
    4d30:	3f ef       	ldi	r19, 0xFF	; 255
    4d32:	4f e7       	ldi	r20, 0x7F	; 127
    4d34:	57 e4       	ldi	r21, 0x47	; 71
    4d36:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    4d3a:	18 16       	cp	r1, r24
    4d3c:	4c f5       	brge	.+82     	; 0x4d90 <LCD_write_char+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d3e:	6c 85       	ldd	r22, Y+12	; 0x0c
    4d40:	7d 85       	ldd	r23, Y+13	; 0x0d
    4d42:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d44:	9f 85       	ldd	r25, Y+15	; 0x0f
    4d46:	20 e0       	ldi	r18, 0x00	; 0
    4d48:	30 e0       	ldi	r19, 0x00	; 0
    4d4a:	40 e2       	ldi	r20, 0x20	; 32
    4d4c:	51 e4       	ldi	r21, 0x41	; 65
    4d4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4d52:	dc 01       	movw	r26, r24
    4d54:	cb 01       	movw	r24, r22
    4d56:	bc 01       	movw	r22, r24
    4d58:	cd 01       	movw	r24, r26
    4d5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4d5e:	dc 01       	movw	r26, r24
    4d60:	cb 01       	movw	r24, r22
    4d62:	9f 83       	std	Y+7, r25	; 0x07
    4d64:	8e 83       	std	Y+6, r24	; 0x06
    4d66:	0f c0       	rjmp	.+30     	; 0x4d86 <LCD_write_char+0x146>
    4d68:	88 ec       	ldi	r24, 0xC8	; 200
    4d6a:	90 e0       	ldi	r25, 0x00	; 0
    4d6c:	9d 83       	std	Y+5, r25	; 0x05
    4d6e:	8c 83       	std	Y+4, r24	; 0x04
    4d70:	8c 81       	ldd	r24, Y+4	; 0x04
    4d72:	9d 81       	ldd	r25, Y+5	; 0x05
    4d74:	01 97       	sbiw	r24, 0x01	; 1
    4d76:	f1 f7       	brne	.-4      	; 0x4d74 <LCD_write_char+0x134>
    4d78:	9d 83       	std	Y+5, r25	; 0x05
    4d7a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d7c:	8e 81       	ldd	r24, Y+6	; 0x06
    4d7e:	9f 81       	ldd	r25, Y+7	; 0x07
    4d80:	01 97       	sbiw	r24, 0x01	; 1
    4d82:	9f 83       	std	Y+7, r25	; 0x07
    4d84:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d86:	8e 81       	ldd	r24, Y+6	; 0x06
    4d88:	9f 81       	ldd	r25, Y+7	; 0x07
    4d8a:	00 97       	sbiw	r24, 0x00	; 0
    4d8c:	69 f7       	brne	.-38     	; 0x4d68 <LCD_write_char+0x128>
    4d8e:	24 c0       	rjmp	.+72     	; 0x4dd8 <LCD_write_char+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d90:	68 85       	ldd	r22, Y+8	; 0x08
    4d92:	79 85       	ldd	r23, Y+9	; 0x09
    4d94:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d96:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4d9c:	dc 01       	movw	r26, r24
    4d9e:	cb 01       	movw	r24, r22
    4da0:	9f 83       	std	Y+7, r25	; 0x07
    4da2:	8e 83       	std	Y+6, r24	; 0x06
    4da4:	8e 81       	ldd	r24, Y+6	; 0x06
    4da6:	9f 81       	ldd	r25, Y+7	; 0x07
    4da8:	9b 83       	std	Y+3, r25	; 0x03
    4daa:	8a 83       	std	Y+2, r24	; 0x02
    4dac:	8a 81       	ldd	r24, Y+2	; 0x02
    4dae:	9b 81       	ldd	r25, Y+3	; 0x03
    4db0:	01 97       	sbiw	r24, 0x01	; 1
    4db2:	f1 f7       	brne	.-4      	; 0x4db0 <LCD_write_char+0x170>
    4db4:	9b 83       	std	Y+3, r25	; 0x03
    4db6:	8a 83       	std	Y+2, r24	; 0x02
    4db8:	0f c0       	rjmp	.+30     	; 0x4dd8 <LCD_write_char+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4dba:	69 89       	ldd	r22, Y+17	; 0x11
    4dbc:	7a 89       	ldd	r23, Y+18	; 0x12
    4dbe:	8b 89       	ldd	r24, Y+19	; 0x13
    4dc0:	9c 89       	ldd	r25, Y+20	; 0x14
    4dc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4dc6:	dc 01       	movw	r26, r24
    4dc8:	cb 01       	movw	r24, r22
    4dca:	88 8b       	std	Y+16, r24	; 0x10
    4dcc:	88 89       	ldd	r24, Y+16	; 0x10
    4dce:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4dd0:	89 81       	ldd	r24, Y+1	; 0x01
    4dd2:	8a 95       	dec	r24
    4dd4:	f1 f7       	brne	.-4      	; 0x4dd2 <LCD_write_char+0x192>
    4dd6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
#endif

}
    4dd8:	69 96       	adiw	r28, 0x19	; 25
    4dda:	0f b6       	in	r0, 0x3f	; 63
    4ddc:	f8 94       	cli
    4dde:	de bf       	out	0x3e, r29	; 62
    4de0:	0f be       	out	0x3f, r0	; 63
    4de2:	cd bf       	out	0x3d, r28	; 61
    4de4:	cf 91       	pop	r28
    4de6:	df 91       	pop	r29
    4de8:	08 95       	ret

00004dea <LCD_write_string>:


void LCD_write_string(u8* Copy_pu8_str){
    4dea:	df 93       	push	r29
    4dec:	cf 93       	push	r28
    4dee:	00 d0       	rcall	.+0      	; 0x4df0 <LCD_write_string+0x6>
    4df0:	0f 92       	push	r0
    4df2:	cd b7       	in	r28, 0x3d	; 61
    4df4:	de b7       	in	r29, 0x3e	; 62
    4df6:	9b 83       	std	Y+3, r25	; 0x03
    4df8:	8a 83       	std	Y+2, r24	; 0x02
	 * this function takes a pointer to a string u8
	 * and send it to the lcd to write on it the desired string
	 *
	 */

	u8 i = 0;
    4dfa:	19 82       	std	Y+1, r1	; 0x01
    4dfc:	0e c0       	rjmp	.+28     	; 0x4e1a <LCD_write_string+0x30>

	while(Copy_pu8_str[i] != '\0'){

		LCD_write_char(Copy_pu8_str[i]);
    4dfe:	89 81       	ldd	r24, Y+1	; 0x01
    4e00:	28 2f       	mov	r18, r24
    4e02:	30 e0       	ldi	r19, 0x00	; 0
    4e04:	8a 81       	ldd	r24, Y+2	; 0x02
    4e06:	9b 81       	ldd	r25, Y+3	; 0x03
    4e08:	fc 01       	movw	r30, r24
    4e0a:	e2 0f       	add	r30, r18
    4e0c:	f3 1f       	adc	r31, r19
    4e0e:	80 81       	ld	r24, Z
    4e10:	0e 94 20 26 	call	0x4c40	; 0x4c40 <LCD_write_char>
		i++;
    4e14:	89 81       	ldd	r24, Y+1	; 0x01
    4e16:	8f 5f       	subi	r24, 0xFF	; 255
    4e18:	89 83       	std	Y+1, r24	; 0x01
	 *
	 */

	u8 i = 0;

	while(Copy_pu8_str[i] != '\0'){
    4e1a:	89 81       	ldd	r24, Y+1	; 0x01
    4e1c:	28 2f       	mov	r18, r24
    4e1e:	30 e0       	ldi	r19, 0x00	; 0
    4e20:	8a 81       	ldd	r24, Y+2	; 0x02
    4e22:	9b 81       	ldd	r25, Y+3	; 0x03
    4e24:	fc 01       	movw	r30, r24
    4e26:	e2 0f       	add	r30, r18
    4e28:	f3 1f       	adc	r31, r19
    4e2a:	80 81       	ld	r24, Z
    4e2c:	88 23       	and	r24, r24
    4e2e:	39 f7       	brne	.-50     	; 0x4dfe <LCD_write_string+0x14>

		LCD_write_char(Copy_pu8_str[i]);
		i++;
	}

}
    4e30:	0f 90       	pop	r0
    4e32:	0f 90       	pop	r0
    4e34:	0f 90       	pop	r0
    4e36:	cf 91       	pop	r28
    4e38:	df 91       	pop	r29
    4e3a:	08 95       	ret

00004e3c <LCD_write_number>:


void LCD_write_number(s32 copy_s32_number){
    4e3c:	0f 93       	push	r16
    4e3e:	1f 93       	push	r17
    4e40:	df 93       	push	r29
    4e42:	cf 93       	push	r28
    4e44:	cd b7       	in	r28, 0x3d	; 61
    4e46:	de b7       	in	r29, 0x3e	; 62
    4e48:	60 97       	sbiw	r28, 0x10	; 16
    4e4a:	0f b6       	in	r0, 0x3f	; 63
    4e4c:	f8 94       	cli
    4e4e:	de bf       	out	0x3e, r29	; 62
    4e50:	0f be       	out	0x3f, r0	; 63
    4e52:	cd bf       	out	0x3d, r28	; 61
    4e54:	6d 87       	std	Y+13, r22	; 0x0d
    4e56:	7e 87       	std	Y+14, r23	; 0x0e
    4e58:	8f 87       	std	Y+15, r24	; 0x0f
    4e5a:	98 8b       	std	Y+16, r25	; 0x10
	 *
	 *
	 */
	// if number is 0

	if(copy_s32_number == 0){
    4e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e60:	af 85       	ldd	r26, Y+15	; 0x0f
    4e62:	b8 89       	ldd	r27, Y+16	; 0x10
    4e64:	00 97       	sbiw	r24, 0x00	; 0
    4e66:	a1 05       	cpc	r26, r1
    4e68:	b1 05       	cpc	r27, r1
    4e6a:	21 f4       	brne	.+8      	; 0x4e74 <LCD_write_number+0x38>

		LCD_write_char('0');
    4e6c:	80 e3       	ldi	r24, 0x30	; 48
    4e6e:	0e 94 20 26 	call	0x4c40	; 0x4c40 <LCD_write_char>
    4e72:	18 c0       	rjmp	.+48     	; 0x4ea4 <LCD_write_number+0x68>
		//negative number
	}else if(copy_s32_number < 0){
    4e74:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e76:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e78:	af 85       	ldd	r26, Y+15	; 0x0f
    4e7a:	b8 89       	ldd	r27, Y+16	; 0x10
    4e7c:	bb 23       	and	r27, r27
    4e7e:	94 f4       	brge	.+36     	; 0x4ea4 <LCD_write_number+0x68>

		LCD_write_char('-');
    4e80:	8d e2       	ldi	r24, 0x2D	; 45
    4e82:	0e 94 20 26 	call	0x4c40	; 0x4c40 <LCD_write_char>
		//convert the number to the absolute value
		copy_s32_number *= -1;
    4e86:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e88:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e8a:	af 85       	ldd	r26, Y+15	; 0x0f
    4e8c:	b8 89       	ldd	r27, Y+16	; 0x10
    4e8e:	b0 95       	com	r27
    4e90:	a0 95       	com	r26
    4e92:	90 95       	com	r25
    4e94:	81 95       	neg	r24
    4e96:	9f 4f       	sbci	r25, 0xFF	; 255
    4e98:	af 4f       	sbci	r26, 0xFF	; 255
    4e9a:	bf 4f       	sbci	r27, 0xFF	; 255
    4e9c:	8d 87       	std	Y+13, r24	; 0x0d
    4e9e:	9e 87       	std	Y+14, r25	; 0x0e
    4ea0:	af 87       	std	Y+15, r26	; 0x0f
    4ea2:	b8 8b       	std	Y+16, r27	; 0x10

	}
	if(copy_s32_number > 0){
    4ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ea6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ea8:	af 85       	ldd	r26, Y+15	; 0x0f
    4eaa:	b8 89       	ldd	r27, Y+16	; 0x10
    4eac:	18 16       	cp	r1, r24
    4eae:	19 06       	cpc	r1, r25
    4eb0:	1a 06       	cpc	r1, r26
    4eb2:	1b 06       	cpc	r1, r27
    4eb4:	0c f0       	brlt	.+2      	; 0x4eb8 <LCD_write_number+0x7c>
    4eb6:	51 c0       	rjmp	.+162    	; 0x4f5a <LCD_write_number+0x11e>
	//container to store the number
	u8 numbers[10];
	u8 i = 0;
    4eb8:	1a 82       	std	Y+2, r1	; 0x02
    4eba:	2d c0       	rjmp	.+90     	; 0x4f16 <LCD_write_number+0xda>

	while(copy_s32_number != 0){

		//retreive the last digit from the number
		numbers[i] = copy_s32_number%10;
    4ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    4ebe:	08 2f       	mov	r16, r24
    4ec0:	10 e0       	ldi	r17, 0x00	; 0
    4ec2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ec4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ec6:	af 85       	ldd	r26, Y+15	; 0x0f
    4ec8:	b8 89       	ldd	r27, Y+16	; 0x10
    4eca:	2a e0       	ldi	r18, 0x0A	; 10
    4ecc:	30 e0       	ldi	r19, 0x00	; 0
    4ece:	40 e0       	ldi	r20, 0x00	; 0
    4ed0:	50 e0       	ldi	r21, 0x00	; 0
    4ed2:	bc 01       	movw	r22, r24
    4ed4:	cd 01       	movw	r24, r26
    4ed6:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__divmodsi4>
    4eda:	dc 01       	movw	r26, r24
    4edc:	cb 01       	movw	r24, r22
    4ede:	28 2f       	mov	r18, r24
    4ee0:	ce 01       	movw	r24, r28
    4ee2:	03 96       	adiw	r24, 0x03	; 3
    4ee4:	fc 01       	movw	r30, r24
    4ee6:	e0 0f       	add	r30, r16
    4ee8:	f1 1f       	adc	r31, r17
    4eea:	20 83       	st	Z, r18
		copy_s32_number /= 10;
    4eec:	8d 85       	ldd	r24, Y+13	; 0x0d
    4eee:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ef0:	af 85       	ldd	r26, Y+15	; 0x0f
    4ef2:	b8 89       	ldd	r27, Y+16	; 0x10
    4ef4:	2a e0       	ldi	r18, 0x0A	; 10
    4ef6:	30 e0       	ldi	r19, 0x00	; 0
    4ef8:	40 e0       	ldi	r20, 0x00	; 0
    4efa:	50 e0       	ldi	r21, 0x00	; 0
    4efc:	bc 01       	movw	r22, r24
    4efe:	cd 01       	movw	r24, r26
    4f00:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__divmodsi4>
    4f04:	da 01       	movw	r26, r20
    4f06:	c9 01       	movw	r24, r18
    4f08:	8d 87       	std	Y+13, r24	; 0x0d
    4f0a:	9e 87       	std	Y+14, r25	; 0x0e
    4f0c:	af 87       	std	Y+15, r26	; 0x0f
    4f0e:	b8 8b       	std	Y+16, r27	; 0x10
		i++;
    4f10:	8a 81       	ldd	r24, Y+2	; 0x02
    4f12:	8f 5f       	subi	r24, 0xFF	; 255
    4f14:	8a 83       	std	Y+2, r24	; 0x02
	if(copy_s32_number > 0){
	//container to store the number
	u8 numbers[10];
	u8 i = 0;

	while(copy_s32_number != 0){
    4f16:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f18:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f1a:	af 85       	ldd	r26, Y+15	; 0x0f
    4f1c:	b8 89       	ldd	r27, Y+16	; 0x10
    4f1e:	00 97       	sbiw	r24, 0x00	; 0
    4f20:	a1 05       	cpc	r26, r1
    4f22:	b1 05       	cpc	r27, r1
    4f24:	59 f6       	brne	.-106    	; 0x4ebc <LCD_write_number+0x80>
		copy_s32_number /= 10;
		i++;
	}

	// reverse array order
	array_Swap(numbers, i);
    4f26:	ce 01       	movw	r24, r28
    4f28:	03 96       	adiw	r24, 0x03	; 3
    4f2a:	6a 81       	ldd	r22, Y+2	; 0x02
    4f2c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <array_Swap>

	// print the correct order of the number
	for(u8 j = 0; j < i; j++){
    4f30:	19 82       	std	Y+1, r1	; 0x01
    4f32:	0f c0       	rjmp	.+30     	; 0x4f52 <LCD_write_number+0x116>

		LCD_write_char(numbers[j]+'0');
    4f34:	89 81       	ldd	r24, Y+1	; 0x01
    4f36:	28 2f       	mov	r18, r24
    4f38:	30 e0       	ldi	r19, 0x00	; 0
    4f3a:	ce 01       	movw	r24, r28
    4f3c:	03 96       	adiw	r24, 0x03	; 3
    4f3e:	fc 01       	movw	r30, r24
    4f40:	e2 0f       	add	r30, r18
    4f42:	f3 1f       	adc	r31, r19
    4f44:	80 81       	ld	r24, Z
    4f46:	80 5d       	subi	r24, 0xD0	; 208
    4f48:	0e 94 20 26 	call	0x4c40	; 0x4c40 <LCD_write_char>

	// reverse array order
	array_Swap(numbers, i);

	// print the correct order of the number
	for(u8 j = 0; j < i; j++){
    4f4c:	89 81       	ldd	r24, Y+1	; 0x01
    4f4e:	8f 5f       	subi	r24, 0xFF	; 255
    4f50:	89 83       	std	Y+1, r24	; 0x01
    4f52:	99 81       	ldd	r25, Y+1	; 0x01
    4f54:	8a 81       	ldd	r24, Y+2	; 0x02
    4f56:	98 17       	cp	r25, r24
    4f58:	68 f3       	brcs	.-38     	; 0x4f34 <LCD_write_number+0xf8>

		LCD_write_char(numbers[j]+'0');
	}

	}
}
    4f5a:	60 96       	adiw	r28, 0x10	; 16
    4f5c:	0f b6       	in	r0, 0x3f	; 63
    4f5e:	f8 94       	cli
    4f60:	de bf       	out	0x3e, r29	; 62
    4f62:	0f be       	out	0x3f, r0	; 63
    4f64:	cd bf       	out	0x3d, r28	; 61
    4f66:	cf 91       	pop	r28
    4f68:	df 91       	pop	r29
    4f6a:	1f 91       	pop	r17
    4f6c:	0f 91       	pop	r16
    4f6e:	08 95       	ret

00004f70 <LCD_write_float>:

void LCD_write_float(f32 copy_f32_number, u8 copy_decimal_point){
    4f70:	ef 92       	push	r14
    4f72:	ff 92       	push	r15
    4f74:	0f 93       	push	r16
    4f76:	1f 93       	push	r17
    4f78:	df 93       	push	r29
    4f7a:	cf 93       	push	r28
    4f7c:	cd b7       	in	r28, 0x3d	; 61
    4f7e:	de b7       	in	r29, 0x3e	; 62
    4f80:	2d 97       	sbiw	r28, 0x0d	; 13
    4f82:	0f b6       	in	r0, 0x3f	; 63
    4f84:	f8 94       	cli
    4f86:	de bf       	out	0x3e, r29	; 62
    4f88:	0f be       	out	0x3f, r0	; 63
    4f8a:	cd bf       	out	0x3d, r28	; 61
    4f8c:	69 87       	std	Y+9, r22	; 0x09
    4f8e:	7a 87       	std	Y+10, r23	; 0x0a
    4f90:	8b 87       	std	Y+11, r24	; 0x0b
    4f92:	9c 87       	std	Y+12, r25	; 0x0c
    4f94:	4d 87       	std	Y+13, r20	; 0x0d
	 * the function doesn't return anything
	 *
	 */

	// store the integer part
	s32 int_value = (s32)copy_f32_number;
    4f96:	69 85       	ldd	r22, Y+9	; 0x09
    4f98:	7a 85       	ldd	r23, Y+10	; 0x0a
    4f9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f9c:	9c 85       	ldd	r25, Y+12	; 0x0c
    4f9e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    4fa2:	dc 01       	movw	r26, r24
    4fa4:	cb 01       	movw	r24, r22
    4fa6:	8d 83       	std	Y+5, r24	; 0x05
    4fa8:	9e 83       	std	Y+6, r25	; 0x06
    4faa:	af 83       	std	Y+7, r26	; 0x07
    4fac:	b8 87       	std	Y+8, r27	; 0x08

	// store the decimal part
	s32 float_value = (s32)((copy_f32_number -(f32)int_value)*power_10(copy_decimal_point));
    4fae:	6d 81       	ldd	r22, Y+5	; 0x05
    4fb0:	7e 81       	ldd	r23, Y+6	; 0x06
    4fb2:	8f 81       	ldd	r24, Y+7	; 0x07
    4fb4:	98 85       	ldd	r25, Y+8	; 0x08
    4fb6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    4fba:	9b 01       	movw	r18, r22
    4fbc:	ac 01       	movw	r20, r24
    4fbe:	69 85       	ldd	r22, Y+9	; 0x09
    4fc0:	7a 85       	ldd	r23, Y+10	; 0x0a
    4fc2:	8b 85       	ldd	r24, Y+11	; 0x0b
    4fc4:	9c 85       	ldd	r25, Y+12	; 0x0c
    4fc6:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    4fca:	dc 01       	movw	r26, r24
    4fcc:	cb 01       	movw	r24, r22
    4fce:	7c 01       	movw	r14, r24
    4fd0:	8d 01       	movw	r16, r26
    4fd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fd4:	0e 94 3f 0c 	call	0x187e	; 0x187e <power_10>
    4fd8:	dc 01       	movw	r26, r24
    4fda:	cb 01       	movw	r24, r22
    4fdc:	bc 01       	movw	r22, r24
    4fde:	cd 01       	movw	r24, r26
    4fe0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    4fe4:	9b 01       	movw	r18, r22
    4fe6:	ac 01       	movw	r20, r24
    4fe8:	c8 01       	movw	r24, r16
    4fea:	b7 01       	movw	r22, r14
    4fec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ff0:	dc 01       	movw	r26, r24
    4ff2:	cb 01       	movw	r24, r22
    4ff4:	bc 01       	movw	r22, r24
    4ff6:	cd 01       	movw	r24, r26
    4ff8:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    4ffc:	dc 01       	movw	r26, r24
    4ffe:	cb 01       	movw	r24, r22
    5000:	89 83       	std	Y+1, r24	; 0x01
    5002:	9a 83       	std	Y+2, r25	; 0x02
    5004:	ab 83       	std	Y+3, r26	; 0x03
    5006:	bc 83       	std	Y+4, r27	; 0x04

	// print the int part
	LCD_write_number(int_value);
    5008:	8d 81       	ldd	r24, Y+5	; 0x05
    500a:	9e 81       	ldd	r25, Y+6	; 0x06
    500c:	af 81       	ldd	r26, Y+7	; 0x07
    500e:	b8 85       	ldd	r27, Y+8	; 0x08
    5010:	bc 01       	movw	r22, r24
    5012:	cd 01       	movw	r24, r26
    5014:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <LCD_write_number>
	//print the floating point
	LCD_write_char('.');
    5018:	8e e2       	ldi	r24, 0x2E	; 46
    501a:	0e 94 20 26 	call	0x4c40	; 0x4c40 <LCD_write_char>
	//print the decimal part
	if(float_value > 0 ){
    501e:	89 81       	ldd	r24, Y+1	; 0x01
    5020:	9a 81       	ldd	r25, Y+2	; 0x02
    5022:	ab 81       	ldd	r26, Y+3	; 0x03
    5024:	bc 81       	ldd	r27, Y+4	; 0x04
    5026:	18 16       	cp	r1, r24
    5028:	19 06       	cpc	r1, r25
    502a:	1a 06       	cpc	r1, r26
    502c:	1b 06       	cpc	r1, r27
    502e:	4c f4       	brge	.+18     	; 0x5042 <LCD_write_float+0xd2>
	LCD_write_number(float_value);
    5030:	89 81       	ldd	r24, Y+1	; 0x01
    5032:	9a 81       	ldd	r25, Y+2	; 0x02
    5034:	ab 81       	ldd	r26, Y+3	; 0x03
    5036:	bc 81       	ldd	r27, Y+4	; 0x04
    5038:	bc 01       	movw	r22, r24
    503a:	cd 01       	movw	r24, r26
    503c:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <LCD_write_number>
    5040:	0f c0       	rjmp	.+30     	; 0x5060 <LCD_write_float+0xf0>
	}else{
	LCD_write_number((float_value * -1));
    5042:	89 81       	ldd	r24, Y+1	; 0x01
    5044:	9a 81       	ldd	r25, Y+2	; 0x02
    5046:	ab 81       	ldd	r26, Y+3	; 0x03
    5048:	bc 81       	ldd	r27, Y+4	; 0x04
    504a:	b0 95       	com	r27
    504c:	a0 95       	com	r26
    504e:	90 95       	com	r25
    5050:	81 95       	neg	r24
    5052:	9f 4f       	sbci	r25, 0xFF	; 255
    5054:	af 4f       	sbci	r26, 0xFF	; 255
    5056:	bf 4f       	sbci	r27, 0xFF	; 255
    5058:	bc 01       	movw	r22, r24
    505a:	cd 01       	movw	r24, r26
    505c:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <LCD_write_number>

	}


}
    5060:	2d 96       	adiw	r28, 0x0d	; 13
    5062:	0f b6       	in	r0, 0x3f	; 63
    5064:	f8 94       	cli
    5066:	de bf       	out	0x3e, r29	; 62
    5068:	0f be       	out	0x3f, r0	; 63
    506a:	cd bf       	out	0x3d, r28	; 61
    506c:	cf 91       	pop	r28
    506e:	df 91       	pop	r29
    5070:	1f 91       	pop	r17
    5072:	0f 91       	pop	r16
    5074:	ff 90       	pop	r15
    5076:	ef 90       	pop	r14
    5078:	08 95       	ret

0000507a <welcome_Msg>:
	state_Error

}calculatorStates;


void welcome_Msg(u16 delay){
    507a:	df 93       	push	r29
    507c:	cf 93       	push	r28
    507e:	cd b7       	in	r28, 0x3d	; 61
    5080:	de b7       	in	r29, 0x3e	; 62
    5082:	60 97       	sbiw	r28, 0x10	; 16
    5084:	0f b6       	in	r0, 0x3f	; 63
    5086:	f8 94       	cli
    5088:	de bf       	out	0x3e, r29	; 62
    508a:	0f be       	out	0x3f, r0	; 63
    508c:	cd bf       	out	0x3d, r28	; 61
    508e:	98 8b       	std	Y+16, r25	; 0x10
    5090:	8f 87       	std	Y+15, r24	; 0x0f
	 *
	 *
	 *
	 */

	LCD_set_cursor(0, 4);
    5092:	80 e0       	ldi	r24, 0x00	; 0
    5094:	64 e0       	ldi	r22, 0x04	; 4
    5096:	0e 94 94 22 	call	0x4528	; 0x4528 <LCD_set_cursor>
	LCD_write_string((u8*)"Welcome!");
    509a:	80 e6       	ldi	r24, 0x60	; 96
    509c:	90 e0       	ldi	r25, 0x00	; 0
    509e:	0e 94 f5 26 	call	0x4dea	; 0x4dea <LCD_write_string>
	LCD_set_cursor(1, 1);
    50a2:	81 e0       	ldi	r24, 0x01	; 1
    50a4:	61 e0       	ldi	r22, 0x01	; 1
    50a6:	0e 94 94 22 	call	0x4528	; 0x4528 <LCD_set_cursor>
	LCD_write_string((u8*)"calc Version:1");
    50aa:	89 e6       	ldi	r24, 0x69	; 105
    50ac:	90 e0       	ldi	r25, 0x00	; 0
    50ae:	0e 94 f5 26 	call	0x4dea	; 0x4dea <LCD_write_string>
	_delay_ms(delay);
    50b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    50b4:	98 89       	ldd	r25, Y+16	; 0x10
    50b6:	cc 01       	movw	r24, r24
    50b8:	a0 e0       	ldi	r26, 0x00	; 0
    50ba:	b0 e0       	ldi	r27, 0x00	; 0
    50bc:	bc 01       	movw	r22, r24
    50be:	cd 01       	movw	r24, r26
    50c0:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__floatunsisf>
    50c4:	dc 01       	movw	r26, r24
    50c6:	cb 01       	movw	r24, r22
    50c8:	8b 87       	std	Y+11, r24	; 0x0b
    50ca:	9c 87       	std	Y+12, r25	; 0x0c
    50cc:	ad 87       	std	Y+13, r26	; 0x0d
    50ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    50d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    50d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    50d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    50d8:	20 e0       	ldi	r18, 0x00	; 0
    50da:	30 e0       	ldi	r19, 0x00	; 0
    50dc:	4a ef       	ldi	r20, 0xFA	; 250
    50de:	54 e4       	ldi	r21, 0x44	; 68
    50e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    50e4:	dc 01       	movw	r26, r24
    50e6:	cb 01       	movw	r24, r22
    50e8:	8f 83       	std	Y+7, r24	; 0x07
    50ea:	98 87       	std	Y+8, r25	; 0x08
    50ec:	a9 87       	std	Y+9, r26	; 0x09
    50ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    50f0:	6f 81       	ldd	r22, Y+7	; 0x07
    50f2:	78 85       	ldd	r23, Y+8	; 0x08
    50f4:	89 85       	ldd	r24, Y+9	; 0x09
    50f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    50f8:	20 e0       	ldi	r18, 0x00	; 0
    50fa:	30 e0       	ldi	r19, 0x00	; 0
    50fc:	40 e8       	ldi	r20, 0x80	; 128
    50fe:	5f e3       	ldi	r21, 0x3F	; 63
    5100:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    5104:	88 23       	and	r24, r24
    5106:	2c f4       	brge	.+10     	; 0x5112 <welcome_Msg+0x98>
		__ticks = 1;
    5108:	81 e0       	ldi	r24, 0x01	; 1
    510a:	90 e0       	ldi	r25, 0x00	; 0
    510c:	9e 83       	std	Y+6, r25	; 0x06
    510e:	8d 83       	std	Y+5, r24	; 0x05
    5110:	3f c0       	rjmp	.+126    	; 0x5190 <welcome_Msg+0x116>
	else if (__tmp > 65535)
    5112:	6f 81       	ldd	r22, Y+7	; 0x07
    5114:	78 85       	ldd	r23, Y+8	; 0x08
    5116:	89 85       	ldd	r24, Y+9	; 0x09
    5118:	9a 85       	ldd	r25, Y+10	; 0x0a
    511a:	20 e0       	ldi	r18, 0x00	; 0
    511c:	3f ef       	ldi	r19, 0xFF	; 255
    511e:	4f e7       	ldi	r20, 0x7F	; 127
    5120:	57 e4       	ldi	r21, 0x47	; 71
    5122:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    5126:	18 16       	cp	r1, r24
    5128:	4c f5       	brge	.+82     	; 0x517c <welcome_Msg+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    512a:	6b 85       	ldd	r22, Y+11	; 0x0b
    512c:	7c 85       	ldd	r23, Y+12	; 0x0c
    512e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5130:	9e 85       	ldd	r25, Y+14	; 0x0e
    5132:	20 e0       	ldi	r18, 0x00	; 0
    5134:	30 e0       	ldi	r19, 0x00	; 0
    5136:	40 e2       	ldi	r20, 0x20	; 32
    5138:	51 e4       	ldi	r21, 0x41	; 65
    513a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    513e:	dc 01       	movw	r26, r24
    5140:	cb 01       	movw	r24, r22
    5142:	bc 01       	movw	r22, r24
    5144:	cd 01       	movw	r24, r26
    5146:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    514a:	dc 01       	movw	r26, r24
    514c:	cb 01       	movw	r24, r22
    514e:	9e 83       	std	Y+6, r25	; 0x06
    5150:	8d 83       	std	Y+5, r24	; 0x05
    5152:	0f c0       	rjmp	.+30     	; 0x5172 <welcome_Msg+0xf8>
    5154:	88 ec       	ldi	r24, 0xC8	; 200
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	9c 83       	std	Y+4, r25	; 0x04
    515a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    515c:	8b 81       	ldd	r24, Y+3	; 0x03
    515e:	9c 81       	ldd	r25, Y+4	; 0x04
    5160:	01 97       	sbiw	r24, 0x01	; 1
    5162:	f1 f7       	brne	.-4      	; 0x5160 <welcome_Msg+0xe6>
    5164:	9c 83       	std	Y+4, r25	; 0x04
    5166:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5168:	8d 81       	ldd	r24, Y+5	; 0x05
    516a:	9e 81       	ldd	r25, Y+6	; 0x06
    516c:	01 97       	sbiw	r24, 0x01	; 1
    516e:	9e 83       	std	Y+6, r25	; 0x06
    5170:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5172:	8d 81       	ldd	r24, Y+5	; 0x05
    5174:	9e 81       	ldd	r25, Y+6	; 0x06
    5176:	00 97       	sbiw	r24, 0x00	; 0
    5178:	69 f7       	brne	.-38     	; 0x5154 <welcome_Msg+0xda>
    517a:	14 c0       	rjmp	.+40     	; 0x51a4 <welcome_Msg+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    517c:	6f 81       	ldd	r22, Y+7	; 0x07
    517e:	78 85       	ldd	r23, Y+8	; 0x08
    5180:	89 85       	ldd	r24, Y+9	; 0x09
    5182:	9a 85       	ldd	r25, Y+10	; 0x0a
    5184:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5188:	dc 01       	movw	r26, r24
    518a:	cb 01       	movw	r24, r22
    518c:	9e 83       	std	Y+6, r25	; 0x06
    518e:	8d 83       	std	Y+5, r24	; 0x05
    5190:	8d 81       	ldd	r24, Y+5	; 0x05
    5192:	9e 81       	ldd	r25, Y+6	; 0x06
    5194:	9a 83       	std	Y+2, r25	; 0x02
    5196:	89 83       	std	Y+1, r24	; 0x01
    5198:	89 81       	ldd	r24, Y+1	; 0x01
    519a:	9a 81       	ldd	r25, Y+2	; 0x02
    519c:	01 97       	sbiw	r24, 0x01	; 1
    519e:	f1 f7       	brne	.-4      	; 0x519c <welcome_Msg+0x122>
    51a0:	9a 83       	std	Y+2, r25	; 0x02
    51a2:	89 83       	std	Y+1, r24	; 0x01
	LCD_set_cursor(0, 0);
    51a4:	80 e0       	ldi	r24, 0x00	; 0
    51a6:	60 e0       	ldi	r22, 0x00	; 0
    51a8:	0e 94 94 22 	call	0x4528	; 0x4528 <LCD_set_cursor>
	LCD_clear_display();
    51ac:	0e 94 23 25 	call	0x4a46	; 0x4a46 <LCD_clear_display>

}
    51b0:	60 96       	adiw	r28, 0x10	; 16
    51b2:	0f b6       	in	r0, 0x3f	; 63
    51b4:	f8 94       	cli
    51b6:	de bf       	out	0x3e, r29	; 62
    51b8:	0f be       	out	0x3f, r0	; 63
    51ba:	cd bf       	out	0x3d, r28	; 61
    51bc:	cf 91       	pop	r28
    51be:	df 91       	pop	r29
    51c0:	08 95       	ret

000051c2 <KPD_get_number>:

u8 KPD_get_number(u8 copy_u8_key) {
    51c2:	df 93       	push	r29
    51c4:	cf 93       	push	r28
    51c6:	00 d0       	rcall	.+0      	; 0x51c8 <KPD_get_number+0x6>
    51c8:	00 d0       	rcall	.+0      	; 0x51ca <KPD_get_number+0x8>
    51ca:	0f 92       	push	r0
    51cc:	cd b7       	in	r28, 0x3d	; 61
    51ce:	de b7       	in	r29, 0x3e	; 62
    51d0:	89 83       	std	Y+1, r24	; 0x01
	 *  and return the corresponding number to be used in calculations
	 *
	 *
	 *
	 */
    switch (copy_u8_key) {
    51d2:	89 81       	ldd	r24, Y+1	; 0x01
    51d4:	28 2f       	mov	r18, r24
    51d6:	30 e0       	ldi	r19, 0x00	; 0
    51d8:	3c 83       	std	Y+4, r19	; 0x04
    51da:	2b 83       	std	Y+3, r18	; 0x03
    51dc:	8b 81       	ldd	r24, Y+3	; 0x03
    51de:	9c 81       	ldd	r25, Y+4	; 0x04
    51e0:	85 33       	cpi	r24, 0x35	; 53
    51e2:	91 05       	cpc	r25, r1
    51e4:	09 f4       	brne	.+2      	; 0x51e8 <KPD_get_number+0x26>
    51e6:	54 c0       	rjmp	.+168    	; 0x5290 <KPD_get_number+0xce>
    51e8:	2b 81       	ldd	r18, Y+3	; 0x03
    51ea:	3c 81       	ldd	r19, Y+4	; 0x04
    51ec:	26 33       	cpi	r18, 0x36	; 54
    51ee:	31 05       	cpc	r19, r1
    51f0:	0c f5       	brge	.+66     	; 0x5234 <KPD_get_number+0x72>
    51f2:	8b 81       	ldd	r24, Y+3	; 0x03
    51f4:	9c 81       	ldd	r25, Y+4	; 0x04
    51f6:	82 33       	cpi	r24, 0x32	; 50
    51f8:	91 05       	cpc	r25, r1
    51fa:	09 f4       	brne	.+2      	; 0x51fe <KPD_get_number+0x3c>
    51fc:	40 c0       	rjmp	.+128    	; 0x527e <KPD_get_number+0xbc>
    51fe:	2b 81       	ldd	r18, Y+3	; 0x03
    5200:	3c 81       	ldd	r19, Y+4	; 0x04
    5202:	23 33       	cpi	r18, 0x33	; 51
    5204:	31 05       	cpc	r19, r1
    5206:	5c f4       	brge	.+22     	; 0x521e <KPD_get_number+0x5c>
    5208:	8b 81       	ldd	r24, Y+3	; 0x03
    520a:	9c 81       	ldd	r25, Y+4	; 0x04
    520c:	80 33       	cpi	r24, 0x30	; 48
    520e:	91 05       	cpc	r25, r1
    5210:	89 f1       	breq	.+98     	; 0x5274 <KPD_get_number+0xb2>
    5212:	2b 81       	ldd	r18, Y+3	; 0x03
    5214:	3c 81       	ldd	r19, Y+4	; 0x04
    5216:	21 33       	cpi	r18, 0x31	; 49
    5218:	31 05       	cpc	r19, r1
    521a:	71 f1       	breq	.+92     	; 0x5278 <KPD_get_number+0xb6>
    521c:	4d c0       	rjmp	.+154    	; 0x52b8 <KPD_get_number+0xf6>
    521e:	8b 81       	ldd	r24, Y+3	; 0x03
    5220:	9c 81       	ldd	r25, Y+4	; 0x04
    5222:	83 33       	cpi	r24, 0x33	; 51
    5224:	91 05       	cpc	r25, r1
    5226:	71 f1       	breq	.+92     	; 0x5284 <KPD_get_number+0xc2>
    5228:	2b 81       	ldd	r18, Y+3	; 0x03
    522a:	3c 81       	ldd	r19, Y+4	; 0x04
    522c:	24 33       	cpi	r18, 0x34	; 52
    522e:	31 05       	cpc	r19, r1
    5230:	61 f1       	breq	.+88     	; 0x528a <KPD_get_number+0xc8>
    5232:	42 c0       	rjmp	.+132    	; 0x52b8 <KPD_get_number+0xf6>
    5234:	8b 81       	ldd	r24, Y+3	; 0x03
    5236:	9c 81       	ldd	r25, Y+4	; 0x04
    5238:	88 33       	cpi	r24, 0x38	; 56
    523a:	91 05       	cpc	r25, r1
    523c:	91 f1       	breq	.+100    	; 0x52a2 <KPD_get_number+0xe0>
    523e:	2b 81       	ldd	r18, Y+3	; 0x03
    5240:	3c 81       	ldd	r19, Y+4	; 0x04
    5242:	29 33       	cpi	r18, 0x39	; 57
    5244:	31 05       	cpc	r19, r1
    5246:	5c f4       	brge	.+22     	; 0x525e <KPD_get_number+0x9c>
    5248:	8b 81       	ldd	r24, Y+3	; 0x03
    524a:	9c 81       	ldd	r25, Y+4	; 0x04
    524c:	86 33       	cpi	r24, 0x36	; 54
    524e:	91 05       	cpc	r25, r1
    5250:	11 f1       	breq	.+68     	; 0x5296 <KPD_get_number+0xd4>
    5252:	2b 81       	ldd	r18, Y+3	; 0x03
    5254:	3c 81       	ldd	r19, Y+4	; 0x04
    5256:	27 33       	cpi	r18, 0x37	; 55
    5258:	31 05       	cpc	r19, r1
    525a:	01 f1       	breq	.+64     	; 0x529c <KPD_get_number+0xda>
    525c:	2d c0       	rjmp	.+90     	; 0x52b8 <KPD_get_number+0xf6>
    525e:	8b 81       	ldd	r24, Y+3	; 0x03
    5260:	9c 81       	ldd	r25, Y+4	; 0x04
    5262:	89 33       	cpi	r24, 0x39	; 57
    5264:	91 05       	cpc	r25, r1
    5266:	01 f1       	breq	.+64     	; 0x52a8 <KPD_get_number+0xe6>
    5268:	2b 81       	ldd	r18, Y+3	; 0x03
    526a:	3c 81       	ldd	r19, Y+4	; 0x04
    526c:	23 36       	cpi	r18, 0x63	; 99
    526e:	31 05       	cpc	r19, r1
    5270:	f1 f0       	breq	.+60     	; 0x52ae <KPD_get_number+0xec>
    5272:	22 c0       	rjmp	.+68     	; 0x52b8 <KPD_get_number+0xf6>
        case '0': return 0;
    5274:	1a 82       	std	Y+2, r1	; 0x02
    5276:	21 c0       	rjmp	.+66     	; 0x52ba <KPD_get_number+0xf8>
        case '1': return 1;
    5278:	31 e0       	ldi	r19, 0x01	; 1
    527a:	3a 83       	std	Y+2, r19	; 0x02
    527c:	1e c0       	rjmp	.+60     	; 0x52ba <KPD_get_number+0xf8>
        case '2': return 2;
    527e:	82 e0       	ldi	r24, 0x02	; 2
    5280:	8a 83       	std	Y+2, r24	; 0x02
    5282:	1b c0       	rjmp	.+54     	; 0x52ba <KPD_get_number+0xf8>
        case '3': return 3;
    5284:	93 e0       	ldi	r25, 0x03	; 3
    5286:	9a 83       	std	Y+2, r25	; 0x02
    5288:	18 c0       	rjmp	.+48     	; 0x52ba <KPD_get_number+0xf8>
        case '4': return 4;
    528a:	24 e0       	ldi	r18, 0x04	; 4
    528c:	2a 83       	std	Y+2, r18	; 0x02
    528e:	15 c0       	rjmp	.+42     	; 0x52ba <KPD_get_number+0xf8>
        case '5': return 5;
    5290:	35 e0       	ldi	r19, 0x05	; 5
    5292:	3a 83       	std	Y+2, r19	; 0x02
    5294:	12 c0       	rjmp	.+36     	; 0x52ba <KPD_get_number+0xf8>
        case '6': return 6;
    5296:	86 e0       	ldi	r24, 0x06	; 6
    5298:	8a 83       	std	Y+2, r24	; 0x02
    529a:	0f c0       	rjmp	.+30     	; 0x52ba <KPD_get_number+0xf8>
        case '7': return 7;
    529c:	97 e0       	ldi	r25, 0x07	; 7
    529e:	9a 83       	std	Y+2, r25	; 0x02
    52a0:	0c c0       	rjmp	.+24     	; 0x52ba <KPD_get_number+0xf8>
        case '8': return 8;
    52a2:	28 e0       	ldi	r18, 0x08	; 8
    52a4:	2a 83       	std	Y+2, r18	; 0x02
    52a6:	09 c0       	rjmp	.+18     	; 0x52ba <KPD_get_number+0xf8>
        case '9': return 9;
    52a8:	39 e0       	ldi	r19, 0x09	; 9
    52aa:	3a 83       	std	Y+2, r19	; 0x02
    52ac:	06 c0       	rjmp	.+12     	; 0x52ba <KPD_get_number+0xf8>
        case 'c':
            LCD_clear_display();
    52ae:	0e 94 23 25 	call	0x4a46	; 0x4a46 <LCD_clear_display>
            return ERROR;
    52b2:	80 e1       	ldi	r24, 0x10	; 16
    52b4:	8a 83       	std	Y+2, r24	; 0x02
    52b6:	01 c0       	rjmp	.+2      	; 0x52ba <KPD_get_number+0xf8>
    52b8:	02 c0       	rjmp	.+4      	; 0x52be <KPD_get_number+0xfc>

        default:

        	break;//return ERROR; // Return an error value for any other case
    }
}
    52ba:	9a 81       	ldd	r25, Y+2	; 0x02
    52bc:	9d 83       	std	Y+5, r25	; 0x05
    52be:	8d 81       	ldd	r24, Y+5	; 0x05
    52c0:	0f 90       	pop	r0
    52c2:	0f 90       	pop	r0
    52c4:	0f 90       	pop	r0
    52c6:	0f 90       	pop	r0
    52c8:	0f 90       	pop	r0
    52ca:	cf 91       	pop	r28
    52cc:	df 91       	pop	r29
    52ce:	08 95       	ret

000052d0 <error_message>:

void error_message(u8 index) {
    52d0:	df 93       	push	r29
    52d2:	cf 93       	push	r28
    52d4:	cd b7       	in	r28, 0x3d	; 61
    52d6:	de b7       	in	r29, 0x3e	; 62
    52d8:	6f 97       	sbiw	r28, 0x1f	; 31
    52da:	0f b6       	in	r0, 0x3f	; 63
    52dc:	f8 94       	cli
    52de:	de bf       	out	0x3e, r29	; 62
    52e0:	0f be       	out	0x3f, r0	; 63
    52e2:	cd bf       	out	0x3d, r28	; 61
    52e4:	8d 8f       	std	Y+29, r24	; 0x1d
	 * you can add more cases in the switch statement to your liking.
	 *
	 *
	 *
	 */
    switch (index) {
    52e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52e8:	28 2f       	mov	r18, r24
    52ea:	30 e0       	ldi	r19, 0x00	; 0
    52ec:	3f 8f       	std	Y+31, r19	; 0x1f
    52ee:	2e 8f       	std	Y+30, r18	; 0x1e
    52f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    52f2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    52f4:	00 97       	sbiw	r24, 0x00	; 0
    52f6:	39 f0       	breq	.+14     	; 0x5306 <error_message+0x36>
    52f8:	2e 8d       	ldd	r18, Y+30	; 0x1e
    52fa:	3f 8d       	ldd	r19, Y+31	; 0x1f
    52fc:	21 30       	cpi	r18, 0x01	; 1
    52fe:	31 05       	cpc	r19, r1
    5300:	09 f4       	brne	.+2      	; 0x5304 <error_message+0x34>
    5302:	7a c0       	rjmp	.+244    	; 0x53f8 <error_message+0x128>
    5304:	f1 c0       	rjmp	.+482    	; 0x54e8 <error_message+0x218>
        case 0:
            LCD_write_string((u8*)"Wrong Function!");
    5306:	88 e7       	ldi	r24, 0x78	; 120
    5308:	90 e0       	ldi	r25, 0x00	; 0
    530a:	0e 94 f5 26 	call	0x4dea	; 0x4dea <LCD_write_string>
    530e:	80 e0       	ldi	r24, 0x00	; 0
    5310:	90 e0       	ldi	r25, 0x00	; 0
    5312:	a8 ec       	ldi	r26, 0xC8	; 200
    5314:	b2 e4       	ldi	r27, 0x42	; 66
    5316:	89 8f       	std	Y+25, r24	; 0x19
    5318:	9a 8f       	std	Y+26, r25	; 0x1a
    531a:	ab 8f       	std	Y+27, r26	; 0x1b
    531c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    531e:	69 8d       	ldd	r22, Y+25	; 0x19
    5320:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5322:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5324:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5326:	20 e0       	ldi	r18, 0x00	; 0
    5328:	30 e0       	ldi	r19, 0x00	; 0
    532a:	4a ef       	ldi	r20, 0xFA	; 250
    532c:	54 e4       	ldi	r21, 0x44	; 68
    532e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5332:	dc 01       	movw	r26, r24
    5334:	cb 01       	movw	r24, r22
    5336:	8d 8b       	std	Y+21, r24	; 0x15
    5338:	9e 8b       	std	Y+22, r25	; 0x16
    533a:	af 8b       	std	Y+23, r26	; 0x17
    533c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    533e:	6d 89       	ldd	r22, Y+21	; 0x15
    5340:	7e 89       	ldd	r23, Y+22	; 0x16
    5342:	8f 89       	ldd	r24, Y+23	; 0x17
    5344:	98 8d       	ldd	r25, Y+24	; 0x18
    5346:	20 e0       	ldi	r18, 0x00	; 0
    5348:	30 e0       	ldi	r19, 0x00	; 0
    534a:	40 e8       	ldi	r20, 0x80	; 128
    534c:	5f e3       	ldi	r21, 0x3F	; 63
    534e:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    5352:	88 23       	and	r24, r24
    5354:	2c f4       	brge	.+10     	; 0x5360 <error_message+0x90>
		__ticks = 1;
    5356:	81 e0       	ldi	r24, 0x01	; 1
    5358:	90 e0       	ldi	r25, 0x00	; 0
    535a:	9c 8b       	std	Y+20, r25	; 0x14
    535c:	8b 8b       	std	Y+19, r24	; 0x13
    535e:	3f c0       	rjmp	.+126    	; 0x53de <error_message+0x10e>
	else if (__tmp > 65535)
    5360:	6d 89       	ldd	r22, Y+21	; 0x15
    5362:	7e 89       	ldd	r23, Y+22	; 0x16
    5364:	8f 89       	ldd	r24, Y+23	; 0x17
    5366:	98 8d       	ldd	r25, Y+24	; 0x18
    5368:	20 e0       	ldi	r18, 0x00	; 0
    536a:	3f ef       	ldi	r19, 0xFF	; 255
    536c:	4f e7       	ldi	r20, 0x7F	; 127
    536e:	57 e4       	ldi	r21, 0x47	; 71
    5370:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    5374:	18 16       	cp	r1, r24
    5376:	4c f5       	brge	.+82     	; 0x53ca <error_message+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5378:	69 8d       	ldd	r22, Y+25	; 0x19
    537a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    537c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    537e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5380:	20 e0       	ldi	r18, 0x00	; 0
    5382:	30 e0       	ldi	r19, 0x00	; 0
    5384:	40 e2       	ldi	r20, 0x20	; 32
    5386:	51 e4       	ldi	r21, 0x41	; 65
    5388:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    538c:	dc 01       	movw	r26, r24
    538e:	cb 01       	movw	r24, r22
    5390:	bc 01       	movw	r22, r24
    5392:	cd 01       	movw	r24, r26
    5394:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5398:	dc 01       	movw	r26, r24
    539a:	cb 01       	movw	r24, r22
    539c:	9c 8b       	std	Y+20, r25	; 0x14
    539e:	8b 8b       	std	Y+19, r24	; 0x13
    53a0:	0f c0       	rjmp	.+30     	; 0x53c0 <error_message+0xf0>
    53a2:	88 ec       	ldi	r24, 0xC8	; 200
    53a4:	90 e0       	ldi	r25, 0x00	; 0
    53a6:	9a 8b       	std	Y+18, r25	; 0x12
    53a8:	89 8b       	std	Y+17, r24	; 0x11
    53aa:	89 89       	ldd	r24, Y+17	; 0x11
    53ac:	9a 89       	ldd	r25, Y+18	; 0x12
    53ae:	01 97       	sbiw	r24, 0x01	; 1
    53b0:	f1 f7       	brne	.-4      	; 0x53ae <error_message+0xde>
    53b2:	9a 8b       	std	Y+18, r25	; 0x12
    53b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53b6:	8b 89       	ldd	r24, Y+19	; 0x13
    53b8:	9c 89       	ldd	r25, Y+20	; 0x14
    53ba:	01 97       	sbiw	r24, 0x01	; 1
    53bc:	9c 8b       	std	Y+20, r25	; 0x14
    53be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53c0:	8b 89       	ldd	r24, Y+19	; 0x13
    53c2:	9c 89       	ldd	r25, Y+20	; 0x14
    53c4:	00 97       	sbiw	r24, 0x00	; 0
    53c6:	69 f7       	brne	.-38     	; 0x53a2 <error_message+0xd2>
    53c8:	14 c0       	rjmp	.+40     	; 0x53f2 <error_message+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53ca:	6d 89       	ldd	r22, Y+21	; 0x15
    53cc:	7e 89       	ldd	r23, Y+22	; 0x16
    53ce:	8f 89       	ldd	r24, Y+23	; 0x17
    53d0:	98 8d       	ldd	r25, Y+24	; 0x18
    53d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    53d6:	dc 01       	movw	r26, r24
    53d8:	cb 01       	movw	r24, r22
    53da:	9c 8b       	std	Y+20, r25	; 0x14
    53dc:	8b 8b       	std	Y+19, r24	; 0x13
    53de:	8b 89       	ldd	r24, Y+19	; 0x13
    53e0:	9c 89       	ldd	r25, Y+20	; 0x14
    53e2:	98 8b       	std	Y+16, r25	; 0x10
    53e4:	8f 87       	std	Y+15, r24	; 0x0f
    53e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    53e8:	98 89       	ldd	r25, Y+16	; 0x10
    53ea:	01 97       	sbiw	r24, 0x01	; 1
    53ec:	f1 f7       	brne	.-4      	; 0x53ea <error_message+0x11a>
    53ee:	98 8b       	std	Y+16, r25	; 0x10
    53f0:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(100);
            LCD_clear_display();
    53f2:	0e 94 23 25 	call	0x4a46	; 0x4a46 <LCD_clear_display>
    53f6:	78 c0       	rjmp	.+240    	; 0x54e8 <error_message+0x218>
            break;
        case 1:
            LCD_write_string((u8*)"Wrong input!");
    53f8:	88 e8       	ldi	r24, 0x88	; 136
    53fa:	90 e0       	ldi	r25, 0x00	; 0
    53fc:	0e 94 f5 26 	call	0x4dea	; 0x4dea <LCD_write_string>
    5400:	80 e0       	ldi	r24, 0x00	; 0
    5402:	90 e0       	ldi	r25, 0x00	; 0
    5404:	a8 ec       	ldi	r26, 0xC8	; 200
    5406:	b2 e4       	ldi	r27, 0x42	; 66
    5408:	8b 87       	std	Y+11, r24	; 0x0b
    540a:	9c 87       	std	Y+12, r25	; 0x0c
    540c:	ad 87       	std	Y+13, r26	; 0x0d
    540e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5410:	6b 85       	ldd	r22, Y+11	; 0x0b
    5412:	7c 85       	ldd	r23, Y+12	; 0x0c
    5414:	8d 85       	ldd	r24, Y+13	; 0x0d
    5416:	9e 85       	ldd	r25, Y+14	; 0x0e
    5418:	20 e0       	ldi	r18, 0x00	; 0
    541a:	30 e0       	ldi	r19, 0x00	; 0
    541c:	4a ef       	ldi	r20, 0xFA	; 250
    541e:	54 e4       	ldi	r21, 0x44	; 68
    5420:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5424:	dc 01       	movw	r26, r24
    5426:	cb 01       	movw	r24, r22
    5428:	8f 83       	std	Y+7, r24	; 0x07
    542a:	98 87       	std	Y+8, r25	; 0x08
    542c:	a9 87       	std	Y+9, r26	; 0x09
    542e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5430:	6f 81       	ldd	r22, Y+7	; 0x07
    5432:	78 85       	ldd	r23, Y+8	; 0x08
    5434:	89 85       	ldd	r24, Y+9	; 0x09
    5436:	9a 85       	ldd	r25, Y+10	; 0x0a
    5438:	20 e0       	ldi	r18, 0x00	; 0
    543a:	30 e0       	ldi	r19, 0x00	; 0
    543c:	40 e8       	ldi	r20, 0x80	; 128
    543e:	5f e3       	ldi	r21, 0x3F	; 63
    5440:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    5444:	88 23       	and	r24, r24
    5446:	2c f4       	brge	.+10     	; 0x5452 <error_message+0x182>
		__ticks = 1;
    5448:	81 e0       	ldi	r24, 0x01	; 1
    544a:	90 e0       	ldi	r25, 0x00	; 0
    544c:	9e 83       	std	Y+6, r25	; 0x06
    544e:	8d 83       	std	Y+5, r24	; 0x05
    5450:	3f c0       	rjmp	.+126    	; 0x54d0 <error_message+0x200>
	else if (__tmp > 65535)
    5452:	6f 81       	ldd	r22, Y+7	; 0x07
    5454:	78 85       	ldd	r23, Y+8	; 0x08
    5456:	89 85       	ldd	r24, Y+9	; 0x09
    5458:	9a 85       	ldd	r25, Y+10	; 0x0a
    545a:	20 e0       	ldi	r18, 0x00	; 0
    545c:	3f ef       	ldi	r19, 0xFF	; 255
    545e:	4f e7       	ldi	r20, 0x7F	; 127
    5460:	57 e4       	ldi	r21, 0x47	; 71
    5462:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    5466:	18 16       	cp	r1, r24
    5468:	4c f5       	brge	.+82     	; 0x54bc <error_message+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    546a:	6b 85       	ldd	r22, Y+11	; 0x0b
    546c:	7c 85       	ldd	r23, Y+12	; 0x0c
    546e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5470:	9e 85       	ldd	r25, Y+14	; 0x0e
    5472:	20 e0       	ldi	r18, 0x00	; 0
    5474:	30 e0       	ldi	r19, 0x00	; 0
    5476:	40 e2       	ldi	r20, 0x20	; 32
    5478:	51 e4       	ldi	r21, 0x41	; 65
    547a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    547e:	dc 01       	movw	r26, r24
    5480:	cb 01       	movw	r24, r22
    5482:	bc 01       	movw	r22, r24
    5484:	cd 01       	movw	r24, r26
    5486:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    548a:	dc 01       	movw	r26, r24
    548c:	cb 01       	movw	r24, r22
    548e:	9e 83       	std	Y+6, r25	; 0x06
    5490:	8d 83       	std	Y+5, r24	; 0x05
    5492:	0f c0       	rjmp	.+30     	; 0x54b2 <error_message+0x1e2>
    5494:	88 ec       	ldi	r24, 0xC8	; 200
    5496:	90 e0       	ldi	r25, 0x00	; 0
    5498:	9c 83       	std	Y+4, r25	; 0x04
    549a:	8b 83       	std	Y+3, r24	; 0x03
    549c:	8b 81       	ldd	r24, Y+3	; 0x03
    549e:	9c 81       	ldd	r25, Y+4	; 0x04
    54a0:	01 97       	sbiw	r24, 0x01	; 1
    54a2:	f1 f7       	brne	.-4      	; 0x54a0 <error_message+0x1d0>
    54a4:	9c 83       	std	Y+4, r25	; 0x04
    54a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54a8:	8d 81       	ldd	r24, Y+5	; 0x05
    54aa:	9e 81       	ldd	r25, Y+6	; 0x06
    54ac:	01 97       	sbiw	r24, 0x01	; 1
    54ae:	9e 83       	std	Y+6, r25	; 0x06
    54b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54b2:	8d 81       	ldd	r24, Y+5	; 0x05
    54b4:	9e 81       	ldd	r25, Y+6	; 0x06
    54b6:	00 97       	sbiw	r24, 0x00	; 0
    54b8:	69 f7       	brne	.-38     	; 0x5494 <error_message+0x1c4>
    54ba:	14 c0       	rjmp	.+40     	; 0x54e4 <error_message+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54bc:	6f 81       	ldd	r22, Y+7	; 0x07
    54be:	78 85       	ldd	r23, Y+8	; 0x08
    54c0:	89 85       	ldd	r24, Y+9	; 0x09
    54c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    54c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    54c8:	dc 01       	movw	r26, r24
    54ca:	cb 01       	movw	r24, r22
    54cc:	9e 83       	std	Y+6, r25	; 0x06
    54ce:	8d 83       	std	Y+5, r24	; 0x05
    54d0:	8d 81       	ldd	r24, Y+5	; 0x05
    54d2:	9e 81       	ldd	r25, Y+6	; 0x06
    54d4:	9a 83       	std	Y+2, r25	; 0x02
    54d6:	89 83       	std	Y+1, r24	; 0x01
    54d8:	89 81       	ldd	r24, Y+1	; 0x01
    54da:	9a 81       	ldd	r25, Y+2	; 0x02
    54dc:	01 97       	sbiw	r24, 0x01	; 1
    54de:	f1 f7       	brne	.-4      	; 0x54dc <error_message+0x20c>
    54e0:	9a 83       	std	Y+2, r25	; 0x02
    54e2:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(100);
            LCD_clear_display();
    54e4:	0e 94 23 25 	call	0x4a46	; 0x4a46 <LCD_clear_display>

            break;
    }
}
    54e8:	6f 96       	adiw	r28, 0x1f	; 31
    54ea:	0f b6       	in	r0, 0x3f	; 63
    54ec:	f8 94       	cli
    54ee:	de bf       	out	0x3e, r29	; 62
    54f0:	0f be       	out	0x3f, r0	; 63
    54f2:	cd bf       	out	0x3d, r28	; 61
    54f4:	cf 91       	pop	r28
    54f6:	df 91       	pop	r29
    54f8:	08 95       	ret

000054fa <KPD_get_function>:

u8 KPD_get_function(u8 copy_u8_func) {
    54fa:	df 93       	push	r29
    54fc:	cf 93       	push	r28
    54fe:	00 d0       	rcall	.+0      	; 0x5500 <KPD_get_function+0x6>
    5500:	cd b7       	in	r28, 0x3d	; 61
    5502:	de b7       	in	r29, 0x3e	; 62
    5504:	89 83       	std	Y+1, r24	; 0x01
	 *  if the operation is correct the input is returned as it is
	 *
	 *
	 *
	 */
    if (copy_u8_func == 'c') {
    5506:	89 81       	ldd	r24, Y+1	; 0x01
    5508:	83 36       	cpi	r24, 0x63	; 99
    550a:	29 f4       	brne	.+10     	; 0x5516 <KPD_get_function+0x1c>
        LCD_clear_display();
    550c:	0e 94 23 25 	call	0x4a46	; 0x4a46 <LCD_clear_display>
        return 'x';
    5510:	88 e7       	ldi	r24, 0x78	; 120
    5512:	8a 83       	std	Y+2, r24	; 0x02
    5514:	14 c0       	rjmp	.+40     	; 0x553e <KPD_get_function+0x44>
    }
    if (copy_u8_func != '+' && copy_u8_func != '-' && copy_u8_func != '*' && copy_u8_func != '/' && copy_u8_func != '=') {
    5516:	89 81       	ldd	r24, Y+1	; 0x01
    5518:	8b 32       	cpi	r24, 0x2B	; 43
    551a:	79 f0       	breq	.+30     	; 0x553a <KPD_get_function+0x40>
    551c:	89 81       	ldd	r24, Y+1	; 0x01
    551e:	8d 32       	cpi	r24, 0x2D	; 45
    5520:	61 f0       	breq	.+24     	; 0x553a <KPD_get_function+0x40>
    5522:	89 81       	ldd	r24, Y+1	; 0x01
    5524:	8a 32       	cpi	r24, 0x2A	; 42
    5526:	49 f0       	breq	.+18     	; 0x553a <KPD_get_function+0x40>
    5528:	89 81       	ldd	r24, Y+1	; 0x01
    552a:	8f 32       	cpi	r24, 0x2F	; 47
    552c:	31 f0       	breq	.+12     	; 0x553a <KPD_get_function+0x40>
    552e:	89 81       	ldd	r24, Y+1	; 0x01
    5530:	8d 33       	cpi	r24, 0x3D	; 61
    5532:	19 f0       	breq	.+6      	; 0x553a <KPD_get_function+0x40>
        return 'x';
    5534:	88 e7       	ldi	r24, 0x78	; 120
    5536:	8a 83       	std	Y+2, r24	; 0x02
    5538:	02 c0       	rjmp	.+4      	; 0x553e <KPD_get_function+0x44>
    }
    return copy_u8_func;
    553a:	89 81       	ldd	r24, Y+1	; 0x01
    553c:	8a 83       	std	Y+2, r24	; 0x02
    553e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5540:	0f 90       	pop	r0
    5542:	0f 90       	pop	r0
    5544:	cf 91       	pop	r28
    5546:	df 91       	pop	r29
    5548:	08 95       	ret

0000554a <main>:

int main() {
    554a:	df 93       	push	r29
    554c:	cf 93       	push	r28
    554e:	cd b7       	in	r28, 0x3d	; 61
    5550:	de b7       	in	r29, 0x3e	; 62
    5552:	a7 97       	sbiw	r28, 0x27	; 39
    5554:	0f b6       	in	r0, 0x3f	; 63
    5556:	f8 94       	cli
    5558:	de bf       	out	0x3e, r29	; 62
    555a:	0f be       	out	0x3f, r0	; 63
    555c:	cd bf       	out	0x3d, r28	; 61
	// initialize the lcd
    LCD_init();
    555e:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <LCD_init>
    //print welcome message with 1000 ms delay
    welcome_Msg(1000);
    5562:	88 ee       	ldi	r24, 0xE8	; 232
    5564:	93 e0       	ldi	r25, 0x03	; 3
    5566:	0e 94 3d 28 	call	0x507a	; 0x507a <welcome_Msg>

    // initialize the keypad
    KPD_Active_Col_init();
    556a:	0e 94 19 0a 	call	0x1432	; 0x1432 <KPD_Active_Col_init>
    /* variables used for calculations */

    u8 state[16]; // store the key states in it
    u8 key; // store the return of the function kpd_get_key
    f32 num_1 = 0; // used as the left operand
    556e:	80 e0       	ldi	r24, 0x00	; 0
    5570:	90 e0       	ldi	r25, 0x00	; 0
    5572:	a0 e0       	ldi	r26, 0x00	; 0
    5574:	b0 e0       	ldi	r27, 0x00	; 0
    5576:	8f 87       	std	Y+15, r24	; 0x0f
    5578:	98 8b       	std	Y+16, r25	; 0x10
    557a:	a9 8b       	std	Y+17, r26	; 0x11
    557c:	ba 8b       	std	Y+18, r27	; 0x12
    f32 num_2 = 0; // used as the right operand
    557e:	80 e0       	ldi	r24, 0x00	; 0
    5580:	90 e0       	ldi	r25, 0x00	; 0
    5582:	a0 e0       	ldi	r26, 0x00	; 0
    5584:	b0 e0       	ldi	r27, 0x00	; 0
    5586:	8b 87       	std	Y+11, r24	; 0x0b
    5588:	9c 87       	std	Y+12, r25	; 0x0c
    558a:	ad 87       	std	Y+13, r26	; 0x0d
    558c:	be 87       	std	Y+14, r27	; 0x0e
    u8 operation = 'x'; // operation variable (initialized with false operation)
    558e:	88 e7       	ldi	r24, 0x78	; 120
    5590:	8a 87       	std	Y+10, r24	; 0x0a
    f32 result = 0;  // result variable
    5592:	80 e0       	ldi	r24, 0x00	; 0
    5594:	90 e0       	ldi	r25, 0x00	; 0
    5596:	a0 e0       	ldi	r26, 0x00	; 0
    5598:	b0 e0       	ldi	r27, 0x00	; 0
    559a:	8e 83       	std	Y+6, r24	; 0x06
    559c:	9f 83       	std	Y+7, r25	; 0x07
    559e:	a8 87       	std	Y+8, r26	; 0x08
    55a0:	b9 87       	std	Y+9, r27	; 0x09
    u8 op = 'x'; // container to contain the operation (except the = )
    55a2:	88 e7       	ldi	r24, 0x78	; 120
    55a4:	8d 83       	std	Y+5, r24	; 0x05
    u8 is_negative = 0; // flag if the left operand is smaller than the right operand (will result in negative result)
    55a6:	1c 82       	std	Y+4, r1	; 0x04

    u8 is_devision = 0; // flag if the operation is division to use lcd write float function
    55a8:	1b 82       	std	Y+3, r1	; 0x03
    calculatorStates calcState = state_Wait_NUM1; // create an enum object calcState and intialize it
    55aa:	1a 82       	std	Y+2, r1	; 0x02
    while (1) {

    	// reset the state array to make sure we dont get false readings
    	// this is a safety precaution only!

    	 for (u8 i = 0; i < 16; i++) {
    55ac:	19 82       	std	Y+1, r1	; 0x01
    55ae:	0d c0       	rjmp	.+26     	; 0x55ca <main+0x80>
    	            state[i] = 1;
    55b0:	89 81       	ldd	r24, Y+1	; 0x01
    55b2:	28 2f       	mov	r18, r24
    55b4:	30 e0       	ldi	r19, 0x00	; 0
    55b6:	ce 01       	movw	r24, r28
    55b8:	44 96       	adiw	r24, 0x14	; 20
    55ba:	fc 01       	movw	r30, r24
    55bc:	e2 0f       	add	r30, r18
    55be:	f3 1f       	adc	r31, r19
    55c0:	81 e0       	ldi	r24, 0x01	; 1
    55c2:	80 83       	st	Z, r24
    while (1) {

    	// reset the state array to make sure we dont get false readings
    	// this is a safety precaution only!

    	 for (u8 i = 0; i < 16; i++) {
    55c4:	89 81       	ldd	r24, Y+1	; 0x01
    55c6:	8f 5f       	subi	r24, 0xFF	; 255
    55c8:	89 83       	std	Y+1, r24	; 0x01
    55ca:	89 81       	ldd	r24, Y+1	; 0x01
    55cc:	80 31       	cpi	r24, 0x10	; 16
    55ce:	80 f3       	brcs	.-32     	; 0x55b0 <main+0x66>
    	            state[i] = 1;
    	   }
        KPD_read_key(state);
    55d0:	ce 01       	movw	r24, r28
    55d2:	44 96       	adiw	r24, 0x14	; 20
    55d4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <KPD_read_key>
        key = KPD_get_key(state);
    55d8:	ce 01       	movw	r24, r28
    55da:	44 96       	adiw	r24, 0x14	; 20
    55dc:	0e 94 28 0b 	call	0x1650	; 0x1650 <KPD_get_key>
    55e0:	8b 8b       	std	Y+19, r24	; 0x13

        // reset the calculations and clear the lcd
        if (key == 'c') {
    55e2:	8b 89       	ldd	r24, Y+19	; 0x13
    55e4:	83 36       	cpi	r24, 0x63	; 99
    55e6:	01 f5       	brne	.+64     	; 0x5628 <main+0xde>
                    LCD_clear_display();
    55e8:	0e 94 23 25 	call	0x4a46	; 0x4a46 <LCD_clear_display>
                    num_1 = 0;
    55ec:	80 e0       	ldi	r24, 0x00	; 0
    55ee:	90 e0       	ldi	r25, 0x00	; 0
    55f0:	a0 e0       	ldi	r26, 0x00	; 0
    55f2:	b0 e0       	ldi	r27, 0x00	; 0
    55f4:	8f 87       	std	Y+15, r24	; 0x0f
    55f6:	98 8b       	std	Y+16, r25	; 0x10
    55f8:	a9 8b       	std	Y+17, r26	; 0x11
    55fa:	ba 8b       	std	Y+18, r27	; 0x12
                    num_2 = 0;
    55fc:	80 e0       	ldi	r24, 0x00	; 0
    55fe:	90 e0       	ldi	r25, 0x00	; 0
    5600:	a0 e0       	ldi	r26, 0x00	; 0
    5602:	b0 e0       	ldi	r27, 0x00	; 0
    5604:	8b 87       	std	Y+11, r24	; 0x0b
    5606:	9c 87       	std	Y+12, r25	; 0x0c
    5608:	ad 87       	std	Y+13, r26	; 0x0d
    560a:	be 87       	std	Y+14, r27	; 0x0e
                    operation = 'x';
    560c:	88 e7       	ldi	r24, 0x78	; 120
    560e:	8a 87       	std	Y+10, r24	; 0x0a
                    result = 0;
    5610:	80 e0       	ldi	r24, 0x00	; 0
    5612:	90 e0       	ldi	r25, 0x00	; 0
    5614:	a0 e0       	ldi	r26, 0x00	; 0
    5616:	b0 e0       	ldi	r27, 0x00	; 0
    5618:	8e 83       	std	Y+6, r24	; 0x06
    561a:	9f 83       	std	Y+7, r25	; 0x07
    561c:	a8 87       	std	Y+8, r26	; 0x08
    561e:	b9 87       	std	Y+9, r27	; 0x09
                    op = 'x';
    5620:	88 e7       	ldi	r24, 0x78	; 120
    5622:	8d 83       	std	Y+5, r24	; 0x05
                    calcState = state_Wait_NUM1;
    5624:	1a 82       	std	Y+2, r1	; 0x02
    5626:	c2 cf       	rjmp	.-124    	; 0x55ac <main+0x62>
                }else{ // calculation mode

        switch(calcState){
    5628:	8a 81       	ldd	r24, Y+2	; 0x02
    562a:	28 2f       	mov	r18, r24
    562c:	30 e0       	ldi	r19, 0x00	; 0
    562e:	3f a3       	std	Y+39, r19	; 0x27
    5630:	2e a3       	std	Y+38, r18	; 0x26
    5632:	8e a1       	ldd	r24, Y+38	; 0x26
    5634:	9f a1       	ldd	r25, Y+39	; 0x27
    5636:	82 30       	cpi	r24, 0x02	; 2
    5638:	91 05       	cpc	r25, r1
    563a:	09 f4       	brne	.+2      	; 0x563e <main+0xf4>
    563c:	55 c0       	rjmp	.+170    	; 0x56e8 <main+0x19e>
    563e:	2e a1       	ldd	r18, Y+38	; 0x26
    5640:	3f a1       	ldd	r19, Y+39	; 0x27
    5642:	23 30       	cpi	r18, 0x03	; 3
    5644:	31 05       	cpc	r19, r1
    5646:	5c f4       	brge	.+22     	; 0x565e <main+0x114>
    5648:	8e a1       	ldd	r24, Y+38	; 0x26
    564a:	9f a1       	ldd	r25, Y+39	; 0x27
    564c:	00 97       	sbiw	r24, 0x00	; 0
    564e:	d1 f0       	breq	.+52     	; 0x5684 <main+0x13a>
    5650:	2e a1       	ldd	r18, Y+38	; 0x26
    5652:	3f a1       	ldd	r19, Y+39	; 0x27
    5654:	21 30       	cpi	r18, 0x01	; 1
    5656:	31 05       	cpc	r19, r1
    5658:	09 f4       	brne	.+2      	; 0x565c <main+0x112>
    565a:	75 c0       	rjmp	.+234    	; 0x5746 <main+0x1fc>
    565c:	a7 cf       	rjmp	.-178    	; 0x55ac <main+0x62>
    565e:	8e a1       	ldd	r24, Y+38	; 0x26
    5660:	9f a1       	ldd	r25, Y+39	; 0x27
    5662:	84 30       	cpi	r24, 0x04	; 4
    5664:	91 05       	cpc	r25, r1
    5666:	09 f4       	brne	.+2      	; 0x566a <main+0x120>
    5668:	b6 c0       	rjmp	.+364    	; 0x57d6 <main+0x28c>
    566a:	2e a1       	ldd	r18, Y+38	; 0x26
    566c:	3f a1       	ldd	r19, Y+39	; 0x27
    566e:	24 30       	cpi	r18, 0x04	; 4
    5670:	31 05       	cpc	r19, r1
    5672:	0c f4       	brge	.+2      	; 0x5676 <main+0x12c>
    5674:	72 c1       	rjmp	.+740    	; 0x595a <main+0x410>
    5676:	8e a1       	ldd	r24, Y+38	; 0x26
    5678:	9f a1       	ldd	r25, Y+39	; 0x27
    567a:	85 30       	cpi	r24, 0x05	; 5
    567c:	91 05       	cpc	r25, r1
    567e:	09 f4       	brne	.+2      	; 0x5682 <main+0x138>
    5680:	8a c1       	rjmp	.+788    	; 0x5996 <main+0x44c>
    5682:	94 cf       	rjmp	.-216    	; 0x55ac <main+0x62>

        	case state_Wait_NUM1:
        		// condition to not assign the number and echo it on the lcd if it is  equal the error
        		if(key != ERROR){
    5684:	8b 89       	ldd	r24, Y+19	; 0x13
    5686:	80 31       	cpi	r24, 0x10	; 16
    5688:	09 f4       	brne	.+2      	; 0x568c <main+0x142>
    568a:	90 cf       	rjmp	.-224    	; 0x55ac <main+0x62>
        			if(key != '+' && key != '-' && key != '*' && key != '/'){
    568c:	8b 89       	ldd	r24, Y+19	; 0x13
    568e:	8b 32       	cpi	r24, 0x2B	; 43
    5690:	49 f1       	breq	.+82     	; 0x56e4 <main+0x19a>
    5692:	8b 89       	ldd	r24, Y+19	; 0x13
    5694:	8d 32       	cpi	r24, 0x2D	; 45
    5696:	31 f1       	breq	.+76     	; 0x56e4 <main+0x19a>
    5698:	8b 89       	ldd	r24, Y+19	; 0x13
    569a:	8a 32       	cpi	r24, 0x2A	; 42
    569c:	19 f1       	breq	.+70     	; 0x56e4 <main+0x19a>
    569e:	8b 89       	ldd	r24, Y+19	; 0x13
    56a0:	8f 32       	cpi	r24, 0x2F	; 47
    56a2:	01 f1       	breq	.+64     	; 0x56e4 <main+0x19a>

        				num_1 = KPD_get_number(key);
    56a4:	8b 89       	ldd	r24, Y+19	; 0x13
    56a6:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <KPD_get_number>
    56aa:	88 2f       	mov	r24, r24
    56ac:	90 e0       	ldi	r25, 0x00	; 0
    56ae:	a0 e0       	ldi	r26, 0x00	; 0
    56b0:	b0 e0       	ldi	r27, 0x00	; 0
    56b2:	bc 01       	movw	r22, r24
    56b4:	cd 01       	movw	r24, r26
    56b6:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__floatunsisf>
    56ba:	dc 01       	movw	r26, r24
    56bc:	cb 01       	movw	r24, r22
    56be:	8f 87       	std	Y+15, r24	; 0x0f
    56c0:	98 8b       	std	Y+16, r25	; 0x10
    56c2:	a9 8b       	std	Y+17, r26	; 0x11
    56c4:	ba 8b       	std	Y+18, r27	; 0x12
        				LCD_write_number(num_1);
    56c6:	6f 85       	ldd	r22, Y+15	; 0x0f
    56c8:	78 89       	ldd	r23, Y+16	; 0x10
    56ca:	89 89       	ldd	r24, Y+17	; 0x11
    56cc:	9a 89       	ldd	r25, Y+18	; 0x12
    56ce:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    56d2:	dc 01       	movw	r26, r24
    56d4:	cb 01       	movw	r24, r22
    56d6:	bc 01       	movw	r22, r24
    56d8:	cd 01       	movw	r24, r26
    56da:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <LCD_write_number>
        				calcState = state_Operation;
    56de:	82 e0       	ldi	r24, 0x02	; 2
    56e0:	8a 83       	std	Y+2, r24	; 0x02
    56e2:	64 cf       	rjmp	.-312    	; 0x55ac <main+0x62>
        			}else{
        				calcState = state_Wait_NUM1;
    56e4:	1a 82       	std	Y+2, r1	; 0x02
    56e6:	62 cf       	rjmp	.-316    	; 0x55ac <main+0x62>
        			}
        		}
        		break;

        	case state_Operation:
        		if(key == '='){
    56e8:	8b 89       	ldd	r24, Y+19	; 0x13
    56ea:	8d 33       	cpi	r24, 0x3D	; 61
    56ec:	89 f4       	brne	.+34     	; 0x5710 <main+0x1c6>
        			num_1 = 0;
    56ee:	80 e0       	ldi	r24, 0x00	; 0
    56f0:	90 e0       	ldi	r25, 0x00	; 0
    56f2:	a0 e0       	ldi	r26, 0x00	; 0
    56f4:	b0 e0       	ldi	r27, 0x00	; 0
    56f6:	8f 87       	std	Y+15, r24	; 0x0f
    56f8:	98 8b       	std	Y+16, r25	; 0x10
    56fa:	a9 8b       	std	Y+17, r26	; 0x11
    56fc:	ba 8b       	std	Y+18, r27	; 0x12
        			operation = 'x';
    56fe:	88 e7       	ldi	r24, 0x78	; 120
    5700:	8a 87       	std	Y+10, r24	; 0x0a
        			LCD_clear_display();
    5702:	0e 94 23 25 	call	0x4a46	; 0x4a46 <LCD_clear_display>
        			error_message(0);
    5706:	80 e0       	ldi	r24, 0x00	; 0
    5708:	0e 94 68 29 	call	0x52d0	; 0x52d0 <error_message>
        			calcState = state_Wait_NUM1;
    570c:	1a 82       	std	Y+2, r1	; 0x02
    570e:	4e cf       	rjmp	.-356    	; 0x55ac <main+0x62>

        		}else if((key != ERROR) && (key == '+' || key == '-' || key == '*' || key == '/')){
    5710:	8b 89       	ldd	r24, Y+19	; 0x13
    5712:	80 31       	cpi	r24, 0x10	; 16
    5714:	09 f4       	brne	.+2      	; 0x5718 <main+0x1ce>
    5716:	4a cf       	rjmp	.-364    	; 0x55ac <main+0x62>
    5718:	8b 89       	ldd	r24, Y+19	; 0x13
    571a:	8b 32       	cpi	r24, 0x2B	; 43
    571c:	51 f0       	breq	.+20     	; 0x5732 <main+0x1e8>
    571e:	8b 89       	ldd	r24, Y+19	; 0x13
    5720:	8d 32       	cpi	r24, 0x2D	; 45
    5722:	39 f0       	breq	.+14     	; 0x5732 <main+0x1e8>
    5724:	8b 89       	ldd	r24, Y+19	; 0x13
    5726:	8a 32       	cpi	r24, 0x2A	; 42
    5728:	21 f0       	breq	.+8      	; 0x5732 <main+0x1e8>
    572a:	8b 89       	ldd	r24, Y+19	; 0x13
    572c:	8f 32       	cpi	r24, 0x2F	; 47
    572e:	09 f0       	breq	.+2      	; 0x5732 <main+0x1e8>
    5730:	3d cf       	rjmp	.-390    	; 0x55ac <main+0x62>

        			operation = key;
    5732:	8b 89       	ldd	r24, Y+19	; 0x13
    5734:	8a 87       	std	Y+10, r24	; 0x0a
        			op = operation;
    5736:	8a 85       	ldd	r24, Y+10	; 0x0a
    5738:	8d 83       	std	Y+5, r24	; 0x05
        			LCD_write_char(op);
    573a:	8d 81       	ldd	r24, Y+5	; 0x05
    573c:	0e 94 20 26 	call	0x4c40	; 0x4c40 <LCD_write_char>
        			calcState = state_Wait_NUM2;
    5740:	81 e0       	ldi	r24, 0x01	; 1
    5742:	8a 83       	std	Y+2, r24	; 0x02
    5744:	33 cf       	rjmp	.-410    	; 0x55ac <main+0x62>

    			}
        		break;

        	case state_Wait_NUM2:
        		if(key != ERROR){
    5746:	8b 89       	ldd	r24, Y+19	; 0x13
    5748:	80 31       	cpi	r24, 0x10	; 16
    574a:	09 f4       	brne	.+2      	; 0x574e <main+0x204>
    574c:	2f cf       	rjmp	.-418    	; 0x55ac <main+0x62>
        			if(key == '='){
    574e:	8b 89       	ldd	r24, Y+19	; 0x13
    5750:	8d 33       	cpi	r24, 0x3D	; 61
    5752:	89 f4       	brne	.+34     	; 0x5776 <main+0x22c>
        				LCD_clear_display();
    5754:	0e 94 23 25 	call	0x4a46	; 0x4a46 <LCD_clear_display>
        				error_message(0);
    5758:	80 e0       	ldi	r24, 0x00	; 0
    575a:	0e 94 68 29 	call	0x52d0	; 0x52d0 <error_message>
        				num_1 = 0;
    575e:	80 e0       	ldi	r24, 0x00	; 0
    5760:	90 e0       	ldi	r25, 0x00	; 0
    5762:	a0 e0       	ldi	r26, 0x00	; 0
    5764:	b0 e0       	ldi	r27, 0x00	; 0
    5766:	8f 87       	std	Y+15, r24	; 0x0f
    5768:	98 8b       	std	Y+16, r25	; 0x10
    576a:	a9 8b       	std	Y+17, r26	; 0x11
    576c:	ba 8b       	std	Y+18, r27	; 0x12
        				operation = 'x';
    576e:	88 e7       	ldi	r24, 0x78	; 120
    5770:	8a 87       	std	Y+10, r24	; 0x0a
        				calcState = state_Wait_NUM1;
    5772:	1a 82       	std	Y+2, r1	; 0x02
    5774:	1b cf       	rjmp	.-458    	; 0x55ac <main+0x62>

        			}else if(key != '+' && key != '-' && key != '*' && key != '/' ){
    5776:	8b 89       	ldd	r24, Y+19	; 0x13
    5778:	8b 32       	cpi	r24, 0x2B	; 43
    577a:	09 f4       	brne	.+2      	; 0x577e <main+0x234>
    577c:	17 cf       	rjmp	.-466    	; 0x55ac <main+0x62>
    577e:	8b 89       	ldd	r24, Y+19	; 0x13
    5780:	8d 32       	cpi	r24, 0x2D	; 45
    5782:	09 f4       	brne	.+2      	; 0x5786 <main+0x23c>
    5784:	13 cf       	rjmp	.-474    	; 0x55ac <main+0x62>
    5786:	8b 89       	ldd	r24, Y+19	; 0x13
    5788:	8a 32       	cpi	r24, 0x2A	; 42
    578a:	09 f4       	brne	.+2      	; 0x578e <main+0x244>
    578c:	0f cf       	rjmp	.-482    	; 0x55ac <main+0x62>
    578e:	8b 89       	ldd	r24, Y+19	; 0x13
    5790:	8f 32       	cpi	r24, 0x2F	; 47
    5792:	09 f4       	brne	.+2      	; 0x5796 <main+0x24c>
    5794:	0b cf       	rjmp	.-490    	; 0x55ac <main+0x62>

        				num_2 = KPD_get_number(key);
    5796:	8b 89       	ldd	r24, Y+19	; 0x13
    5798:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <KPD_get_number>
    579c:	88 2f       	mov	r24, r24
    579e:	90 e0       	ldi	r25, 0x00	; 0
    57a0:	a0 e0       	ldi	r26, 0x00	; 0
    57a2:	b0 e0       	ldi	r27, 0x00	; 0
    57a4:	bc 01       	movw	r22, r24
    57a6:	cd 01       	movw	r24, r26
    57a8:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__floatunsisf>
    57ac:	dc 01       	movw	r26, r24
    57ae:	cb 01       	movw	r24, r22
    57b0:	8b 87       	std	Y+11, r24	; 0x0b
    57b2:	9c 87       	std	Y+12, r25	; 0x0c
    57b4:	ad 87       	std	Y+13, r26	; 0x0d
    57b6:	be 87       	std	Y+14, r27	; 0x0e
        				LCD_write_number(num_2);
    57b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    57ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    57bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    57be:	9e 85       	ldd	r25, Y+14	; 0x0e
    57c0:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    57c4:	dc 01       	movw	r26, r24
    57c6:	cb 01       	movw	r24, r22
    57c8:	bc 01       	movw	r22, r24
    57ca:	cd 01       	movw	r24, r26
    57cc:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <LCD_write_number>
        				calcState = state_Calculate;
    57d0:	84 e0       	ldi	r24, 0x04	; 4
    57d2:	8a 83       	std	Y+2, r24	; 0x02
    57d4:	eb ce       	rjmp	.-554    	; 0x55ac <main+0x62>
        			}
        		}
        		break;

        	case state_Calculate:
        		if(key == '='){
    57d6:	8b 89       	ldd	r24, Y+19	; 0x13
    57d8:	8d 33       	cpi	r24, 0x3D	; 61
    57da:	09 f0       	breq	.+2      	; 0x57de <main+0x294>
    57dc:	e7 ce       	rjmp	.-562    	; 0x55ac <main+0x62>
        		switch (op) {
    57de:	8d 81       	ldd	r24, Y+5	; 0x05
    57e0:	28 2f       	mov	r18, r24
    57e2:	30 e0       	ldi	r19, 0x00	; 0
    57e4:	3d a3       	std	Y+37, r19	; 0x25
    57e6:	2c a3       	std	Y+36, r18	; 0x24
    57e8:	8c a1       	ldd	r24, Y+36	; 0x24
    57ea:	9d a1       	ldd	r25, Y+37	; 0x25
    57ec:	8b 32       	cpi	r24, 0x2B	; 43
    57ee:	91 05       	cpc	r25, r1
    57f0:	c1 f0       	breq	.+48     	; 0x5822 <main+0x2d8>
    57f2:	2c a1       	ldd	r18, Y+36	; 0x24
    57f4:	3d a1       	ldd	r19, Y+37	; 0x25
    57f6:	2c 32       	cpi	r18, 0x2C	; 44
    57f8:	31 05       	cpc	r19, r1
    57fa:	3c f4       	brge	.+14     	; 0x580a <main+0x2c0>
    57fc:	8c a1       	ldd	r24, Y+36	; 0x24
    57fe:	9d a1       	ldd	r25, Y+37	; 0x25
    5800:	8a 32       	cpi	r24, 0x2A	; 42
    5802:	91 05       	cpc	r25, r1
    5804:	09 f4       	brne	.+2      	; 0x5808 <main+0x2be>
    5806:	4e c0       	rjmp	.+156    	; 0x58a4 <main+0x35a>
    5808:	7f c0       	rjmp	.+254    	; 0x5908 <main+0x3be>
    580a:	2c a1       	ldd	r18, Y+36	; 0x24
    580c:	3d a1       	ldd	r19, Y+37	; 0x25
    580e:	2d 32       	cpi	r18, 0x2D	; 45
    5810:	31 05       	cpc	r19, r1
    5812:	c1 f0       	breq	.+48     	; 0x5844 <main+0x2fa>
    5814:	8c a1       	ldd	r24, Y+36	; 0x24
    5816:	9d a1       	ldd	r25, Y+37	; 0x25
    5818:	8f 32       	cpi	r24, 0x2F	; 47
    581a:	91 05       	cpc	r25, r1
    581c:	09 f4       	brne	.+2      	; 0x5820 <main+0x2d6>
    581e:	53 c0       	rjmp	.+166    	; 0x58c6 <main+0x37c>
    5820:	73 c0       	rjmp	.+230    	; 0x5908 <main+0x3be>

					case '+':
						result = num_1 + num_2;
    5822:	6f 85       	ldd	r22, Y+15	; 0x0f
    5824:	78 89       	ldd	r23, Y+16	; 0x10
    5826:	89 89       	ldd	r24, Y+17	; 0x11
    5828:	9a 89       	ldd	r25, Y+18	; 0x12
    582a:	2b 85       	ldd	r18, Y+11	; 0x0b
    582c:	3c 85       	ldd	r19, Y+12	; 0x0c
    582e:	4d 85       	ldd	r20, Y+13	; 0x0d
    5830:	5e 85       	ldd	r21, Y+14	; 0x0e
    5832:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    5836:	dc 01       	movw	r26, r24
    5838:	cb 01       	movw	r24, r22
    583a:	8e 83       	std	Y+6, r24	; 0x06
    583c:	9f 83       	std	Y+7, r25	; 0x07
    583e:	a8 87       	std	Y+8, r26	; 0x08
    5840:	b9 87       	std	Y+9, r27	; 0x09
    5842:	62 c0       	rjmp	.+196    	; 0x5908 <main+0x3be>
						break;
					case '-':

						if(num_2 > num_1){
    5844:	6b 85       	ldd	r22, Y+11	; 0x0b
    5846:	7c 85       	ldd	r23, Y+12	; 0x0c
    5848:	8d 85       	ldd	r24, Y+13	; 0x0d
    584a:	9e 85       	ldd	r25, Y+14	; 0x0e
    584c:	2f 85       	ldd	r18, Y+15	; 0x0f
    584e:	38 89       	ldd	r19, Y+16	; 0x10
    5850:	49 89       	ldd	r20, Y+17	; 0x11
    5852:	5a 89       	ldd	r21, Y+18	; 0x12
    5854:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    5858:	18 16       	cp	r1, r24
    585a:	9c f4       	brge	.+38     	; 0x5882 <main+0x338>

							result = num_2 - num_1;
    585c:	6b 85       	ldd	r22, Y+11	; 0x0b
    585e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5860:	8d 85       	ldd	r24, Y+13	; 0x0d
    5862:	9e 85       	ldd	r25, Y+14	; 0x0e
    5864:	2f 85       	ldd	r18, Y+15	; 0x0f
    5866:	38 89       	ldd	r19, Y+16	; 0x10
    5868:	49 89       	ldd	r20, Y+17	; 0x11
    586a:	5a 89       	ldd	r21, Y+18	; 0x12
    586c:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    5870:	dc 01       	movw	r26, r24
    5872:	cb 01       	movw	r24, r22
    5874:	8e 83       	std	Y+6, r24	; 0x06
    5876:	9f 83       	std	Y+7, r25	; 0x07
    5878:	a8 87       	std	Y+8, r26	; 0x08
    587a:	b9 87       	std	Y+9, r27	; 0x09
							is_negative = 1;
    587c:	81 e0       	ldi	r24, 0x01	; 1
    587e:	8c 83       	std	Y+4, r24	; 0x04
    5880:	43 c0       	rjmp	.+134    	; 0x5908 <main+0x3be>

						}else{
							result = num_1 - num_2;
    5882:	6f 85       	ldd	r22, Y+15	; 0x0f
    5884:	78 89       	ldd	r23, Y+16	; 0x10
    5886:	89 89       	ldd	r24, Y+17	; 0x11
    5888:	9a 89       	ldd	r25, Y+18	; 0x12
    588a:	2b 85       	ldd	r18, Y+11	; 0x0b
    588c:	3c 85       	ldd	r19, Y+12	; 0x0c
    588e:	4d 85       	ldd	r20, Y+13	; 0x0d
    5890:	5e 85       	ldd	r21, Y+14	; 0x0e
    5892:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    5896:	dc 01       	movw	r26, r24
    5898:	cb 01       	movw	r24, r22
    589a:	8e 83       	std	Y+6, r24	; 0x06
    589c:	9f 83       	std	Y+7, r25	; 0x07
    589e:	a8 87       	std	Y+8, r26	; 0x08
    58a0:	b9 87       	std	Y+9, r27	; 0x09
    58a2:	32 c0       	rjmp	.+100    	; 0x5908 <main+0x3be>
						}

						break;
					case '*':
						result = num_1 * num_2;
    58a4:	6f 85       	ldd	r22, Y+15	; 0x0f
    58a6:	78 89       	ldd	r23, Y+16	; 0x10
    58a8:	89 89       	ldd	r24, Y+17	; 0x11
    58aa:	9a 89       	ldd	r25, Y+18	; 0x12
    58ac:	2b 85       	ldd	r18, Y+11	; 0x0b
    58ae:	3c 85       	ldd	r19, Y+12	; 0x0c
    58b0:	4d 85       	ldd	r20, Y+13	; 0x0d
    58b2:	5e 85       	ldd	r21, Y+14	; 0x0e
    58b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    58b8:	dc 01       	movw	r26, r24
    58ba:	cb 01       	movw	r24, r22
    58bc:	8e 83       	std	Y+6, r24	; 0x06
    58be:	9f 83       	std	Y+7, r25	; 0x07
    58c0:	a8 87       	std	Y+8, r26	; 0x08
    58c2:	b9 87       	std	Y+9, r27	; 0x09
    58c4:	21 c0       	rjmp	.+66     	; 0x5908 <main+0x3be>
						break;
					case '/':
						if(num_2 != 0){
    58c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    58c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    58ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    58cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    58ce:	20 e0       	ldi	r18, 0x00	; 0
    58d0:	30 e0       	ldi	r19, 0x00	; 0
    58d2:	40 e0       	ldi	r20, 0x00	; 0
    58d4:	50 e0       	ldi	r21, 0x00	; 0
    58d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__nesf2>
    58da:	88 23       	and	r24, r24
    58dc:	99 f0       	breq	.+38     	; 0x5904 <main+0x3ba>
							result = (f32)num_1 / (f32)num_2;
    58de:	6f 85       	ldd	r22, Y+15	; 0x0f
    58e0:	78 89       	ldd	r23, Y+16	; 0x10
    58e2:	89 89       	ldd	r24, Y+17	; 0x11
    58e4:	9a 89       	ldd	r25, Y+18	; 0x12
    58e6:	2b 85       	ldd	r18, Y+11	; 0x0b
    58e8:	3c 85       	ldd	r19, Y+12	; 0x0c
    58ea:	4d 85       	ldd	r20, Y+13	; 0x0d
    58ec:	5e 85       	ldd	r21, Y+14	; 0x0e
    58ee:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    58f2:	dc 01       	movw	r26, r24
    58f4:	cb 01       	movw	r24, r22
    58f6:	8e 83       	std	Y+6, r24	; 0x06
    58f8:	9f 83       	std	Y+7, r25	; 0x07
    58fa:	a8 87       	std	Y+8, r26	; 0x08
    58fc:	b9 87       	std	Y+9, r27	; 0x09
							is_devision = 1;
    58fe:	81 e0       	ldi	r24, 0x01	; 1
    5900:	8b 83       	std	Y+3, r24	; 0x03
    5902:	02 c0       	rjmp	.+4      	; 0x5908 <main+0x3be>
						}else{
							calcState = state_Error;
    5904:	85 e0       	ldi	r24, 0x05	; 5
    5906:	8a 83       	std	Y+2, r24	; 0x02
						}
						break;

				}

        		if (calcState != state_Error){
    5908:	8a 81       	ldd	r24, Y+2	; 0x02
    590a:	85 30       	cpi	r24, 0x05	; 5
    590c:	09 f4       	brne	.+2      	; 0x5910 <main+0x3c6>
    590e:	4e ce       	rjmp	.-868    	; 0x55ac <main+0x62>

					LCD_write_char('=');
    5910:	8d e3       	ldi	r24, 0x3D	; 61
    5912:	0e 94 20 26 	call	0x4c40	; 0x4c40 <LCD_write_char>
					if(is_negative){
    5916:	8c 81       	ldd	r24, Y+4	; 0x04
    5918:	88 23       	and	r24, r24
    591a:	19 f0       	breq	.+6      	; 0x5922 <main+0x3d8>
						LCD_write_char('-');
    591c:	8d e2       	ldi	r24, 0x2D	; 45
    591e:	0e 94 20 26 	call	0x4c40	; 0x4c40 <LCD_write_char>

					}
					if(is_devision){
    5922:	8b 81       	ldd	r24, Y+3	; 0x03
    5924:	88 23       	and	r24, r24
    5926:	51 f0       	breq	.+20     	; 0x593c <main+0x3f2>
						LCD_write_float(result, 1);
    5928:	8e 81       	ldd	r24, Y+6	; 0x06
    592a:	9f 81       	ldd	r25, Y+7	; 0x07
    592c:	a8 85       	ldd	r26, Y+8	; 0x08
    592e:	b9 85       	ldd	r27, Y+9	; 0x09
    5930:	bc 01       	movw	r22, r24
    5932:	cd 01       	movw	r24, r26
    5934:	41 e0       	ldi	r20, 0x01	; 1
    5936:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <LCD_write_float>
						is_devision = 0;
    593a:	1b 82       	std	Y+3, r1	; 0x03
					}
					LCD_write_number(result);
    593c:	6e 81       	ldd	r22, Y+6	; 0x06
    593e:	7f 81       	ldd	r23, Y+7	; 0x07
    5940:	88 85       	ldd	r24, Y+8	; 0x08
    5942:	99 85       	ldd	r25, Y+9	; 0x09
    5944:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    5948:	dc 01       	movw	r26, r24
    594a:	cb 01       	movw	r24, r22
    594c:	bc 01       	movw	r22, r24
    594e:	cd 01       	movw	r24, r26
    5950:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <LCD_write_number>
					calcState = state_Result;
    5954:	83 e0       	ldi	r24, 0x03	; 3
    5956:	8a 83       	std	Y+2, r24	; 0x02
    5958:	29 ce       	rjmp	.-942    	; 0x55ac <main+0x62>
        		}

        		break;

        	case state_Result:
					if (key == '=') {
    595a:	8b 89       	ldd	r24, Y+19	; 0x13
    595c:	8d 33       	cpi	r24, 0x3D	; 61
    595e:	09 f0       	breq	.+2      	; 0x5962 <main+0x418>
    5960:	25 ce       	rjmp	.-950    	; 0x55ac <main+0x62>
						num_1 = result; // Set the result as the new num_1
    5962:	8e 81       	ldd	r24, Y+6	; 0x06
    5964:	9f 81       	ldd	r25, Y+7	; 0x07
    5966:	a8 85       	ldd	r26, Y+8	; 0x08
    5968:	b9 85       	ldd	r27, Y+9	; 0x09
    596a:	8f 87       	std	Y+15, r24	; 0x0f
    596c:	98 8b       	std	Y+16, r25	; 0x10
    596e:	a9 8b       	std	Y+17, r26	; 0x11
    5970:	ba 8b       	std	Y+18, r27	; 0x12
						LCD_clear_display();
    5972:	0e 94 23 25 	call	0x4a46	; 0x4a46 <LCD_clear_display>
						LCD_write_number(num_1);
    5976:	6f 85       	ldd	r22, Y+15	; 0x0f
    5978:	78 89       	ldd	r23, Y+16	; 0x10
    597a:	89 89       	ldd	r24, Y+17	; 0x11
    597c:	9a 89       	ldd	r25, Y+18	; 0x12
    597e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    5982:	dc 01       	movw	r26, r24
    5984:	cb 01       	movw	r24, r22
    5986:	bc 01       	movw	r22, r24
    5988:	cd 01       	movw	r24, r26
    598a:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <LCD_write_number>
						is_negative = 0;
    598e:	1c 82       	std	Y+4, r1	; 0x04
						calcState = state_Operation; // Wait for the next operation
    5990:	82 e0       	ldi	r24, 0x02	; 2
    5992:	8a 83       	std	Y+2, r24	; 0x02
    5994:	0b ce       	rjmp	.-1002   	; 0x55ac <main+0x62>
						}
					break;

        		case state_Error:
        			LCD_clear_display();
    5996:	0e 94 23 25 	call	0x4a46	; 0x4a46 <LCD_clear_display>
        			error_message(0);
    599a:	80 e0       	ldi	r24, 0x00	; 0
    599c:	0e 94 68 29 	call	0x52d0	; 0x52d0 <error_message>
        			calcState = state_Wait_NUM1;
    59a0:	1a 82       	std	Y+2, r1	; 0x02
        			num_1 =0;
    59a2:	80 e0       	ldi	r24, 0x00	; 0
    59a4:	90 e0       	ldi	r25, 0x00	; 0
    59a6:	a0 e0       	ldi	r26, 0x00	; 0
    59a8:	b0 e0       	ldi	r27, 0x00	; 0
    59aa:	8f 87       	std	Y+15, r24	; 0x0f
    59ac:	98 8b       	std	Y+16, r25	; 0x10
    59ae:	a9 8b       	std	Y+17, r26	; 0x11
    59b0:	ba 8b       	std	Y+18, r27	; 0x12
        			num_2 = 0;
    59b2:	80 e0       	ldi	r24, 0x00	; 0
    59b4:	90 e0       	ldi	r25, 0x00	; 0
    59b6:	a0 e0       	ldi	r26, 0x00	; 0
    59b8:	b0 e0       	ldi	r27, 0x00	; 0
    59ba:	8b 87       	std	Y+11, r24	; 0x0b
    59bc:	9c 87       	std	Y+12, r25	; 0x0c
    59be:	ad 87       	std	Y+13, r26	; 0x0d
    59c0:	be 87       	std	Y+14, r27	; 0x0e
        			operation = 'x';
    59c2:	88 e7       	ldi	r24, 0x78	; 120
    59c4:	8a 87       	std	Y+10, r24	; 0x0a
    59c6:	f2 cd       	rjmp	.-1052   	; 0x55ac <main+0x62>

000059c8 <__mulsi3>:
    59c8:	62 9f       	mul	r22, r18
    59ca:	d0 01       	movw	r26, r0
    59cc:	73 9f       	mul	r23, r19
    59ce:	f0 01       	movw	r30, r0
    59d0:	82 9f       	mul	r24, r18
    59d2:	e0 0d       	add	r30, r0
    59d4:	f1 1d       	adc	r31, r1
    59d6:	64 9f       	mul	r22, r20
    59d8:	e0 0d       	add	r30, r0
    59da:	f1 1d       	adc	r31, r1
    59dc:	92 9f       	mul	r25, r18
    59de:	f0 0d       	add	r31, r0
    59e0:	83 9f       	mul	r24, r19
    59e2:	f0 0d       	add	r31, r0
    59e4:	74 9f       	mul	r23, r20
    59e6:	f0 0d       	add	r31, r0
    59e8:	65 9f       	mul	r22, r21
    59ea:	f0 0d       	add	r31, r0
    59ec:	99 27       	eor	r25, r25
    59ee:	72 9f       	mul	r23, r18
    59f0:	b0 0d       	add	r27, r0
    59f2:	e1 1d       	adc	r30, r1
    59f4:	f9 1f       	adc	r31, r25
    59f6:	63 9f       	mul	r22, r19
    59f8:	b0 0d       	add	r27, r0
    59fa:	e1 1d       	adc	r30, r1
    59fc:	f9 1f       	adc	r31, r25
    59fe:	bd 01       	movw	r22, r26
    5a00:	cf 01       	movw	r24, r30
    5a02:	11 24       	eor	r1, r1
    5a04:	08 95       	ret

00005a06 <__divmodsi4>:
    5a06:	97 fb       	bst	r25, 7
    5a08:	09 2e       	mov	r0, r25
    5a0a:	05 26       	eor	r0, r21
    5a0c:	0e d0       	rcall	.+28     	; 0x5a2a <__divmodsi4_neg1>
    5a0e:	57 fd       	sbrc	r21, 7
    5a10:	04 d0       	rcall	.+8      	; 0x5a1a <__divmodsi4_neg2>
    5a12:	14 d0       	rcall	.+40     	; 0x5a3c <__udivmodsi4>
    5a14:	0a d0       	rcall	.+20     	; 0x5a2a <__divmodsi4_neg1>
    5a16:	00 1c       	adc	r0, r0
    5a18:	38 f4       	brcc	.+14     	; 0x5a28 <__divmodsi4_exit>

00005a1a <__divmodsi4_neg2>:
    5a1a:	50 95       	com	r21
    5a1c:	40 95       	com	r20
    5a1e:	30 95       	com	r19
    5a20:	21 95       	neg	r18
    5a22:	3f 4f       	sbci	r19, 0xFF	; 255
    5a24:	4f 4f       	sbci	r20, 0xFF	; 255
    5a26:	5f 4f       	sbci	r21, 0xFF	; 255

00005a28 <__divmodsi4_exit>:
    5a28:	08 95       	ret

00005a2a <__divmodsi4_neg1>:
    5a2a:	f6 f7       	brtc	.-4      	; 0x5a28 <__divmodsi4_exit>
    5a2c:	90 95       	com	r25
    5a2e:	80 95       	com	r24
    5a30:	70 95       	com	r23
    5a32:	61 95       	neg	r22
    5a34:	7f 4f       	sbci	r23, 0xFF	; 255
    5a36:	8f 4f       	sbci	r24, 0xFF	; 255
    5a38:	9f 4f       	sbci	r25, 0xFF	; 255
    5a3a:	08 95       	ret

00005a3c <__udivmodsi4>:
    5a3c:	a1 e2       	ldi	r26, 0x21	; 33
    5a3e:	1a 2e       	mov	r1, r26
    5a40:	aa 1b       	sub	r26, r26
    5a42:	bb 1b       	sub	r27, r27
    5a44:	fd 01       	movw	r30, r26
    5a46:	0d c0       	rjmp	.+26     	; 0x5a62 <__udivmodsi4_ep>

00005a48 <__udivmodsi4_loop>:
    5a48:	aa 1f       	adc	r26, r26
    5a4a:	bb 1f       	adc	r27, r27
    5a4c:	ee 1f       	adc	r30, r30
    5a4e:	ff 1f       	adc	r31, r31
    5a50:	a2 17       	cp	r26, r18
    5a52:	b3 07       	cpc	r27, r19
    5a54:	e4 07       	cpc	r30, r20
    5a56:	f5 07       	cpc	r31, r21
    5a58:	20 f0       	brcs	.+8      	; 0x5a62 <__udivmodsi4_ep>
    5a5a:	a2 1b       	sub	r26, r18
    5a5c:	b3 0b       	sbc	r27, r19
    5a5e:	e4 0b       	sbc	r30, r20
    5a60:	f5 0b       	sbc	r31, r21

00005a62 <__udivmodsi4_ep>:
    5a62:	66 1f       	adc	r22, r22
    5a64:	77 1f       	adc	r23, r23
    5a66:	88 1f       	adc	r24, r24
    5a68:	99 1f       	adc	r25, r25
    5a6a:	1a 94       	dec	r1
    5a6c:	69 f7       	brne	.-38     	; 0x5a48 <__udivmodsi4_loop>
    5a6e:	60 95       	com	r22
    5a70:	70 95       	com	r23
    5a72:	80 95       	com	r24
    5a74:	90 95       	com	r25
    5a76:	9b 01       	movw	r18, r22
    5a78:	ac 01       	movw	r20, r24
    5a7a:	bd 01       	movw	r22, r26
    5a7c:	cf 01       	movw	r24, r30
    5a7e:	08 95       	ret

00005a80 <__prologue_saves__>:
    5a80:	2f 92       	push	r2
    5a82:	3f 92       	push	r3
    5a84:	4f 92       	push	r4
    5a86:	5f 92       	push	r5
    5a88:	6f 92       	push	r6
    5a8a:	7f 92       	push	r7
    5a8c:	8f 92       	push	r8
    5a8e:	9f 92       	push	r9
    5a90:	af 92       	push	r10
    5a92:	bf 92       	push	r11
    5a94:	cf 92       	push	r12
    5a96:	df 92       	push	r13
    5a98:	ef 92       	push	r14
    5a9a:	ff 92       	push	r15
    5a9c:	0f 93       	push	r16
    5a9e:	1f 93       	push	r17
    5aa0:	cf 93       	push	r28
    5aa2:	df 93       	push	r29
    5aa4:	cd b7       	in	r28, 0x3d	; 61
    5aa6:	de b7       	in	r29, 0x3e	; 62
    5aa8:	ca 1b       	sub	r28, r26
    5aaa:	db 0b       	sbc	r29, r27
    5aac:	0f b6       	in	r0, 0x3f	; 63
    5aae:	f8 94       	cli
    5ab0:	de bf       	out	0x3e, r29	; 62
    5ab2:	0f be       	out	0x3f, r0	; 63
    5ab4:	cd bf       	out	0x3d, r28	; 61
    5ab6:	09 94       	ijmp

00005ab8 <__epilogue_restores__>:
    5ab8:	2a 88       	ldd	r2, Y+18	; 0x12
    5aba:	39 88       	ldd	r3, Y+17	; 0x11
    5abc:	48 88       	ldd	r4, Y+16	; 0x10
    5abe:	5f 84       	ldd	r5, Y+15	; 0x0f
    5ac0:	6e 84       	ldd	r6, Y+14	; 0x0e
    5ac2:	7d 84       	ldd	r7, Y+13	; 0x0d
    5ac4:	8c 84       	ldd	r8, Y+12	; 0x0c
    5ac6:	9b 84       	ldd	r9, Y+11	; 0x0b
    5ac8:	aa 84       	ldd	r10, Y+10	; 0x0a
    5aca:	b9 84       	ldd	r11, Y+9	; 0x09
    5acc:	c8 84       	ldd	r12, Y+8	; 0x08
    5ace:	df 80       	ldd	r13, Y+7	; 0x07
    5ad0:	ee 80       	ldd	r14, Y+6	; 0x06
    5ad2:	fd 80       	ldd	r15, Y+5	; 0x05
    5ad4:	0c 81       	ldd	r16, Y+4	; 0x04
    5ad6:	1b 81       	ldd	r17, Y+3	; 0x03
    5ad8:	aa 81       	ldd	r26, Y+2	; 0x02
    5ada:	b9 81       	ldd	r27, Y+1	; 0x01
    5adc:	ce 0f       	add	r28, r30
    5ade:	d1 1d       	adc	r29, r1
    5ae0:	0f b6       	in	r0, 0x3f	; 63
    5ae2:	f8 94       	cli
    5ae4:	de bf       	out	0x3e, r29	; 62
    5ae6:	0f be       	out	0x3f, r0	; 63
    5ae8:	cd bf       	out	0x3d, r28	; 61
    5aea:	ed 01       	movw	r28, r26
    5aec:	08 95       	ret

00005aee <_exit>:
    5aee:	f8 94       	cli

00005af0 <__stop_program>:
    5af0:	ff cf       	rjmp	.-2      	; 0x5af0 <__stop_program>
