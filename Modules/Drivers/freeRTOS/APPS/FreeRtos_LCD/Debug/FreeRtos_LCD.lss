
FreeRtos_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007d38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  00007d38  00007dcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000463  00800190  00800190  00007efc  2**0
                  ALLOC
  3 .stab         000086e8  00000000  00000000  00007efc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000040f1  00000000  00000000  000105e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000146d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00014875  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00014a65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00016e71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  000181e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000193c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  00019580  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  00019873  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001a241  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d1 2a 	jmp	0x55a2	; 0x55a2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	fd e7       	ldi	r31, 0x7D	; 125
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3f       	cpi	r26, 0xF3	; 243
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <main>
      8a:	0c 94 9a 3e 	jmp	0x7d34	; 0x7d34 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5a 3e 	jmp	0x7cb4	; 0x7cb4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 76 3e 	jmp	0x7cec	; 0x7cec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 66 3e 	jmp	0x7ccc	; 0x7ccc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 82 3e 	jmp	0x7d04	; 0x7d04 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 66 3e 	jmp	0x7ccc	; 0x7ccc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 82 3e 	jmp	0x7d04	; 0x7d04 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5a 3e 	jmp	0x7cb4	; 0x7cb4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 76 3e 	jmp	0x7cec	; 0x7cec <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 62 3e 	jmp	0x7cc4	; 0x7cc4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e6       	ldi	r22, 0x6F	; 111
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 7e 3e 	jmp	0x7cfc	; 0x7cfc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 66 3e 	jmp	0x7ccc	; 0x7ccc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 82 3e 	jmp	0x7d04	; 0x7d04 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 66 3e 	jmp	0x7ccc	; 0x7ccc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 82 3e 	jmp	0x7d04	; 0x7d04 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 66 3e 	jmp	0x7ccc	; 0x7ccc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 82 3e 	jmp	0x7d04	; 0x7d04 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 63 3e 	jmp	0x7cc6	; 0x7cc6 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 7f 3e 	jmp	0x7cfe	; 0x7cfe <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 6a 3e 	jmp	0x7cd4	; 0x7cd4 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 86 3e 	jmp	0x7d0c	; 0x7d0c <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e9 58       	subi	r30, 0x89	; 137
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <DIO_void_set_port_dir>:


/* implementing the driver functions  */
/* set Portx Direction Function       */

void DIO_void_set_port_dir(u8 copy_u8_portID, u8 port_copy_dir){
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <DIO_void_set_port_dir+0x6>
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	89 83       	std	Y+1, r24	; 0x01
     e04:	6a 83       	std	Y+2, r22	; 0x02
	 *  Also general rule INPUT --> 0 // OUTPUT --> 1
	 *
	 *
	 */

	*(DIO_DDRx[copy_u8_portID]) = port_copy_dir;
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	88 2f       	mov	r24, r24
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	fc 01       	movw	r30, r24
     e12:	e1 58       	subi	r30, 0x81	; 129
     e14:	fe 4f       	sbci	r31, 0xFE	; 254
     e16:	01 90       	ld	r0, Z+
     e18:	f0 81       	ld	r31, Z
     e1a:	e0 2d       	mov	r30, r0
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	80 83       	st	Z, r24

}
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <DIO_void_set_pin_dir>:

void DIO_void_set_pin_dir(u8 copy_u8_portID, u8 copy_u8_pinID, u8 pin_copy_dir){
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <DIO_void_set_pin_dir+0x6>
     e30:	0f 92       	push	r0
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	6a 83       	std	Y+2, r22	; 0x02
     e3a:	4b 83       	std	Y+3, r20	; 0x03
	 *  pin_copy_dir using the predefined macro INPUT //OUTPUT
	 *
	 *
	 */

	assign_Bit(*(DIO_DDRx[copy_u8_portID]),copy_u8_pinID,pin_copy_dir);
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	29 f5       	brne	.+74     	; 0xe8c <DIO_void_set_pin_dir+0x62>
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	88 2f       	mov	r24, r24
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	fc 01       	movw	r30, r24
     e4e:	e1 58       	subi	r30, 0x81	; 129
     e50:	fe 4f       	sbci	r31, 0xFE	; 254
     e52:	a0 81       	ld	r26, Z
     e54:	b1 81       	ldd	r27, Z+1	; 0x01
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	88 2f       	mov	r24, r24
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	fc 01       	movw	r30, r24
     e62:	e1 58       	subi	r30, 0x81	; 129
     e64:	fe 4f       	sbci	r31, 0xFE	; 254
     e66:	01 90       	ld	r0, Z+
     e68:	f0 81       	ld	r31, Z
     e6a:	e0 2d       	mov	r30, r0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_void_set_pin_dir+0x58>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_void_set_pin_dir+0x54>
     e86:	84 2b       	or	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	25 c0       	rjmp	.+74     	; 0xed6 <DIO_void_set_pin_dir+0xac>
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	fc 01       	movw	r30, r24
     e98:	e1 58       	subi	r30, 0x81	; 129
     e9a:	fe 4f       	sbci	r31, 0xFE	; 254
     e9c:	a0 81       	ld	r26, Z
     e9e:	b1 81       	ldd	r27, Z+1	; 0x01
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	fc 01       	movw	r30, r24
     eac:	e1 58       	subi	r30, 0x81	; 129
     eae:	fe 4f       	sbci	r31, 0xFE	; 254
     eb0:	01 90       	ld	r0, Z+
     eb2:	f0 81       	ld	r31, Z
     eb4:	e0 2d       	mov	r30, r0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <DIO_void_set_pin_dir+0xa2>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <DIO_void_set_pin_dir+0x9e>
     ed0:	80 95       	com	r24
     ed2:	84 23       	and	r24, r20
     ed4:	8c 93       	st	X, r24

}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <DIO_void_port_pullup>:

void DIO_void_port_pullup(u8 copy_u8_portID){
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	0f 92       	push	r0
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	89 83       	std	Y+1, r24	; 0x01
	 *  so that is what the function does
	 *  using the pullup for any button prevents the floating effect
	 *
	 *
	 */
	*(DIO_DDRx[copy_u8_portID]) = INPUT;
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	88 2f       	mov	r24, r24
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	fc 01       	movw	r30, r24
     efa:	e1 58       	subi	r30, 0x81	; 129
     efc:	fe 4f       	sbci	r31, 0xFE	; 254
     efe:	01 90       	ld	r0, Z+
     f00:	f0 81       	ld	r31, Z
     f02:	e0 2d       	mov	r30, r0
     f04:	10 82       	st	Z, r1
	*(DIO_PORTx[copy_u8_portID]) = PORT_MAX;
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	88 2f       	mov	r24, r24
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	fc 01       	movw	r30, r24
     f12:	e9 57       	subi	r30, 0x79	; 121
     f14:	fe 4f       	sbci	r31, 0xFE	; 254
     f16:	01 90       	ld	r0, Z+
     f18:	f0 81       	ld	r31, Z
     f1a:	e0 2d       	mov	r30, r0
     f1c:	8f ef       	ldi	r24, 0xFF	; 255
     f1e:	80 83       	st	Z, r24
}
     f20:	0f 90       	pop	r0
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <DIO_void_pin_pullup>:

void DIO_void_pin_pullup(u8 copy_u8_portID, u8 copy_u8_pinID){
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <DIO_void_pin_pullup+0x6>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	89 83       	std	Y+1, r24	; 0x01
     f34:	6a 83       	std	Y+2, r22	; 0x02
	/*  the function works as the one that set pullup for the whole port
	 *
	 *
	 */

	clear_Bit(*(DIO_DDRx[copy_u8_portID]),copy_u8_pinID);
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	fc 01       	movw	r30, r24
     f42:	e1 58       	subi	r30, 0x81	; 129
     f44:	fe 4f       	sbci	r31, 0xFE	; 254
     f46:	a0 81       	ld	r26, Z
     f48:	b1 81       	ldd	r27, Z+1	; 0x01
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	88 2f       	mov	r24, r24
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	fc 01       	movw	r30, r24
     f56:	e1 58       	subi	r30, 0x81	; 129
     f58:	fe 4f       	sbci	r31, 0xFE	; 254
     f5a:	01 90       	ld	r0, Z+
     f5c:	f0 81       	ld	r31, Z
     f5e:	e0 2d       	mov	r30, r0
     f60:	80 81       	ld	r24, Z
     f62:	48 2f       	mov	r20, r24
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <DIO_void_pin_pullup+0x4c>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	2a 95       	dec	r18
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <DIO_void_pin_pullup+0x48>
     f78:	80 95       	com	r24
     f7a:	84 23       	and	r24, r20
     f7c:	8c 93       	st	X, r24
	set_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	88 2f       	mov	r24, r24
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	fc 01       	movw	r30, r24
     f8a:	e9 57       	subi	r30, 0x79	; 121
     f8c:	fe 4f       	sbci	r31, 0xFE	; 254
     f8e:	a0 81       	ld	r26, Z
     f90:	b1 81       	ldd	r27, Z+1	; 0x01
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	fc 01       	movw	r30, r24
     f9e:	e9 57       	subi	r30, 0x79	; 121
     fa0:	fe 4f       	sbci	r31, 0xFE	; 254
     fa2:	01 90       	ld	r0, Z+
     fa4:	f0 81       	ld	r31, Z
     fa6:	e0 2d       	mov	r30, r0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_void_pin_pullup+0x96>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_void_pin_pullup+0x92>
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24

}
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <DIO_void_set_port>:

void DIO_void_set_port(u8 copy_u8_portID){
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	0f 92       	push	r0
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	89 83       	std	Y+1, r24	; 0x01
	 *
	 */



	*(DIO_PORTx[copy_u8_portID]) = PORT_MAX;
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	fc 01       	movw	r30, r24
     fe8:	e9 57       	subi	r30, 0x79	; 121
     fea:	fe 4f       	sbci	r31, 0xFE	; 254
     fec:	01 90       	ld	r0, Z+
     fee:	f0 81       	ld	r31, Z
     ff0:	e0 2d       	mov	r30, r0
     ff2:	8f ef       	ldi	r24, 0xFF	; 255
     ff4:	80 83       	st	Z, r24

}
     ff6:	0f 90       	pop	r0
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <DIO_void_clear_port>:

void DIO_void_clear_port(u8 copy_u8_portID){
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	0f 92       	push	r0
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	89 83       	std	Y+1, r24	; 0x01
	 *
	 *
	 */


	*(DIO_PORTx[copy_u8_portID]) = LOW;
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	88 2f       	mov	r24, r24
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	fc 01       	movw	r30, r24
    1016:	e9 57       	subi	r30, 0x79	; 121
    1018:	fe 4f       	sbci	r31, 0xFE	; 254
    101a:	01 90       	ld	r0, Z+
    101c:	f0 81       	ld	r31, Z
    101e:	e0 2d       	mov	r30, r0
    1020:	10 82       	st	Z, r1

}
    1022:	0f 90       	pop	r0
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <DIO_void_assign_port>:

void DIO_void_assign_port(u8 copy_u8_portID, u8 copy_value){
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	00 d0       	rcall	.+0      	; 0x1030 <DIO_void_assign_port+0x6>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 */



	*(DIO_PORTx[copy_u8_portID]) = copy_value;
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	fc 01       	movw	r30, r24
    1044:	e9 57       	subi	r30, 0x79	; 121
    1046:	fe 4f       	sbci	r31, 0xFE	; 254
    1048:	01 90       	ld	r0, Z+
    104a:	f0 81       	ld	r31, Z
    104c:	e0 2d       	mov	r30, r0
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	80 83       	st	Z, r24

}
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <DIO_void_toggle_port>:

void DIO_void_toggle_port(u8 copy_u8_portID){
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	0f 92       	push	r0
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	89 83       	std	Y+1, r24	; 0x01
	 *
	 *
	 */


	*(DIO_PORTx[copy_u8_portID]) ^= PORT_MAX;
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	88 2f       	mov	r24, r24
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	fc 01       	movw	r30, r24
    1074:	e9 57       	subi	r30, 0x79	; 121
    1076:	fe 4f       	sbci	r31, 0xFE	; 254
    1078:	a0 81       	ld	r26, Z
    107a:	b1 81       	ldd	r27, Z+1	; 0x01
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	88 2f       	mov	r24, r24
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	fc 01       	movw	r30, r24
    1088:	e9 57       	subi	r30, 0x79	; 121
    108a:	fe 4f       	sbci	r31, 0xFE	; 254
    108c:	01 90       	ld	r0, Z+
    108e:	f0 81       	ld	r31, Z
    1090:	e0 2d       	mov	r30, r0
    1092:	80 81       	ld	r24, Z
    1094:	80 95       	com	r24
    1096:	8c 93       	st	X, r24
}
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <DIO_void_set_pin>:

void DIO_void_set_pin(u8 copy_u8_portID , u8 copy_u8_pinID){
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <DIO_void_set_pin+0x6>
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	set_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	fc 01       	movw	r30, r24
    10ba:	e9 57       	subi	r30, 0x79	; 121
    10bc:	fe 4f       	sbci	r31, 0xFE	; 254
    10be:	a0 81       	ld	r26, Z
    10c0:	b1 81       	ldd	r27, Z+1	; 0x01
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	fc 01       	movw	r30, r24
    10ce:	e9 57       	subi	r30, 0x79	; 121
    10d0:	fe 4f       	sbci	r31, 0xFE	; 254
    10d2:	01 90       	ld	r0, Z+
    10d4:	f0 81       	ld	r31, Z
    10d6:	e0 2d       	mov	r30, r0
    10d8:	80 81       	ld	r24, Z
    10da:	48 2f       	mov	r20, r24
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 2e       	mov	r0, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <DIO_void_set_pin+0x4e>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	0a 94       	dec	r0
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <DIO_void_set_pin+0x4a>
    10f2:	84 2b       	or	r24, r20
    10f4:	8c 93       	st	X, r24
}
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <DIO_void_clear_pin>:

void DIO_void_clear_pin(u8 copy_u8_portID , u8 copy_u8_pinID){
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	00 d0       	rcall	.+0      	; 0x1106 <DIO_void_clear_pin+0x6>
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	89 83       	std	Y+1, r24	; 0x01
    110c:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	clear_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	88 2f       	mov	r24, r24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	fc 01       	movw	r30, r24
    111a:	e9 57       	subi	r30, 0x79	; 121
    111c:	fe 4f       	sbci	r31, 0xFE	; 254
    111e:	a0 81       	ld	r26, Z
    1120:	b1 81       	ldd	r27, Z+1	; 0x01
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	fc 01       	movw	r30, r24
    112e:	e9 57       	subi	r30, 0x79	; 121
    1130:	fe 4f       	sbci	r31, 0xFE	; 254
    1132:	01 90       	ld	r0, Z+
    1134:	f0 81       	ld	r31, Z
    1136:	e0 2d       	mov	r30, r0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <DIO_void_clear_pin+0x4e>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <DIO_void_clear_pin+0x4a>
    1152:	80 95       	com	r24
    1154:	84 23       	and	r24, r20
    1156:	8c 93       	st	X, r24
}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <DIO_void_assign_pin>:

void DIO_void_assign_pin(u8 copy_u8_portID,u8 copy_u8_pinID ,u8 copy_value){
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	00 d0       	rcall	.+0      	; 0x1168 <DIO_void_assign_pin+0x6>
    1168:	0f 92       	push	r0
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	6a 83       	std	Y+2, r22	; 0x02
    1172:	4b 83       	std	Y+3, r20	; 0x03
	 *
	 */



	assign_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID,copy_value);
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	29 f5       	brne	.+74     	; 0x11c4 <DIO_void_assign_pin+0x62>
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	fc 01       	movw	r30, r24
    1186:	e9 57       	subi	r30, 0x79	; 121
    1188:	fe 4f       	sbci	r31, 0xFE	; 254
    118a:	a0 81       	ld	r26, Z
    118c:	b1 81       	ldd	r27, Z+1	; 0x01
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	88 2f       	mov	r24, r24
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	fc 01       	movw	r30, r24
    119a:	e9 57       	subi	r30, 0x79	; 121
    119c:	fe 4f       	sbci	r31, 0xFE	; 254
    119e:	01 90       	ld	r0, Z+
    11a0:	f0 81       	ld	r31, Z
    11a2:	e0 2d       	mov	r30, r0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_void_assign_pin+0x58>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <DIO_void_assign_pin+0x54>
    11be:	84 2b       	or	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	25 c0       	rjmp	.+74     	; 0x120e <DIO_void_assign_pin+0xac>
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	fc 01       	movw	r30, r24
    11d0:	e9 57       	subi	r30, 0x79	; 121
    11d2:	fe 4f       	sbci	r31, 0xFE	; 254
    11d4:	a0 81       	ld	r26, Z
    11d6:	b1 81       	ldd	r27, Z+1	; 0x01
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	88 2f       	mov	r24, r24
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	fc 01       	movw	r30, r24
    11e4:	e9 57       	subi	r30, 0x79	; 121
    11e6:	fe 4f       	sbci	r31, 0xFE	; 254
    11e8:	01 90       	ld	r0, Z+
    11ea:	f0 81       	ld	r31, Z
    11ec:	e0 2d       	mov	r30, r0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <DIO_void_assign_pin+0xa2>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <DIO_void_assign_pin+0x9e>
    1208:	80 95       	com	r24
    120a:	84 23       	and	r24, r20
    120c:	8c 93       	st	X, r24
}
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <DIO_void_toggle_pin>:

void DIO_void_toggle_pin(u8 copy_u8_portID , u8 copy_u8_pinID){
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	00 d0       	rcall	.+0      	; 0x1220 <DIO_void_toggle_pin+0x6>
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	toggle_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	88 2f       	mov	r24, r24
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	fc 01       	movw	r30, r24
    1234:	e9 57       	subi	r30, 0x79	; 121
    1236:	fe 4f       	sbci	r31, 0xFE	; 254
    1238:	a0 81       	ld	r26, Z
    123a:	b1 81       	ldd	r27, Z+1	; 0x01
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	fc 01       	movw	r30, r24
    1248:	e9 57       	subi	r30, 0x79	; 121
    124a:	fe 4f       	sbci	r31, 0xFE	; 254
    124c:	01 90       	ld	r0, Z+
    124e:	f0 81       	ld	r31, Z
    1250:	e0 2d       	mov	r30, r0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_void_toggle_pin+0x4e>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_void_toggle_pin+0x4a>
    126c:	84 27       	eor	r24, r20
    126e:	8c 93       	st	X, r24

}
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <DIO_u8_get_port>:

u8 DIO_u8_get_port(u8 copy_u8_portID){
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	0f 92       	push	r0
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	89 83       	std	Y+1, r24	; 0x01
	 *  1 byte data
	 */



	return *(DIO_PINx[copy_u8_portID]);
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	fc 01       	movw	r30, r24
    1292:	e9 58       	subi	r30, 0x89	; 137
    1294:	fe 4f       	sbci	r31, 0xFE	; 254
    1296:	01 90       	ld	r0, Z+
    1298:	f0 81       	ld	r31, Z
    129a:	e0 2d       	mov	r30, r0
    129c:	80 81       	ld	r24, Z
}
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <DIO_u8_get_pin>:

u8 DIO_u8_get_pin(u8 copy_u8_portID, u8 copy_u8_pinID){
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <DIO_u8_get_pin+0x6>
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	return get_Bit(*(DIO_PINx[copy_u8_portID]),copy_u8_pinID);
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	fc 01       	movw	r30, r24
    12c0:	e9 58       	subi	r30, 0x89	; 137
    12c2:	fe 4f       	sbci	r31, 0xFE	; 254
    12c4:	01 90       	ld	r0, Z+
    12c6:	f0 81       	ld	r31, Z
    12c8:	e0 2d       	mov	r30, r0
    12ca:	80 81       	ld	r24, Z
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	88 2f       	mov	r24, r24
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	a9 01       	movw	r20, r18
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <DIO_u8_get_pin+0x38>
    12da:	55 95       	asr	r21
    12dc:	47 95       	ror	r20
    12de:	8a 95       	dec	r24
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <DIO_u8_get_pin+0x34>
    12e2:	ca 01       	movw	r24, r20
    12e4:	81 70       	andi	r24, 0x01	; 1
}
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <array_Swap>:
#include "../../../Drivers/HAL/LCD/LCD_Config.h"
#include "LCD_Interface.h"
#include "../../../Drivers/HAL/LCD/LCD_Private.h"


static void array_Swap(u8* copy_pu8_arr, u8 copy_length){
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <array_Swap+0x6>
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <array_Swap+0x8>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <array_Swap+0xa>
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	9d 83       	std	Y+5, r25	; 0x05
    1300:	8c 83       	std	Y+4, r24	; 0x04
    1302:	6e 83       	std	Y+6, r22	; 0x06
	 *
	 *
	 */


	u8 start = 0;
    1304:	1b 82       	std	Y+3, r1	; 0x03
	u8 end = copy_length - 1;
    1306:	8e 81       	ldd	r24, Y+6	; 0x06
    1308:	81 50       	subi	r24, 0x01	; 1
    130a:	8a 83       	std	Y+2, r24	; 0x02
    130c:	2c c0       	rjmp	.+88     	; 0x1366 <array_Swap+0x76>

	while(start < end){

		u8 temp = copy_pu8_arr[start];
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	8c 81       	ldd	r24, Y+4	; 0x04
    1316:	9d 81       	ldd	r25, Y+5	; 0x05
    1318:	fc 01       	movw	r30, r24
    131a:	e2 0f       	add	r30, r18
    131c:	f3 1f       	adc	r31, r19
    131e:	80 81       	ld	r24, Z
    1320:	89 83       	std	Y+1, r24	; 0x01
		copy_pu8_arr[start] = copy_pu8_arr[end];
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	9d 81       	ldd	r25, Y+5	; 0x05
    132c:	dc 01       	movw	r26, r24
    132e:	a2 0f       	add	r26, r18
    1330:	b3 1f       	adc	r27, r19
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	8c 81       	ldd	r24, Y+4	; 0x04
    133a:	9d 81       	ldd	r25, Y+5	; 0x05
    133c:	fc 01       	movw	r30, r24
    133e:	e2 0f       	add	r30, r18
    1340:	f3 1f       	adc	r31, r19
    1342:	80 81       	ld	r24, Z
    1344:	8c 93       	st	X, r24
		copy_pu8_arr[end] = temp;
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	8c 81       	ldd	r24, Y+4	; 0x04
    134e:	9d 81       	ldd	r25, Y+5	; 0x05
    1350:	fc 01       	movw	r30, r24
    1352:	e2 0f       	add	r30, r18
    1354:	f3 1f       	adc	r31, r19
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	80 83       	st	Z, r24

		start++;
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	8f 5f       	subi	r24, 0xFF	; 255
    135e:	8b 83       	std	Y+3, r24	; 0x03
		end--;
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	81 50       	subi	r24, 0x01	; 1
    1364:	8a 83       	std	Y+2, r24	; 0x02


	u8 start = 0;
	u8 end = copy_length - 1;

	while(start < end){
    1366:	9b 81       	ldd	r25, Y+3	; 0x03
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	98 17       	cp	r25, r24
    136c:	80 f2       	brcs	.-96     	; 0x130e <array_Swap+0x1e>
	}




}
    136e:	26 96       	adiw	r28, 0x06	; 6
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <power_10>:

s32 power_10(u8 power){
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	00 d0       	rcall	.+0      	; 0x1386 <power_10+0x6>
    1386:	00 d0       	rcall	.+0      	; 0x1388 <power_10+0x8>
    1388:	0f 92       	push	r0
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	8d 83       	std	Y+5, r24	; 0x05
	 *
	 * do you not use this function outside this driver
	 *
	 */

	s32 result = 1;
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	a0 e0       	ldi	r26, 0x00	; 0
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	89 83       	std	Y+1, r24	; 0x01
    139a:	9a 83       	std	Y+2, r25	; 0x02
    139c:	ab 83       	std	Y+3, r26	; 0x03
    139e:	bc 83       	std	Y+4, r27	; 0x04
    13a0:	15 c0       	rjmp	.+42     	; 0x13cc <power_10+0x4c>

	while(power > 0){

		result *= 10;
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	9a 81       	ldd	r25, Y+2	; 0x02
    13a6:	ab 81       	ldd	r26, Y+3	; 0x03
    13a8:	bc 81       	ldd	r27, Y+4	; 0x04
    13aa:	2a e0       	ldi	r18, 0x0A	; 10
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	40 e0       	ldi	r20, 0x00	; 0
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	bc 01       	movw	r22, r24
    13b4:	cd 01       	movw	r24, r26
    13b6:	0e 94 fe 3d 	call	0x7bfc	; 0x7bfc <__mulsi3>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	9a 83       	std	Y+2, r25	; 0x02
    13c2:	ab 83       	std	Y+3, r26	; 0x03
    13c4:	bc 83       	std	Y+4, r27	; 0x04
		power--;
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	81 50       	subi	r24, 0x01	; 1
    13ca:	8d 83       	std	Y+5, r24	; 0x05
	 *
	 */

	s32 result = 1;

	while(power > 0){
    13cc:	8d 81       	ldd	r24, Y+5	; 0x05
    13ce:	88 23       	and	r24, r24
    13d0:	41 f7       	brne	.-48     	; 0x13a2 <power_10+0x22>

		result *= 10;
		power--;
	}

	return result;
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	9a 81       	ldd	r25, Y+2	; 0x02
    13d6:	ab 81       	ldd	r26, Y+3	; 0x03
    13d8:	bc 81       	ldd	r27, Y+4	; 0x04
}
    13da:	bc 01       	movw	r22, r24
    13dc:	cd 01       	movw	r24, r26
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <LCD_write_data_8bit>:

/* 8bit mode functions */


static void LCD_write_data_8bit(u8 copy_data_8bit){
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	e1 97       	sbiw	r28, 0x31	; 49
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	de bf       	out	0x3e, r29	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	cd bf       	out	0x3d, r28	; 61
    1402:	89 ab       	std	Y+49, r24	; 0x31
	 *  function will only be used inside this source file
	 *  do you not use it in your code!
	 *
	 */

	DIO_void_set_pin(lcd_control_port, lcd_RS); // set RS pin high select data register
    1404:	83 e0       	ldi	r24, 0x03	; 3
    1406:	62 e0       	ldi	r22, 0x02	; 2
    1408:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_control_port, lcd_RW); // clear RW pin  0 for writing operation
    140c:	83 e0       	ldi	r24, 0x03	; 3
    140e:	61 e0       	ldi	r22, 0x01	; 1
    1410:	0e 94 80 08 	call	0x1100	; 0x1100 <DIO_void_clear_pin>
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	a8 e4       	ldi	r26, 0x48	; 72
    141a:	b2 e4       	ldi	r27, 0x42	; 66
    141c:	8d a7       	std	Y+45, r24	; 0x2d
    141e:	9e a7       	std	Y+46, r25	; 0x2e
    1420:	af a7       	std	Y+47, r26	; 0x2f
    1422:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1424:	6d a5       	ldd	r22, Y+45	; 0x2d
    1426:	7e a5       	ldd	r23, Y+46	; 0x2e
    1428:	8f a5       	ldd	r24, Y+47	; 0x2f
    142a:	98 a9       	ldd	r25, Y+48	; 0x30
    142c:	2b ea       	ldi	r18, 0xAB	; 171
    142e:	3a ea       	ldi	r19, 0xAA	; 170
    1430:	4a e2       	ldi	r20, 0x2A	; 42
    1432:	50 e4       	ldi	r21, 0x40	; 64
    1434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	89 a7       	std	Y+41, r24	; 0x29
    143e:	9a a7       	std	Y+42, r25	; 0x2a
    1440:	ab a7       	std	Y+43, r26	; 0x2b
    1442:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1444:	69 a5       	ldd	r22, Y+41	; 0x29
    1446:	7a a5       	ldd	r23, Y+42	; 0x2a
    1448:	8b a5       	ldd	r24, Y+43	; 0x2b
    144a:	9c a5       	ldd	r25, Y+44	; 0x2c
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e8       	ldi	r20, 0x80	; 128
    1452:	5f e3       	ldi	r21, 0x3F	; 63
    1454:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1458:	88 23       	and	r24, r24
    145a:	1c f4       	brge	.+6      	; 0x1462 <LCD_write_data_8bit+0x74>
		__ticks = 1;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	88 a7       	std	Y+40, r24	; 0x28
    1460:	91 c0       	rjmp	.+290    	; 0x1584 <LCD_write_data_8bit+0x196>
	else if (__tmp > 255)
    1462:	69 a5       	ldd	r22, Y+41	; 0x29
    1464:	7a a5       	ldd	r23, Y+42	; 0x2a
    1466:	8b a5       	ldd	r24, Y+43	; 0x2b
    1468:	9c a5       	ldd	r25, Y+44	; 0x2c
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	4f e7       	ldi	r20, 0x7F	; 127
    1470:	53 e4       	ldi	r21, 0x43	; 67
    1472:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1476:	18 16       	cp	r1, r24
    1478:	0c f0       	brlt	.+2      	; 0x147c <LCD_write_data_8bit+0x8e>
    147a:	7b c0       	rjmp	.+246    	; 0x1572 <LCD_write_data_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    147c:	6d a5       	ldd	r22, Y+45	; 0x2d
    147e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1480:	8f a5       	ldd	r24, Y+47	; 0x2f
    1482:	98 a9       	ldd	r25, Y+48	; 0x30
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	4a e7       	ldi	r20, 0x7A	; 122
    148a:	54 e4       	ldi	r21, 0x44	; 68
    148c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	8c a3       	std	Y+36, r24	; 0x24
    1496:	9d a3       	std	Y+37, r25	; 0x25
    1498:	ae a3       	std	Y+38, r26	; 0x26
    149a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    149c:	6c a1       	ldd	r22, Y+36	; 0x24
    149e:	7d a1       	ldd	r23, Y+37	; 0x25
    14a0:	8e a1       	ldd	r24, Y+38	; 0x26
    14a2:	9f a1       	ldd	r25, Y+39	; 0x27
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	4a ef       	ldi	r20, 0xFA	; 250
    14aa:	54 e4       	ldi	r21, 0x44	; 68
    14ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	88 a3       	std	Y+32, r24	; 0x20
    14b6:	99 a3       	std	Y+33, r25	; 0x21
    14b8:	aa a3       	std	Y+34, r26	; 0x22
    14ba:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    14bc:	68 a1       	ldd	r22, Y+32	; 0x20
    14be:	79 a1       	ldd	r23, Y+33	; 0x21
    14c0:	8a a1       	ldd	r24, Y+34	; 0x22
    14c2:	9b a1       	ldd	r25, Y+35	; 0x23
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	40 e8       	ldi	r20, 0x80	; 128
    14ca:	5f e3       	ldi	r21, 0x3F	; 63
    14cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14d0:	88 23       	and	r24, r24
    14d2:	2c f4       	brge	.+10     	; 0x14de <LCD_write_data_8bit+0xf0>
		__ticks = 1;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	9f 8f       	std	Y+31, r25	; 0x1f
    14da:	8e 8f       	std	Y+30, r24	; 0x1e
    14dc:	3f c0       	rjmp	.+126    	; 0x155c <LCD_write_data_8bit+0x16e>
	else if (__tmp > 65535)
    14de:	68 a1       	ldd	r22, Y+32	; 0x20
    14e0:	79 a1       	ldd	r23, Y+33	; 0x21
    14e2:	8a a1       	ldd	r24, Y+34	; 0x22
    14e4:	9b a1       	ldd	r25, Y+35	; 0x23
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	3f ef       	ldi	r19, 0xFF	; 255
    14ea:	4f e7       	ldi	r20, 0x7F	; 127
    14ec:	57 e4       	ldi	r21, 0x47	; 71
    14ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14f2:	18 16       	cp	r1, r24
    14f4:	4c f5       	brge	.+82     	; 0x1548 <LCD_write_data_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f6:	6c a1       	ldd	r22, Y+36	; 0x24
    14f8:	7d a1       	ldd	r23, Y+37	; 0x25
    14fa:	8e a1       	ldd	r24, Y+38	; 0x26
    14fc:	9f a1       	ldd	r25, Y+39	; 0x27
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	40 e2       	ldi	r20, 0x20	; 32
    1504:	51 e4       	ldi	r21, 0x41	; 65
    1506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	bc 01       	movw	r22, r24
    1510:	cd 01       	movw	r24, r26
    1512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	9f 8f       	std	Y+31, r25	; 0x1f
    151c:	8e 8f       	std	Y+30, r24	; 0x1e
    151e:	0f c0       	rjmp	.+30     	; 0x153e <LCD_write_data_8bit+0x150>
    1520:	88 ec       	ldi	r24, 0xC8	; 200
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	9d 8f       	std	Y+29, r25	; 0x1d
    1526:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1528:	8c 8d       	ldd	r24, Y+28	; 0x1c
    152a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	f1 f7       	brne	.-4      	; 0x152c <LCD_write_data_8bit+0x13e>
    1530:	9d 8f       	std	Y+29, r25	; 0x1d
    1532:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1534:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1536:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	9f 8f       	std	Y+31, r25	; 0x1f
    153c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    153e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1540:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	69 f7       	brne	.-38     	; 0x1520 <LCD_write_data_8bit+0x132>
    1546:	24 c0       	rjmp	.+72     	; 0x1590 <LCD_write_data_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1548:	68 a1       	ldd	r22, Y+32	; 0x20
    154a:	79 a1       	ldd	r23, Y+33	; 0x21
    154c:	8a a1       	ldd	r24, Y+34	; 0x22
    154e:	9b a1       	ldd	r25, Y+35	; 0x23
    1550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	9f 8f       	std	Y+31, r25	; 0x1f
    155a:	8e 8f       	std	Y+30, r24	; 0x1e
    155c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    155e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1560:	9b 8f       	std	Y+27, r25	; 0x1b
    1562:	8a 8f       	std	Y+26, r24	; 0x1a
    1564:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1566:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	f1 f7       	brne	.-4      	; 0x1568 <LCD_write_data_8bit+0x17a>
    156c:	9b 8f       	std	Y+27, r25	; 0x1b
    156e:	8a 8f       	std	Y+26, r24	; 0x1a
    1570:	0f c0       	rjmp	.+30     	; 0x1590 <LCD_write_data_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1572:	69 a5       	ldd	r22, Y+41	; 0x29
    1574:	7a a5       	ldd	r23, Y+42	; 0x2a
    1576:	8b a5       	ldd	r24, Y+43	; 0x2b
    1578:	9c a5       	ldd	r25, Y+44	; 0x2c
    157a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	88 a7       	std	Y+40, r24	; 0x28
    1584:	88 a5       	ldd	r24, Y+40	; 0x28
    1586:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1588:	89 8d       	ldd	r24, Y+25	; 0x19
    158a:	8a 95       	dec	r24
    158c:	f1 f7       	brne	.-4      	; 0x158a <LCD_write_data_8bit+0x19c>
    158e:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(50);
	//enable pin high
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    1590:	83 e0       	ldi	r24, 0x03	; 3
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_void_set_pin>
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	a8 e4       	ldi	r26, 0x48	; 72
    159e:	b2 e4       	ldi	r27, 0x42	; 66
    15a0:	8d 8b       	std	Y+21, r24	; 0x15
    15a2:	9e 8b       	std	Y+22, r25	; 0x16
    15a4:	af 8b       	std	Y+23, r26	; 0x17
    15a6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15a8:	6d 89       	ldd	r22, Y+21	; 0x15
    15aa:	7e 89       	ldd	r23, Y+22	; 0x16
    15ac:	8f 89       	ldd	r24, Y+23	; 0x17
    15ae:	98 8d       	ldd	r25, Y+24	; 0x18
    15b0:	2b ea       	ldi	r18, 0xAB	; 171
    15b2:	3a ea       	ldi	r19, 0xAA	; 170
    15b4:	4a e2       	ldi	r20, 0x2A	; 42
    15b6:	50 e4       	ldi	r21, 0x40	; 64
    15b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	89 8b       	std	Y+17, r24	; 0x11
    15c2:	9a 8b       	std	Y+18, r25	; 0x12
    15c4:	ab 8b       	std	Y+19, r26	; 0x13
    15c6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    15c8:	69 89       	ldd	r22, Y+17	; 0x11
    15ca:	7a 89       	ldd	r23, Y+18	; 0x12
    15cc:	8b 89       	ldd	r24, Y+19	; 0x13
    15ce:	9c 89       	ldd	r25, Y+20	; 0x14
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e8       	ldi	r20, 0x80	; 128
    15d6:	5f e3       	ldi	r21, 0x3F	; 63
    15d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15dc:	88 23       	and	r24, r24
    15de:	1c f4       	brge	.+6      	; 0x15e6 <LCD_write_data_8bit+0x1f8>
		__ticks = 1;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	88 8b       	std	Y+16, r24	; 0x10
    15e4:	91 c0       	rjmp	.+290    	; 0x1708 <LCD_write_data_8bit+0x31a>
	else if (__tmp > 255)
    15e6:	69 89       	ldd	r22, Y+17	; 0x11
    15e8:	7a 89       	ldd	r23, Y+18	; 0x12
    15ea:	8b 89       	ldd	r24, Y+19	; 0x13
    15ec:	9c 89       	ldd	r25, Y+20	; 0x14
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	4f e7       	ldi	r20, 0x7F	; 127
    15f4:	53 e4       	ldi	r21, 0x43	; 67
    15f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15fa:	18 16       	cp	r1, r24
    15fc:	0c f0       	brlt	.+2      	; 0x1600 <LCD_write_data_8bit+0x212>
    15fe:	7b c0       	rjmp	.+246    	; 0x16f6 <LCD_write_data_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    1600:	6d 89       	ldd	r22, Y+21	; 0x15
    1602:	7e 89       	ldd	r23, Y+22	; 0x16
    1604:	8f 89       	ldd	r24, Y+23	; 0x17
    1606:	98 8d       	ldd	r25, Y+24	; 0x18
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	4a e7       	ldi	r20, 0x7A	; 122
    160e:	54 e4       	ldi	r21, 0x44	; 68
    1610:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	8c 87       	std	Y+12, r24	; 0x0c
    161a:	9d 87       	std	Y+13, r25	; 0x0d
    161c:	ae 87       	std	Y+14, r26	; 0x0e
    161e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1620:	6c 85       	ldd	r22, Y+12	; 0x0c
    1622:	7d 85       	ldd	r23, Y+13	; 0x0d
    1624:	8e 85       	ldd	r24, Y+14	; 0x0e
    1626:	9f 85       	ldd	r25, Y+15	; 0x0f
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	4a ef       	ldi	r20, 0xFA	; 250
    162e:	54 e4       	ldi	r21, 0x44	; 68
    1630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	88 87       	std	Y+8, r24	; 0x08
    163a:	99 87       	std	Y+9, r25	; 0x09
    163c:	aa 87       	std	Y+10, r26	; 0x0a
    163e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1640:	68 85       	ldd	r22, Y+8	; 0x08
    1642:	79 85       	ldd	r23, Y+9	; 0x09
    1644:	8a 85       	ldd	r24, Y+10	; 0x0a
    1646:	9b 85       	ldd	r25, Y+11	; 0x0b
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e8       	ldi	r20, 0x80	; 128
    164e:	5f e3       	ldi	r21, 0x3F	; 63
    1650:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1654:	88 23       	and	r24, r24
    1656:	2c f4       	brge	.+10     	; 0x1662 <LCD_write_data_8bit+0x274>
		__ticks = 1;
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	9f 83       	std	Y+7, r25	; 0x07
    165e:	8e 83       	std	Y+6, r24	; 0x06
    1660:	3f c0       	rjmp	.+126    	; 0x16e0 <LCD_write_data_8bit+0x2f2>
	else if (__tmp > 65535)
    1662:	68 85       	ldd	r22, Y+8	; 0x08
    1664:	79 85       	ldd	r23, Y+9	; 0x09
    1666:	8a 85       	ldd	r24, Y+10	; 0x0a
    1668:	9b 85       	ldd	r25, Y+11	; 0x0b
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	3f ef       	ldi	r19, 0xFF	; 255
    166e:	4f e7       	ldi	r20, 0x7F	; 127
    1670:	57 e4       	ldi	r21, 0x47	; 71
    1672:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1676:	18 16       	cp	r1, r24
    1678:	4c f5       	brge	.+82     	; 0x16cc <LCD_write_data_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167a:	6c 85       	ldd	r22, Y+12	; 0x0c
    167c:	7d 85       	ldd	r23, Y+13	; 0x0d
    167e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1680:	9f 85       	ldd	r25, Y+15	; 0x0f
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e2       	ldi	r20, 0x20	; 32
    1688:	51 e4       	ldi	r21, 0x41	; 65
    168a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	bc 01       	movw	r22, r24
    1694:	cd 01       	movw	r24, r26
    1696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	9f 83       	std	Y+7, r25	; 0x07
    16a0:	8e 83       	std	Y+6, r24	; 0x06
    16a2:	0f c0       	rjmp	.+30     	; 0x16c2 <LCD_write_data_8bit+0x2d4>
    16a4:	88 ec       	ldi	r24, 0xC8	; 200
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	9d 83       	std	Y+5, r25	; 0x05
    16aa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16ac:	8c 81       	ldd	r24, Y+4	; 0x04
    16ae:	9d 81       	ldd	r25, Y+5	; 0x05
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <LCD_write_data_8bit+0x2c2>
    16b4:	9d 83       	std	Y+5, r25	; 0x05
    16b6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ba:	9f 81       	ldd	r25, Y+7	; 0x07
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	9f 83       	std	Y+7, r25	; 0x07
    16c0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c2:	8e 81       	ldd	r24, Y+6	; 0x06
    16c4:	9f 81       	ldd	r25, Y+7	; 0x07
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	69 f7       	brne	.-38     	; 0x16a4 <LCD_write_data_8bit+0x2b6>
    16ca:	24 c0       	rjmp	.+72     	; 0x1714 <LCD_write_data_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16cc:	68 85       	ldd	r22, Y+8	; 0x08
    16ce:	79 85       	ldd	r23, Y+9	; 0x09
    16d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	9f 83       	std	Y+7, r25	; 0x07
    16de:	8e 83       	std	Y+6, r24	; 0x06
    16e0:	8e 81       	ldd	r24, Y+6	; 0x06
    16e2:	9f 81       	ldd	r25, Y+7	; 0x07
    16e4:	9b 83       	std	Y+3, r25	; 0x03
    16e6:	8a 83       	std	Y+2, r24	; 0x02
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	9b 81       	ldd	r25, Y+3	; 0x03
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <LCD_write_data_8bit+0x2fe>
    16f0:	9b 83       	std	Y+3, r25	; 0x03
    16f2:	8a 83       	std	Y+2, r24	; 0x02
    16f4:	0f c0       	rjmp	.+30     	; 0x1714 <LCD_write_data_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16f6:	69 89       	ldd	r22, Y+17	; 0x11
    16f8:	7a 89       	ldd	r23, Y+18	; 0x12
    16fa:	8b 89       	ldd	r24, Y+19	; 0x13
    16fc:	9c 89       	ldd	r25, Y+20	; 0x14
    16fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	88 8b       	std	Y+16, r24	; 0x10
    1708:	88 89       	ldd	r24, Y+16	; 0x10
    170a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	8a 95       	dec	r24
    1710:	f1 f7       	brne	.-4      	; 0x170e <LCD_write_data_8bit+0x320>
    1712:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	//send data to the entire port


	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    1714:	83 e0       	ldi	r24, 0x03	; 3
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	0e 94 80 08 	call	0x1100	; 0x1100 <DIO_void_clear_pin>


}
    171c:	e1 96       	adiw	r28, 0x31	; 49
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	de bf       	out	0x3e, r29	; 62
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	cd bf       	out	0x3d, r28	; 61
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <LCD_write_command_8bit>:

static void LCD_write_command_8bit(u8 copy_command_8bit){
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	e1 97       	sbiw	r28, 0x31	; 49
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	cd bf       	out	0x3d, r28	; 61
    1742:	89 ab       	std	Y+49, r24	; 0x31
		 *
		 *  function will only be used inside this source file
		 *  do you not use it in your code!
		 *
		 */
	DIO_void_clear_pin(lcd_control_port, lcd_RS); // clear the RS pin to select instruction register
    1744:	83 e0       	ldi	r24, 0x03	; 3
    1746:	62 e0       	ldi	r22, 0x02	; 2
    1748:	0e 94 80 08 	call	0x1100	; 0x1100 <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_control_port, lcd_RW); // clear RW pin  0 for writing operation
    174c:	83 e0       	ldi	r24, 0x03	; 3
    174e:	61 e0       	ldi	r22, 0x01	; 1
    1750:	0e 94 80 08 	call	0x1100	; 0x1100 <DIO_void_clear_pin>
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	a0 e8       	ldi	r26, 0x80	; 128
    175a:	bf e3       	ldi	r27, 0x3F	; 63
    175c:	8d a7       	std	Y+45, r24	; 0x2d
    175e:	9e a7       	std	Y+46, r25	; 0x2e
    1760:	af a7       	std	Y+47, r26	; 0x2f
    1762:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1764:	6d a5       	ldd	r22, Y+45	; 0x2d
    1766:	7e a5       	ldd	r23, Y+46	; 0x2e
    1768:	8f a5       	ldd	r24, Y+47	; 0x2f
    176a:	98 a9       	ldd	r25, Y+48	; 0x30
    176c:	2b ea       	ldi	r18, 0xAB	; 171
    176e:	3a ea       	ldi	r19, 0xAA	; 170
    1770:	4a e2       	ldi	r20, 0x2A	; 42
    1772:	50 e4       	ldi	r21, 0x40	; 64
    1774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	89 a7       	std	Y+41, r24	; 0x29
    177e:	9a a7       	std	Y+42, r25	; 0x2a
    1780:	ab a7       	std	Y+43, r26	; 0x2b
    1782:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1784:	69 a5       	ldd	r22, Y+41	; 0x29
    1786:	7a a5       	ldd	r23, Y+42	; 0x2a
    1788:	8b a5       	ldd	r24, Y+43	; 0x2b
    178a:	9c a5       	ldd	r25, Y+44	; 0x2c
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e8       	ldi	r20, 0x80	; 128
    1792:	5f e3       	ldi	r21, 0x3F	; 63
    1794:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1798:	88 23       	and	r24, r24
    179a:	1c f4       	brge	.+6      	; 0x17a2 <LCD_write_command_8bit+0x74>
		__ticks = 1;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	88 a7       	std	Y+40, r24	; 0x28
    17a0:	91 c0       	rjmp	.+290    	; 0x18c4 <LCD_write_command_8bit+0x196>
	else if (__tmp > 255)
    17a2:	69 a5       	ldd	r22, Y+41	; 0x29
    17a4:	7a a5       	ldd	r23, Y+42	; 0x2a
    17a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    17a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	4f e7       	ldi	r20, 0x7F	; 127
    17b0:	53 e4       	ldi	r21, 0x43	; 67
    17b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17b6:	18 16       	cp	r1, r24
    17b8:	0c f0       	brlt	.+2      	; 0x17bc <LCD_write_command_8bit+0x8e>
    17ba:	7b c0       	rjmp	.+246    	; 0x18b2 <LCD_write_command_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    17bc:	6d a5       	ldd	r22, Y+45	; 0x2d
    17be:	7e a5       	ldd	r23, Y+46	; 0x2e
    17c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c2:	98 a9       	ldd	r25, Y+48	; 0x30
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	4a e7       	ldi	r20, 0x7A	; 122
    17ca:	54 e4       	ldi	r21, 0x44	; 68
    17cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	8c a3       	std	Y+36, r24	; 0x24
    17d6:	9d a3       	std	Y+37, r25	; 0x25
    17d8:	ae a3       	std	Y+38, r26	; 0x26
    17da:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17dc:	6c a1       	ldd	r22, Y+36	; 0x24
    17de:	7d a1       	ldd	r23, Y+37	; 0x25
    17e0:	8e a1       	ldd	r24, Y+38	; 0x26
    17e2:	9f a1       	ldd	r25, Y+39	; 0x27
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	4a ef       	ldi	r20, 0xFA	; 250
    17ea:	54 e4       	ldi	r21, 0x44	; 68
    17ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	88 a3       	std	Y+32, r24	; 0x20
    17f6:	99 a3       	std	Y+33, r25	; 0x21
    17f8:	aa a3       	std	Y+34, r26	; 0x22
    17fa:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    17fc:	68 a1       	ldd	r22, Y+32	; 0x20
    17fe:	79 a1       	ldd	r23, Y+33	; 0x21
    1800:	8a a1       	ldd	r24, Y+34	; 0x22
    1802:	9b a1       	ldd	r25, Y+35	; 0x23
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e8       	ldi	r20, 0x80	; 128
    180a:	5f e3       	ldi	r21, 0x3F	; 63
    180c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1810:	88 23       	and	r24, r24
    1812:	2c f4       	brge	.+10     	; 0x181e <LCD_write_command_8bit+0xf0>
		__ticks = 1;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	9f 8f       	std	Y+31, r25	; 0x1f
    181a:	8e 8f       	std	Y+30, r24	; 0x1e
    181c:	3f c0       	rjmp	.+126    	; 0x189c <LCD_write_command_8bit+0x16e>
	else if (__tmp > 65535)
    181e:	68 a1       	ldd	r22, Y+32	; 0x20
    1820:	79 a1       	ldd	r23, Y+33	; 0x21
    1822:	8a a1       	ldd	r24, Y+34	; 0x22
    1824:	9b a1       	ldd	r25, Y+35	; 0x23
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	3f ef       	ldi	r19, 0xFF	; 255
    182a:	4f e7       	ldi	r20, 0x7F	; 127
    182c:	57 e4       	ldi	r21, 0x47	; 71
    182e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1832:	18 16       	cp	r1, r24
    1834:	4c f5       	brge	.+82     	; 0x1888 <LCD_write_command_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1836:	6c a1       	ldd	r22, Y+36	; 0x24
    1838:	7d a1       	ldd	r23, Y+37	; 0x25
    183a:	8e a1       	ldd	r24, Y+38	; 0x26
    183c:	9f a1       	ldd	r25, Y+39	; 0x27
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e2       	ldi	r20, 0x20	; 32
    1844:	51 e4       	ldi	r21, 0x41	; 65
    1846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	bc 01       	movw	r22, r24
    1850:	cd 01       	movw	r24, r26
    1852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	9f 8f       	std	Y+31, r25	; 0x1f
    185c:	8e 8f       	std	Y+30, r24	; 0x1e
    185e:	0f c0       	rjmp	.+30     	; 0x187e <LCD_write_command_8bit+0x150>
    1860:	88 ec       	ldi	r24, 0xC8	; 200
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	9d 8f       	std	Y+29, r25	; 0x1d
    1866:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1868:	8c 8d       	ldd	r24, Y+28	; 0x1c
    186a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	f1 f7       	brne	.-4      	; 0x186c <LCD_write_command_8bit+0x13e>
    1870:	9d 8f       	std	Y+29, r25	; 0x1d
    1872:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1874:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1876:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	9f 8f       	std	Y+31, r25	; 0x1f
    187c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1880:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	69 f7       	brne	.-38     	; 0x1860 <LCD_write_command_8bit+0x132>
    1886:	24 c0       	rjmp	.+72     	; 0x18d0 <LCD_write_command_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1888:	68 a1       	ldd	r22, Y+32	; 0x20
    188a:	79 a1       	ldd	r23, Y+33	; 0x21
    188c:	8a a1       	ldd	r24, Y+34	; 0x22
    188e:	9b a1       	ldd	r25, Y+35	; 0x23
    1890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	9f 8f       	std	Y+31, r25	; 0x1f
    189a:	8e 8f       	std	Y+30, r24	; 0x1e
    189c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    189e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18a0:	9b 8f       	std	Y+27, r25	; 0x1b
    18a2:	8a 8f       	std	Y+26, r24	; 0x1a
    18a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18a6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	f1 f7       	brne	.-4      	; 0x18a8 <LCD_write_command_8bit+0x17a>
    18ac:	9b 8f       	std	Y+27, r25	; 0x1b
    18ae:	8a 8f       	std	Y+26, r24	; 0x1a
    18b0:	0f c0       	rjmp	.+30     	; 0x18d0 <LCD_write_command_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18b2:	69 a5       	ldd	r22, Y+41	; 0x29
    18b4:	7a a5       	ldd	r23, Y+42	; 0x2a
    18b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    18b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    18ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	88 a7       	std	Y+40, r24	; 0x28
    18c4:	88 a5       	ldd	r24, Y+40	; 0x28
    18c6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18c8:	89 8d       	ldd	r24, Y+25	; 0x19
    18ca:	8a 95       	dec	r24
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <LCD_write_command_8bit+0x19c>
    18ce:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(1);
	//enable pin high
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    18d0:	83 e0       	ldi	r24, 0x03	; 3
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_void_set_pin>
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	a0 e8       	ldi	r26, 0x80	; 128
    18de:	bf e3       	ldi	r27, 0x3F	; 63
    18e0:	8d 8b       	std	Y+21, r24	; 0x15
    18e2:	9e 8b       	std	Y+22, r25	; 0x16
    18e4:	af 8b       	std	Y+23, r26	; 0x17
    18e6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18e8:	6d 89       	ldd	r22, Y+21	; 0x15
    18ea:	7e 89       	ldd	r23, Y+22	; 0x16
    18ec:	8f 89       	ldd	r24, Y+23	; 0x17
    18ee:	98 8d       	ldd	r25, Y+24	; 0x18
    18f0:	2b ea       	ldi	r18, 0xAB	; 171
    18f2:	3a ea       	ldi	r19, 0xAA	; 170
    18f4:	4a e2       	ldi	r20, 0x2A	; 42
    18f6:	50 e4       	ldi	r21, 0x40	; 64
    18f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	89 8b       	std	Y+17, r24	; 0x11
    1902:	9a 8b       	std	Y+18, r25	; 0x12
    1904:	ab 8b       	std	Y+19, r26	; 0x13
    1906:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1908:	69 89       	ldd	r22, Y+17	; 0x11
    190a:	7a 89       	ldd	r23, Y+18	; 0x12
    190c:	8b 89       	ldd	r24, Y+19	; 0x13
    190e:	9c 89       	ldd	r25, Y+20	; 0x14
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e8       	ldi	r20, 0x80	; 128
    1916:	5f e3       	ldi	r21, 0x3F	; 63
    1918:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    191c:	88 23       	and	r24, r24
    191e:	1c f4       	brge	.+6      	; 0x1926 <LCD_write_command_8bit+0x1f8>
		__ticks = 1;
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	88 8b       	std	Y+16, r24	; 0x10
    1924:	91 c0       	rjmp	.+290    	; 0x1a48 <LCD_write_command_8bit+0x31a>
	else if (__tmp > 255)
    1926:	69 89       	ldd	r22, Y+17	; 0x11
    1928:	7a 89       	ldd	r23, Y+18	; 0x12
    192a:	8b 89       	ldd	r24, Y+19	; 0x13
    192c:	9c 89       	ldd	r25, Y+20	; 0x14
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	4f e7       	ldi	r20, 0x7F	; 127
    1934:	53 e4       	ldi	r21, 0x43	; 67
    1936:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    193a:	18 16       	cp	r1, r24
    193c:	0c f0       	brlt	.+2      	; 0x1940 <LCD_write_command_8bit+0x212>
    193e:	7b c0       	rjmp	.+246    	; 0x1a36 <LCD_write_command_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    1940:	6d 89       	ldd	r22, Y+21	; 0x15
    1942:	7e 89       	ldd	r23, Y+22	; 0x16
    1944:	8f 89       	ldd	r24, Y+23	; 0x17
    1946:	98 8d       	ldd	r25, Y+24	; 0x18
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	4a e7       	ldi	r20, 0x7A	; 122
    194e:	54 e4       	ldi	r21, 0x44	; 68
    1950:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	8c 87       	std	Y+12, r24	; 0x0c
    195a:	9d 87       	std	Y+13, r25	; 0x0d
    195c:	ae 87       	std	Y+14, r26	; 0x0e
    195e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1960:	6c 85       	ldd	r22, Y+12	; 0x0c
    1962:	7d 85       	ldd	r23, Y+13	; 0x0d
    1964:	8e 85       	ldd	r24, Y+14	; 0x0e
    1966:	9f 85       	ldd	r25, Y+15	; 0x0f
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	4a ef       	ldi	r20, 0xFA	; 250
    196e:	54 e4       	ldi	r21, 0x44	; 68
    1970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	88 87       	std	Y+8, r24	; 0x08
    197a:	99 87       	std	Y+9, r25	; 0x09
    197c:	aa 87       	std	Y+10, r26	; 0x0a
    197e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1980:	68 85       	ldd	r22, Y+8	; 0x08
    1982:	79 85       	ldd	r23, Y+9	; 0x09
    1984:	8a 85       	ldd	r24, Y+10	; 0x0a
    1986:	9b 85       	ldd	r25, Y+11	; 0x0b
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e8       	ldi	r20, 0x80	; 128
    198e:	5f e3       	ldi	r21, 0x3F	; 63
    1990:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1994:	88 23       	and	r24, r24
    1996:	2c f4       	brge	.+10     	; 0x19a2 <LCD_write_command_8bit+0x274>
		__ticks = 1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9f 83       	std	Y+7, r25	; 0x07
    199e:	8e 83       	std	Y+6, r24	; 0x06
    19a0:	3f c0       	rjmp	.+126    	; 0x1a20 <LCD_write_command_8bit+0x2f2>
	else if (__tmp > 65535)
    19a2:	68 85       	ldd	r22, Y+8	; 0x08
    19a4:	79 85       	ldd	r23, Y+9	; 0x09
    19a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    19a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	3f ef       	ldi	r19, 0xFF	; 255
    19ae:	4f e7       	ldi	r20, 0x7F	; 127
    19b0:	57 e4       	ldi	r21, 0x47	; 71
    19b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19b6:	18 16       	cp	r1, r24
    19b8:	4c f5       	brge	.+82     	; 0x1a0c <LCD_write_command_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    19bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    19be:	8e 85       	ldd	r24, Y+14	; 0x0e
    19c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e2       	ldi	r20, 0x20	; 32
    19c8:	51 e4       	ldi	r21, 0x41	; 65
    19ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	bc 01       	movw	r22, r24
    19d4:	cd 01       	movw	r24, r26
    19d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	9f 83       	std	Y+7, r25	; 0x07
    19e0:	8e 83       	std	Y+6, r24	; 0x06
    19e2:	0f c0       	rjmp	.+30     	; 0x1a02 <LCD_write_command_8bit+0x2d4>
    19e4:	88 ec       	ldi	r24, 0xC8	; 200
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9d 83       	std	Y+5, r25	; 0x05
    19ea:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19ec:	8c 81       	ldd	r24, Y+4	; 0x04
    19ee:	9d 81       	ldd	r25, Y+5	; 0x05
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <LCD_write_command_8bit+0x2c2>
    19f4:	9d 83       	std	Y+5, r25	; 0x05
    19f6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f8:	8e 81       	ldd	r24, Y+6	; 0x06
    19fa:	9f 81       	ldd	r25, Y+7	; 0x07
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	9f 83       	std	Y+7, r25	; 0x07
    1a00:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a02:	8e 81       	ldd	r24, Y+6	; 0x06
    1a04:	9f 81       	ldd	r25, Y+7	; 0x07
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	69 f7       	brne	.-38     	; 0x19e4 <LCD_write_command_8bit+0x2b6>
    1a0a:	24 c0       	rjmp	.+72     	; 0x1a54 <LCD_write_command_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0c:	68 85       	ldd	r22, Y+8	; 0x08
    1a0e:	79 85       	ldd	r23, Y+9	; 0x09
    1a10:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a12:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	9f 83       	std	Y+7, r25	; 0x07
    1a1e:	8e 83       	std	Y+6, r24	; 0x06
    1a20:	8e 81       	ldd	r24, Y+6	; 0x06
    1a22:	9f 81       	ldd	r25, Y+7	; 0x07
    1a24:	9b 83       	std	Y+3, r25	; 0x03
    1a26:	8a 83       	std	Y+2, r24	; 0x02
    1a28:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <LCD_write_command_8bit+0x2fe>
    1a30:	9b 83       	std	Y+3, r25	; 0x03
    1a32:	8a 83       	std	Y+2, r24	; 0x02
    1a34:	0f c0       	rjmp	.+30     	; 0x1a54 <LCD_write_command_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a36:	69 89       	ldd	r22, Y+17	; 0x11
    1a38:	7a 89       	ldd	r23, Y+18	; 0x12
    1a3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	88 8b       	std	Y+16, r24	; 0x10
    1a48:	88 89       	ldd	r24, Y+16	; 0x10
    1a4a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	8a 95       	dec	r24
    1a50:	f1 f7       	brne	.-4      	; 0x1a4e <LCD_write_command_8bit+0x320>
    1a52:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	//send command to the entire port
	DIO_void_assign_port(lcd_data_port, copy_command_8bit);
    1a54:	82 e0       	ldi	r24, 0x02	; 2
    1a56:	69 a9       	ldd	r22, Y+49	; 0x31
    1a58:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_void_assign_port>
	//enable pin low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    1a5c:	83 e0       	ldi	r24, 0x03	; 3
    1a5e:	60 e0       	ldi	r22, 0x00	; 0
    1a60:	0e 94 80 08 	call	0x1100	; 0x1100 <DIO_void_clear_pin>

}
    1a64:	e1 96       	adiw	r28, 0x31	; 49
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <LCD_write_data_4bit>:


/* 4bit mode functions */

static void LCD_write_data_4bit(u8 copy_data_4bit){
    1a76:	0f 93       	push	r16
    1a78:	1f 93       	push	r17
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	c3 56       	subi	r28, 0x63	; 99
    1a84:	d0 40       	sbci	r29, 0x00	; 0
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	cd bf       	out	0x3d, r28	; 61
    1a90:	fe 01       	movw	r30, r28
    1a92:	ed 59       	subi	r30, 0x9D	; 157
    1a94:	ff 4f       	sbci	r31, 0xFF	; 255
    1a96:	80 83       	st	Z, r24
		 *  function will only be used inside this source file
		 *  do you not use it in your code!
		 *
		 */

	DIO_void_set_pin(lcd_control_port, lcd_RS); // set RS pin high select data register
    1a98:	83 e0       	ldi	r24, 0x03	; 3
    1a9a:	62 e0       	ldi	r22, 0x02	; 2
    1a9c:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_control_port, lcd_RW); // clear RW pin  0 for writing operation
    1aa0:	83 e0       	ldi	r24, 0x03	; 3
    1aa2:	61 e0       	ldi	r22, 0x01	; 1
    1aa4:	0e 94 80 08 	call	0x1100	; 0x1100 <DIO_void_clear_pin>
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	e3 5a       	subi	r30, 0xA3	; 163
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	a0 e8       	ldi	r26, 0x80	; 128
    1ab4:	bf e3       	ldi	r27, 0x3F	; 63
    1ab6:	80 83       	st	Z, r24
    1ab8:	91 83       	std	Z+1, r25	; 0x01
    1aba:	a2 83       	std	Z+2, r26	; 0x02
    1abc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1abe:	8e 01       	movw	r16, r28
    1ac0:	07 5a       	subi	r16, 0xA7	; 167
    1ac2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	e3 5a       	subi	r30, 0xA3	; 163
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	60 81       	ld	r22, Z
    1acc:	71 81       	ldd	r23, Z+1	; 0x01
    1ace:	82 81       	ldd	r24, Z+2	; 0x02
    1ad0:	93 81       	ldd	r25, Z+3	; 0x03
    1ad2:	2b ea       	ldi	r18, 0xAB	; 171
    1ad4:	3a ea       	ldi	r19, 0xAA	; 170
    1ad6:	4a e2       	ldi	r20, 0x2A	; 42
    1ad8:	50 e4       	ldi	r21, 0x40	; 64
    1ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	f8 01       	movw	r30, r16
    1ae4:	80 83       	st	Z, r24
    1ae6:	91 83       	std	Z+1, r25	; 0x01
    1ae8:	a2 83       	std	Z+2, r26	; 0x02
    1aea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aec:	fe 01       	movw	r30, r28
    1aee:	e7 5a       	subi	r30, 0xA7	; 167
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	60 81       	ld	r22, Z
    1af4:	71 81       	ldd	r23, Z+1	; 0x01
    1af6:	82 81       	ldd	r24, Z+2	; 0x02
    1af8:	93 81       	ldd	r25, Z+3	; 0x03
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e8       	ldi	r20, 0x80	; 128
    1b00:	5f e3       	ldi	r21, 0x3F	; 63
    1b02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b06:	88 23       	and	r24, r24
    1b08:	34 f4       	brge	.+12     	; 0x1b16 <LCD_write_data_4bit+0xa0>
		__ticks = 1;
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	e8 5a       	subi	r30, 0xA8	; 168
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	80 83       	st	Z, r24
    1b14:	e0 c0       	rjmp	.+448    	; 0x1cd6 <LCD_write_data_4bit+0x260>
	else if (__tmp > 255)
    1b16:	fe 01       	movw	r30, r28
    1b18:	e7 5a       	subi	r30, 0xA7	; 167
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	60 81       	ld	r22, Z
    1b1e:	71 81       	ldd	r23, Z+1	; 0x01
    1b20:	82 81       	ldd	r24, Z+2	; 0x02
    1b22:	93 81       	ldd	r25, Z+3	; 0x03
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	4f e7       	ldi	r20, 0x7F	; 127
    1b2a:	53 e4       	ldi	r21, 0x43	; 67
    1b2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b30:	18 16       	cp	r1, r24
    1b32:	0c f0       	brlt	.+2      	; 0x1b36 <LCD_write_data_4bit+0xc0>
    1b34:	c0 c0       	rjmp	.+384    	; 0x1cb6 <LCD_write_data_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    1b36:	fe 01       	movw	r30, r28
    1b38:	e3 5a       	subi	r30, 0xA3	; 163
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	60 81       	ld	r22, Z
    1b3e:	71 81       	ldd	r23, Z+1	; 0x01
    1b40:	82 81       	ldd	r24, Z+2	; 0x02
    1b42:	93 81       	ldd	r25, Z+3	; 0x03
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	4a e7       	ldi	r20, 0x7A	; 122
    1b4a:	54 e4       	ldi	r21, 0x44	; 68
    1b4c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	fe 01       	movw	r30, r28
    1b56:	ec 5a       	subi	r30, 0xAC	; 172
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	80 83       	st	Z, r24
    1b5c:	91 83       	std	Z+1, r25	; 0x01
    1b5e:	a2 83       	std	Z+2, r26	; 0x02
    1b60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b62:	8e 01       	movw	r16, r28
    1b64:	00 5b       	subi	r16, 0xB0	; 176
    1b66:	1f 4f       	sbci	r17, 0xFF	; 255
    1b68:	fe 01       	movw	r30, r28
    1b6a:	ec 5a       	subi	r30, 0xAC	; 172
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	60 81       	ld	r22, Z
    1b70:	71 81       	ldd	r23, Z+1	; 0x01
    1b72:	82 81       	ldd	r24, Z+2	; 0x02
    1b74:	93 81       	ldd	r25, Z+3	; 0x03
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	4a ef       	ldi	r20, 0xFA	; 250
    1b7c:	54 e4       	ldi	r21, 0x44	; 68
    1b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	f8 01       	movw	r30, r16
    1b88:	80 83       	st	Z, r24
    1b8a:	91 83       	std	Z+1, r25	; 0x01
    1b8c:	a2 83       	std	Z+2, r26	; 0x02
    1b8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b90:	fe 01       	movw	r30, r28
    1b92:	e0 5b       	subi	r30, 0xB0	; 176
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	60 81       	ld	r22, Z
    1b98:	71 81       	ldd	r23, Z+1	; 0x01
    1b9a:	82 81       	ldd	r24, Z+2	; 0x02
    1b9c:	93 81       	ldd	r25, Z+3	; 0x03
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e8       	ldi	r20, 0x80	; 128
    1ba4:	5f e3       	ldi	r21, 0x3F	; 63
    1ba6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1baa:	88 23       	and	r24, r24
    1bac:	44 f4       	brge	.+16     	; 0x1bbe <LCD_write_data_4bit+0x148>
		__ticks = 1;
    1bae:	fe 01       	movw	r30, r28
    1bb0:	e2 5b       	subi	r30, 0xB2	; 178
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	91 83       	std	Z+1, r25	; 0x01
    1bba:	80 83       	st	Z, r24
    1bbc:	64 c0       	rjmp	.+200    	; 0x1c86 <LCD_write_data_4bit+0x210>
	else if (__tmp > 65535)
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	e0 5b       	subi	r30, 0xB0	; 176
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	60 81       	ld	r22, Z
    1bc6:	71 81       	ldd	r23, Z+1	; 0x01
    1bc8:	82 81       	ldd	r24, Z+2	; 0x02
    1bca:	93 81       	ldd	r25, Z+3	; 0x03
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	3f ef       	ldi	r19, 0xFF	; 255
    1bd0:	4f e7       	ldi	r20, 0x7F	; 127
    1bd2:	57 e4       	ldi	r21, 0x47	; 71
    1bd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bd8:	18 16       	cp	r1, r24
    1bda:	0c f0       	brlt	.+2      	; 0x1bde <LCD_write_data_4bit+0x168>
    1bdc:	43 c0       	rjmp	.+134    	; 0x1c64 <LCD_write_data_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bde:	fe 01       	movw	r30, r28
    1be0:	ec 5a       	subi	r30, 0xAC	; 172
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	60 81       	ld	r22, Z
    1be6:	71 81       	ldd	r23, Z+1	; 0x01
    1be8:	82 81       	ldd	r24, Z+2	; 0x02
    1bea:	93 81       	ldd	r25, Z+3	; 0x03
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e2       	ldi	r20, 0x20	; 32
    1bf2:	51 e4       	ldi	r21, 0x41	; 65
    1bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	8e 01       	movw	r16, r28
    1bfe:	02 5b       	subi	r16, 0xB2	; 178
    1c00:	1f 4f       	sbci	r17, 0xFF	; 255
    1c02:	bc 01       	movw	r22, r24
    1c04:	cd 01       	movw	r24, r26
    1c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	f8 01       	movw	r30, r16
    1c10:	91 83       	std	Z+1, r25	; 0x01
    1c12:	80 83       	st	Z, r24
    1c14:	1f c0       	rjmp	.+62     	; 0x1c54 <LCD_write_data_4bit+0x1de>
    1c16:	fe 01       	movw	r30, r28
    1c18:	e4 5b       	subi	r30, 0xB4	; 180
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	88 ec       	ldi	r24, 0xC8	; 200
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	91 83       	std	Z+1, r25	; 0x01
    1c22:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c24:	fe 01       	movw	r30, r28
    1c26:	e4 5b       	subi	r30, 0xB4	; 180
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	80 81       	ld	r24, Z
    1c2c:	91 81       	ldd	r25, Z+1	; 0x01
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <LCD_write_data_4bit+0x1b8>
    1c32:	fe 01       	movw	r30, r28
    1c34:	e4 5b       	subi	r30, 0xB4	; 180
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	91 83       	std	Z+1, r25	; 0x01
    1c3a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3c:	de 01       	movw	r26, r28
    1c3e:	a2 5b       	subi	r26, 0xB2	; 178
    1c40:	bf 4f       	sbci	r27, 0xFF	; 255
    1c42:	fe 01       	movw	r30, r28
    1c44:	e2 5b       	subi	r30, 0xB2	; 178
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	80 81       	ld	r24, Z
    1c4a:	91 81       	ldd	r25, Z+1	; 0x01
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	11 96       	adiw	r26, 0x01	; 1
    1c50:	9c 93       	st	X, r25
    1c52:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c54:	fe 01       	movw	r30, r28
    1c56:	e2 5b       	subi	r30, 0xB2	; 178
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	80 81       	ld	r24, Z
    1c5c:	91 81       	ldd	r25, Z+1	; 0x01
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	d1 f6       	brne	.-76     	; 0x1c16 <LCD_write_data_4bit+0x1a0>
    1c62:	4b c0       	rjmp	.+150    	; 0x1cfa <LCD_write_data_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c64:	8e 01       	movw	r16, r28
    1c66:	02 5b       	subi	r16, 0xB2	; 178
    1c68:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	e0 5b       	subi	r30, 0xB0	; 176
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	60 81       	ld	r22, Z
    1c72:	71 81       	ldd	r23, Z+1	; 0x01
    1c74:	82 81       	ldd	r24, Z+2	; 0x02
    1c76:	93 81       	ldd	r25, Z+3	; 0x03
    1c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	f8 01       	movw	r30, r16
    1c82:	91 83       	std	Z+1, r25	; 0x01
    1c84:	80 83       	st	Z, r24
    1c86:	de 01       	movw	r26, r28
    1c88:	a6 5b       	subi	r26, 0xB6	; 182
    1c8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	e2 5b       	subi	r30, 0xB2	; 178
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	80 81       	ld	r24, Z
    1c94:	91 81       	ldd	r25, Z+1	; 0x01
    1c96:	11 96       	adiw	r26, 0x01	; 1
    1c98:	9c 93       	st	X, r25
    1c9a:	8e 93       	st	-X, r24
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e6 5b       	subi	r30, 0xB6	; 182
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	80 81       	ld	r24, Z
    1ca4:	91 81       	ldd	r25, Z+1	; 0x01
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	f1 f7       	brne	.-4      	; 0x1ca6 <LCD_write_data_4bit+0x230>
    1caa:	fe 01       	movw	r30, r28
    1cac:	e6 5b       	subi	r30, 0xB6	; 182
    1cae:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb0:	91 83       	std	Z+1, r25	; 0x01
    1cb2:	80 83       	st	Z, r24
    1cb4:	22 c0       	rjmp	.+68     	; 0x1cfa <LCD_write_data_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cb6:	8e 01       	movw	r16, r28
    1cb8:	08 5a       	subi	r16, 0xA8	; 168
    1cba:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	e7 5a       	subi	r30, 0xA7	; 167
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	60 81       	ld	r22, Z
    1cc4:	71 81       	ldd	r23, Z+1	; 0x01
    1cc6:	82 81       	ldd	r24, Z+2	; 0x02
    1cc8:	93 81       	ldd	r25, Z+3	; 0x03
    1cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	f8 01       	movw	r30, r16
    1cd4:	80 83       	st	Z, r24
    1cd6:	de 01       	movw	r26, r28
    1cd8:	a7 5b       	subi	r26, 0xB7	; 183
    1cda:	bf 4f       	sbci	r27, 0xFF	; 255
    1cdc:	fe 01       	movw	r30, r28
    1cde:	e8 5a       	subi	r30, 0xA8	; 168
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	80 81       	ld	r24, Z
    1ce4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	e7 5b       	subi	r30, 0xB7	; 183
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	80 81       	ld	r24, Z
    1cee:	8a 95       	dec	r24
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <LCD_write_data_4bit+0x278>
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	e7 5b       	subi	r30, 0xB7	; 183
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	80 83       	st	Z, r24

	_delay_us(1);
	//enable pin high
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    1cfa:	83 e0       	ldi	r24, 0x03	; 3
    1cfc:	60 e0       	ldi	r22, 0x00	; 0
    1cfe:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_void_set_pin>
    1d02:	fe 01       	movw	r30, r28
    1d04:	eb 5b       	subi	r30, 0xBB	; 187
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	a0 e8       	ldi	r26, 0x80	; 128
    1d0e:	bf e3       	ldi	r27, 0x3F	; 63
    1d10:	80 83       	st	Z, r24
    1d12:	91 83       	std	Z+1, r25	; 0x01
    1d14:	a2 83       	std	Z+2, r26	; 0x02
    1d16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d18:	8e 01       	movw	r16, r28
    1d1a:	0f 5b       	subi	r16, 0xBF	; 191
    1d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1e:	fe 01       	movw	r30, r28
    1d20:	eb 5b       	subi	r30, 0xBB	; 187
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	60 81       	ld	r22, Z
    1d26:	71 81       	ldd	r23, Z+1	; 0x01
    1d28:	82 81       	ldd	r24, Z+2	; 0x02
    1d2a:	93 81       	ldd	r25, Z+3	; 0x03
    1d2c:	2b ea       	ldi	r18, 0xAB	; 171
    1d2e:	3a ea       	ldi	r19, 0xAA	; 170
    1d30:	4a e2       	ldi	r20, 0x2A	; 42
    1d32:	50 e4       	ldi	r21, 0x40	; 64
    1d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	f8 01       	movw	r30, r16
    1d3e:	80 83       	st	Z, r24
    1d40:	91 83       	std	Z+1, r25	; 0x01
    1d42:	a2 83       	std	Z+2, r26	; 0x02
    1d44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d46:	fe 01       	movw	r30, r28
    1d48:	ef 5b       	subi	r30, 0xBF	; 191
    1d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4c:	60 81       	ld	r22, Z
    1d4e:	71 81       	ldd	r23, Z+1	; 0x01
    1d50:	82 81       	ldd	r24, Z+2	; 0x02
    1d52:	93 81       	ldd	r25, Z+3	; 0x03
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	40 e8       	ldi	r20, 0x80	; 128
    1d5a:	5f e3       	ldi	r21, 0x3F	; 63
    1d5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d60:	88 23       	and	r24, r24
    1d62:	34 f4       	brge	.+12     	; 0x1d70 <LCD_write_data_4bit+0x2fa>
		__ticks = 1;
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	fe 01       	movw	r30, r28
    1d68:	e0 5c       	subi	r30, 0xC0	; 192
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	80 83       	st	Z, r24
    1d6e:	9d c0       	rjmp	.+314    	; 0x1eaa <LCD_write_data_4bit+0x434>
	else if (__tmp > 255)
    1d70:	fe 01       	movw	r30, r28
    1d72:	ef 5b       	subi	r30, 0xBF	; 191
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	60 81       	ld	r22, Z
    1d78:	71 81       	ldd	r23, Z+1	; 0x01
    1d7a:	82 81       	ldd	r24, Z+2	; 0x02
    1d7c:	93 81       	ldd	r25, Z+3	; 0x03
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	4f e7       	ldi	r20, 0x7F	; 127
    1d84:	53 e4       	ldi	r21, 0x43	; 67
    1d86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d8a:	18 16       	cp	r1, r24
    1d8c:	0c f0       	brlt	.+2      	; 0x1d90 <LCD_write_data_4bit+0x31a>
    1d8e:	7e c0       	rjmp	.+252    	; 0x1e8c <LCD_write_data_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    1d90:	fe 01       	movw	r30, r28
    1d92:	eb 5b       	subi	r30, 0xBB	; 187
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	60 81       	ld	r22, Z
    1d98:	71 81       	ldd	r23, Z+1	; 0x01
    1d9a:	82 81       	ldd	r24, Z+2	; 0x02
    1d9c:	93 81       	ldd	r25, Z+3	; 0x03
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	4a e7       	ldi	r20, 0x7A	; 122
    1da4:	54 e4       	ldi	r21, 0x44	; 68
    1da6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	8c af       	std	Y+60, r24	; 0x3c
    1db0:	9d af       	std	Y+61, r25	; 0x3d
    1db2:	ae af       	std	Y+62, r26	; 0x3e
    1db4:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db6:	6c ad       	ldd	r22, Y+60	; 0x3c
    1db8:	7d ad       	ldd	r23, Y+61	; 0x3d
    1dba:	8e ad       	ldd	r24, Y+62	; 0x3e
    1dbc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	4a ef       	ldi	r20, 0xFA	; 250
    1dc4:	54 e4       	ldi	r21, 0x44	; 68
    1dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	88 af       	std	Y+56, r24	; 0x38
    1dd0:	99 af       	std	Y+57, r25	; 0x39
    1dd2:	aa af       	std	Y+58, r26	; 0x3a
    1dd4:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1dd6:	68 ad       	ldd	r22, Y+56	; 0x38
    1dd8:	79 ad       	ldd	r23, Y+57	; 0x39
    1dda:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ddc:	9b ad       	ldd	r25, Y+59	; 0x3b
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e8       	ldi	r20, 0x80	; 128
    1de4:	5f e3       	ldi	r21, 0x3F	; 63
    1de6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dea:	88 23       	and	r24, r24
    1dec:	2c f4       	brge	.+10     	; 0x1df8 <LCD_write_data_4bit+0x382>
		__ticks = 1;
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	9f ab       	std	Y+55, r25	; 0x37
    1df4:	8e ab       	std	Y+54, r24	; 0x36
    1df6:	3f c0       	rjmp	.+126    	; 0x1e76 <LCD_write_data_4bit+0x400>
	else if (__tmp > 65535)
    1df8:	68 ad       	ldd	r22, Y+56	; 0x38
    1dfa:	79 ad       	ldd	r23, Y+57	; 0x39
    1dfc:	8a ad       	ldd	r24, Y+58	; 0x3a
    1dfe:	9b ad       	ldd	r25, Y+59	; 0x3b
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	3f ef       	ldi	r19, 0xFF	; 255
    1e04:	4f e7       	ldi	r20, 0x7F	; 127
    1e06:	57 e4       	ldi	r21, 0x47	; 71
    1e08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e0c:	18 16       	cp	r1, r24
    1e0e:	4c f5       	brge	.+82     	; 0x1e62 <LCD_write_data_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e10:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e12:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e14:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e16:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e2       	ldi	r20, 0x20	; 32
    1e1e:	51 e4       	ldi	r21, 0x41	; 65
    1e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	bc 01       	movw	r22, r24
    1e2a:	cd 01       	movw	r24, r26
    1e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	9f ab       	std	Y+55, r25	; 0x37
    1e36:	8e ab       	std	Y+54, r24	; 0x36
    1e38:	0f c0       	rjmp	.+30     	; 0x1e58 <LCD_write_data_4bit+0x3e2>
    1e3a:	88 ec       	ldi	r24, 0xC8	; 200
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	9d ab       	std	Y+53, r25	; 0x35
    1e40:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e42:	8c a9       	ldd	r24, Y+52	; 0x34
    1e44:	9d a9       	ldd	r25, Y+53	; 0x35
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <LCD_write_data_4bit+0x3d0>
    1e4a:	9d ab       	std	Y+53, r25	; 0x35
    1e4c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4e:	8e a9       	ldd	r24, Y+54	; 0x36
    1e50:	9f a9       	ldd	r25, Y+55	; 0x37
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	9f ab       	std	Y+55, r25	; 0x37
    1e56:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e58:	8e a9       	ldd	r24, Y+54	; 0x36
    1e5a:	9f a9       	ldd	r25, Y+55	; 0x37
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	69 f7       	brne	.-38     	; 0x1e3a <LCD_write_data_4bit+0x3c4>
    1e60:	2d c0       	rjmp	.+90     	; 0x1ebc <LCD_write_data_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e62:	68 ad       	ldd	r22, Y+56	; 0x38
    1e64:	79 ad       	ldd	r23, Y+57	; 0x39
    1e66:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e68:	9b ad       	ldd	r25, Y+59	; 0x3b
    1e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	9f ab       	std	Y+55, r25	; 0x37
    1e74:	8e ab       	std	Y+54, r24	; 0x36
    1e76:	8e a9       	ldd	r24, Y+54	; 0x36
    1e78:	9f a9       	ldd	r25, Y+55	; 0x37
    1e7a:	9b ab       	std	Y+51, r25	; 0x33
    1e7c:	8a ab       	std	Y+50, r24	; 0x32
    1e7e:	8a a9       	ldd	r24, Y+50	; 0x32
    1e80:	9b a9       	ldd	r25, Y+51	; 0x33
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	f1 f7       	brne	.-4      	; 0x1e82 <LCD_write_data_4bit+0x40c>
    1e86:	9b ab       	std	Y+51, r25	; 0x33
    1e88:	8a ab       	std	Y+50, r24	; 0x32
    1e8a:	18 c0       	rjmp	.+48     	; 0x1ebc <LCD_write_data_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	ef 5b       	subi	r30, 0xBF	; 191
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	60 81       	ld	r22, Z
    1e94:	71 81       	ldd	r23, Z+1	; 0x01
    1e96:	82 81       	ldd	r24, Z+2	; 0x02
    1e98:	93 81       	ldd	r25, Z+3	; 0x03
    1e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	e0 5c       	subi	r30, 0xC0	; 192
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	80 83       	st	Z, r24
    1eaa:	fe 01       	movw	r30, r28
    1eac:	e0 5c       	subi	r30, 0xC0	; 192
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	80 81       	ld	r24, Z
    1eb2:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1eb4:	89 a9       	ldd	r24, Y+49	; 0x31
    1eb6:	8a 95       	dec	r24
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <LCD_write_data_4bit+0x440>
    1eba:	89 ab       	std	Y+49, r24	; 0x31
	 *  any change in this sequence will result in a wrong behavior
	 *  i will try to make it more generic in the next versions
	 *
	 */

	for(u8 i = 4; i < 8; i++){
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	ee 59       	subi	r30, 0x9E	; 158
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	84 e0       	ldi	r24, 0x04	; 4
    1ec4:	80 83       	st	Z, r24
    1ec6:	26 c0       	rjmp	.+76     	; 0x1f14 <LCD_write_data_4bit+0x49e>

		DIO_void_assign_pin(lcd_data_port, i, get_Bit(copy_data_4bit,i));
    1ec8:	fe 01       	movw	r30, r28
    1eca:	ed 59       	subi	r30, 0x9D	; 157
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	80 81       	ld	r24, Z
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	ee 59       	subi	r30, 0x9E	; 158
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	80 81       	ld	r24, Z
    1edc:	88 2f       	mov	r24, r24
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	a9 01       	movw	r20, r18
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <LCD_write_data_4bit+0x472>
    1ee4:	55 95       	asr	r21
    1ee6:	47 95       	ror	r20
    1ee8:	8a 95       	dec	r24
    1eea:	e2 f7       	brpl	.-8      	; 0x1ee4 <LCD_write_data_4bit+0x46e>
    1eec:	ca 01       	movw	r24, r20
    1eee:	98 2f       	mov	r25, r24
    1ef0:	91 70       	andi	r25, 0x01	; 1
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	ee 59       	subi	r30, 0x9E	; 158
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	82 e0       	ldi	r24, 0x02	; 2
    1efa:	60 81       	ld	r22, Z
    1efc:	49 2f       	mov	r20, r25
    1efe:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_void_assign_pin>
	 *  any change in this sequence will result in a wrong behavior
	 *  i will try to make it more generic in the next versions
	 *
	 */

	for(u8 i = 4; i < 8; i++){
    1f02:	de 01       	movw	r26, r28
    1f04:	ae 59       	subi	r26, 0x9E	; 158
    1f06:	bf 4f       	sbci	r27, 0xFF	; 255
    1f08:	fe 01       	movw	r30, r28
    1f0a:	ee 59       	subi	r30, 0x9E	; 158
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	80 81       	ld	r24, Z
    1f10:	8f 5f       	subi	r24, 0xFF	; 255
    1f12:	8c 93       	st	X, r24
    1f14:	fe 01       	movw	r30, r28
    1f16:	ee 59       	subi	r30, 0x9E	; 158
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	80 81       	ld	r24, Z
    1f1c:	88 30       	cpi	r24, 0x08	; 8
    1f1e:	a0 f2       	brcs	.-88     	; 0x1ec8 <LCD_write_data_4bit+0x452>
		// the for loop assigns the data value in the function input
		// by starting by the most significant 4 bits b4-b7

	}
	// set enable to low to send the lower nibble
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    1f20:	83 e0       	ldi	r24, 0x03	; 3
    1f22:	60 e0       	ldi	r22, 0x00	; 0
    1f24:	0e 94 80 08 	call	0x1100	; 0x1100 <DIO_void_clear_pin>
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	a0 e2       	ldi	r26, 0x20	; 32
    1f2e:	b1 e4       	ldi	r27, 0x41	; 65
    1f30:	8d a7       	std	Y+45, r24	; 0x2d
    1f32:	9e a7       	std	Y+46, r25	; 0x2e
    1f34:	af a7       	std	Y+47, r26	; 0x2f
    1f36:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f38:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f3a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f40:	2b ea       	ldi	r18, 0xAB	; 171
    1f42:	3a ea       	ldi	r19, 0xAA	; 170
    1f44:	4a e2       	ldi	r20, 0x2A	; 42
    1f46:	50 e4       	ldi	r21, 0x40	; 64
    1f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	89 a7       	std	Y+41, r24	; 0x29
    1f52:	9a a7       	std	Y+42, r25	; 0x2a
    1f54:	ab a7       	std	Y+43, r26	; 0x2b
    1f56:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1f58:	69 a5       	ldd	r22, Y+41	; 0x29
    1f5a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	40 e8       	ldi	r20, 0x80	; 128
    1f66:	5f e3       	ldi	r21, 0x3F	; 63
    1f68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f6c:	88 23       	and	r24, r24
    1f6e:	1c f4       	brge	.+6      	; 0x1f76 <LCD_write_data_4bit+0x500>
		__ticks = 1;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	88 a7       	std	Y+40, r24	; 0x28
    1f74:	91 c0       	rjmp	.+290    	; 0x2098 <LCD_write_data_4bit+0x622>
	else if (__tmp > 255)
    1f76:	69 a5       	ldd	r22, Y+41	; 0x29
    1f78:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f7c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	4f e7       	ldi	r20, 0x7F	; 127
    1f84:	53 e4       	ldi	r21, 0x43	; 67
    1f86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f8a:	18 16       	cp	r1, r24
    1f8c:	0c f0       	brlt	.+2      	; 0x1f90 <LCD_write_data_4bit+0x51a>
    1f8e:	7b c0       	rjmp	.+246    	; 0x2086 <LCD_write_data_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    1f90:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f92:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f96:	98 a9       	ldd	r25, Y+48	; 0x30
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	4a e7       	ldi	r20, 0x7A	; 122
    1f9e:	54 e4       	ldi	r21, 0x44	; 68
    1fa0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	8c a3       	std	Y+36, r24	; 0x24
    1faa:	9d a3       	std	Y+37, r25	; 0x25
    1fac:	ae a3       	std	Y+38, r26	; 0x26
    1fae:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb0:	6c a1       	ldd	r22, Y+36	; 0x24
    1fb2:	7d a1       	ldd	r23, Y+37	; 0x25
    1fb4:	8e a1       	ldd	r24, Y+38	; 0x26
    1fb6:	9f a1       	ldd	r25, Y+39	; 0x27
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	4a ef       	ldi	r20, 0xFA	; 250
    1fbe:	54 e4       	ldi	r21, 0x44	; 68
    1fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	88 a3       	std	Y+32, r24	; 0x20
    1fca:	99 a3       	std	Y+33, r25	; 0x21
    1fcc:	aa a3       	std	Y+34, r26	; 0x22
    1fce:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1fd0:	68 a1       	ldd	r22, Y+32	; 0x20
    1fd2:	79 a1       	ldd	r23, Y+33	; 0x21
    1fd4:	8a a1       	ldd	r24, Y+34	; 0x22
    1fd6:	9b a1       	ldd	r25, Y+35	; 0x23
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e8       	ldi	r20, 0x80	; 128
    1fde:	5f e3       	ldi	r21, 0x3F	; 63
    1fe0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fe4:	88 23       	and	r24, r24
    1fe6:	2c f4       	brge	.+10     	; 0x1ff2 <LCD_write_data_4bit+0x57c>
		__ticks = 1;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	9f 8f       	std	Y+31, r25	; 0x1f
    1fee:	8e 8f       	std	Y+30, r24	; 0x1e
    1ff0:	3f c0       	rjmp	.+126    	; 0x2070 <LCD_write_data_4bit+0x5fa>
	else if (__tmp > 65535)
    1ff2:	68 a1       	ldd	r22, Y+32	; 0x20
    1ff4:	79 a1       	ldd	r23, Y+33	; 0x21
    1ff6:	8a a1       	ldd	r24, Y+34	; 0x22
    1ff8:	9b a1       	ldd	r25, Y+35	; 0x23
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	3f ef       	ldi	r19, 0xFF	; 255
    1ffe:	4f e7       	ldi	r20, 0x7F	; 127
    2000:	57 e4       	ldi	r21, 0x47	; 71
    2002:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2006:	18 16       	cp	r1, r24
    2008:	4c f5       	brge	.+82     	; 0x205c <LCD_write_data_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200a:	6c a1       	ldd	r22, Y+36	; 0x24
    200c:	7d a1       	ldd	r23, Y+37	; 0x25
    200e:	8e a1       	ldd	r24, Y+38	; 0x26
    2010:	9f a1       	ldd	r25, Y+39	; 0x27
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e2       	ldi	r20, 0x20	; 32
    2018:	51 e4       	ldi	r21, 0x41	; 65
    201a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	bc 01       	movw	r22, r24
    2024:	cd 01       	movw	r24, r26
    2026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	9f 8f       	std	Y+31, r25	; 0x1f
    2030:	8e 8f       	std	Y+30, r24	; 0x1e
    2032:	0f c0       	rjmp	.+30     	; 0x2052 <LCD_write_data_4bit+0x5dc>
    2034:	88 ec       	ldi	r24, 0xC8	; 200
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	9d 8f       	std	Y+29, r25	; 0x1d
    203a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    203c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    203e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <LCD_write_data_4bit+0x5ca>
    2044:	9d 8f       	std	Y+29, r25	; 0x1d
    2046:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2048:	8e 8d       	ldd	r24, Y+30	; 0x1e
    204a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	9f 8f       	std	Y+31, r25	; 0x1f
    2050:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2052:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2054:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	69 f7       	brne	.-38     	; 0x2034 <LCD_write_data_4bit+0x5be>
    205a:	24 c0       	rjmp	.+72     	; 0x20a4 <LCD_write_data_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205c:	68 a1       	ldd	r22, Y+32	; 0x20
    205e:	79 a1       	ldd	r23, Y+33	; 0x21
    2060:	8a a1       	ldd	r24, Y+34	; 0x22
    2062:	9b a1       	ldd	r25, Y+35	; 0x23
    2064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	9f 8f       	std	Y+31, r25	; 0x1f
    206e:	8e 8f       	std	Y+30, r24	; 0x1e
    2070:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2072:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2074:	9b 8f       	std	Y+27, r25	; 0x1b
    2076:	8a 8f       	std	Y+26, r24	; 0x1a
    2078:	8a 8d       	ldd	r24, Y+26	; 0x1a
    207a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <LCD_write_data_4bit+0x606>
    2080:	9b 8f       	std	Y+27, r25	; 0x1b
    2082:	8a 8f       	std	Y+26, r24	; 0x1a
    2084:	0f c0       	rjmp	.+30     	; 0x20a4 <LCD_write_data_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2086:	69 a5       	ldd	r22, Y+41	; 0x29
    2088:	7a a5       	ldd	r23, Y+42	; 0x2a
    208a:	8b a5       	ldd	r24, Y+43	; 0x2b
    208c:	9c a5       	ldd	r25, Y+44	; 0x2c
    208e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	88 a7       	std	Y+40, r24	; 0x28
    2098:	88 a5       	ldd	r24, Y+40	; 0x28
    209a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    209c:	89 8d       	ldd	r24, Y+25	; 0x19
    209e:	8a 95       	dec	r24
    20a0:	f1 f7       	brne	.-4      	; 0x209e <LCD_write_data_4bit+0x628>
    20a2:	89 8f       	std	Y+25, r24	; 0x19
	//delay to smooth things out
	_delay_us(10);
	//enable HIGH
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    20a4:	83 e0       	ldi	r24, 0x03	; 3
    20a6:	60 e0       	ldi	r22, 0x00	; 0
    20a8:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_void_set_pin>
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	a0 e8       	ldi	r26, 0x80	; 128
    20b2:	bf e3       	ldi	r27, 0x3F	; 63
    20b4:	8d 8b       	std	Y+21, r24	; 0x15
    20b6:	9e 8b       	std	Y+22, r25	; 0x16
    20b8:	af 8b       	std	Y+23, r26	; 0x17
    20ba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20bc:	6d 89       	ldd	r22, Y+21	; 0x15
    20be:	7e 89       	ldd	r23, Y+22	; 0x16
    20c0:	8f 89       	ldd	r24, Y+23	; 0x17
    20c2:	98 8d       	ldd	r25, Y+24	; 0x18
    20c4:	2b ea       	ldi	r18, 0xAB	; 171
    20c6:	3a ea       	ldi	r19, 0xAA	; 170
    20c8:	4a e2       	ldi	r20, 0x2A	; 42
    20ca:	50 e4       	ldi	r21, 0x40	; 64
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	89 8b       	std	Y+17, r24	; 0x11
    20d6:	9a 8b       	std	Y+18, r25	; 0x12
    20d8:	ab 8b       	std	Y+19, r26	; 0x13
    20da:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    20dc:	69 89       	ldd	r22, Y+17	; 0x11
    20de:	7a 89       	ldd	r23, Y+18	; 0x12
    20e0:	8b 89       	ldd	r24, Y+19	; 0x13
    20e2:	9c 89       	ldd	r25, Y+20	; 0x14
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e8       	ldi	r20, 0x80	; 128
    20ea:	5f e3       	ldi	r21, 0x3F	; 63
    20ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20f0:	88 23       	and	r24, r24
    20f2:	1c f4       	brge	.+6      	; 0x20fa <LCD_write_data_4bit+0x684>
		__ticks = 1;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	88 8b       	std	Y+16, r24	; 0x10
    20f8:	91 c0       	rjmp	.+290    	; 0x221c <LCD_write_data_4bit+0x7a6>
	else if (__tmp > 255)
    20fa:	69 89       	ldd	r22, Y+17	; 0x11
    20fc:	7a 89       	ldd	r23, Y+18	; 0x12
    20fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2100:	9c 89       	ldd	r25, Y+20	; 0x14
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	4f e7       	ldi	r20, 0x7F	; 127
    2108:	53 e4       	ldi	r21, 0x43	; 67
    210a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    210e:	18 16       	cp	r1, r24
    2110:	0c f0       	brlt	.+2      	; 0x2114 <LCD_write_data_4bit+0x69e>
    2112:	7b c0       	rjmp	.+246    	; 0x220a <LCD_write_data_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    2114:	6d 89       	ldd	r22, Y+21	; 0x15
    2116:	7e 89       	ldd	r23, Y+22	; 0x16
    2118:	8f 89       	ldd	r24, Y+23	; 0x17
    211a:	98 8d       	ldd	r25, Y+24	; 0x18
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	4a e7       	ldi	r20, 0x7A	; 122
    2122:	54 e4       	ldi	r21, 0x44	; 68
    2124:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	8c 87       	std	Y+12, r24	; 0x0c
    212e:	9d 87       	std	Y+13, r25	; 0x0d
    2130:	ae 87       	std	Y+14, r26	; 0x0e
    2132:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2134:	6c 85       	ldd	r22, Y+12	; 0x0c
    2136:	7d 85       	ldd	r23, Y+13	; 0x0d
    2138:	8e 85       	ldd	r24, Y+14	; 0x0e
    213a:	9f 85       	ldd	r25, Y+15	; 0x0f
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	4a ef       	ldi	r20, 0xFA	; 250
    2142:	54 e4       	ldi	r21, 0x44	; 68
    2144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	88 87       	std	Y+8, r24	; 0x08
    214e:	99 87       	std	Y+9, r25	; 0x09
    2150:	aa 87       	std	Y+10, r26	; 0x0a
    2152:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2154:	68 85       	ldd	r22, Y+8	; 0x08
    2156:	79 85       	ldd	r23, Y+9	; 0x09
    2158:	8a 85       	ldd	r24, Y+10	; 0x0a
    215a:	9b 85       	ldd	r25, Y+11	; 0x0b
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e8       	ldi	r20, 0x80	; 128
    2162:	5f e3       	ldi	r21, 0x3F	; 63
    2164:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2168:	88 23       	and	r24, r24
    216a:	2c f4       	brge	.+10     	; 0x2176 <LCD_write_data_4bit+0x700>
		__ticks = 1;
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	9f 83       	std	Y+7, r25	; 0x07
    2172:	8e 83       	std	Y+6, r24	; 0x06
    2174:	3f c0       	rjmp	.+126    	; 0x21f4 <LCD_write_data_4bit+0x77e>
	else if (__tmp > 65535)
    2176:	68 85       	ldd	r22, Y+8	; 0x08
    2178:	79 85       	ldd	r23, Y+9	; 0x09
    217a:	8a 85       	ldd	r24, Y+10	; 0x0a
    217c:	9b 85       	ldd	r25, Y+11	; 0x0b
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	3f ef       	ldi	r19, 0xFF	; 255
    2182:	4f e7       	ldi	r20, 0x7F	; 127
    2184:	57 e4       	ldi	r21, 0x47	; 71
    2186:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    218a:	18 16       	cp	r1, r24
    218c:	4c f5       	brge	.+82     	; 0x21e0 <LCD_write_data_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2190:	7d 85       	ldd	r23, Y+13	; 0x0d
    2192:	8e 85       	ldd	r24, Y+14	; 0x0e
    2194:	9f 85       	ldd	r25, Y+15	; 0x0f
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 e2       	ldi	r20, 0x20	; 32
    219c:	51 e4       	ldi	r21, 0x41	; 65
    219e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	bc 01       	movw	r22, r24
    21a8:	cd 01       	movw	r24, r26
    21aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	9f 83       	std	Y+7, r25	; 0x07
    21b4:	8e 83       	std	Y+6, r24	; 0x06
    21b6:	0f c0       	rjmp	.+30     	; 0x21d6 <LCD_write_data_4bit+0x760>
    21b8:	88 ec       	ldi	r24, 0xC8	; 200
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	9d 83       	std	Y+5, r25	; 0x05
    21be:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21c0:	8c 81       	ldd	r24, Y+4	; 0x04
    21c2:	9d 81       	ldd	r25, Y+5	; 0x05
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <LCD_write_data_4bit+0x74e>
    21c8:	9d 83       	std	Y+5, r25	; 0x05
    21ca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21cc:	8e 81       	ldd	r24, Y+6	; 0x06
    21ce:	9f 81       	ldd	r25, Y+7	; 0x07
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	9f 83       	std	Y+7, r25	; 0x07
    21d4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d6:	8e 81       	ldd	r24, Y+6	; 0x06
    21d8:	9f 81       	ldd	r25, Y+7	; 0x07
    21da:	00 97       	sbiw	r24, 0x00	; 0
    21dc:	69 f7       	brne	.-38     	; 0x21b8 <LCD_write_data_4bit+0x742>
    21de:	24 c0       	rjmp	.+72     	; 0x2228 <LCD_write_data_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e0:	68 85       	ldd	r22, Y+8	; 0x08
    21e2:	79 85       	ldd	r23, Y+9	; 0x09
    21e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    21e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    21e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	9f 83       	std	Y+7, r25	; 0x07
    21f2:	8e 83       	std	Y+6, r24	; 0x06
    21f4:	8e 81       	ldd	r24, Y+6	; 0x06
    21f6:	9f 81       	ldd	r25, Y+7	; 0x07
    21f8:	9b 83       	std	Y+3, r25	; 0x03
    21fa:	8a 83       	std	Y+2, r24	; 0x02
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	f1 f7       	brne	.-4      	; 0x2200 <LCD_write_data_4bit+0x78a>
    2204:	9b 83       	std	Y+3, r25	; 0x03
    2206:	8a 83       	std	Y+2, r24	; 0x02
    2208:	0f c0       	rjmp	.+30     	; 0x2228 <LCD_write_data_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    220a:	69 89       	ldd	r22, Y+17	; 0x11
    220c:	7a 89       	ldd	r23, Y+18	; 0x12
    220e:	8b 89       	ldd	r24, Y+19	; 0x13
    2210:	9c 89       	ldd	r25, Y+20	; 0x14
    2212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	88 8b       	std	Y+16, r24	; 0x10
    221c:	88 89       	ldd	r24, Y+16	; 0x10
    221e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	8a 95       	dec	r24
    2224:	f1 f7       	brne	.-4      	; 0x2222 <LCD_write_data_4bit+0x7ac>
    2226:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	//send lower nibble
	for(u8 i = 4; i < 8; i++){
    2228:	fe 01       	movw	r30, r28
    222a:	ef 59       	subi	r30, 0x9F	; 159
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	84 e0       	ldi	r24, 0x04	; 4
    2230:	80 83       	st	Z, r24
    2232:	27 c0       	rjmp	.+78     	; 0x2282 <LCD_write_data_4bit+0x80c>

			DIO_void_assign_pin(lcd_data_port, i, get_Bit(copy_data_4bit,i-4));
    2234:	fe 01       	movw	r30, r28
    2236:	ed 59       	subi	r30, 0x9D	; 157
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	80 81       	ld	r24, Z
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	fe 01       	movw	r30, r28
    2242:	ef 59       	subi	r30, 0x9F	; 159
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	80 81       	ld	r24, Z
    2248:	88 2f       	mov	r24, r24
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	04 97       	sbiw	r24, 0x04	; 4
    224e:	f9 01       	movw	r30, r18
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <LCD_write_data_4bit+0x7e0>
    2252:	f5 95       	asr	r31
    2254:	e7 95       	ror	r30
    2256:	8a 95       	dec	r24
    2258:	e2 f7       	brpl	.-8      	; 0x2252 <LCD_write_data_4bit+0x7dc>
    225a:	cf 01       	movw	r24, r30
    225c:	98 2f       	mov	r25, r24
    225e:	91 70       	andi	r25, 0x01	; 1
    2260:	fe 01       	movw	r30, r28
    2262:	ef 59       	subi	r30, 0x9F	; 159
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	82 e0       	ldi	r24, 0x02	; 2
    2268:	60 81       	ld	r22, Z
    226a:	49 2f       	mov	r20, r25
    226c:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_void_assign_pin>
	_delay_us(10);
	//enable HIGH
	DIO_void_set_pin(lcd_control_port, lcd_enable);
	_delay_us(1);
	//send lower nibble
	for(u8 i = 4; i < 8; i++){
    2270:	de 01       	movw	r26, r28
    2272:	af 59       	subi	r26, 0x9F	; 159
    2274:	bf 4f       	sbci	r27, 0xFF	; 255
    2276:	fe 01       	movw	r30, r28
    2278:	ef 59       	subi	r30, 0x9F	; 159
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	80 81       	ld	r24, Z
    227e:	8f 5f       	subi	r24, 0xFF	; 255
    2280:	8c 93       	st	X, r24
    2282:	fe 01       	movw	r30, r28
    2284:	ef 59       	subi	r30, 0x9F	; 159
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	80 81       	ld	r24, Z
    228a:	88 30       	cpi	r24, 0x08	; 8
    228c:	98 f2       	brcs	.-90     	; 0x2234 <LCD_write_data_4bit+0x7be>
			// the for loop assigns the data value in the function input
			// by starting by the least significant 4 bits b0-b3

		}
	//enable low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    228e:	83 e0       	ldi	r24, 0x03	; 3
    2290:	60 e0       	ldi	r22, 0x00	; 0
    2292:	0e 94 80 08 	call	0x1100	; 0x1100 <DIO_void_clear_pin>


}
    2296:	cd 59       	subi	r28, 0x9D	; 157
    2298:	df 4f       	sbci	r29, 0xFF	; 255
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	1f 91       	pop	r17
    22aa:	0f 91       	pop	r16
    22ac:	08 95       	ret

000022ae <LCD_write_command_4bit>:

static void LCD_write_command_4bit(u8 copy_command_4bit){
    22ae:	0f 93       	push	r16
    22b0:	1f 93       	push	r17
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    22ba:	c3 56       	subi	r28, 0x63	; 99
    22bc:	d0 40       	sbci	r29, 0x00	; 0
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	fe 01       	movw	r30, r28
    22ca:	ed 59       	subi	r30, 0x9D	; 157
    22cc:	ff 4f       	sbci	r31, 0xFF	; 255
    22ce:	80 83       	st	Z, r24
		 *  function will only be used inside this source file
		 *  do you not use it in your code!
		 *
		 */

	DIO_void_clear_pin(lcd_control_port, lcd_RS); // set RS pin high select data register
    22d0:	83 e0       	ldi	r24, 0x03	; 3
    22d2:	62 e0       	ldi	r22, 0x02	; 2
    22d4:	0e 94 80 08 	call	0x1100	; 0x1100 <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_control_port, lcd_RW); // clear RW pin  0 for writing operation
    22d8:	83 e0       	ldi	r24, 0x03	; 3
    22da:	61 e0       	ldi	r22, 0x01	; 1
    22dc:	0e 94 80 08 	call	0x1100	; 0x1100 <DIO_void_clear_pin>
    22e0:	fe 01       	movw	r30, r28
    22e2:	e3 5a       	subi	r30, 0xA3	; 163
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	a0 e8       	ldi	r26, 0x80	; 128
    22ec:	bf e3       	ldi	r27, 0x3F	; 63
    22ee:	80 83       	st	Z, r24
    22f0:	91 83       	std	Z+1, r25	; 0x01
    22f2:	a2 83       	std	Z+2, r26	; 0x02
    22f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22f6:	8e 01       	movw	r16, r28
    22f8:	07 5a       	subi	r16, 0xA7	; 167
    22fa:	1f 4f       	sbci	r17, 0xFF	; 255
    22fc:	fe 01       	movw	r30, r28
    22fe:	e3 5a       	subi	r30, 0xA3	; 163
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	60 81       	ld	r22, Z
    2304:	71 81       	ldd	r23, Z+1	; 0x01
    2306:	82 81       	ldd	r24, Z+2	; 0x02
    2308:	93 81       	ldd	r25, Z+3	; 0x03
    230a:	2b ea       	ldi	r18, 0xAB	; 171
    230c:	3a ea       	ldi	r19, 0xAA	; 170
    230e:	4a e2       	ldi	r20, 0x2A	; 42
    2310:	50 e4       	ldi	r21, 0x40	; 64
    2312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	f8 01       	movw	r30, r16
    231c:	80 83       	st	Z, r24
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	a2 83       	std	Z+2, r26	; 0x02
    2322:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2324:	fe 01       	movw	r30, r28
    2326:	e7 5a       	subi	r30, 0xA7	; 167
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	60 81       	ld	r22, Z
    232c:	71 81       	ldd	r23, Z+1	; 0x01
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e8       	ldi	r20, 0x80	; 128
    2338:	5f e3       	ldi	r21, 0x3F	; 63
    233a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    233e:	88 23       	and	r24, r24
    2340:	34 f4       	brge	.+12     	; 0x234e <LCD_write_command_4bit+0xa0>
		__ticks = 1;
    2342:	fe 01       	movw	r30, r28
    2344:	e8 5a       	subi	r30, 0xA8	; 168
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	80 83       	st	Z, r24
    234c:	e0 c0       	rjmp	.+448    	; 0x250e <LCD_write_command_4bit+0x260>
	else if (__tmp > 255)
    234e:	fe 01       	movw	r30, r28
    2350:	e7 5a       	subi	r30, 0xA7	; 167
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	60 81       	ld	r22, Z
    2356:	71 81       	ldd	r23, Z+1	; 0x01
    2358:	82 81       	ldd	r24, Z+2	; 0x02
    235a:	93 81       	ldd	r25, Z+3	; 0x03
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	4f e7       	ldi	r20, 0x7F	; 127
    2362:	53 e4       	ldi	r21, 0x43	; 67
    2364:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2368:	18 16       	cp	r1, r24
    236a:	0c f0       	brlt	.+2      	; 0x236e <LCD_write_command_4bit+0xc0>
    236c:	c0 c0       	rjmp	.+384    	; 0x24ee <LCD_write_command_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    236e:	fe 01       	movw	r30, r28
    2370:	e3 5a       	subi	r30, 0xA3	; 163
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	60 81       	ld	r22, Z
    2376:	71 81       	ldd	r23, Z+1	; 0x01
    2378:	82 81       	ldd	r24, Z+2	; 0x02
    237a:	93 81       	ldd	r25, Z+3	; 0x03
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	4a e7       	ldi	r20, 0x7A	; 122
    2382:	54 e4       	ldi	r21, 0x44	; 68
    2384:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	fe 01       	movw	r30, r28
    238e:	ec 5a       	subi	r30, 0xAC	; 172
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	80 83       	st	Z, r24
    2394:	91 83       	std	Z+1, r25	; 0x01
    2396:	a2 83       	std	Z+2, r26	; 0x02
    2398:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239a:	8e 01       	movw	r16, r28
    239c:	00 5b       	subi	r16, 0xB0	; 176
    239e:	1f 4f       	sbci	r17, 0xFF	; 255
    23a0:	fe 01       	movw	r30, r28
    23a2:	ec 5a       	subi	r30, 0xAC	; 172
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	60 81       	ld	r22, Z
    23a8:	71 81       	ldd	r23, Z+1	; 0x01
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	4a ef       	ldi	r20, 0xFA	; 250
    23b4:	54 e4       	ldi	r21, 0x44	; 68
    23b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	f8 01       	movw	r30, r16
    23c0:	80 83       	st	Z, r24
    23c2:	91 83       	std	Z+1, r25	; 0x01
    23c4:	a2 83       	std	Z+2, r26	; 0x02
    23c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23c8:	fe 01       	movw	r30, r28
    23ca:	e0 5b       	subi	r30, 0xB0	; 176
    23cc:	ff 4f       	sbci	r31, 0xFF	; 255
    23ce:	60 81       	ld	r22, Z
    23d0:	71 81       	ldd	r23, Z+1	; 0x01
    23d2:	82 81       	ldd	r24, Z+2	; 0x02
    23d4:	93 81       	ldd	r25, Z+3	; 0x03
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	40 e8       	ldi	r20, 0x80	; 128
    23dc:	5f e3       	ldi	r21, 0x3F	; 63
    23de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23e2:	88 23       	and	r24, r24
    23e4:	44 f4       	brge	.+16     	; 0x23f6 <LCD_write_command_4bit+0x148>
		__ticks = 1;
    23e6:	fe 01       	movw	r30, r28
    23e8:	e2 5b       	subi	r30, 0xB2	; 178
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	91 83       	std	Z+1, r25	; 0x01
    23f2:	80 83       	st	Z, r24
    23f4:	64 c0       	rjmp	.+200    	; 0x24be <LCD_write_command_4bit+0x210>
	else if (__tmp > 65535)
    23f6:	fe 01       	movw	r30, r28
    23f8:	e0 5b       	subi	r30, 0xB0	; 176
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	60 81       	ld	r22, Z
    23fe:	71 81       	ldd	r23, Z+1	; 0x01
    2400:	82 81       	ldd	r24, Z+2	; 0x02
    2402:	93 81       	ldd	r25, Z+3	; 0x03
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	3f ef       	ldi	r19, 0xFF	; 255
    2408:	4f e7       	ldi	r20, 0x7F	; 127
    240a:	57 e4       	ldi	r21, 0x47	; 71
    240c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2410:	18 16       	cp	r1, r24
    2412:	0c f0       	brlt	.+2      	; 0x2416 <LCD_write_command_4bit+0x168>
    2414:	43 c0       	rjmp	.+134    	; 0x249c <LCD_write_command_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2416:	fe 01       	movw	r30, r28
    2418:	ec 5a       	subi	r30, 0xAC	; 172
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	60 81       	ld	r22, Z
    241e:	71 81       	ldd	r23, Z+1	; 0x01
    2420:	82 81       	ldd	r24, Z+2	; 0x02
    2422:	93 81       	ldd	r25, Z+3	; 0x03
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 e2       	ldi	r20, 0x20	; 32
    242a:	51 e4       	ldi	r21, 0x41	; 65
    242c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	8e 01       	movw	r16, r28
    2436:	02 5b       	subi	r16, 0xB2	; 178
    2438:	1f 4f       	sbci	r17, 0xFF	; 255
    243a:	bc 01       	movw	r22, r24
    243c:	cd 01       	movw	r24, r26
    243e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	f8 01       	movw	r30, r16
    2448:	91 83       	std	Z+1, r25	; 0x01
    244a:	80 83       	st	Z, r24
    244c:	1f c0       	rjmp	.+62     	; 0x248c <LCD_write_command_4bit+0x1de>
    244e:	fe 01       	movw	r30, r28
    2450:	e4 5b       	subi	r30, 0xB4	; 180
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	88 ec       	ldi	r24, 0xC8	; 200
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	91 83       	std	Z+1, r25	; 0x01
    245a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    245c:	fe 01       	movw	r30, r28
    245e:	e4 5b       	subi	r30, 0xB4	; 180
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	80 81       	ld	r24, Z
    2464:	91 81       	ldd	r25, Z+1	; 0x01
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	f1 f7       	brne	.-4      	; 0x2466 <LCD_write_command_4bit+0x1b8>
    246a:	fe 01       	movw	r30, r28
    246c:	e4 5b       	subi	r30, 0xB4	; 180
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2474:	de 01       	movw	r26, r28
    2476:	a2 5b       	subi	r26, 0xB2	; 178
    2478:	bf 4f       	sbci	r27, 0xFF	; 255
    247a:	fe 01       	movw	r30, r28
    247c:	e2 5b       	subi	r30, 0xB2	; 178
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	80 81       	ld	r24, Z
    2482:	91 81       	ldd	r25, Z+1	; 0x01
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	11 96       	adiw	r26, 0x01	; 1
    2488:	9c 93       	st	X, r25
    248a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248c:	fe 01       	movw	r30, r28
    248e:	e2 5b       	subi	r30, 0xB2	; 178
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	80 81       	ld	r24, Z
    2494:	91 81       	ldd	r25, Z+1	; 0x01
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	d1 f6       	brne	.-76     	; 0x244e <LCD_write_command_4bit+0x1a0>
    249a:	4b c0       	rjmp	.+150    	; 0x2532 <LCD_write_command_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249c:	8e 01       	movw	r16, r28
    249e:	02 5b       	subi	r16, 0xB2	; 178
    24a0:	1f 4f       	sbci	r17, 0xFF	; 255
    24a2:	fe 01       	movw	r30, r28
    24a4:	e0 5b       	subi	r30, 0xB0	; 176
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	60 81       	ld	r22, Z
    24aa:	71 81       	ldd	r23, Z+1	; 0x01
    24ac:	82 81       	ldd	r24, Z+2	; 0x02
    24ae:	93 81       	ldd	r25, Z+3	; 0x03
    24b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	f8 01       	movw	r30, r16
    24ba:	91 83       	std	Z+1, r25	; 0x01
    24bc:	80 83       	st	Z, r24
    24be:	de 01       	movw	r26, r28
    24c0:	a6 5b       	subi	r26, 0xB6	; 182
    24c2:	bf 4f       	sbci	r27, 0xFF	; 255
    24c4:	fe 01       	movw	r30, r28
    24c6:	e2 5b       	subi	r30, 0xB2	; 178
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	80 81       	ld	r24, Z
    24cc:	91 81       	ldd	r25, Z+1	; 0x01
    24ce:	11 96       	adiw	r26, 0x01	; 1
    24d0:	9c 93       	st	X, r25
    24d2:	8e 93       	st	-X, r24
    24d4:	fe 01       	movw	r30, r28
    24d6:	e6 5b       	subi	r30, 0xB6	; 182
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	80 81       	ld	r24, Z
    24dc:	91 81       	ldd	r25, Z+1	; 0x01
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	f1 f7       	brne	.-4      	; 0x24de <LCD_write_command_4bit+0x230>
    24e2:	fe 01       	movw	r30, r28
    24e4:	e6 5b       	subi	r30, 0xB6	; 182
    24e6:	ff 4f       	sbci	r31, 0xFF	; 255
    24e8:	91 83       	std	Z+1, r25	; 0x01
    24ea:	80 83       	st	Z, r24
    24ec:	22 c0       	rjmp	.+68     	; 0x2532 <LCD_write_command_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24ee:	8e 01       	movw	r16, r28
    24f0:	08 5a       	subi	r16, 0xA8	; 168
    24f2:	1f 4f       	sbci	r17, 0xFF	; 255
    24f4:	fe 01       	movw	r30, r28
    24f6:	e7 5a       	subi	r30, 0xA7	; 167
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	60 81       	ld	r22, Z
    24fc:	71 81       	ldd	r23, Z+1	; 0x01
    24fe:	82 81       	ldd	r24, Z+2	; 0x02
    2500:	93 81       	ldd	r25, Z+3	; 0x03
    2502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	f8 01       	movw	r30, r16
    250c:	80 83       	st	Z, r24
    250e:	de 01       	movw	r26, r28
    2510:	a7 5b       	subi	r26, 0xB7	; 183
    2512:	bf 4f       	sbci	r27, 0xFF	; 255
    2514:	fe 01       	movw	r30, r28
    2516:	e8 5a       	subi	r30, 0xA8	; 168
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	80 81       	ld	r24, Z
    251c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    251e:	fe 01       	movw	r30, r28
    2520:	e7 5b       	subi	r30, 0xB7	; 183
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	80 81       	ld	r24, Z
    2526:	8a 95       	dec	r24
    2528:	f1 f7       	brne	.-4      	; 0x2526 <LCD_write_command_4bit+0x278>
    252a:	fe 01       	movw	r30, r28
    252c:	e7 5b       	subi	r30, 0xB7	; 183
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	80 83       	st	Z, r24

	_delay_us(1);
	//enable pin high
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    2532:	83 e0       	ldi	r24, 0x03	; 3
    2534:	60 e0       	ldi	r22, 0x00	; 0
    2536:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_void_set_pin>
    253a:	fe 01       	movw	r30, r28
    253c:	eb 5b       	subi	r30, 0xBB	; 187
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	a0 e8       	ldi	r26, 0x80	; 128
    2546:	bf e3       	ldi	r27, 0x3F	; 63
    2548:	80 83       	st	Z, r24
    254a:	91 83       	std	Z+1, r25	; 0x01
    254c:	a2 83       	std	Z+2, r26	; 0x02
    254e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2550:	8e 01       	movw	r16, r28
    2552:	0f 5b       	subi	r16, 0xBF	; 191
    2554:	1f 4f       	sbci	r17, 0xFF	; 255
    2556:	fe 01       	movw	r30, r28
    2558:	eb 5b       	subi	r30, 0xBB	; 187
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	60 81       	ld	r22, Z
    255e:	71 81       	ldd	r23, Z+1	; 0x01
    2560:	82 81       	ldd	r24, Z+2	; 0x02
    2562:	93 81       	ldd	r25, Z+3	; 0x03
    2564:	2b ea       	ldi	r18, 0xAB	; 171
    2566:	3a ea       	ldi	r19, 0xAA	; 170
    2568:	4a e2       	ldi	r20, 0x2A	; 42
    256a:	50 e4       	ldi	r21, 0x40	; 64
    256c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	f8 01       	movw	r30, r16
    2576:	80 83       	st	Z, r24
    2578:	91 83       	std	Z+1, r25	; 0x01
    257a:	a2 83       	std	Z+2, r26	; 0x02
    257c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    257e:	fe 01       	movw	r30, r28
    2580:	ef 5b       	subi	r30, 0xBF	; 191
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	60 81       	ld	r22, Z
    2586:	71 81       	ldd	r23, Z+1	; 0x01
    2588:	82 81       	ldd	r24, Z+2	; 0x02
    258a:	93 81       	ldd	r25, Z+3	; 0x03
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e8       	ldi	r20, 0x80	; 128
    2592:	5f e3       	ldi	r21, 0x3F	; 63
    2594:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2598:	88 23       	and	r24, r24
    259a:	34 f4       	brge	.+12     	; 0x25a8 <LCD_write_command_4bit+0x2fa>
		__ticks = 1;
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	fe 01       	movw	r30, r28
    25a0:	e0 5c       	subi	r30, 0xC0	; 192
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	80 83       	st	Z, r24
    25a6:	9d c0       	rjmp	.+314    	; 0x26e2 <LCD_write_command_4bit+0x434>
	else if (__tmp > 255)
    25a8:	fe 01       	movw	r30, r28
    25aa:	ef 5b       	subi	r30, 0xBF	; 191
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	60 81       	ld	r22, Z
    25b0:	71 81       	ldd	r23, Z+1	; 0x01
    25b2:	82 81       	ldd	r24, Z+2	; 0x02
    25b4:	93 81       	ldd	r25, Z+3	; 0x03
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	4f e7       	ldi	r20, 0x7F	; 127
    25bc:	53 e4       	ldi	r21, 0x43	; 67
    25be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25c2:	18 16       	cp	r1, r24
    25c4:	0c f0       	brlt	.+2      	; 0x25c8 <LCD_write_command_4bit+0x31a>
    25c6:	7e c0       	rjmp	.+252    	; 0x26c4 <LCD_write_command_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    25c8:	fe 01       	movw	r30, r28
    25ca:	eb 5b       	subi	r30, 0xBB	; 187
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	60 81       	ld	r22, Z
    25d0:	71 81       	ldd	r23, Z+1	; 0x01
    25d2:	82 81       	ldd	r24, Z+2	; 0x02
    25d4:	93 81       	ldd	r25, Z+3	; 0x03
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	4a e7       	ldi	r20, 0x7A	; 122
    25dc:	54 e4       	ldi	r21, 0x44	; 68
    25de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	8c af       	std	Y+60, r24	; 0x3c
    25e8:	9d af       	std	Y+61, r25	; 0x3d
    25ea:	ae af       	std	Y+62, r26	; 0x3e
    25ec:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ee:	6c ad       	ldd	r22, Y+60	; 0x3c
    25f0:	7d ad       	ldd	r23, Y+61	; 0x3d
    25f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    25f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	4a ef       	ldi	r20, 0xFA	; 250
    25fc:	54 e4       	ldi	r21, 0x44	; 68
    25fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	88 af       	std	Y+56, r24	; 0x38
    2608:	99 af       	std	Y+57, r25	; 0x39
    260a:	aa af       	std	Y+58, r26	; 0x3a
    260c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    260e:	68 ad       	ldd	r22, Y+56	; 0x38
    2610:	79 ad       	ldd	r23, Y+57	; 0x39
    2612:	8a ad       	ldd	r24, Y+58	; 0x3a
    2614:	9b ad       	ldd	r25, Y+59	; 0x3b
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 e8       	ldi	r20, 0x80	; 128
    261c:	5f e3       	ldi	r21, 0x3F	; 63
    261e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2622:	88 23       	and	r24, r24
    2624:	2c f4       	brge	.+10     	; 0x2630 <LCD_write_command_4bit+0x382>
		__ticks = 1;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	9f ab       	std	Y+55, r25	; 0x37
    262c:	8e ab       	std	Y+54, r24	; 0x36
    262e:	3f c0       	rjmp	.+126    	; 0x26ae <LCD_write_command_4bit+0x400>
	else if (__tmp > 65535)
    2630:	68 ad       	ldd	r22, Y+56	; 0x38
    2632:	79 ad       	ldd	r23, Y+57	; 0x39
    2634:	8a ad       	ldd	r24, Y+58	; 0x3a
    2636:	9b ad       	ldd	r25, Y+59	; 0x3b
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	3f ef       	ldi	r19, 0xFF	; 255
    263c:	4f e7       	ldi	r20, 0x7F	; 127
    263e:	57 e4       	ldi	r21, 0x47	; 71
    2640:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2644:	18 16       	cp	r1, r24
    2646:	4c f5       	brge	.+82     	; 0x269a <LCD_write_command_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2648:	6c ad       	ldd	r22, Y+60	; 0x3c
    264a:	7d ad       	ldd	r23, Y+61	; 0x3d
    264c:	8e ad       	ldd	r24, Y+62	; 0x3e
    264e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e2       	ldi	r20, 0x20	; 32
    2656:	51 e4       	ldi	r21, 0x41	; 65
    2658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	bc 01       	movw	r22, r24
    2662:	cd 01       	movw	r24, r26
    2664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	9f ab       	std	Y+55, r25	; 0x37
    266e:	8e ab       	std	Y+54, r24	; 0x36
    2670:	0f c0       	rjmp	.+30     	; 0x2690 <LCD_write_command_4bit+0x3e2>
    2672:	88 ec       	ldi	r24, 0xC8	; 200
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	9d ab       	std	Y+53, r25	; 0x35
    2678:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    267a:	8c a9       	ldd	r24, Y+52	; 0x34
    267c:	9d a9       	ldd	r25, Y+53	; 0x35
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	f1 f7       	brne	.-4      	; 0x267e <LCD_write_command_4bit+0x3d0>
    2682:	9d ab       	std	Y+53, r25	; 0x35
    2684:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2686:	8e a9       	ldd	r24, Y+54	; 0x36
    2688:	9f a9       	ldd	r25, Y+55	; 0x37
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	9f ab       	std	Y+55, r25	; 0x37
    268e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2690:	8e a9       	ldd	r24, Y+54	; 0x36
    2692:	9f a9       	ldd	r25, Y+55	; 0x37
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	69 f7       	brne	.-38     	; 0x2672 <LCD_write_command_4bit+0x3c4>
    2698:	2d c0       	rjmp	.+90     	; 0x26f4 <LCD_write_command_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269a:	68 ad       	ldd	r22, Y+56	; 0x38
    269c:	79 ad       	ldd	r23, Y+57	; 0x39
    269e:	8a ad       	ldd	r24, Y+58	; 0x3a
    26a0:	9b ad       	ldd	r25, Y+59	; 0x3b
    26a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	9f ab       	std	Y+55, r25	; 0x37
    26ac:	8e ab       	std	Y+54, r24	; 0x36
    26ae:	8e a9       	ldd	r24, Y+54	; 0x36
    26b0:	9f a9       	ldd	r25, Y+55	; 0x37
    26b2:	9b ab       	std	Y+51, r25	; 0x33
    26b4:	8a ab       	std	Y+50, r24	; 0x32
    26b6:	8a a9       	ldd	r24, Y+50	; 0x32
    26b8:	9b a9       	ldd	r25, Y+51	; 0x33
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <LCD_write_command_4bit+0x40c>
    26be:	9b ab       	std	Y+51, r25	; 0x33
    26c0:	8a ab       	std	Y+50, r24	; 0x32
    26c2:	18 c0       	rjmp	.+48     	; 0x26f4 <LCD_write_command_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26c4:	fe 01       	movw	r30, r28
    26c6:	ef 5b       	subi	r30, 0xBF	; 191
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	60 81       	ld	r22, Z
    26cc:	71 81       	ldd	r23, Z+1	; 0x01
    26ce:	82 81       	ldd	r24, Z+2	; 0x02
    26d0:	93 81       	ldd	r25, Z+3	; 0x03
    26d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	fe 01       	movw	r30, r28
    26dc:	e0 5c       	subi	r30, 0xC0	; 192
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	80 83       	st	Z, r24
    26e2:	fe 01       	movw	r30, r28
    26e4:	e0 5c       	subi	r30, 0xC0	; 192
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	80 81       	ld	r24, Z
    26ea:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26ec:	89 a9       	ldd	r24, Y+49	; 0x31
    26ee:	8a 95       	dec	r24
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <LCD_write_command_4bit+0x440>
    26f2:	89 ab       	std	Y+49, r24	; 0x31
	 *  any change in this sequence will result in a wrong behavior
	 *  i will try to make it more generic in the next versions
	 *
	 */

	for(u8 i = 4; i < 8; i++){
    26f4:	fe 01       	movw	r30, r28
    26f6:	ee 59       	subi	r30, 0x9E	; 158
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	84 e0       	ldi	r24, 0x04	; 4
    26fc:	80 83       	st	Z, r24
    26fe:	26 c0       	rjmp	.+76     	; 0x274c <LCD_write_command_4bit+0x49e>

		DIO_void_assign_pin(lcd_data_port, i, get_Bit(copy_command_4bit,i));
    2700:	fe 01       	movw	r30, r28
    2702:	ed 59       	subi	r30, 0x9D	; 157
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	80 81       	ld	r24, Z
    2708:	28 2f       	mov	r18, r24
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	fe 01       	movw	r30, r28
    270e:	ee 59       	subi	r30, 0x9E	; 158
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	80 81       	ld	r24, Z
    2714:	88 2f       	mov	r24, r24
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	a9 01       	movw	r20, r18
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <LCD_write_command_4bit+0x472>
    271c:	55 95       	asr	r21
    271e:	47 95       	ror	r20
    2720:	8a 95       	dec	r24
    2722:	e2 f7       	brpl	.-8      	; 0x271c <LCD_write_command_4bit+0x46e>
    2724:	ca 01       	movw	r24, r20
    2726:	98 2f       	mov	r25, r24
    2728:	91 70       	andi	r25, 0x01	; 1
    272a:	fe 01       	movw	r30, r28
    272c:	ee 59       	subi	r30, 0x9E	; 158
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	82 e0       	ldi	r24, 0x02	; 2
    2732:	60 81       	ld	r22, Z
    2734:	49 2f       	mov	r20, r25
    2736:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_void_assign_pin>
	 *  any change in this sequence will result in a wrong behavior
	 *  i will try to make it more generic in the next versions
	 *
	 */

	for(u8 i = 4; i < 8; i++){
    273a:	de 01       	movw	r26, r28
    273c:	ae 59       	subi	r26, 0x9E	; 158
    273e:	bf 4f       	sbci	r27, 0xFF	; 255
    2740:	fe 01       	movw	r30, r28
    2742:	ee 59       	subi	r30, 0x9E	; 158
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	80 81       	ld	r24, Z
    2748:	8f 5f       	subi	r24, 0xFF	; 255
    274a:	8c 93       	st	X, r24
    274c:	fe 01       	movw	r30, r28
    274e:	ee 59       	subi	r30, 0x9E	; 158
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	80 81       	ld	r24, Z
    2754:	88 30       	cpi	r24, 0x08	; 8
    2756:	a0 f2       	brcs	.-88     	; 0x2700 <LCD_write_command_4bit+0x452>
		// the for loop assigns the data value in the function input
		// by starting by the most significant 4 bits b4-b7

	}
	// set enable to low to send the lower nibble
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    2758:	83 e0       	ldi	r24, 0x03	; 3
    275a:	60 e0       	ldi	r22, 0x00	; 0
    275c:	0e 94 80 08 	call	0x1100	; 0x1100 <DIO_void_clear_pin>
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	a0 e2       	ldi	r26, 0x20	; 32
    2766:	b1 e4       	ldi	r27, 0x41	; 65
    2768:	8d a7       	std	Y+45, r24	; 0x2d
    276a:	9e a7       	std	Y+46, r25	; 0x2e
    276c:	af a7       	std	Y+47, r26	; 0x2f
    276e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2770:	6d a5       	ldd	r22, Y+45	; 0x2d
    2772:	7e a5       	ldd	r23, Y+46	; 0x2e
    2774:	8f a5       	ldd	r24, Y+47	; 0x2f
    2776:	98 a9       	ldd	r25, Y+48	; 0x30
    2778:	2b ea       	ldi	r18, 0xAB	; 171
    277a:	3a ea       	ldi	r19, 0xAA	; 170
    277c:	4a e2       	ldi	r20, 0x2A	; 42
    277e:	50 e4       	ldi	r21, 0x40	; 64
    2780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	89 a7       	std	Y+41, r24	; 0x29
    278a:	9a a7       	std	Y+42, r25	; 0x2a
    278c:	ab a7       	std	Y+43, r26	; 0x2b
    278e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2790:	69 a5       	ldd	r22, Y+41	; 0x29
    2792:	7a a5       	ldd	r23, Y+42	; 0x2a
    2794:	8b a5       	ldd	r24, Y+43	; 0x2b
    2796:	9c a5       	ldd	r25, Y+44	; 0x2c
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e8       	ldi	r20, 0x80	; 128
    279e:	5f e3       	ldi	r21, 0x3F	; 63
    27a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27a4:	88 23       	and	r24, r24
    27a6:	1c f4       	brge	.+6      	; 0x27ae <LCD_write_command_4bit+0x500>
		__ticks = 1;
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	88 a7       	std	Y+40, r24	; 0x28
    27ac:	91 c0       	rjmp	.+290    	; 0x28d0 <LCD_write_command_4bit+0x622>
	else if (__tmp > 255)
    27ae:	69 a5       	ldd	r22, Y+41	; 0x29
    27b0:	7a a5       	ldd	r23, Y+42	; 0x2a
    27b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    27b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	4f e7       	ldi	r20, 0x7F	; 127
    27bc:	53 e4       	ldi	r21, 0x43	; 67
    27be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27c2:	18 16       	cp	r1, r24
    27c4:	0c f0       	brlt	.+2      	; 0x27c8 <LCD_write_command_4bit+0x51a>
    27c6:	7b c0       	rjmp	.+246    	; 0x28be <LCD_write_command_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    27c8:	6d a5       	ldd	r22, Y+45	; 0x2d
    27ca:	7e a5       	ldd	r23, Y+46	; 0x2e
    27cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ce:	98 a9       	ldd	r25, Y+48	; 0x30
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	4a e7       	ldi	r20, 0x7A	; 122
    27d6:	54 e4       	ldi	r21, 0x44	; 68
    27d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	8c a3       	std	Y+36, r24	; 0x24
    27e2:	9d a3       	std	Y+37, r25	; 0x25
    27e4:	ae a3       	std	Y+38, r26	; 0x26
    27e6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e8:	6c a1       	ldd	r22, Y+36	; 0x24
    27ea:	7d a1       	ldd	r23, Y+37	; 0x25
    27ec:	8e a1       	ldd	r24, Y+38	; 0x26
    27ee:	9f a1       	ldd	r25, Y+39	; 0x27
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	4a ef       	ldi	r20, 0xFA	; 250
    27f6:	54 e4       	ldi	r21, 0x44	; 68
    27f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	88 a3       	std	Y+32, r24	; 0x20
    2802:	99 a3       	std	Y+33, r25	; 0x21
    2804:	aa a3       	std	Y+34, r26	; 0x22
    2806:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2808:	68 a1       	ldd	r22, Y+32	; 0x20
    280a:	79 a1       	ldd	r23, Y+33	; 0x21
    280c:	8a a1       	ldd	r24, Y+34	; 0x22
    280e:	9b a1       	ldd	r25, Y+35	; 0x23
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e8       	ldi	r20, 0x80	; 128
    2816:	5f e3       	ldi	r21, 0x3F	; 63
    2818:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    281c:	88 23       	and	r24, r24
    281e:	2c f4       	brge	.+10     	; 0x282a <LCD_write_command_4bit+0x57c>
		__ticks = 1;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	9f 8f       	std	Y+31, r25	; 0x1f
    2826:	8e 8f       	std	Y+30, r24	; 0x1e
    2828:	3f c0       	rjmp	.+126    	; 0x28a8 <LCD_write_command_4bit+0x5fa>
	else if (__tmp > 65535)
    282a:	68 a1       	ldd	r22, Y+32	; 0x20
    282c:	79 a1       	ldd	r23, Y+33	; 0x21
    282e:	8a a1       	ldd	r24, Y+34	; 0x22
    2830:	9b a1       	ldd	r25, Y+35	; 0x23
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	3f ef       	ldi	r19, 0xFF	; 255
    2836:	4f e7       	ldi	r20, 0x7F	; 127
    2838:	57 e4       	ldi	r21, 0x47	; 71
    283a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    283e:	18 16       	cp	r1, r24
    2840:	4c f5       	brge	.+82     	; 0x2894 <LCD_write_command_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2842:	6c a1       	ldd	r22, Y+36	; 0x24
    2844:	7d a1       	ldd	r23, Y+37	; 0x25
    2846:	8e a1       	ldd	r24, Y+38	; 0x26
    2848:	9f a1       	ldd	r25, Y+39	; 0x27
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e2       	ldi	r20, 0x20	; 32
    2850:	51 e4       	ldi	r21, 0x41	; 65
    2852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	9f 8f       	std	Y+31, r25	; 0x1f
    2868:	8e 8f       	std	Y+30, r24	; 0x1e
    286a:	0f c0       	rjmp	.+30     	; 0x288a <LCD_write_command_4bit+0x5dc>
    286c:	88 ec       	ldi	r24, 0xC8	; 200
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	9d 8f       	std	Y+29, r25	; 0x1d
    2872:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2874:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2876:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	f1 f7       	brne	.-4      	; 0x2878 <LCD_write_command_4bit+0x5ca>
    287c:	9d 8f       	std	Y+29, r25	; 0x1d
    287e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2880:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2882:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	9f 8f       	std	Y+31, r25	; 0x1f
    2888:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    288c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	69 f7       	brne	.-38     	; 0x286c <LCD_write_command_4bit+0x5be>
    2892:	24 c0       	rjmp	.+72     	; 0x28dc <LCD_write_command_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2894:	68 a1       	ldd	r22, Y+32	; 0x20
    2896:	79 a1       	ldd	r23, Y+33	; 0x21
    2898:	8a a1       	ldd	r24, Y+34	; 0x22
    289a:	9b a1       	ldd	r25, Y+35	; 0x23
    289c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	9f 8f       	std	Y+31, r25	; 0x1f
    28a6:	8e 8f       	std	Y+30, r24	; 0x1e
    28a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28aa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    28ac:	9b 8f       	std	Y+27, r25	; 0x1b
    28ae:	8a 8f       	std	Y+26, r24	; 0x1a
    28b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28b2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <LCD_write_command_4bit+0x606>
    28b8:	9b 8f       	std	Y+27, r25	; 0x1b
    28ba:	8a 8f       	std	Y+26, r24	; 0x1a
    28bc:	0f c0       	rjmp	.+30     	; 0x28dc <LCD_write_command_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28be:	69 a5       	ldd	r22, Y+41	; 0x29
    28c0:	7a a5       	ldd	r23, Y+42	; 0x2a
    28c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    28c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    28c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	88 a7       	std	Y+40, r24	; 0x28
    28d0:	88 a5       	ldd	r24, Y+40	; 0x28
    28d2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28d4:	89 8d       	ldd	r24, Y+25	; 0x19
    28d6:	8a 95       	dec	r24
    28d8:	f1 f7       	brne	.-4      	; 0x28d6 <LCD_write_command_4bit+0x628>
    28da:	89 8f       	std	Y+25, r24	; 0x19
	//delay to smooth things out
	_delay_us(10);
	//enable HIGH
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    28dc:	83 e0       	ldi	r24, 0x03	; 3
    28de:	60 e0       	ldi	r22, 0x00	; 0
    28e0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_void_set_pin>
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	a0 e8       	ldi	r26, 0x80	; 128
    28ea:	bf e3       	ldi	r27, 0x3F	; 63
    28ec:	8d 8b       	std	Y+21, r24	; 0x15
    28ee:	9e 8b       	std	Y+22, r25	; 0x16
    28f0:	af 8b       	std	Y+23, r26	; 0x17
    28f2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28f4:	6d 89       	ldd	r22, Y+21	; 0x15
    28f6:	7e 89       	ldd	r23, Y+22	; 0x16
    28f8:	8f 89       	ldd	r24, Y+23	; 0x17
    28fa:	98 8d       	ldd	r25, Y+24	; 0x18
    28fc:	2b ea       	ldi	r18, 0xAB	; 171
    28fe:	3a ea       	ldi	r19, 0xAA	; 170
    2900:	4a e2       	ldi	r20, 0x2A	; 42
    2902:	50 e4       	ldi	r21, 0x40	; 64
    2904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	89 8b       	std	Y+17, r24	; 0x11
    290e:	9a 8b       	std	Y+18, r25	; 0x12
    2910:	ab 8b       	std	Y+19, r26	; 0x13
    2912:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2914:	69 89       	ldd	r22, Y+17	; 0x11
    2916:	7a 89       	ldd	r23, Y+18	; 0x12
    2918:	8b 89       	ldd	r24, Y+19	; 0x13
    291a:	9c 89       	ldd	r25, Y+20	; 0x14
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	40 e8       	ldi	r20, 0x80	; 128
    2922:	5f e3       	ldi	r21, 0x3F	; 63
    2924:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2928:	88 23       	and	r24, r24
    292a:	1c f4       	brge	.+6      	; 0x2932 <LCD_write_command_4bit+0x684>
		__ticks = 1;
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	88 8b       	std	Y+16, r24	; 0x10
    2930:	91 c0       	rjmp	.+290    	; 0x2a54 <LCD_write_command_4bit+0x7a6>
	else if (__tmp > 255)
    2932:	69 89       	ldd	r22, Y+17	; 0x11
    2934:	7a 89       	ldd	r23, Y+18	; 0x12
    2936:	8b 89       	ldd	r24, Y+19	; 0x13
    2938:	9c 89       	ldd	r25, Y+20	; 0x14
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	4f e7       	ldi	r20, 0x7F	; 127
    2940:	53 e4       	ldi	r21, 0x43	; 67
    2942:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2946:	18 16       	cp	r1, r24
    2948:	0c f0       	brlt	.+2      	; 0x294c <LCD_write_command_4bit+0x69e>
    294a:	7b c0       	rjmp	.+246    	; 0x2a42 <LCD_write_command_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    294c:	6d 89       	ldd	r22, Y+21	; 0x15
    294e:	7e 89       	ldd	r23, Y+22	; 0x16
    2950:	8f 89       	ldd	r24, Y+23	; 0x17
    2952:	98 8d       	ldd	r25, Y+24	; 0x18
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	4a e7       	ldi	r20, 0x7A	; 122
    295a:	54 e4       	ldi	r21, 0x44	; 68
    295c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	8c 87       	std	Y+12, r24	; 0x0c
    2966:	9d 87       	std	Y+13, r25	; 0x0d
    2968:	ae 87       	std	Y+14, r26	; 0x0e
    296a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    296c:	6c 85       	ldd	r22, Y+12	; 0x0c
    296e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2970:	8e 85       	ldd	r24, Y+14	; 0x0e
    2972:	9f 85       	ldd	r25, Y+15	; 0x0f
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	4a ef       	ldi	r20, 0xFA	; 250
    297a:	54 e4       	ldi	r21, 0x44	; 68
    297c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	88 87       	std	Y+8, r24	; 0x08
    2986:	99 87       	std	Y+9, r25	; 0x09
    2988:	aa 87       	std	Y+10, r26	; 0x0a
    298a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    298c:	68 85       	ldd	r22, Y+8	; 0x08
    298e:	79 85       	ldd	r23, Y+9	; 0x09
    2990:	8a 85       	ldd	r24, Y+10	; 0x0a
    2992:	9b 85       	ldd	r25, Y+11	; 0x0b
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	40 e8       	ldi	r20, 0x80	; 128
    299a:	5f e3       	ldi	r21, 0x3F	; 63
    299c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29a0:	88 23       	and	r24, r24
    29a2:	2c f4       	brge	.+10     	; 0x29ae <LCD_write_command_4bit+0x700>
		__ticks = 1;
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	9f 83       	std	Y+7, r25	; 0x07
    29aa:	8e 83       	std	Y+6, r24	; 0x06
    29ac:	3f c0       	rjmp	.+126    	; 0x2a2c <LCD_write_command_4bit+0x77e>
	else if (__tmp > 65535)
    29ae:	68 85       	ldd	r22, Y+8	; 0x08
    29b0:	79 85       	ldd	r23, Y+9	; 0x09
    29b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    29b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	3f ef       	ldi	r19, 0xFF	; 255
    29ba:	4f e7       	ldi	r20, 0x7F	; 127
    29bc:	57 e4       	ldi	r21, 0x47	; 71
    29be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29c2:	18 16       	cp	r1, r24
    29c4:	4c f5       	brge	.+82     	; 0x2a18 <LCD_write_command_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c6:	6c 85       	ldd	r22, Y+12	; 0x0c
    29c8:	7d 85       	ldd	r23, Y+13	; 0x0d
    29ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    29cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e2       	ldi	r20, 0x20	; 32
    29d4:	51 e4       	ldi	r21, 0x41	; 65
    29d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	bc 01       	movw	r22, r24
    29e0:	cd 01       	movw	r24, r26
    29e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	9f 83       	std	Y+7, r25	; 0x07
    29ec:	8e 83       	std	Y+6, r24	; 0x06
    29ee:	0f c0       	rjmp	.+30     	; 0x2a0e <LCD_write_command_4bit+0x760>
    29f0:	88 ec       	ldi	r24, 0xC8	; 200
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	9d 83       	std	Y+5, r25	; 0x05
    29f6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29f8:	8c 81       	ldd	r24, Y+4	; 0x04
    29fa:	9d 81       	ldd	r25, Y+5	; 0x05
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	f1 f7       	brne	.-4      	; 0x29fc <LCD_write_command_4bit+0x74e>
    2a00:	9d 83       	std	Y+5, r25	; 0x05
    2a02:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a04:	8e 81       	ldd	r24, Y+6	; 0x06
    2a06:	9f 81       	ldd	r25, Y+7	; 0x07
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	9f 83       	std	Y+7, r25	; 0x07
    2a0c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a10:	9f 81       	ldd	r25, Y+7	; 0x07
    2a12:	00 97       	sbiw	r24, 0x00	; 0
    2a14:	69 f7       	brne	.-38     	; 0x29f0 <LCD_write_command_4bit+0x742>
    2a16:	24 c0       	rjmp	.+72     	; 0x2a60 <LCD_write_command_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a18:	68 85       	ldd	r22, Y+8	; 0x08
    2a1a:	79 85       	ldd	r23, Y+9	; 0x09
    2a1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a1e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	9f 83       	std	Y+7, r25	; 0x07
    2a2a:	8e 83       	std	Y+6, r24	; 0x06
    2a2c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a2e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a30:	9b 83       	std	Y+3, r25	; 0x03
    2a32:	8a 83       	std	Y+2, r24	; 0x02
    2a34:	8a 81       	ldd	r24, Y+2	; 0x02
    2a36:	9b 81       	ldd	r25, Y+3	; 0x03
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	f1 f7       	brne	.-4      	; 0x2a38 <LCD_write_command_4bit+0x78a>
    2a3c:	9b 83       	std	Y+3, r25	; 0x03
    2a3e:	8a 83       	std	Y+2, r24	; 0x02
    2a40:	0f c0       	rjmp	.+30     	; 0x2a60 <LCD_write_command_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a42:	69 89       	ldd	r22, Y+17	; 0x11
    2a44:	7a 89       	ldd	r23, Y+18	; 0x12
    2a46:	8b 89       	ldd	r24, Y+19	; 0x13
    2a48:	9c 89       	ldd	r25, Y+20	; 0x14
    2a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4e:	dc 01       	movw	r26, r24
    2a50:	cb 01       	movw	r24, r22
    2a52:	88 8b       	std	Y+16, r24	; 0x10
    2a54:	88 89       	ldd	r24, Y+16	; 0x10
    2a56:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	8a 95       	dec	r24
    2a5c:	f1 f7       	brne	.-4      	; 0x2a5a <LCD_write_command_4bit+0x7ac>
    2a5e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	//send lower nibble
	for(u8 i = 4; i < 8; i++){
    2a60:	fe 01       	movw	r30, r28
    2a62:	ef 59       	subi	r30, 0x9F	; 159
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	84 e0       	ldi	r24, 0x04	; 4
    2a68:	80 83       	st	Z, r24
    2a6a:	27 c0       	rjmp	.+78     	; 0x2aba <LCD_write_command_4bit+0x80c>

			DIO_void_assign_pin(lcd_data_port, i, get_Bit(copy_command_4bit,i-4));
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	ed 59       	subi	r30, 0x9D	; 157
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	80 81       	ld	r24, Z
    2a74:	28 2f       	mov	r18, r24
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	fe 01       	movw	r30, r28
    2a7a:	ef 59       	subi	r30, 0x9F	; 159
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	80 81       	ld	r24, Z
    2a80:	88 2f       	mov	r24, r24
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	04 97       	sbiw	r24, 0x04	; 4
    2a86:	f9 01       	movw	r30, r18
    2a88:	02 c0       	rjmp	.+4      	; 0x2a8e <LCD_write_command_4bit+0x7e0>
    2a8a:	f5 95       	asr	r31
    2a8c:	e7 95       	ror	r30
    2a8e:	8a 95       	dec	r24
    2a90:	e2 f7       	brpl	.-8      	; 0x2a8a <LCD_write_command_4bit+0x7dc>
    2a92:	cf 01       	movw	r24, r30
    2a94:	98 2f       	mov	r25, r24
    2a96:	91 70       	andi	r25, 0x01	; 1
    2a98:	fe 01       	movw	r30, r28
    2a9a:	ef 59       	subi	r30, 0x9F	; 159
    2a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9e:	82 e0       	ldi	r24, 0x02	; 2
    2aa0:	60 81       	ld	r22, Z
    2aa2:	49 2f       	mov	r20, r25
    2aa4:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_void_assign_pin>
	_delay_us(10);
	//enable HIGH
	DIO_void_set_pin(lcd_control_port, lcd_enable);
	_delay_us(1);
	//send lower nibble
	for(u8 i = 4; i < 8; i++){
    2aa8:	de 01       	movw	r26, r28
    2aaa:	af 59       	subi	r26, 0x9F	; 159
    2aac:	bf 4f       	sbci	r27, 0xFF	; 255
    2aae:	fe 01       	movw	r30, r28
    2ab0:	ef 59       	subi	r30, 0x9F	; 159
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	80 81       	ld	r24, Z
    2ab6:	8f 5f       	subi	r24, 0xFF	; 255
    2ab8:	8c 93       	st	X, r24
    2aba:	fe 01       	movw	r30, r28
    2abc:	ef 59       	subi	r30, 0x9F	; 159
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	80 81       	ld	r24, Z
    2ac2:	88 30       	cpi	r24, 0x08	; 8
    2ac4:	98 f2       	brcs	.-90     	; 0x2a6c <LCD_write_command_4bit+0x7be>
			// the for loop assigns the data value in the function input
			// by starting by the least significant 4 bits b0-b3

		}
	//enable low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    2ac6:	83 e0       	ldi	r24, 0x03	; 3
    2ac8:	60 e0       	ldi	r22, 0x00	; 0
    2aca:	0e 94 80 08 	call	0x1100	; 0x1100 <DIO_void_clear_pin>


}
    2ace:	cd 59       	subi	r28, 0x9D	; 157
    2ad0:	df 4f       	sbci	r29, 0xFF	; 255
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
    2adc:	cf 91       	pop	r28
    2ade:	df 91       	pop	r29
    2ae0:	1f 91       	pop	r17
    2ae2:	0f 91       	pop	r16
    2ae4:	08 95       	ret

00002ae6 <LCD_function_Set_4bit>:

static void LCD_function_Set_4bit(){
    2ae6:	0f 93       	push	r16
    2ae8:	1f 93       	push	r17
    2aea:	df 93       	push	r29
    2aec:	cf 93       	push	r28
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
    2af2:	cb 5a       	subi	r28, 0xAB	; 171
    2af4:	d0 40       	sbci	r29, 0x00	; 0
    2af6:	0f b6       	in	r0, 0x3f	; 63
    2af8:	f8 94       	cli
    2afa:	de bf       	out	0x3e, r29	; 62
    2afc:	0f be       	out	0x3f, r0	; 63
    2afe:	cd bf       	out	0x3d, r28	; 61
			 *
			 */



	DIO_void_clear_pin(lcd_control_port, lcd_RS);// RS:0 to select instruction register
    2b00:	83 e0       	ldi	r24, 0x03	; 3
    2b02:	62 e0       	ldi	r22, 0x02	; 2
    2b04:	0e 94 80 08 	call	0x1100	; 0x1100 <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_control_port, lcd_RW);// RW:0 write operation
    2b08:	83 e0       	ldi	r24, 0x03	; 3
    2b0a:	61 e0       	ldi	r22, 0x01	; 1
    2b0c:	0e 94 80 08 	call	0x1100	; 0x1100 <DIO_void_clear_pin>
    2b10:	fe 01       	movw	r30, r28
    2b12:	eb 55       	subi	r30, 0x5B	; 91
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	80 e0       	ldi	r24, 0x00	; 0
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	a0 e8       	ldi	r26, 0x80	; 128
    2b1c:	bf e3       	ldi	r27, 0x3F	; 63
    2b1e:	80 83       	st	Z, r24
    2b20:	91 83       	std	Z+1, r25	; 0x01
    2b22:	a2 83       	std	Z+2, r26	; 0x02
    2b24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b26:	8e 01       	movw	r16, r28
    2b28:	0f 55       	subi	r16, 0x5F	; 95
    2b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	eb 55       	subi	r30, 0x5B	; 91
    2b30:	ff 4f       	sbci	r31, 0xFF	; 255
    2b32:	60 81       	ld	r22, Z
    2b34:	71 81       	ldd	r23, Z+1	; 0x01
    2b36:	82 81       	ldd	r24, Z+2	; 0x02
    2b38:	93 81       	ldd	r25, Z+3	; 0x03
    2b3a:	2b ea       	ldi	r18, 0xAB	; 171
    2b3c:	3a ea       	ldi	r19, 0xAA	; 170
    2b3e:	4a e2       	ldi	r20, 0x2A	; 42
    2b40:	50 e4       	ldi	r21, 0x40	; 64
    2b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	f8 01       	movw	r30, r16
    2b4c:	80 83       	st	Z, r24
    2b4e:	91 83       	std	Z+1, r25	; 0x01
    2b50:	a2 83       	std	Z+2, r26	; 0x02
    2b52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b54:	fe 01       	movw	r30, r28
    2b56:	ef 55       	subi	r30, 0x5F	; 95
    2b58:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5a:	60 81       	ld	r22, Z
    2b5c:	71 81       	ldd	r23, Z+1	; 0x01
    2b5e:	82 81       	ldd	r24, Z+2	; 0x02
    2b60:	93 81       	ldd	r25, Z+3	; 0x03
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	40 e8       	ldi	r20, 0x80	; 128
    2b68:	5f e3       	ldi	r21, 0x3F	; 63
    2b6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b6e:	88 23       	and	r24, r24
    2b70:	34 f4       	brge	.+12     	; 0x2b7e <LCD_function_Set_4bit+0x98>
		__ticks = 1;
    2b72:	fe 01       	movw	r30, r28
    2b74:	e0 56       	subi	r30, 0x60	; 96
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	80 83       	st	Z, r24
    2b7c:	e0 c0       	rjmp	.+448    	; 0x2d3e <LCD_function_Set_4bit+0x258>
	else if (__tmp > 255)
    2b7e:	fe 01       	movw	r30, r28
    2b80:	ef 55       	subi	r30, 0x5F	; 95
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	60 81       	ld	r22, Z
    2b86:	71 81       	ldd	r23, Z+1	; 0x01
    2b88:	82 81       	ldd	r24, Z+2	; 0x02
    2b8a:	93 81       	ldd	r25, Z+3	; 0x03
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	4f e7       	ldi	r20, 0x7F	; 127
    2b92:	53 e4       	ldi	r21, 0x43	; 67
    2b94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b98:	18 16       	cp	r1, r24
    2b9a:	0c f0       	brlt	.+2      	; 0x2b9e <LCD_function_Set_4bit+0xb8>
    2b9c:	c0 c0       	rjmp	.+384    	; 0x2d1e <LCD_function_Set_4bit+0x238>
	{
		_delay_ms(__us / 1000.0);
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	eb 55       	subi	r30, 0x5B	; 91
    2ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba4:	60 81       	ld	r22, Z
    2ba6:	71 81       	ldd	r23, Z+1	; 0x01
    2ba8:	82 81       	ldd	r24, Z+2	; 0x02
    2baa:	93 81       	ldd	r25, Z+3	; 0x03
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	4a e7       	ldi	r20, 0x7A	; 122
    2bb2:	54 e4       	ldi	r21, 0x44	; 68
    2bb4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e4 56       	subi	r30, 0x64	; 100
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	80 83       	st	Z, r24
    2bc4:	91 83       	std	Z+1, r25	; 0x01
    2bc6:	a2 83       	std	Z+2, r26	; 0x02
    2bc8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bca:	8e 01       	movw	r16, r28
    2bcc:	08 56       	subi	r16, 0x68	; 104
    2bce:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	e4 56       	subi	r30, 0x64	; 100
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	60 81       	ld	r22, Z
    2bd8:	71 81       	ldd	r23, Z+1	; 0x01
    2bda:	82 81       	ldd	r24, Z+2	; 0x02
    2bdc:	93 81       	ldd	r25, Z+3	; 0x03
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	4a ef       	ldi	r20, 0xFA	; 250
    2be4:	54 e4       	ldi	r21, 0x44	; 68
    2be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	f8 01       	movw	r30, r16
    2bf0:	80 83       	st	Z, r24
    2bf2:	91 83       	std	Z+1, r25	; 0x01
    2bf4:	a2 83       	std	Z+2, r26	; 0x02
    2bf6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	e8 56       	subi	r30, 0x68	; 104
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	60 81       	ld	r22, Z
    2c00:	71 81       	ldd	r23, Z+1	; 0x01
    2c02:	82 81       	ldd	r24, Z+2	; 0x02
    2c04:	93 81       	ldd	r25, Z+3	; 0x03
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	40 e8       	ldi	r20, 0x80	; 128
    2c0c:	5f e3       	ldi	r21, 0x3F	; 63
    2c0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c12:	88 23       	and	r24, r24
    2c14:	44 f4       	brge	.+16     	; 0x2c26 <LCD_function_Set_4bit+0x140>
		__ticks = 1;
    2c16:	fe 01       	movw	r30, r28
    2c18:	ea 56       	subi	r30, 0x6A	; 106
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	91 83       	std	Z+1, r25	; 0x01
    2c22:	80 83       	st	Z, r24
    2c24:	64 c0       	rjmp	.+200    	; 0x2cee <LCD_function_Set_4bit+0x208>
	else if (__tmp > 65535)
    2c26:	fe 01       	movw	r30, r28
    2c28:	e8 56       	subi	r30, 0x68	; 104
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	60 81       	ld	r22, Z
    2c2e:	71 81       	ldd	r23, Z+1	; 0x01
    2c30:	82 81       	ldd	r24, Z+2	; 0x02
    2c32:	93 81       	ldd	r25, Z+3	; 0x03
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	3f ef       	ldi	r19, 0xFF	; 255
    2c38:	4f e7       	ldi	r20, 0x7F	; 127
    2c3a:	57 e4       	ldi	r21, 0x47	; 71
    2c3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c40:	18 16       	cp	r1, r24
    2c42:	0c f0       	brlt	.+2      	; 0x2c46 <LCD_function_Set_4bit+0x160>
    2c44:	43 c0       	rjmp	.+134    	; 0x2ccc <LCD_function_Set_4bit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c46:	fe 01       	movw	r30, r28
    2c48:	e4 56       	subi	r30, 0x64	; 100
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	60 81       	ld	r22, Z
    2c4e:	71 81       	ldd	r23, Z+1	; 0x01
    2c50:	82 81       	ldd	r24, Z+2	; 0x02
    2c52:	93 81       	ldd	r25, Z+3	; 0x03
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	40 e2       	ldi	r20, 0x20	; 32
    2c5a:	51 e4       	ldi	r21, 0x41	; 65
    2c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	8e 01       	movw	r16, r28
    2c66:	0a 56       	subi	r16, 0x6A	; 106
    2c68:	1f 4f       	sbci	r17, 0xFF	; 255
    2c6a:	bc 01       	movw	r22, r24
    2c6c:	cd 01       	movw	r24, r26
    2c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	f8 01       	movw	r30, r16
    2c78:	91 83       	std	Z+1, r25	; 0x01
    2c7a:	80 83       	st	Z, r24
    2c7c:	1f c0       	rjmp	.+62     	; 0x2cbc <LCD_function_Set_4bit+0x1d6>
    2c7e:	fe 01       	movw	r30, r28
    2c80:	ec 56       	subi	r30, 0x6C	; 108
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	88 ec       	ldi	r24, 0xC8	; 200
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	91 83       	std	Z+1, r25	; 0x01
    2c8a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	ec 56       	subi	r30, 0x6C	; 108
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	80 81       	ld	r24, Z
    2c94:	91 81       	ldd	r25, Z+1	; 0x01
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <LCD_function_Set_4bit+0x1b0>
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	ec 56       	subi	r30, 0x6C	; 108
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	91 83       	std	Z+1, r25	; 0x01
    2ca2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca4:	de 01       	movw	r26, r28
    2ca6:	aa 56       	subi	r26, 0x6A	; 106
    2ca8:	bf 4f       	sbci	r27, 0xFF	; 255
    2caa:	fe 01       	movw	r30, r28
    2cac:	ea 56       	subi	r30, 0x6A	; 106
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	80 81       	ld	r24, Z
    2cb2:	91 81       	ldd	r25, Z+1	; 0x01
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	11 96       	adiw	r26, 0x01	; 1
    2cb8:	9c 93       	st	X, r25
    2cba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	ea 56       	subi	r30, 0x6A	; 106
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	80 81       	ld	r24, Z
    2cc4:	91 81       	ldd	r25, Z+1	; 0x01
    2cc6:	00 97       	sbiw	r24, 0x00	; 0
    2cc8:	d1 f6       	brne	.-76     	; 0x2c7e <LCD_function_Set_4bit+0x198>
    2cca:	4b c0       	rjmp	.+150    	; 0x2d62 <LCD_function_Set_4bit+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ccc:	8e 01       	movw	r16, r28
    2cce:	0a 56       	subi	r16, 0x6A	; 106
    2cd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	e8 56       	subi	r30, 0x68	; 104
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	60 81       	ld	r22, Z
    2cda:	71 81       	ldd	r23, Z+1	; 0x01
    2cdc:	82 81       	ldd	r24, Z+2	; 0x02
    2cde:	93 81       	ldd	r25, Z+3	; 0x03
    2ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	f8 01       	movw	r30, r16
    2cea:	91 83       	std	Z+1, r25	; 0x01
    2cec:	80 83       	st	Z, r24
    2cee:	de 01       	movw	r26, r28
    2cf0:	ae 56       	subi	r26, 0x6E	; 110
    2cf2:	bf 4f       	sbci	r27, 0xFF	; 255
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	ea 56       	subi	r30, 0x6A	; 106
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	80 81       	ld	r24, Z
    2cfc:	91 81       	ldd	r25, Z+1	; 0x01
    2cfe:	11 96       	adiw	r26, 0x01	; 1
    2d00:	9c 93       	st	X, r25
    2d02:	8e 93       	st	-X, r24
    2d04:	fe 01       	movw	r30, r28
    2d06:	ee 56       	subi	r30, 0x6E	; 110
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	80 81       	ld	r24, Z
    2d0c:	91 81       	ldd	r25, Z+1	; 0x01
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	f1 f7       	brne	.-4      	; 0x2d0e <LCD_function_Set_4bit+0x228>
    2d12:	fe 01       	movw	r30, r28
    2d14:	ee 56       	subi	r30, 0x6E	; 110
    2d16:	ff 4f       	sbci	r31, 0xFF	; 255
    2d18:	91 83       	std	Z+1, r25	; 0x01
    2d1a:	80 83       	st	Z, r24
    2d1c:	22 c0       	rjmp	.+68     	; 0x2d62 <LCD_function_Set_4bit+0x27c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d1e:	8e 01       	movw	r16, r28
    2d20:	00 56       	subi	r16, 0x60	; 96
    2d22:	1f 4f       	sbci	r17, 0xFF	; 255
    2d24:	fe 01       	movw	r30, r28
    2d26:	ef 55       	subi	r30, 0x5F	; 95
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	60 81       	ld	r22, Z
    2d2c:	71 81       	ldd	r23, Z+1	; 0x01
    2d2e:	82 81       	ldd	r24, Z+2	; 0x02
    2d30:	93 81       	ldd	r25, Z+3	; 0x03
    2d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	f8 01       	movw	r30, r16
    2d3c:	80 83       	st	Z, r24
    2d3e:	de 01       	movw	r26, r28
    2d40:	af 56       	subi	r26, 0x6F	; 111
    2d42:	bf 4f       	sbci	r27, 0xFF	; 255
    2d44:	fe 01       	movw	r30, r28
    2d46:	e0 56       	subi	r30, 0x60	; 96
    2d48:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4a:	80 81       	ld	r24, Z
    2d4c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d4e:	fe 01       	movw	r30, r28
    2d50:	ef 56       	subi	r30, 0x6F	; 111
    2d52:	ff 4f       	sbci	r31, 0xFF	; 255
    2d54:	80 81       	ld	r24, Z
    2d56:	8a 95       	dec	r24
    2d58:	f1 f7       	brne	.-4      	; 0x2d56 <LCD_function_Set_4bit+0x270>
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	ef 56       	subi	r30, 0x6F	; 111
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	80 83       	st	Z, r24
	_delay_us(1);
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
    2d62:	83 e0       	ldi	r24, 0x03	; 3
    2d64:	60 e0       	ldi	r22, 0x00	; 0
    2d66:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_void_set_pin>
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	e3 57       	subi	r30, 0x73	; 115
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	a0 e8       	ldi	r26, 0x80	; 128
    2d76:	bf e3       	ldi	r27, 0x3F	; 63
    2d78:	80 83       	st	Z, r24
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	a2 83       	std	Z+2, r26	; 0x02
    2d7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d80:	8e 01       	movw	r16, r28
    2d82:	07 57       	subi	r16, 0x77	; 119
    2d84:	1f 4f       	sbci	r17, 0xFF	; 255
    2d86:	fe 01       	movw	r30, r28
    2d88:	e3 57       	subi	r30, 0x73	; 115
    2d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8c:	60 81       	ld	r22, Z
    2d8e:	71 81       	ldd	r23, Z+1	; 0x01
    2d90:	82 81       	ldd	r24, Z+2	; 0x02
    2d92:	93 81       	ldd	r25, Z+3	; 0x03
    2d94:	2b ea       	ldi	r18, 0xAB	; 171
    2d96:	3a ea       	ldi	r19, 0xAA	; 170
    2d98:	4a e2       	ldi	r20, 0x2A	; 42
    2d9a:	50 e4       	ldi	r21, 0x40	; 64
    2d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	f8 01       	movw	r30, r16
    2da6:	80 83       	st	Z, r24
    2da8:	91 83       	std	Z+1, r25	; 0x01
    2daa:	a2 83       	std	Z+2, r26	; 0x02
    2dac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dae:	fe 01       	movw	r30, r28
    2db0:	e7 57       	subi	r30, 0x77	; 119
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	60 81       	ld	r22, Z
    2db6:	71 81       	ldd	r23, Z+1	; 0x01
    2db8:	82 81       	ldd	r24, Z+2	; 0x02
    2dba:	93 81       	ldd	r25, Z+3	; 0x03
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e8       	ldi	r20, 0x80	; 128
    2dc2:	5f e3       	ldi	r21, 0x3F	; 63
    2dc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dc8:	88 23       	and	r24, r24
    2dca:	34 f4       	brge	.+12     	; 0x2dd8 <LCD_function_Set_4bit+0x2f2>
		__ticks = 1;
    2dcc:	fe 01       	movw	r30, r28
    2dce:	e8 57       	subi	r30, 0x78	; 120
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	80 83       	st	Z, r24
    2dd6:	e0 c0       	rjmp	.+448    	; 0x2f98 <LCD_function_Set_4bit+0x4b2>
	else if (__tmp > 255)
    2dd8:	fe 01       	movw	r30, r28
    2dda:	e7 57       	subi	r30, 0x77	; 119
    2ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dde:	60 81       	ld	r22, Z
    2de0:	71 81       	ldd	r23, Z+1	; 0x01
    2de2:	82 81       	ldd	r24, Z+2	; 0x02
    2de4:	93 81       	ldd	r25, Z+3	; 0x03
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	4f e7       	ldi	r20, 0x7F	; 127
    2dec:	53 e4       	ldi	r21, 0x43	; 67
    2dee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2df2:	18 16       	cp	r1, r24
    2df4:	0c f0       	brlt	.+2      	; 0x2df8 <LCD_function_Set_4bit+0x312>
    2df6:	c0 c0       	rjmp	.+384    	; 0x2f78 <LCD_function_Set_4bit+0x492>
	{
		_delay_ms(__us / 1000.0);
    2df8:	fe 01       	movw	r30, r28
    2dfa:	e3 57       	subi	r30, 0x73	; 115
    2dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfe:	60 81       	ld	r22, Z
    2e00:	71 81       	ldd	r23, Z+1	; 0x01
    2e02:	82 81       	ldd	r24, Z+2	; 0x02
    2e04:	93 81       	ldd	r25, Z+3	; 0x03
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	4a e7       	ldi	r20, 0x7A	; 122
    2e0c:	54 e4       	ldi	r21, 0x44	; 68
    2e0e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	fe 01       	movw	r30, r28
    2e18:	ec 57       	subi	r30, 0x7C	; 124
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	80 83       	st	Z, r24
    2e1e:	91 83       	std	Z+1, r25	; 0x01
    2e20:	a2 83       	std	Z+2, r26	; 0x02
    2e22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e24:	8e 01       	movw	r16, r28
    2e26:	00 58       	subi	r16, 0x80	; 128
    2e28:	1f 4f       	sbci	r17, 0xFF	; 255
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	ec 57       	subi	r30, 0x7C	; 124
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	60 81       	ld	r22, Z
    2e32:	71 81       	ldd	r23, Z+1	; 0x01
    2e34:	82 81       	ldd	r24, Z+2	; 0x02
    2e36:	93 81       	ldd	r25, Z+3	; 0x03
    2e38:	20 e0       	ldi	r18, 0x00	; 0
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	4a ef       	ldi	r20, 0xFA	; 250
    2e3e:	54 e4       	ldi	r21, 0x44	; 68
    2e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	f8 01       	movw	r30, r16
    2e4a:	80 83       	st	Z, r24
    2e4c:	91 83       	std	Z+1, r25	; 0x01
    2e4e:	a2 83       	std	Z+2, r26	; 0x02
    2e50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e52:	fe 01       	movw	r30, r28
    2e54:	e0 58       	subi	r30, 0x80	; 128
    2e56:	ff 4f       	sbci	r31, 0xFF	; 255
    2e58:	60 81       	ld	r22, Z
    2e5a:	71 81       	ldd	r23, Z+1	; 0x01
    2e5c:	82 81       	ldd	r24, Z+2	; 0x02
    2e5e:	93 81       	ldd	r25, Z+3	; 0x03
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e8       	ldi	r20, 0x80	; 128
    2e66:	5f e3       	ldi	r21, 0x3F	; 63
    2e68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e6c:	88 23       	and	r24, r24
    2e6e:	44 f4       	brge	.+16     	; 0x2e80 <LCD_function_Set_4bit+0x39a>
		__ticks = 1;
    2e70:	fe 01       	movw	r30, r28
    2e72:	e2 58       	subi	r30, 0x82	; 130
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	91 83       	std	Z+1, r25	; 0x01
    2e7c:	80 83       	st	Z, r24
    2e7e:	64 c0       	rjmp	.+200    	; 0x2f48 <LCD_function_Set_4bit+0x462>
	else if (__tmp > 65535)
    2e80:	fe 01       	movw	r30, r28
    2e82:	e0 58       	subi	r30, 0x80	; 128
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	60 81       	ld	r22, Z
    2e88:	71 81       	ldd	r23, Z+1	; 0x01
    2e8a:	82 81       	ldd	r24, Z+2	; 0x02
    2e8c:	93 81       	ldd	r25, Z+3	; 0x03
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	3f ef       	ldi	r19, 0xFF	; 255
    2e92:	4f e7       	ldi	r20, 0x7F	; 127
    2e94:	57 e4       	ldi	r21, 0x47	; 71
    2e96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e9a:	18 16       	cp	r1, r24
    2e9c:	0c f0       	brlt	.+2      	; 0x2ea0 <LCD_function_Set_4bit+0x3ba>
    2e9e:	43 c0       	rjmp	.+134    	; 0x2f26 <LCD_function_Set_4bit+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	ec 57       	subi	r30, 0x7C	; 124
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	60 81       	ld	r22, Z
    2ea8:	71 81       	ldd	r23, Z+1	; 0x01
    2eaa:	82 81       	ldd	r24, Z+2	; 0x02
    2eac:	93 81       	ldd	r25, Z+3	; 0x03
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	40 e2       	ldi	r20, 0x20	; 32
    2eb4:	51 e4       	ldi	r21, 0x41	; 65
    2eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	8e 01       	movw	r16, r28
    2ec0:	02 58       	subi	r16, 0x82	; 130
    2ec2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec4:	bc 01       	movw	r22, r24
    2ec6:	cd 01       	movw	r24, r26
    2ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	f8 01       	movw	r30, r16
    2ed2:	91 83       	std	Z+1, r25	; 0x01
    2ed4:	80 83       	st	Z, r24
    2ed6:	1f c0       	rjmp	.+62     	; 0x2f16 <LCD_function_Set_4bit+0x430>
    2ed8:	fe 01       	movw	r30, r28
    2eda:	e4 58       	subi	r30, 0x84	; 132
    2edc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ede:	88 ec       	ldi	r24, 0xC8	; 200
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	91 83       	std	Z+1, r25	; 0x01
    2ee4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ee6:	fe 01       	movw	r30, r28
    2ee8:	e4 58       	subi	r30, 0x84	; 132
    2eea:	ff 4f       	sbci	r31, 0xFF	; 255
    2eec:	80 81       	ld	r24, Z
    2eee:	91 81       	ldd	r25, Z+1	; 0x01
    2ef0:	01 97       	sbiw	r24, 0x01	; 1
    2ef2:	f1 f7       	brne	.-4      	; 0x2ef0 <LCD_function_Set_4bit+0x40a>
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	e4 58       	subi	r30, 0x84	; 132
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	91 83       	std	Z+1, r25	; 0x01
    2efc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2efe:	de 01       	movw	r26, r28
    2f00:	a2 58       	subi	r26, 0x82	; 130
    2f02:	bf 4f       	sbci	r27, 0xFF	; 255
    2f04:	fe 01       	movw	r30, r28
    2f06:	e2 58       	subi	r30, 0x82	; 130
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	80 81       	ld	r24, Z
    2f0c:	91 81       	ldd	r25, Z+1	; 0x01
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	11 96       	adiw	r26, 0x01	; 1
    2f12:	9c 93       	st	X, r25
    2f14:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f16:	fe 01       	movw	r30, r28
    2f18:	e2 58       	subi	r30, 0x82	; 130
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	80 81       	ld	r24, Z
    2f1e:	91 81       	ldd	r25, Z+1	; 0x01
    2f20:	00 97       	sbiw	r24, 0x00	; 0
    2f22:	d1 f6       	brne	.-76     	; 0x2ed8 <LCD_function_Set_4bit+0x3f2>
    2f24:	4b c0       	rjmp	.+150    	; 0x2fbc <LCD_function_Set_4bit+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f26:	8e 01       	movw	r16, r28
    2f28:	02 58       	subi	r16, 0x82	; 130
    2f2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	e0 58       	subi	r30, 0x80	; 128
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	60 81       	ld	r22, Z
    2f34:	71 81       	ldd	r23, Z+1	; 0x01
    2f36:	82 81       	ldd	r24, Z+2	; 0x02
    2f38:	93 81       	ldd	r25, Z+3	; 0x03
    2f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	f8 01       	movw	r30, r16
    2f44:	91 83       	std	Z+1, r25	; 0x01
    2f46:	80 83       	st	Z, r24
    2f48:	de 01       	movw	r26, r28
    2f4a:	a6 58       	subi	r26, 0x86	; 134
    2f4c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f4e:	fe 01       	movw	r30, r28
    2f50:	e2 58       	subi	r30, 0x82	; 130
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	80 81       	ld	r24, Z
    2f56:	91 81       	ldd	r25, Z+1	; 0x01
    2f58:	11 96       	adiw	r26, 0x01	; 1
    2f5a:	9c 93       	st	X, r25
    2f5c:	8e 93       	st	-X, r24
    2f5e:	fe 01       	movw	r30, r28
    2f60:	e6 58       	subi	r30, 0x86	; 134
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	80 81       	ld	r24, Z
    2f66:	91 81       	ldd	r25, Z+1	; 0x01
    2f68:	01 97       	sbiw	r24, 0x01	; 1
    2f6a:	f1 f7       	brne	.-4      	; 0x2f68 <LCD_function_Set_4bit+0x482>
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	e6 58       	subi	r30, 0x86	; 134
    2f70:	ff 4f       	sbci	r31, 0xFF	; 255
    2f72:	91 83       	std	Z+1, r25	; 0x01
    2f74:	80 83       	st	Z, r24
    2f76:	22 c0       	rjmp	.+68     	; 0x2fbc <LCD_function_Set_4bit+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f78:	8e 01       	movw	r16, r28
    2f7a:	08 57       	subi	r16, 0x78	; 120
    2f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7e:	fe 01       	movw	r30, r28
    2f80:	e7 57       	subi	r30, 0x77	; 119
    2f82:	ff 4f       	sbci	r31, 0xFF	; 255
    2f84:	60 81       	ld	r22, Z
    2f86:	71 81       	ldd	r23, Z+1	; 0x01
    2f88:	82 81       	ldd	r24, Z+2	; 0x02
    2f8a:	93 81       	ldd	r25, Z+3	; 0x03
    2f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f90:	dc 01       	movw	r26, r24
    2f92:	cb 01       	movw	r24, r22
    2f94:	f8 01       	movw	r30, r16
    2f96:	80 83       	st	Z, r24
    2f98:	de 01       	movw	r26, r28
    2f9a:	a7 58       	subi	r26, 0x87	; 135
    2f9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	e8 57       	subi	r30, 0x78	; 120
    2fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa4:	80 81       	ld	r24, Z
    2fa6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2fa8:	fe 01       	movw	r30, r28
    2faa:	e7 58       	subi	r30, 0x87	; 135
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	80 81       	ld	r24, Z
    2fb0:	8a 95       	dec	r24
    2fb2:	f1 f7       	brne	.-4      	; 0x2fb0 <LCD_function_Set_4bit+0x4ca>
    2fb4:	fe 01       	movw	r30, r28
    2fb6:	e7 58       	subi	r30, 0x87	; 135
    2fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fba:	80 83       	st	Z, r24
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	e5 55       	subi	r30, 0x55	; 85
    2fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc2:	10 82       	st	Z, r1
    2fc4:	23 c0       	rjmp	.+70     	; 0x300c <LCD_function_Set_4bit+0x526>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b0010,i));
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	e5 55       	subi	r30, 0x55	; 85
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	80 81       	ld	r24, Z
    2fce:	48 2f       	mov	r20, r24
    2fd0:	4c 5f       	subi	r20, 0xFC	; 252
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	e5 55       	subi	r30, 0x55	; 85
    2fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd8:	80 81       	ld	r24, Z
    2fda:	28 2f       	mov	r18, r24
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	82 e0       	ldi	r24, 0x02	; 2
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	02 c0       	rjmp	.+4      	; 0x2fe8 <LCD_function_Set_4bit+0x502>
    2fe4:	95 95       	asr	r25
    2fe6:	87 95       	ror	r24
    2fe8:	2a 95       	dec	r18
    2fea:	e2 f7       	brpl	.-8      	; 0x2fe4 <LCD_function_Set_4bit+0x4fe>
    2fec:	98 2f       	mov	r25, r24
    2fee:	91 70       	andi	r25, 0x01	; 1
    2ff0:	82 e0       	ldi	r24, 0x02	; 2
    2ff2:	64 2f       	mov	r22, r20
    2ff4:	49 2f       	mov	r20, r25
    2ff6:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_void_assign_pin>
	_delay_us(1);
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    2ffa:	de 01       	movw	r26, r28
    2ffc:	a5 55       	subi	r26, 0x55	; 85
    2ffe:	bf 4f       	sbci	r27, 0xFF	; 255
    3000:	fe 01       	movw	r30, r28
    3002:	e5 55       	subi	r30, 0x55	; 85
    3004:	ff 4f       	sbci	r31, 0xFF	; 255
    3006:	80 81       	ld	r24, Z
    3008:	8f 5f       	subi	r24, 0xFF	; 255
    300a:	8c 93       	st	X, r24
    300c:	fe 01       	movw	r30, r28
    300e:	e5 55       	subi	r30, 0x55	; 85
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	80 81       	ld	r24, Z
    3014:	84 30       	cpi	r24, 0x04	; 4
    3016:	b8 f2       	brcs	.-82     	; 0x2fc6 <LCD_function_Set_4bit+0x4e0>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b0010,i));
	}
	//enable pin low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    3018:	83 e0       	ldi	r24, 0x03	; 3
    301a:	60 e0       	ldi	r22, 0x00	; 0
    301c:	0e 94 80 08 	call	0x1100	; 0x1100 <DIO_void_clear_pin>
    3020:	fe 01       	movw	r30, r28
    3022:	eb 58       	subi	r30, 0x8B	; 139
    3024:	ff 4f       	sbci	r31, 0xFF	; 255
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	a0 e2       	ldi	r26, 0x20	; 32
    302c:	b1 e4       	ldi	r27, 0x41	; 65
    302e:	80 83       	st	Z, r24
    3030:	91 83       	std	Z+1, r25	; 0x01
    3032:	a2 83       	std	Z+2, r26	; 0x02
    3034:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3036:	8e 01       	movw	r16, r28
    3038:	0f 58       	subi	r16, 0x8F	; 143
    303a:	1f 4f       	sbci	r17, 0xFF	; 255
    303c:	fe 01       	movw	r30, r28
    303e:	eb 58       	subi	r30, 0x8B	; 139
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	60 81       	ld	r22, Z
    3044:	71 81       	ldd	r23, Z+1	; 0x01
    3046:	82 81       	ldd	r24, Z+2	; 0x02
    3048:	93 81       	ldd	r25, Z+3	; 0x03
    304a:	2b ea       	ldi	r18, 0xAB	; 171
    304c:	3a ea       	ldi	r19, 0xAA	; 170
    304e:	4a e2       	ldi	r20, 0x2A	; 42
    3050:	50 e4       	ldi	r21, 0x40	; 64
    3052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	f8 01       	movw	r30, r16
    305c:	80 83       	st	Z, r24
    305e:	91 83       	std	Z+1, r25	; 0x01
    3060:	a2 83       	std	Z+2, r26	; 0x02
    3062:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3064:	fe 01       	movw	r30, r28
    3066:	ef 58       	subi	r30, 0x8F	; 143
    3068:	ff 4f       	sbci	r31, 0xFF	; 255
    306a:	60 81       	ld	r22, Z
    306c:	71 81       	ldd	r23, Z+1	; 0x01
    306e:	82 81       	ldd	r24, Z+2	; 0x02
    3070:	93 81       	ldd	r25, Z+3	; 0x03
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	40 e8       	ldi	r20, 0x80	; 128
    3078:	5f e3       	ldi	r21, 0x3F	; 63
    307a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    307e:	88 23       	and	r24, r24
    3080:	34 f4       	brge	.+12     	; 0x308e <LCD_function_Set_4bit+0x5a8>
		__ticks = 1;
    3082:	fe 01       	movw	r30, r28
    3084:	e0 59       	subi	r30, 0x90	; 144
    3086:	ff 4f       	sbci	r31, 0xFF	; 255
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	80 83       	st	Z, r24
    308c:	e0 c0       	rjmp	.+448    	; 0x324e <LCD_function_Set_4bit+0x768>
	else if (__tmp > 255)
    308e:	fe 01       	movw	r30, r28
    3090:	ef 58       	subi	r30, 0x8F	; 143
    3092:	ff 4f       	sbci	r31, 0xFF	; 255
    3094:	60 81       	ld	r22, Z
    3096:	71 81       	ldd	r23, Z+1	; 0x01
    3098:	82 81       	ldd	r24, Z+2	; 0x02
    309a:	93 81       	ldd	r25, Z+3	; 0x03
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	4f e7       	ldi	r20, 0x7F	; 127
    30a2:	53 e4       	ldi	r21, 0x43	; 67
    30a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30a8:	18 16       	cp	r1, r24
    30aa:	0c f0       	brlt	.+2      	; 0x30ae <LCD_function_Set_4bit+0x5c8>
    30ac:	c0 c0       	rjmp	.+384    	; 0x322e <LCD_function_Set_4bit+0x748>
	{
		_delay_ms(__us / 1000.0);
    30ae:	fe 01       	movw	r30, r28
    30b0:	eb 58       	subi	r30, 0x8B	; 139
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	60 81       	ld	r22, Z
    30b6:	71 81       	ldd	r23, Z+1	; 0x01
    30b8:	82 81       	ldd	r24, Z+2	; 0x02
    30ba:	93 81       	ldd	r25, Z+3	; 0x03
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	4a e7       	ldi	r20, 0x7A	; 122
    30c2:	54 e4       	ldi	r21, 0x44	; 68
    30c4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	fe 01       	movw	r30, r28
    30ce:	e4 59       	subi	r30, 0x94	; 148
    30d0:	ff 4f       	sbci	r31, 0xFF	; 255
    30d2:	80 83       	st	Z, r24
    30d4:	91 83       	std	Z+1, r25	; 0x01
    30d6:	a2 83       	std	Z+2, r26	; 0x02
    30d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30da:	8e 01       	movw	r16, r28
    30dc:	08 59       	subi	r16, 0x98	; 152
    30de:	1f 4f       	sbci	r17, 0xFF	; 255
    30e0:	fe 01       	movw	r30, r28
    30e2:	e4 59       	subi	r30, 0x94	; 148
    30e4:	ff 4f       	sbci	r31, 0xFF	; 255
    30e6:	60 81       	ld	r22, Z
    30e8:	71 81       	ldd	r23, Z+1	; 0x01
    30ea:	82 81       	ldd	r24, Z+2	; 0x02
    30ec:	93 81       	ldd	r25, Z+3	; 0x03
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	4a ef       	ldi	r20, 0xFA	; 250
    30f4:	54 e4       	ldi	r21, 0x44	; 68
    30f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fa:	dc 01       	movw	r26, r24
    30fc:	cb 01       	movw	r24, r22
    30fe:	f8 01       	movw	r30, r16
    3100:	80 83       	st	Z, r24
    3102:	91 83       	std	Z+1, r25	; 0x01
    3104:	a2 83       	std	Z+2, r26	; 0x02
    3106:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3108:	fe 01       	movw	r30, r28
    310a:	e8 59       	subi	r30, 0x98	; 152
    310c:	ff 4f       	sbci	r31, 0xFF	; 255
    310e:	60 81       	ld	r22, Z
    3110:	71 81       	ldd	r23, Z+1	; 0x01
    3112:	82 81       	ldd	r24, Z+2	; 0x02
    3114:	93 81       	ldd	r25, Z+3	; 0x03
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	40 e8       	ldi	r20, 0x80	; 128
    311c:	5f e3       	ldi	r21, 0x3F	; 63
    311e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3122:	88 23       	and	r24, r24
    3124:	44 f4       	brge	.+16     	; 0x3136 <LCD_function_Set_4bit+0x650>
		__ticks = 1;
    3126:	fe 01       	movw	r30, r28
    3128:	ea 59       	subi	r30, 0x9A	; 154
    312a:	ff 4f       	sbci	r31, 0xFF	; 255
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	91 83       	std	Z+1, r25	; 0x01
    3132:	80 83       	st	Z, r24
    3134:	64 c0       	rjmp	.+200    	; 0x31fe <LCD_function_Set_4bit+0x718>
	else if (__tmp > 65535)
    3136:	fe 01       	movw	r30, r28
    3138:	e8 59       	subi	r30, 0x98	; 152
    313a:	ff 4f       	sbci	r31, 0xFF	; 255
    313c:	60 81       	ld	r22, Z
    313e:	71 81       	ldd	r23, Z+1	; 0x01
    3140:	82 81       	ldd	r24, Z+2	; 0x02
    3142:	93 81       	ldd	r25, Z+3	; 0x03
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	3f ef       	ldi	r19, 0xFF	; 255
    3148:	4f e7       	ldi	r20, 0x7F	; 127
    314a:	57 e4       	ldi	r21, 0x47	; 71
    314c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3150:	18 16       	cp	r1, r24
    3152:	0c f0       	brlt	.+2      	; 0x3156 <LCD_function_Set_4bit+0x670>
    3154:	43 c0       	rjmp	.+134    	; 0x31dc <LCD_function_Set_4bit+0x6f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3156:	fe 01       	movw	r30, r28
    3158:	e4 59       	subi	r30, 0x94	; 148
    315a:	ff 4f       	sbci	r31, 0xFF	; 255
    315c:	60 81       	ld	r22, Z
    315e:	71 81       	ldd	r23, Z+1	; 0x01
    3160:	82 81       	ldd	r24, Z+2	; 0x02
    3162:	93 81       	ldd	r25, Z+3	; 0x03
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	40 e2       	ldi	r20, 0x20	; 32
    316a:	51 e4       	ldi	r21, 0x41	; 65
    316c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	8e 01       	movw	r16, r28
    3176:	0a 59       	subi	r16, 0x9A	; 154
    3178:	1f 4f       	sbci	r17, 0xFF	; 255
    317a:	bc 01       	movw	r22, r24
    317c:	cd 01       	movw	r24, r26
    317e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3182:	dc 01       	movw	r26, r24
    3184:	cb 01       	movw	r24, r22
    3186:	f8 01       	movw	r30, r16
    3188:	91 83       	std	Z+1, r25	; 0x01
    318a:	80 83       	st	Z, r24
    318c:	1f c0       	rjmp	.+62     	; 0x31cc <LCD_function_Set_4bit+0x6e6>
    318e:	fe 01       	movw	r30, r28
    3190:	ec 59       	subi	r30, 0x9C	; 156
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	88 ec       	ldi	r24, 0xC8	; 200
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	91 83       	std	Z+1, r25	; 0x01
    319a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    319c:	fe 01       	movw	r30, r28
    319e:	ec 59       	subi	r30, 0x9C	; 156
    31a0:	ff 4f       	sbci	r31, 0xFF	; 255
    31a2:	80 81       	ld	r24, Z
    31a4:	91 81       	ldd	r25, Z+1	; 0x01
    31a6:	01 97       	sbiw	r24, 0x01	; 1
    31a8:	f1 f7       	brne	.-4      	; 0x31a6 <LCD_function_Set_4bit+0x6c0>
    31aa:	fe 01       	movw	r30, r28
    31ac:	ec 59       	subi	r30, 0x9C	; 156
    31ae:	ff 4f       	sbci	r31, 0xFF	; 255
    31b0:	91 83       	std	Z+1, r25	; 0x01
    31b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b4:	de 01       	movw	r26, r28
    31b6:	aa 59       	subi	r26, 0x9A	; 154
    31b8:	bf 4f       	sbci	r27, 0xFF	; 255
    31ba:	fe 01       	movw	r30, r28
    31bc:	ea 59       	subi	r30, 0x9A	; 154
    31be:	ff 4f       	sbci	r31, 0xFF	; 255
    31c0:	80 81       	ld	r24, Z
    31c2:	91 81       	ldd	r25, Z+1	; 0x01
    31c4:	01 97       	sbiw	r24, 0x01	; 1
    31c6:	11 96       	adiw	r26, 0x01	; 1
    31c8:	9c 93       	st	X, r25
    31ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31cc:	fe 01       	movw	r30, r28
    31ce:	ea 59       	subi	r30, 0x9A	; 154
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	80 81       	ld	r24, Z
    31d4:	91 81       	ldd	r25, Z+1	; 0x01
    31d6:	00 97       	sbiw	r24, 0x00	; 0
    31d8:	d1 f6       	brne	.-76     	; 0x318e <LCD_function_Set_4bit+0x6a8>
    31da:	4b c0       	rjmp	.+150    	; 0x3272 <LCD_function_Set_4bit+0x78c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31dc:	8e 01       	movw	r16, r28
    31de:	0a 59       	subi	r16, 0x9A	; 154
    31e0:	1f 4f       	sbci	r17, 0xFF	; 255
    31e2:	fe 01       	movw	r30, r28
    31e4:	e8 59       	subi	r30, 0x98	; 152
    31e6:	ff 4f       	sbci	r31, 0xFF	; 255
    31e8:	60 81       	ld	r22, Z
    31ea:	71 81       	ldd	r23, Z+1	; 0x01
    31ec:	82 81       	ldd	r24, Z+2	; 0x02
    31ee:	93 81       	ldd	r25, Z+3	; 0x03
    31f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	f8 01       	movw	r30, r16
    31fa:	91 83       	std	Z+1, r25	; 0x01
    31fc:	80 83       	st	Z, r24
    31fe:	de 01       	movw	r26, r28
    3200:	ae 59       	subi	r26, 0x9E	; 158
    3202:	bf 4f       	sbci	r27, 0xFF	; 255
    3204:	fe 01       	movw	r30, r28
    3206:	ea 59       	subi	r30, 0x9A	; 154
    3208:	ff 4f       	sbci	r31, 0xFF	; 255
    320a:	80 81       	ld	r24, Z
    320c:	91 81       	ldd	r25, Z+1	; 0x01
    320e:	11 96       	adiw	r26, 0x01	; 1
    3210:	9c 93       	st	X, r25
    3212:	8e 93       	st	-X, r24
    3214:	fe 01       	movw	r30, r28
    3216:	ee 59       	subi	r30, 0x9E	; 158
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	80 81       	ld	r24, Z
    321c:	91 81       	ldd	r25, Z+1	; 0x01
    321e:	01 97       	sbiw	r24, 0x01	; 1
    3220:	f1 f7       	brne	.-4      	; 0x321e <LCD_function_Set_4bit+0x738>
    3222:	fe 01       	movw	r30, r28
    3224:	ee 59       	subi	r30, 0x9E	; 158
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	91 83       	std	Z+1, r25	; 0x01
    322a:	80 83       	st	Z, r24
    322c:	22 c0       	rjmp	.+68     	; 0x3272 <LCD_function_Set_4bit+0x78c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    322e:	8e 01       	movw	r16, r28
    3230:	00 59       	subi	r16, 0x90	; 144
    3232:	1f 4f       	sbci	r17, 0xFF	; 255
    3234:	fe 01       	movw	r30, r28
    3236:	ef 58       	subi	r30, 0x8F	; 143
    3238:	ff 4f       	sbci	r31, 0xFF	; 255
    323a:	60 81       	ld	r22, Z
    323c:	71 81       	ldd	r23, Z+1	; 0x01
    323e:	82 81       	ldd	r24, Z+2	; 0x02
    3240:	93 81       	ldd	r25, Z+3	; 0x03
    3242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	f8 01       	movw	r30, r16
    324c:	80 83       	st	Z, r24
    324e:	de 01       	movw	r26, r28
    3250:	af 59       	subi	r26, 0x9F	; 159
    3252:	bf 4f       	sbci	r27, 0xFF	; 255
    3254:	fe 01       	movw	r30, r28
    3256:	e0 59       	subi	r30, 0x90	; 144
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	80 81       	ld	r24, Z
    325c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    325e:	fe 01       	movw	r30, r28
    3260:	ef 59       	subi	r30, 0x9F	; 159
    3262:	ff 4f       	sbci	r31, 0xFF	; 255
    3264:	80 81       	ld	r24, Z
    3266:	8a 95       	dec	r24
    3268:	f1 f7       	brne	.-4      	; 0x3266 <LCD_function_Set_4bit+0x780>
    326a:	fe 01       	movw	r30, r28
    326c:	ef 59       	subi	r30, 0x9F	; 159
    326e:	ff 4f       	sbci	r31, 0xFF	; 255
    3270:	80 83       	st	Z, r24
	_delay_us(10);
	//send again high nibble to make sure
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
    3272:	83 e0       	ldi	r24, 0x03	; 3
    3274:	60 e0       	ldi	r22, 0x00	; 0
    3276:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_void_set_pin>
    327a:	fe 01       	movw	r30, r28
    327c:	e3 5a       	subi	r30, 0xA3	; 163
    327e:	ff 4f       	sbci	r31, 0xFF	; 255
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	a0 e8       	ldi	r26, 0x80	; 128
    3286:	bf e3       	ldi	r27, 0x3F	; 63
    3288:	80 83       	st	Z, r24
    328a:	91 83       	std	Z+1, r25	; 0x01
    328c:	a2 83       	std	Z+2, r26	; 0x02
    328e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3290:	8e 01       	movw	r16, r28
    3292:	07 5a       	subi	r16, 0xA7	; 167
    3294:	1f 4f       	sbci	r17, 0xFF	; 255
    3296:	fe 01       	movw	r30, r28
    3298:	e3 5a       	subi	r30, 0xA3	; 163
    329a:	ff 4f       	sbci	r31, 0xFF	; 255
    329c:	60 81       	ld	r22, Z
    329e:	71 81       	ldd	r23, Z+1	; 0x01
    32a0:	82 81       	ldd	r24, Z+2	; 0x02
    32a2:	93 81       	ldd	r25, Z+3	; 0x03
    32a4:	2b ea       	ldi	r18, 0xAB	; 171
    32a6:	3a ea       	ldi	r19, 0xAA	; 170
    32a8:	4a e2       	ldi	r20, 0x2A	; 42
    32aa:	50 e4       	ldi	r21, 0x40	; 64
    32ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	f8 01       	movw	r30, r16
    32b6:	80 83       	st	Z, r24
    32b8:	91 83       	std	Z+1, r25	; 0x01
    32ba:	a2 83       	std	Z+2, r26	; 0x02
    32bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32be:	fe 01       	movw	r30, r28
    32c0:	e7 5a       	subi	r30, 0xA7	; 167
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	60 81       	ld	r22, Z
    32c6:	71 81       	ldd	r23, Z+1	; 0x01
    32c8:	82 81       	ldd	r24, Z+2	; 0x02
    32ca:	93 81       	ldd	r25, Z+3	; 0x03
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	40 e8       	ldi	r20, 0x80	; 128
    32d2:	5f e3       	ldi	r21, 0x3F	; 63
    32d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32d8:	88 23       	and	r24, r24
    32da:	34 f4       	brge	.+12     	; 0x32e8 <LCD_function_Set_4bit+0x802>
		__ticks = 1;
    32dc:	fe 01       	movw	r30, r28
    32de:	e8 5a       	subi	r30, 0xA8	; 168
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	80 83       	st	Z, r24
    32e6:	e0 c0       	rjmp	.+448    	; 0x34a8 <LCD_function_Set_4bit+0x9c2>
	else if (__tmp > 255)
    32e8:	fe 01       	movw	r30, r28
    32ea:	e7 5a       	subi	r30, 0xA7	; 167
    32ec:	ff 4f       	sbci	r31, 0xFF	; 255
    32ee:	60 81       	ld	r22, Z
    32f0:	71 81       	ldd	r23, Z+1	; 0x01
    32f2:	82 81       	ldd	r24, Z+2	; 0x02
    32f4:	93 81       	ldd	r25, Z+3	; 0x03
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	4f e7       	ldi	r20, 0x7F	; 127
    32fc:	53 e4       	ldi	r21, 0x43	; 67
    32fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3302:	18 16       	cp	r1, r24
    3304:	0c f0       	brlt	.+2      	; 0x3308 <LCD_function_Set_4bit+0x822>
    3306:	c0 c0       	rjmp	.+384    	; 0x3488 <LCD_function_Set_4bit+0x9a2>
	{
		_delay_ms(__us / 1000.0);
    3308:	fe 01       	movw	r30, r28
    330a:	e3 5a       	subi	r30, 0xA3	; 163
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	60 81       	ld	r22, Z
    3310:	71 81       	ldd	r23, Z+1	; 0x01
    3312:	82 81       	ldd	r24, Z+2	; 0x02
    3314:	93 81       	ldd	r25, Z+3	; 0x03
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	4a e7       	ldi	r20, 0x7A	; 122
    331c:	54 e4       	ldi	r21, 0x44	; 68
    331e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	fe 01       	movw	r30, r28
    3328:	ec 5a       	subi	r30, 0xAC	; 172
    332a:	ff 4f       	sbci	r31, 0xFF	; 255
    332c:	80 83       	st	Z, r24
    332e:	91 83       	std	Z+1, r25	; 0x01
    3330:	a2 83       	std	Z+2, r26	; 0x02
    3332:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3334:	8e 01       	movw	r16, r28
    3336:	00 5b       	subi	r16, 0xB0	; 176
    3338:	1f 4f       	sbci	r17, 0xFF	; 255
    333a:	fe 01       	movw	r30, r28
    333c:	ec 5a       	subi	r30, 0xAC	; 172
    333e:	ff 4f       	sbci	r31, 0xFF	; 255
    3340:	60 81       	ld	r22, Z
    3342:	71 81       	ldd	r23, Z+1	; 0x01
    3344:	82 81       	ldd	r24, Z+2	; 0x02
    3346:	93 81       	ldd	r25, Z+3	; 0x03
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	4a ef       	ldi	r20, 0xFA	; 250
    334e:	54 e4       	ldi	r21, 0x44	; 68
    3350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	f8 01       	movw	r30, r16
    335a:	80 83       	st	Z, r24
    335c:	91 83       	std	Z+1, r25	; 0x01
    335e:	a2 83       	std	Z+2, r26	; 0x02
    3360:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3362:	fe 01       	movw	r30, r28
    3364:	e0 5b       	subi	r30, 0xB0	; 176
    3366:	ff 4f       	sbci	r31, 0xFF	; 255
    3368:	60 81       	ld	r22, Z
    336a:	71 81       	ldd	r23, Z+1	; 0x01
    336c:	82 81       	ldd	r24, Z+2	; 0x02
    336e:	93 81       	ldd	r25, Z+3	; 0x03
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	40 e8       	ldi	r20, 0x80	; 128
    3376:	5f e3       	ldi	r21, 0x3F	; 63
    3378:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    337c:	88 23       	and	r24, r24
    337e:	44 f4       	brge	.+16     	; 0x3390 <LCD_function_Set_4bit+0x8aa>
		__ticks = 1;
    3380:	fe 01       	movw	r30, r28
    3382:	e2 5b       	subi	r30, 0xB2	; 178
    3384:	ff 4f       	sbci	r31, 0xFF	; 255
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	91 83       	std	Z+1, r25	; 0x01
    338c:	80 83       	st	Z, r24
    338e:	64 c0       	rjmp	.+200    	; 0x3458 <LCD_function_Set_4bit+0x972>
	else if (__tmp > 65535)
    3390:	fe 01       	movw	r30, r28
    3392:	e0 5b       	subi	r30, 0xB0	; 176
    3394:	ff 4f       	sbci	r31, 0xFF	; 255
    3396:	60 81       	ld	r22, Z
    3398:	71 81       	ldd	r23, Z+1	; 0x01
    339a:	82 81       	ldd	r24, Z+2	; 0x02
    339c:	93 81       	ldd	r25, Z+3	; 0x03
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	3f ef       	ldi	r19, 0xFF	; 255
    33a2:	4f e7       	ldi	r20, 0x7F	; 127
    33a4:	57 e4       	ldi	r21, 0x47	; 71
    33a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33aa:	18 16       	cp	r1, r24
    33ac:	0c f0       	brlt	.+2      	; 0x33b0 <LCD_function_Set_4bit+0x8ca>
    33ae:	43 c0       	rjmp	.+134    	; 0x3436 <LCD_function_Set_4bit+0x950>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b0:	fe 01       	movw	r30, r28
    33b2:	ec 5a       	subi	r30, 0xAC	; 172
    33b4:	ff 4f       	sbci	r31, 0xFF	; 255
    33b6:	60 81       	ld	r22, Z
    33b8:	71 81       	ldd	r23, Z+1	; 0x01
    33ba:	82 81       	ldd	r24, Z+2	; 0x02
    33bc:	93 81       	ldd	r25, Z+3	; 0x03
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	40 e2       	ldi	r20, 0x20	; 32
    33c4:	51 e4       	ldi	r21, 0x41	; 65
    33c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ca:	dc 01       	movw	r26, r24
    33cc:	cb 01       	movw	r24, r22
    33ce:	8e 01       	movw	r16, r28
    33d0:	02 5b       	subi	r16, 0xB2	; 178
    33d2:	1f 4f       	sbci	r17, 0xFF	; 255
    33d4:	bc 01       	movw	r22, r24
    33d6:	cd 01       	movw	r24, r26
    33d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33dc:	dc 01       	movw	r26, r24
    33de:	cb 01       	movw	r24, r22
    33e0:	f8 01       	movw	r30, r16
    33e2:	91 83       	std	Z+1, r25	; 0x01
    33e4:	80 83       	st	Z, r24
    33e6:	1f c0       	rjmp	.+62     	; 0x3426 <LCD_function_Set_4bit+0x940>
    33e8:	fe 01       	movw	r30, r28
    33ea:	e4 5b       	subi	r30, 0xB4	; 180
    33ec:	ff 4f       	sbci	r31, 0xFF	; 255
    33ee:	88 ec       	ldi	r24, 0xC8	; 200
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	91 83       	std	Z+1, r25	; 0x01
    33f4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33f6:	fe 01       	movw	r30, r28
    33f8:	e4 5b       	subi	r30, 0xB4	; 180
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	80 81       	ld	r24, Z
    33fe:	91 81       	ldd	r25, Z+1	; 0x01
    3400:	01 97       	sbiw	r24, 0x01	; 1
    3402:	f1 f7       	brne	.-4      	; 0x3400 <LCD_function_Set_4bit+0x91a>
    3404:	fe 01       	movw	r30, r28
    3406:	e4 5b       	subi	r30, 0xB4	; 180
    3408:	ff 4f       	sbci	r31, 0xFF	; 255
    340a:	91 83       	std	Z+1, r25	; 0x01
    340c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    340e:	de 01       	movw	r26, r28
    3410:	a2 5b       	subi	r26, 0xB2	; 178
    3412:	bf 4f       	sbci	r27, 0xFF	; 255
    3414:	fe 01       	movw	r30, r28
    3416:	e2 5b       	subi	r30, 0xB2	; 178
    3418:	ff 4f       	sbci	r31, 0xFF	; 255
    341a:	80 81       	ld	r24, Z
    341c:	91 81       	ldd	r25, Z+1	; 0x01
    341e:	01 97       	sbiw	r24, 0x01	; 1
    3420:	11 96       	adiw	r26, 0x01	; 1
    3422:	9c 93       	st	X, r25
    3424:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3426:	fe 01       	movw	r30, r28
    3428:	e2 5b       	subi	r30, 0xB2	; 178
    342a:	ff 4f       	sbci	r31, 0xFF	; 255
    342c:	80 81       	ld	r24, Z
    342e:	91 81       	ldd	r25, Z+1	; 0x01
    3430:	00 97       	sbiw	r24, 0x00	; 0
    3432:	d1 f6       	brne	.-76     	; 0x33e8 <LCD_function_Set_4bit+0x902>
    3434:	4b c0       	rjmp	.+150    	; 0x34cc <LCD_function_Set_4bit+0x9e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3436:	8e 01       	movw	r16, r28
    3438:	02 5b       	subi	r16, 0xB2	; 178
    343a:	1f 4f       	sbci	r17, 0xFF	; 255
    343c:	fe 01       	movw	r30, r28
    343e:	e0 5b       	subi	r30, 0xB0	; 176
    3440:	ff 4f       	sbci	r31, 0xFF	; 255
    3442:	60 81       	ld	r22, Z
    3444:	71 81       	ldd	r23, Z+1	; 0x01
    3446:	82 81       	ldd	r24, Z+2	; 0x02
    3448:	93 81       	ldd	r25, Z+3	; 0x03
    344a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	f8 01       	movw	r30, r16
    3454:	91 83       	std	Z+1, r25	; 0x01
    3456:	80 83       	st	Z, r24
    3458:	de 01       	movw	r26, r28
    345a:	a6 5b       	subi	r26, 0xB6	; 182
    345c:	bf 4f       	sbci	r27, 0xFF	; 255
    345e:	fe 01       	movw	r30, r28
    3460:	e2 5b       	subi	r30, 0xB2	; 178
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	80 81       	ld	r24, Z
    3466:	91 81       	ldd	r25, Z+1	; 0x01
    3468:	11 96       	adiw	r26, 0x01	; 1
    346a:	9c 93       	st	X, r25
    346c:	8e 93       	st	-X, r24
    346e:	fe 01       	movw	r30, r28
    3470:	e6 5b       	subi	r30, 0xB6	; 182
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	80 81       	ld	r24, Z
    3476:	91 81       	ldd	r25, Z+1	; 0x01
    3478:	01 97       	sbiw	r24, 0x01	; 1
    347a:	f1 f7       	brne	.-4      	; 0x3478 <LCD_function_Set_4bit+0x992>
    347c:	fe 01       	movw	r30, r28
    347e:	e6 5b       	subi	r30, 0xB6	; 182
    3480:	ff 4f       	sbci	r31, 0xFF	; 255
    3482:	91 83       	std	Z+1, r25	; 0x01
    3484:	80 83       	st	Z, r24
    3486:	22 c0       	rjmp	.+68     	; 0x34cc <LCD_function_Set_4bit+0x9e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3488:	8e 01       	movw	r16, r28
    348a:	08 5a       	subi	r16, 0xA8	; 168
    348c:	1f 4f       	sbci	r17, 0xFF	; 255
    348e:	fe 01       	movw	r30, r28
    3490:	e7 5a       	subi	r30, 0xA7	; 167
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	60 81       	ld	r22, Z
    3496:	71 81       	ldd	r23, Z+1	; 0x01
    3498:	82 81       	ldd	r24, Z+2	; 0x02
    349a:	93 81       	ldd	r25, Z+3	; 0x03
    349c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a0:	dc 01       	movw	r26, r24
    34a2:	cb 01       	movw	r24, r22
    34a4:	f8 01       	movw	r30, r16
    34a6:	80 83       	st	Z, r24
    34a8:	de 01       	movw	r26, r28
    34aa:	a7 5b       	subi	r26, 0xB7	; 183
    34ac:	bf 4f       	sbci	r27, 0xFF	; 255
    34ae:	fe 01       	movw	r30, r28
    34b0:	e8 5a       	subi	r30, 0xA8	; 168
    34b2:	ff 4f       	sbci	r31, 0xFF	; 255
    34b4:	80 81       	ld	r24, Z
    34b6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34b8:	fe 01       	movw	r30, r28
    34ba:	e7 5b       	subi	r30, 0xB7	; 183
    34bc:	ff 4f       	sbci	r31, 0xFF	; 255
    34be:	80 81       	ld	r24, Z
    34c0:	8a 95       	dec	r24
    34c2:	f1 f7       	brne	.-4      	; 0x34c0 <LCD_function_Set_4bit+0x9da>
    34c4:	fe 01       	movw	r30, r28
    34c6:	e7 5b       	subi	r30, 0xB7	; 183
    34c8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ca:	80 83       	st	Z, r24
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    34cc:	fe 01       	movw	r30, r28
    34ce:	e6 55       	subi	r30, 0x56	; 86
    34d0:	ff 4f       	sbci	r31, 0xFF	; 255
    34d2:	10 82       	st	Z, r1
    34d4:	23 c0       	rjmp	.+70     	; 0x351c <LCD_function_Set_4bit+0xa36>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b0010,i));
    34d6:	fe 01       	movw	r30, r28
    34d8:	e6 55       	subi	r30, 0x56	; 86
    34da:	ff 4f       	sbci	r31, 0xFF	; 255
    34dc:	80 81       	ld	r24, Z
    34de:	48 2f       	mov	r20, r24
    34e0:	4c 5f       	subi	r20, 0xFC	; 252
    34e2:	fe 01       	movw	r30, r28
    34e4:	e6 55       	subi	r30, 0x56	; 86
    34e6:	ff 4f       	sbci	r31, 0xFF	; 255
    34e8:	80 81       	ld	r24, Z
    34ea:	28 2f       	mov	r18, r24
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	82 e0       	ldi	r24, 0x02	; 2
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	02 c0       	rjmp	.+4      	; 0x34f8 <LCD_function_Set_4bit+0xa12>
    34f4:	95 95       	asr	r25
    34f6:	87 95       	ror	r24
    34f8:	2a 95       	dec	r18
    34fa:	e2 f7       	brpl	.-8      	; 0x34f4 <LCD_function_Set_4bit+0xa0e>
    34fc:	98 2f       	mov	r25, r24
    34fe:	91 70       	andi	r25, 0x01	; 1
    3500:	82 e0       	ldi	r24, 0x02	; 2
    3502:	64 2f       	mov	r22, r20
    3504:	49 2f       	mov	r20, r25
    3506:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_void_assign_pin>
	//send again high nibble to make sure
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    350a:	de 01       	movw	r26, r28
    350c:	a6 55       	subi	r26, 0x56	; 86
    350e:	bf 4f       	sbci	r27, 0xFF	; 255
    3510:	fe 01       	movw	r30, r28
    3512:	e6 55       	subi	r30, 0x56	; 86
    3514:	ff 4f       	sbci	r31, 0xFF	; 255
    3516:	80 81       	ld	r24, Z
    3518:	8f 5f       	subi	r24, 0xFF	; 255
    351a:	8c 93       	st	X, r24
    351c:	fe 01       	movw	r30, r28
    351e:	e6 55       	subi	r30, 0x56	; 86
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	80 81       	ld	r24, Z
    3524:	84 30       	cpi	r24, 0x04	; 4
    3526:	b8 f2       	brcs	.-82     	; 0x34d6 <LCD_function_Set_4bit+0x9f0>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b0010,i));
	}
	//enable pin low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    3528:	83 e0       	ldi	r24, 0x03	; 3
    352a:	60 e0       	ldi	r22, 0x00	; 0
    352c:	0e 94 80 08 	call	0x1100	; 0x1100 <DIO_void_clear_pin>
    3530:	fe 01       	movw	r30, r28
    3532:	eb 5b       	subi	r30, 0xBB	; 187
    3534:	ff 4f       	sbci	r31, 0xFF	; 255
    3536:	80 e0       	ldi	r24, 0x00	; 0
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	a0 e2       	ldi	r26, 0x20	; 32
    353c:	b1 e4       	ldi	r27, 0x41	; 65
    353e:	80 83       	st	Z, r24
    3540:	91 83       	std	Z+1, r25	; 0x01
    3542:	a2 83       	std	Z+2, r26	; 0x02
    3544:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3546:	8e 01       	movw	r16, r28
    3548:	0f 5b       	subi	r16, 0xBF	; 191
    354a:	1f 4f       	sbci	r17, 0xFF	; 255
    354c:	fe 01       	movw	r30, r28
    354e:	eb 5b       	subi	r30, 0xBB	; 187
    3550:	ff 4f       	sbci	r31, 0xFF	; 255
    3552:	60 81       	ld	r22, Z
    3554:	71 81       	ldd	r23, Z+1	; 0x01
    3556:	82 81       	ldd	r24, Z+2	; 0x02
    3558:	93 81       	ldd	r25, Z+3	; 0x03
    355a:	2b ea       	ldi	r18, 0xAB	; 171
    355c:	3a ea       	ldi	r19, 0xAA	; 170
    355e:	4a e2       	ldi	r20, 0x2A	; 42
    3560:	50 e4       	ldi	r21, 0x40	; 64
    3562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	f8 01       	movw	r30, r16
    356c:	80 83       	st	Z, r24
    356e:	91 83       	std	Z+1, r25	; 0x01
    3570:	a2 83       	std	Z+2, r26	; 0x02
    3572:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3574:	fe 01       	movw	r30, r28
    3576:	ef 5b       	subi	r30, 0xBF	; 191
    3578:	ff 4f       	sbci	r31, 0xFF	; 255
    357a:	60 81       	ld	r22, Z
    357c:	71 81       	ldd	r23, Z+1	; 0x01
    357e:	82 81       	ldd	r24, Z+2	; 0x02
    3580:	93 81       	ldd	r25, Z+3	; 0x03
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	40 e8       	ldi	r20, 0x80	; 128
    3588:	5f e3       	ldi	r21, 0x3F	; 63
    358a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    358e:	88 23       	and	r24, r24
    3590:	34 f4       	brge	.+12     	; 0x359e <LCD_function_Set_4bit+0xab8>
		__ticks = 1;
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	fe 01       	movw	r30, r28
    3596:	e0 5c       	subi	r30, 0xC0	; 192
    3598:	ff 4f       	sbci	r31, 0xFF	; 255
    359a:	80 83       	st	Z, r24
    359c:	9d c0       	rjmp	.+314    	; 0x36d8 <LCD_function_Set_4bit+0xbf2>
	else if (__tmp > 255)
    359e:	fe 01       	movw	r30, r28
    35a0:	ef 5b       	subi	r30, 0xBF	; 191
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	60 81       	ld	r22, Z
    35a6:	71 81       	ldd	r23, Z+1	; 0x01
    35a8:	82 81       	ldd	r24, Z+2	; 0x02
    35aa:	93 81       	ldd	r25, Z+3	; 0x03
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	4f e7       	ldi	r20, 0x7F	; 127
    35b2:	53 e4       	ldi	r21, 0x43	; 67
    35b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35b8:	18 16       	cp	r1, r24
    35ba:	0c f0       	brlt	.+2      	; 0x35be <LCD_function_Set_4bit+0xad8>
    35bc:	7e c0       	rjmp	.+252    	; 0x36ba <LCD_function_Set_4bit+0xbd4>
	{
		_delay_ms(__us / 1000.0);
    35be:	fe 01       	movw	r30, r28
    35c0:	eb 5b       	subi	r30, 0xBB	; 187
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	60 81       	ld	r22, Z
    35c6:	71 81       	ldd	r23, Z+1	; 0x01
    35c8:	82 81       	ldd	r24, Z+2	; 0x02
    35ca:	93 81       	ldd	r25, Z+3	; 0x03
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	4a e7       	ldi	r20, 0x7A	; 122
    35d2:	54 e4       	ldi	r21, 0x44	; 68
    35d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35d8:	dc 01       	movw	r26, r24
    35da:	cb 01       	movw	r24, r22
    35dc:	8c af       	std	Y+60, r24	; 0x3c
    35de:	9d af       	std	Y+61, r25	; 0x3d
    35e0:	ae af       	std	Y+62, r26	; 0x3e
    35e2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35e4:	6c ad       	ldd	r22, Y+60	; 0x3c
    35e6:	7d ad       	ldd	r23, Y+61	; 0x3d
    35e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    35ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    35ec:	20 e0       	ldi	r18, 0x00	; 0
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	4a ef       	ldi	r20, 0xFA	; 250
    35f2:	54 e4       	ldi	r21, 0x44	; 68
    35f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	88 af       	std	Y+56, r24	; 0x38
    35fe:	99 af       	std	Y+57, r25	; 0x39
    3600:	aa af       	std	Y+58, r26	; 0x3a
    3602:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3604:	68 ad       	ldd	r22, Y+56	; 0x38
    3606:	79 ad       	ldd	r23, Y+57	; 0x39
    3608:	8a ad       	ldd	r24, Y+58	; 0x3a
    360a:	9b ad       	ldd	r25, Y+59	; 0x3b
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	40 e8       	ldi	r20, 0x80	; 128
    3612:	5f e3       	ldi	r21, 0x3F	; 63
    3614:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3618:	88 23       	and	r24, r24
    361a:	2c f4       	brge	.+10     	; 0x3626 <LCD_function_Set_4bit+0xb40>
		__ticks = 1;
    361c:	81 e0       	ldi	r24, 0x01	; 1
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	9f ab       	std	Y+55, r25	; 0x37
    3622:	8e ab       	std	Y+54, r24	; 0x36
    3624:	3f c0       	rjmp	.+126    	; 0x36a4 <LCD_function_Set_4bit+0xbbe>
	else if (__tmp > 65535)
    3626:	68 ad       	ldd	r22, Y+56	; 0x38
    3628:	79 ad       	ldd	r23, Y+57	; 0x39
    362a:	8a ad       	ldd	r24, Y+58	; 0x3a
    362c:	9b ad       	ldd	r25, Y+59	; 0x3b
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	3f ef       	ldi	r19, 0xFF	; 255
    3632:	4f e7       	ldi	r20, 0x7F	; 127
    3634:	57 e4       	ldi	r21, 0x47	; 71
    3636:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    363a:	18 16       	cp	r1, r24
    363c:	4c f5       	brge	.+82     	; 0x3690 <LCD_function_Set_4bit+0xbaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    363e:	6c ad       	ldd	r22, Y+60	; 0x3c
    3640:	7d ad       	ldd	r23, Y+61	; 0x3d
    3642:	8e ad       	ldd	r24, Y+62	; 0x3e
    3644:	9f ad       	ldd	r25, Y+63	; 0x3f
    3646:	20 e0       	ldi	r18, 0x00	; 0
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	40 e2       	ldi	r20, 0x20	; 32
    364c:	51 e4       	ldi	r21, 0x41	; 65
    364e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	bc 01       	movw	r22, r24
    3658:	cd 01       	movw	r24, r26
    365a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	9f ab       	std	Y+55, r25	; 0x37
    3664:	8e ab       	std	Y+54, r24	; 0x36
    3666:	0f c0       	rjmp	.+30     	; 0x3686 <LCD_function_Set_4bit+0xba0>
    3668:	88 ec       	ldi	r24, 0xC8	; 200
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	9d ab       	std	Y+53, r25	; 0x35
    366e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3670:	8c a9       	ldd	r24, Y+52	; 0x34
    3672:	9d a9       	ldd	r25, Y+53	; 0x35
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	f1 f7       	brne	.-4      	; 0x3674 <LCD_function_Set_4bit+0xb8e>
    3678:	9d ab       	std	Y+53, r25	; 0x35
    367a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    367c:	8e a9       	ldd	r24, Y+54	; 0x36
    367e:	9f a9       	ldd	r25, Y+55	; 0x37
    3680:	01 97       	sbiw	r24, 0x01	; 1
    3682:	9f ab       	std	Y+55, r25	; 0x37
    3684:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3686:	8e a9       	ldd	r24, Y+54	; 0x36
    3688:	9f a9       	ldd	r25, Y+55	; 0x37
    368a:	00 97       	sbiw	r24, 0x00	; 0
    368c:	69 f7       	brne	.-38     	; 0x3668 <LCD_function_Set_4bit+0xb82>
    368e:	2d c0       	rjmp	.+90     	; 0x36ea <LCD_function_Set_4bit+0xc04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3690:	68 ad       	ldd	r22, Y+56	; 0x38
    3692:	79 ad       	ldd	r23, Y+57	; 0x39
    3694:	8a ad       	ldd	r24, Y+58	; 0x3a
    3696:	9b ad       	ldd	r25, Y+59	; 0x3b
    3698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	9f ab       	std	Y+55, r25	; 0x37
    36a2:	8e ab       	std	Y+54, r24	; 0x36
    36a4:	8e a9       	ldd	r24, Y+54	; 0x36
    36a6:	9f a9       	ldd	r25, Y+55	; 0x37
    36a8:	9b ab       	std	Y+51, r25	; 0x33
    36aa:	8a ab       	std	Y+50, r24	; 0x32
    36ac:	8a a9       	ldd	r24, Y+50	; 0x32
    36ae:	9b a9       	ldd	r25, Y+51	; 0x33
    36b0:	01 97       	sbiw	r24, 0x01	; 1
    36b2:	f1 f7       	brne	.-4      	; 0x36b0 <LCD_function_Set_4bit+0xbca>
    36b4:	9b ab       	std	Y+51, r25	; 0x33
    36b6:	8a ab       	std	Y+50, r24	; 0x32
    36b8:	18 c0       	rjmp	.+48     	; 0x36ea <LCD_function_Set_4bit+0xc04>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    36ba:	fe 01       	movw	r30, r28
    36bc:	ef 5b       	subi	r30, 0xBF	; 191
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	60 81       	ld	r22, Z
    36c2:	71 81       	ldd	r23, Z+1	; 0x01
    36c4:	82 81       	ldd	r24, Z+2	; 0x02
    36c6:	93 81       	ldd	r25, Z+3	; 0x03
    36c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	fe 01       	movw	r30, r28
    36d2:	e0 5c       	subi	r30, 0xC0	; 192
    36d4:	ff 4f       	sbci	r31, 0xFF	; 255
    36d6:	80 83       	st	Z, r24
    36d8:	fe 01       	movw	r30, r28
    36da:	e0 5c       	subi	r30, 0xC0	; 192
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	80 81       	ld	r24, Z
    36e0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    36e2:	89 a9       	ldd	r24, Y+49	; 0x31
    36e4:	8a 95       	dec	r24
    36e6:	f1 f7       	brne	.-4      	; 0x36e4 <LCD_function_Set_4bit+0xbfe>
    36e8:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(10);
	//send the low nibble
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
    36ea:	83 e0       	ldi	r24, 0x03	; 3
    36ec:	60 e0       	ldi	r22, 0x00	; 0
    36ee:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_void_set_pin>
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	a0 e8       	ldi	r26, 0x80	; 128
    36f8:	bf e3       	ldi	r27, 0x3F	; 63
    36fa:	8d a7       	std	Y+45, r24	; 0x2d
    36fc:	9e a7       	std	Y+46, r25	; 0x2e
    36fe:	af a7       	std	Y+47, r26	; 0x2f
    3700:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3702:	6d a5       	ldd	r22, Y+45	; 0x2d
    3704:	7e a5       	ldd	r23, Y+46	; 0x2e
    3706:	8f a5       	ldd	r24, Y+47	; 0x2f
    3708:	98 a9       	ldd	r25, Y+48	; 0x30
    370a:	2b ea       	ldi	r18, 0xAB	; 171
    370c:	3a ea       	ldi	r19, 0xAA	; 170
    370e:	4a e2       	ldi	r20, 0x2A	; 42
    3710:	50 e4       	ldi	r21, 0x40	; 64
    3712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3716:	dc 01       	movw	r26, r24
    3718:	cb 01       	movw	r24, r22
    371a:	89 a7       	std	Y+41, r24	; 0x29
    371c:	9a a7       	std	Y+42, r25	; 0x2a
    371e:	ab a7       	std	Y+43, r26	; 0x2b
    3720:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3722:	69 a5       	ldd	r22, Y+41	; 0x29
    3724:	7a a5       	ldd	r23, Y+42	; 0x2a
    3726:	8b a5       	ldd	r24, Y+43	; 0x2b
    3728:	9c a5       	ldd	r25, Y+44	; 0x2c
    372a:	20 e0       	ldi	r18, 0x00	; 0
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	40 e8       	ldi	r20, 0x80	; 128
    3730:	5f e3       	ldi	r21, 0x3F	; 63
    3732:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3736:	88 23       	and	r24, r24
    3738:	1c f4       	brge	.+6      	; 0x3740 <LCD_function_Set_4bit+0xc5a>
		__ticks = 1;
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	88 a7       	std	Y+40, r24	; 0x28
    373e:	91 c0       	rjmp	.+290    	; 0x3862 <LCD_function_Set_4bit+0xd7c>
	else if (__tmp > 255)
    3740:	69 a5       	ldd	r22, Y+41	; 0x29
    3742:	7a a5       	ldd	r23, Y+42	; 0x2a
    3744:	8b a5       	ldd	r24, Y+43	; 0x2b
    3746:	9c a5       	ldd	r25, Y+44	; 0x2c
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	4f e7       	ldi	r20, 0x7F	; 127
    374e:	53 e4       	ldi	r21, 0x43	; 67
    3750:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3754:	18 16       	cp	r1, r24
    3756:	0c f0       	brlt	.+2      	; 0x375a <LCD_function_Set_4bit+0xc74>
    3758:	7b c0       	rjmp	.+246    	; 0x3850 <LCD_function_Set_4bit+0xd6a>
	{
		_delay_ms(__us / 1000.0);
    375a:	6d a5       	ldd	r22, Y+45	; 0x2d
    375c:	7e a5       	ldd	r23, Y+46	; 0x2e
    375e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3760:	98 a9       	ldd	r25, Y+48	; 0x30
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	4a e7       	ldi	r20, 0x7A	; 122
    3768:	54 e4       	ldi	r21, 0x44	; 68
    376a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    376e:	dc 01       	movw	r26, r24
    3770:	cb 01       	movw	r24, r22
    3772:	8c a3       	std	Y+36, r24	; 0x24
    3774:	9d a3       	std	Y+37, r25	; 0x25
    3776:	ae a3       	std	Y+38, r26	; 0x26
    3778:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    377a:	6c a1       	ldd	r22, Y+36	; 0x24
    377c:	7d a1       	ldd	r23, Y+37	; 0x25
    377e:	8e a1       	ldd	r24, Y+38	; 0x26
    3780:	9f a1       	ldd	r25, Y+39	; 0x27
    3782:	20 e0       	ldi	r18, 0x00	; 0
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	4a ef       	ldi	r20, 0xFA	; 250
    3788:	54 e4       	ldi	r21, 0x44	; 68
    378a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    378e:	dc 01       	movw	r26, r24
    3790:	cb 01       	movw	r24, r22
    3792:	88 a3       	std	Y+32, r24	; 0x20
    3794:	99 a3       	std	Y+33, r25	; 0x21
    3796:	aa a3       	std	Y+34, r26	; 0x22
    3798:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    379a:	68 a1       	ldd	r22, Y+32	; 0x20
    379c:	79 a1       	ldd	r23, Y+33	; 0x21
    379e:	8a a1       	ldd	r24, Y+34	; 0x22
    37a0:	9b a1       	ldd	r25, Y+35	; 0x23
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	40 e8       	ldi	r20, 0x80	; 128
    37a8:	5f e3       	ldi	r21, 0x3F	; 63
    37aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37ae:	88 23       	and	r24, r24
    37b0:	2c f4       	brge	.+10     	; 0x37bc <LCD_function_Set_4bit+0xcd6>
		__ticks = 1;
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	9f 8f       	std	Y+31, r25	; 0x1f
    37b8:	8e 8f       	std	Y+30, r24	; 0x1e
    37ba:	3f c0       	rjmp	.+126    	; 0x383a <LCD_function_Set_4bit+0xd54>
	else if (__tmp > 65535)
    37bc:	68 a1       	ldd	r22, Y+32	; 0x20
    37be:	79 a1       	ldd	r23, Y+33	; 0x21
    37c0:	8a a1       	ldd	r24, Y+34	; 0x22
    37c2:	9b a1       	ldd	r25, Y+35	; 0x23
    37c4:	20 e0       	ldi	r18, 0x00	; 0
    37c6:	3f ef       	ldi	r19, 0xFF	; 255
    37c8:	4f e7       	ldi	r20, 0x7F	; 127
    37ca:	57 e4       	ldi	r21, 0x47	; 71
    37cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37d0:	18 16       	cp	r1, r24
    37d2:	4c f5       	brge	.+82     	; 0x3826 <LCD_function_Set_4bit+0xd40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37d4:	6c a1       	ldd	r22, Y+36	; 0x24
    37d6:	7d a1       	ldd	r23, Y+37	; 0x25
    37d8:	8e a1       	ldd	r24, Y+38	; 0x26
    37da:	9f a1       	ldd	r25, Y+39	; 0x27
    37dc:	20 e0       	ldi	r18, 0x00	; 0
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	40 e2       	ldi	r20, 0x20	; 32
    37e2:	51 e4       	ldi	r21, 0x41	; 65
    37e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e8:	dc 01       	movw	r26, r24
    37ea:	cb 01       	movw	r24, r22
    37ec:	bc 01       	movw	r22, r24
    37ee:	cd 01       	movw	r24, r26
    37f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f4:	dc 01       	movw	r26, r24
    37f6:	cb 01       	movw	r24, r22
    37f8:	9f 8f       	std	Y+31, r25	; 0x1f
    37fa:	8e 8f       	std	Y+30, r24	; 0x1e
    37fc:	0f c0       	rjmp	.+30     	; 0x381c <LCD_function_Set_4bit+0xd36>
    37fe:	88 ec       	ldi	r24, 0xC8	; 200
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	9d 8f       	std	Y+29, r25	; 0x1d
    3804:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3806:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3808:	9d 8d       	ldd	r25, Y+29	; 0x1d
    380a:	01 97       	sbiw	r24, 0x01	; 1
    380c:	f1 f7       	brne	.-4      	; 0x380a <LCD_function_Set_4bit+0xd24>
    380e:	9d 8f       	std	Y+29, r25	; 0x1d
    3810:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3812:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3814:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3816:	01 97       	sbiw	r24, 0x01	; 1
    3818:	9f 8f       	std	Y+31, r25	; 0x1f
    381a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    381c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    381e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3820:	00 97       	sbiw	r24, 0x00	; 0
    3822:	69 f7       	brne	.-38     	; 0x37fe <LCD_function_Set_4bit+0xd18>
    3824:	24 c0       	rjmp	.+72     	; 0x386e <LCD_function_Set_4bit+0xd88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3826:	68 a1       	ldd	r22, Y+32	; 0x20
    3828:	79 a1       	ldd	r23, Y+33	; 0x21
    382a:	8a a1       	ldd	r24, Y+34	; 0x22
    382c:	9b a1       	ldd	r25, Y+35	; 0x23
    382e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3832:	dc 01       	movw	r26, r24
    3834:	cb 01       	movw	r24, r22
    3836:	9f 8f       	std	Y+31, r25	; 0x1f
    3838:	8e 8f       	std	Y+30, r24	; 0x1e
    383a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    383c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    383e:	9b 8f       	std	Y+27, r25	; 0x1b
    3840:	8a 8f       	std	Y+26, r24	; 0x1a
    3842:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3844:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3846:	01 97       	sbiw	r24, 0x01	; 1
    3848:	f1 f7       	brne	.-4      	; 0x3846 <LCD_function_Set_4bit+0xd60>
    384a:	9b 8f       	std	Y+27, r25	; 0x1b
    384c:	8a 8f       	std	Y+26, r24	; 0x1a
    384e:	0f c0       	rjmp	.+30     	; 0x386e <LCD_function_Set_4bit+0xd88>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3850:	69 a5       	ldd	r22, Y+41	; 0x29
    3852:	7a a5       	ldd	r23, Y+42	; 0x2a
    3854:	8b a5       	ldd	r24, Y+43	; 0x2b
    3856:	9c a5       	ldd	r25, Y+44	; 0x2c
    3858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	88 a7       	std	Y+40, r24	; 0x28
    3862:	88 a5       	ldd	r24, Y+40	; 0x28
    3864:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3866:	89 8d       	ldd	r24, Y+25	; 0x19
    3868:	8a 95       	dec	r24
    386a:	f1 f7       	brne	.-4      	; 0x3868 <LCD_function_Set_4bit+0xd82>
    386c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    386e:	fe 01       	movw	r30, r28
    3870:	e7 55       	subi	r30, 0x57	; 87
    3872:	ff 4f       	sbci	r31, 0xFF	; 255
    3874:	10 82       	st	Z, r1
    3876:	23 c0       	rjmp	.+70     	; 0x38be <LCD_function_Set_4bit+0xdd8>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b1000,i));
    3878:	fe 01       	movw	r30, r28
    387a:	e7 55       	subi	r30, 0x57	; 87
    387c:	ff 4f       	sbci	r31, 0xFF	; 255
    387e:	80 81       	ld	r24, Z
    3880:	48 2f       	mov	r20, r24
    3882:	4c 5f       	subi	r20, 0xFC	; 252
    3884:	fe 01       	movw	r30, r28
    3886:	e7 55       	subi	r30, 0x57	; 87
    3888:	ff 4f       	sbci	r31, 0xFF	; 255
    388a:	80 81       	ld	r24, Z
    388c:	28 2f       	mov	r18, r24
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	88 e0       	ldi	r24, 0x08	; 8
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	02 c0       	rjmp	.+4      	; 0x389a <LCD_function_Set_4bit+0xdb4>
    3896:	95 95       	asr	r25
    3898:	87 95       	ror	r24
    389a:	2a 95       	dec	r18
    389c:	e2 f7       	brpl	.-8      	; 0x3896 <LCD_function_Set_4bit+0xdb0>
    389e:	98 2f       	mov	r25, r24
    38a0:	91 70       	andi	r25, 0x01	; 1
    38a2:	82 e0       	ldi	r24, 0x02	; 2
    38a4:	64 2f       	mov	r22, r20
    38a6:	49 2f       	mov	r20, r25
    38a8:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_void_assign_pin>
	//send the low nibble
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    38ac:	de 01       	movw	r26, r28
    38ae:	a7 55       	subi	r26, 0x57	; 87
    38b0:	bf 4f       	sbci	r27, 0xFF	; 255
    38b2:	fe 01       	movw	r30, r28
    38b4:	e7 55       	subi	r30, 0x57	; 87
    38b6:	ff 4f       	sbci	r31, 0xFF	; 255
    38b8:	80 81       	ld	r24, Z
    38ba:	8f 5f       	subi	r24, 0xFF	; 255
    38bc:	8c 93       	st	X, r24
    38be:	fe 01       	movw	r30, r28
    38c0:	e7 55       	subi	r30, 0x57	; 87
    38c2:	ff 4f       	sbci	r31, 0xFF	; 255
    38c4:	80 81       	ld	r24, Z
    38c6:	84 30       	cpi	r24, 0x04	; 4
    38c8:	b8 f2       	brcs	.-82     	; 0x3878 <LCD_function_Set_4bit+0xd92>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b1000,i));
	}
	//enable pin low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    38ca:	83 e0       	ldi	r24, 0x03	; 3
    38cc:	60 e0       	ldi	r22, 0x00	; 0
    38ce:	0e 94 80 08 	call	0x1100	; 0x1100 <DIO_void_clear_pin>
    38d2:	80 e0       	ldi	r24, 0x00	; 0
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	a0 e2       	ldi	r26, 0x20	; 32
    38d8:	b1 e4       	ldi	r27, 0x41	; 65
    38da:	8d 8b       	std	Y+21, r24	; 0x15
    38dc:	9e 8b       	std	Y+22, r25	; 0x16
    38de:	af 8b       	std	Y+23, r26	; 0x17
    38e0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    38e2:	6d 89       	ldd	r22, Y+21	; 0x15
    38e4:	7e 89       	ldd	r23, Y+22	; 0x16
    38e6:	8f 89       	ldd	r24, Y+23	; 0x17
    38e8:	98 8d       	ldd	r25, Y+24	; 0x18
    38ea:	2b ea       	ldi	r18, 0xAB	; 171
    38ec:	3a ea       	ldi	r19, 0xAA	; 170
    38ee:	4a e2       	ldi	r20, 0x2A	; 42
    38f0:	50 e4       	ldi	r21, 0x40	; 64
    38f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f6:	dc 01       	movw	r26, r24
    38f8:	cb 01       	movw	r24, r22
    38fa:	89 8b       	std	Y+17, r24	; 0x11
    38fc:	9a 8b       	std	Y+18, r25	; 0x12
    38fe:	ab 8b       	std	Y+19, r26	; 0x13
    3900:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3902:	69 89       	ldd	r22, Y+17	; 0x11
    3904:	7a 89       	ldd	r23, Y+18	; 0x12
    3906:	8b 89       	ldd	r24, Y+19	; 0x13
    3908:	9c 89       	ldd	r25, Y+20	; 0x14
    390a:	20 e0       	ldi	r18, 0x00	; 0
    390c:	30 e0       	ldi	r19, 0x00	; 0
    390e:	40 e8       	ldi	r20, 0x80	; 128
    3910:	5f e3       	ldi	r21, 0x3F	; 63
    3912:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3916:	88 23       	and	r24, r24
    3918:	1c f4       	brge	.+6      	; 0x3920 <LCD_function_Set_4bit+0xe3a>
		__ticks = 1;
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	88 8b       	std	Y+16, r24	; 0x10
    391e:	91 c0       	rjmp	.+290    	; 0x3a42 <LCD_function_Set_4bit+0xf5c>
	else if (__tmp > 255)
    3920:	69 89       	ldd	r22, Y+17	; 0x11
    3922:	7a 89       	ldd	r23, Y+18	; 0x12
    3924:	8b 89       	ldd	r24, Y+19	; 0x13
    3926:	9c 89       	ldd	r25, Y+20	; 0x14
    3928:	20 e0       	ldi	r18, 0x00	; 0
    392a:	30 e0       	ldi	r19, 0x00	; 0
    392c:	4f e7       	ldi	r20, 0x7F	; 127
    392e:	53 e4       	ldi	r21, 0x43	; 67
    3930:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3934:	18 16       	cp	r1, r24
    3936:	0c f0       	brlt	.+2      	; 0x393a <LCD_function_Set_4bit+0xe54>
    3938:	7b c0       	rjmp	.+246    	; 0x3a30 <LCD_function_Set_4bit+0xf4a>
	{
		_delay_ms(__us / 1000.0);
    393a:	6d 89       	ldd	r22, Y+21	; 0x15
    393c:	7e 89       	ldd	r23, Y+22	; 0x16
    393e:	8f 89       	ldd	r24, Y+23	; 0x17
    3940:	98 8d       	ldd	r25, Y+24	; 0x18
    3942:	20 e0       	ldi	r18, 0x00	; 0
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	4a e7       	ldi	r20, 0x7A	; 122
    3948:	54 e4       	ldi	r21, 0x44	; 68
    394a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	8c 87       	std	Y+12, r24	; 0x0c
    3954:	9d 87       	std	Y+13, r25	; 0x0d
    3956:	ae 87       	std	Y+14, r26	; 0x0e
    3958:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    395a:	6c 85       	ldd	r22, Y+12	; 0x0c
    395c:	7d 85       	ldd	r23, Y+13	; 0x0d
    395e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3960:	9f 85       	ldd	r25, Y+15	; 0x0f
    3962:	20 e0       	ldi	r18, 0x00	; 0
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	4a ef       	ldi	r20, 0xFA	; 250
    3968:	54 e4       	ldi	r21, 0x44	; 68
    396a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    396e:	dc 01       	movw	r26, r24
    3970:	cb 01       	movw	r24, r22
    3972:	88 87       	std	Y+8, r24	; 0x08
    3974:	99 87       	std	Y+9, r25	; 0x09
    3976:	aa 87       	std	Y+10, r26	; 0x0a
    3978:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    397a:	68 85       	ldd	r22, Y+8	; 0x08
    397c:	79 85       	ldd	r23, Y+9	; 0x09
    397e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3980:	9b 85       	ldd	r25, Y+11	; 0x0b
    3982:	20 e0       	ldi	r18, 0x00	; 0
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	40 e8       	ldi	r20, 0x80	; 128
    3988:	5f e3       	ldi	r21, 0x3F	; 63
    398a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    398e:	88 23       	and	r24, r24
    3990:	2c f4       	brge	.+10     	; 0x399c <LCD_function_Set_4bit+0xeb6>
		__ticks = 1;
    3992:	81 e0       	ldi	r24, 0x01	; 1
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	9f 83       	std	Y+7, r25	; 0x07
    3998:	8e 83       	std	Y+6, r24	; 0x06
    399a:	3f c0       	rjmp	.+126    	; 0x3a1a <LCD_function_Set_4bit+0xf34>
	else if (__tmp > 65535)
    399c:	68 85       	ldd	r22, Y+8	; 0x08
    399e:	79 85       	ldd	r23, Y+9	; 0x09
    39a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    39a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	3f ef       	ldi	r19, 0xFF	; 255
    39a8:	4f e7       	ldi	r20, 0x7F	; 127
    39aa:	57 e4       	ldi	r21, 0x47	; 71
    39ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39b0:	18 16       	cp	r1, r24
    39b2:	4c f5       	brge	.+82     	; 0x3a06 <LCD_function_Set_4bit+0xf20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39b4:	6c 85       	ldd	r22, Y+12	; 0x0c
    39b6:	7d 85       	ldd	r23, Y+13	; 0x0d
    39b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    39ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    39bc:	20 e0       	ldi	r18, 0x00	; 0
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	40 e2       	ldi	r20, 0x20	; 32
    39c2:	51 e4       	ldi	r21, 0x41	; 65
    39c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c8:	dc 01       	movw	r26, r24
    39ca:	cb 01       	movw	r24, r22
    39cc:	bc 01       	movw	r22, r24
    39ce:	cd 01       	movw	r24, r26
    39d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d4:	dc 01       	movw	r26, r24
    39d6:	cb 01       	movw	r24, r22
    39d8:	9f 83       	std	Y+7, r25	; 0x07
    39da:	8e 83       	std	Y+6, r24	; 0x06
    39dc:	0f c0       	rjmp	.+30     	; 0x39fc <LCD_function_Set_4bit+0xf16>
    39de:	88 ec       	ldi	r24, 0xC8	; 200
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	9d 83       	std	Y+5, r25	; 0x05
    39e4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39e6:	8c 81       	ldd	r24, Y+4	; 0x04
    39e8:	9d 81       	ldd	r25, Y+5	; 0x05
    39ea:	01 97       	sbiw	r24, 0x01	; 1
    39ec:	f1 f7       	brne	.-4      	; 0x39ea <LCD_function_Set_4bit+0xf04>
    39ee:	9d 83       	std	Y+5, r25	; 0x05
    39f0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39f2:	8e 81       	ldd	r24, Y+6	; 0x06
    39f4:	9f 81       	ldd	r25, Y+7	; 0x07
    39f6:	01 97       	sbiw	r24, 0x01	; 1
    39f8:	9f 83       	std	Y+7, r25	; 0x07
    39fa:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39fc:	8e 81       	ldd	r24, Y+6	; 0x06
    39fe:	9f 81       	ldd	r25, Y+7	; 0x07
    3a00:	00 97       	sbiw	r24, 0x00	; 0
    3a02:	69 f7       	brne	.-38     	; 0x39de <LCD_function_Set_4bit+0xef8>
    3a04:	24 c0       	rjmp	.+72     	; 0x3a4e <LCD_function_Set_4bit+0xf68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a06:	68 85       	ldd	r22, Y+8	; 0x08
    3a08:	79 85       	ldd	r23, Y+9	; 0x09
    3a0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a12:	dc 01       	movw	r26, r24
    3a14:	cb 01       	movw	r24, r22
    3a16:	9f 83       	std	Y+7, r25	; 0x07
    3a18:	8e 83       	std	Y+6, r24	; 0x06
    3a1a:	8e 81       	ldd	r24, Y+6	; 0x06
    3a1c:	9f 81       	ldd	r25, Y+7	; 0x07
    3a1e:	9b 83       	std	Y+3, r25	; 0x03
    3a20:	8a 83       	std	Y+2, r24	; 0x02
    3a22:	8a 81       	ldd	r24, Y+2	; 0x02
    3a24:	9b 81       	ldd	r25, Y+3	; 0x03
    3a26:	01 97       	sbiw	r24, 0x01	; 1
    3a28:	f1 f7       	brne	.-4      	; 0x3a26 <LCD_function_Set_4bit+0xf40>
    3a2a:	9b 83       	std	Y+3, r25	; 0x03
    3a2c:	8a 83       	std	Y+2, r24	; 0x02
    3a2e:	0f c0       	rjmp	.+30     	; 0x3a4e <LCD_function_Set_4bit+0xf68>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a30:	69 89       	ldd	r22, Y+17	; 0x11
    3a32:	7a 89       	ldd	r23, Y+18	; 0x12
    3a34:	8b 89       	ldd	r24, Y+19	; 0x13
    3a36:	9c 89       	ldd	r25, Y+20	; 0x14
    3a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a3c:	dc 01       	movw	r26, r24
    3a3e:	cb 01       	movw	r24, r22
    3a40:	88 8b       	std	Y+16, r24	; 0x10
    3a42:	88 89       	ldd	r24, Y+16	; 0x10
    3a44:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a46:	89 81       	ldd	r24, Y+1	; 0x01
    3a48:	8a 95       	dec	r24
    3a4a:	f1 f7       	brne	.-4      	; 0x3a48 <LCD_function_Set_4bit+0xf62>
    3a4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);

}
    3a4e:	c5 55       	subi	r28, 0x55	; 85
    3a50:	df 4f       	sbci	r29, 0xFF	; 255
    3a52:	0f b6       	in	r0, 0x3f	; 63
    3a54:	f8 94       	cli
    3a56:	de bf       	out	0x3e, r29	; 62
    3a58:	0f be       	out	0x3f, r0	; 63
    3a5a:	cd bf       	out	0x3d, r28	; 61
    3a5c:	cf 91       	pop	r28
    3a5e:	df 91       	pop	r29
    3a60:	1f 91       	pop	r17
    3a62:	0f 91       	pop	r16
    3a64:	08 95       	ret

00003a66 <LCD_init>:



/* Driver features functions for the user */

void LCD_init(){
    3a66:	0f 93       	push	r16
    3a68:	1f 93       	push	r17
    3a6a:	df 93       	push	r29
    3a6c:	cf 93       	push	r28
    3a6e:	cd b7       	in	r28, 0x3d	; 61
    3a70:	de b7       	in	r29, 0x3e	; 62
    3a72:	cc 54       	subi	r28, 0x4C	; 76
    3a74:	d0 40       	sbci	r29, 0x00	; 0
    3a76:	0f b6       	in	r0, 0x3f	; 63
    3a78:	f8 94       	cli
    3a7a:	de bf       	out	0x3e, r29	; 62
    3a7c:	0f be       	out	0x3f, r0	; 63
    3a7e:	cd bf       	out	0x3d, r28	; 61

#elif LCD_interface_mode == interface_4bit


	// configure data pins direction
	DIO_void_set_pin_dir(lcd_data_port, B7, OUTPUT);
    3a80:	82 e0       	ldi	r24, 0x02	; 2
    3a82:	67 e0       	ldi	r22, 0x07	; 7
    3a84:	41 e0       	ldi	r20, 0x01	; 1
    3a86:	0e 94 15 07 	call	0xe2a	; 0xe2a <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, OUTPUT);
    3a8a:	82 e0       	ldi	r24, 0x02	; 2
    3a8c:	66 e0       	ldi	r22, 0x06	; 6
    3a8e:	41 e0       	ldi	r20, 0x01	; 1
    3a90:	0e 94 15 07 	call	0xe2a	; 0xe2a <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, OUTPUT);
    3a94:	82 e0       	ldi	r24, 0x02	; 2
    3a96:	65 e0       	ldi	r22, 0x05	; 5
    3a98:	41 e0       	ldi	r20, 0x01	; 1
    3a9a:	0e 94 15 07 	call	0xe2a	; 0xe2a <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, OUTPUT);
    3a9e:	82 e0       	ldi	r24, 0x02	; 2
    3aa0:	64 e0       	ldi	r22, 0x04	; 4
    3aa2:	41 e0       	ldi	r20, 0x01	; 1
    3aa4:	0e 94 15 07 	call	0xe2a	; 0xe2a <DIO_void_set_pin_dir>
	// RS,RW,E as  output
	DIO_void_set_pin_dir(lcd_control_port, lcd_RS, OUTPUT);
    3aa8:	83 e0       	ldi	r24, 0x03	; 3
    3aaa:	62 e0       	ldi	r22, 0x02	; 2
    3aac:	41 e0       	ldi	r20, 0x01	; 1
    3aae:	0e 94 15 07 	call	0xe2a	; 0xe2a <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_control_port, lcd_RW, OUTPUT);
    3ab2:	83 e0       	ldi	r24, 0x03	; 3
    3ab4:	61 e0       	ldi	r22, 0x01	; 1
    3ab6:	41 e0       	ldi	r20, 0x01	; 1
    3ab8:	0e 94 15 07 	call	0xe2a	; 0xe2a <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_control_port, lcd_enable, OUTPUT);
    3abc:	83 e0       	ldi	r24, 0x03	; 3
    3abe:	60 e0       	ldi	r22, 0x00	; 0
    3ac0:	41 e0       	ldi	r20, 0x01	; 1
    3ac2:	0e 94 15 07 	call	0xe2a	; 0xe2a <DIO_void_set_pin_dir>
    3ac6:	fe 01       	movw	r30, r28
    3ac8:	e7 5b       	subi	r30, 0xB7	; 183
    3aca:	ff 4f       	sbci	r31, 0xFF	; 255
    3acc:	80 e0       	ldi	r24, 0x00	; 0
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	a8 e4       	ldi	r26, 0x48	; 72
    3ad2:	b2 e4       	ldi	r27, 0x42	; 66
    3ad4:	80 83       	st	Z, r24
    3ad6:	91 83       	std	Z+1, r25	; 0x01
    3ad8:	a2 83       	std	Z+2, r26	; 0x02
    3ada:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3adc:	8e 01       	movw	r16, r28
    3ade:	0b 5b       	subi	r16, 0xBB	; 187
    3ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ae2:	fe 01       	movw	r30, r28
    3ae4:	e7 5b       	subi	r30, 0xB7	; 183
    3ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae8:	60 81       	ld	r22, Z
    3aea:	71 81       	ldd	r23, Z+1	; 0x01
    3aec:	82 81       	ldd	r24, Z+2	; 0x02
    3aee:	93 81       	ldd	r25, Z+3	; 0x03
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	4a ef       	ldi	r20, 0xFA	; 250
    3af6:	54 e4       	ldi	r21, 0x44	; 68
    3af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3afc:	dc 01       	movw	r26, r24
    3afe:	cb 01       	movw	r24, r22
    3b00:	f8 01       	movw	r30, r16
    3b02:	80 83       	st	Z, r24
    3b04:	91 83       	std	Z+1, r25	; 0x01
    3b06:	a2 83       	std	Z+2, r26	; 0x02
    3b08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b0a:	fe 01       	movw	r30, r28
    3b0c:	eb 5b       	subi	r30, 0xBB	; 187
    3b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b10:	60 81       	ld	r22, Z
    3b12:	71 81       	ldd	r23, Z+1	; 0x01
    3b14:	82 81       	ldd	r24, Z+2	; 0x02
    3b16:	93 81       	ldd	r25, Z+3	; 0x03
    3b18:	20 e0       	ldi	r18, 0x00	; 0
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	40 e8       	ldi	r20, 0x80	; 128
    3b1e:	5f e3       	ldi	r21, 0x3F	; 63
    3b20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b24:	88 23       	and	r24, r24
    3b26:	44 f4       	brge	.+16     	; 0x3b38 <LCD_init+0xd2>
		__ticks = 1;
    3b28:	fe 01       	movw	r30, r28
    3b2a:	ed 5b       	subi	r30, 0xBD	; 189
    3b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	91 83       	std	Z+1, r25	; 0x01
    3b34:	80 83       	st	Z, r24
    3b36:	64 c0       	rjmp	.+200    	; 0x3c00 <LCD_init+0x19a>
	else if (__tmp > 65535)
    3b38:	fe 01       	movw	r30, r28
    3b3a:	eb 5b       	subi	r30, 0xBB	; 187
    3b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3e:	60 81       	ld	r22, Z
    3b40:	71 81       	ldd	r23, Z+1	; 0x01
    3b42:	82 81       	ldd	r24, Z+2	; 0x02
    3b44:	93 81       	ldd	r25, Z+3	; 0x03
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	3f ef       	ldi	r19, 0xFF	; 255
    3b4a:	4f e7       	ldi	r20, 0x7F	; 127
    3b4c:	57 e4       	ldi	r21, 0x47	; 71
    3b4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b52:	18 16       	cp	r1, r24
    3b54:	0c f0       	brlt	.+2      	; 0x3b58 <LCD_init+0xf2>
    3b56:	43 c0       	rjmp	.+134    	; 0x3bde <LCD_init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b58:	fe 01       	movw	r30, r28
    3b5a:	e7 5b       	subi	r30, 0xB7	; 183
    3b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5e:	60 81       	ld	r22, Z
    3b60:	71 81       	ldd	r23, Z+1	; 0x01
    3b62:	82 81       	ldd	r24, Z+2	; 0x02
    3b64:	93 81       	ldd	r25, Z+3	; 0x03
    3b66:	20 e0       	ldi	r18, 0x00	; 0
    3b68:	30 e0       	ldi	r19, 0x00	; 0
    3b6a:	40 e2       	ldi	r20, 0x20	; 32
    3b6c:	51 e4       	ldi	r21, 0x41	; 65
    3b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b72:	dc 01       	movw	r26, r24
    3b74:	cb 01       	movw	r24, r22
    3b76:	8e 01       	movw	r16, r28
    3b78:	0d 5b       	subi	r16, 0xBD	; 189
    3b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b7c:	bc 01       	movw	r22, r24
    3b7e:	cd 01       	movw	r24, r26
    3b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b84:	dc 01       	movw	r26, r24
    3b86:	cb 01       	movw	r24, r22
    3b88:	f8 01       	movw	r30, r16
    3b8a:	91 83       	std	Z+1, r25	; 0x01
    3b8c:	80 83       	st	Z, r24
    3b8e:	1f c0       	rjmp	.+62     	; 0x3bce <LCD_init+0x168>
    3b90:	fe 01       	movw	r30, r28
    3b92:	ef 5b       	subi	r30, 0xBF	; 191
    3b94:	ff 4f       	sbci	r31, 0xFF	; 255
    3b96:	88 ec       	ldi	r24, 0xC8	; 200
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	91 83       	std	Z+1, r25	; 0x01
    3b9c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b9e:	fe 01       	movw	r30, r28
    3ba0:	ef 5b       	subi	r30, 0xBF	; 191
    3ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba4:	80 81       	ld	r24, Z
    3ba6:	91 81       	ldd	r25, Z+1	; 0x01
    3ba8:	01 97       	sbiw	r24, 0x01	; 1
    3baa:	f1 f7       	brne	.-4      	; 0x3ba8 <LCD_init+0x142>
    3bac:	fe 01       	movw	r30, r28
    3bae:	ef 5b       	subi	r30, 0xBF	; 191
    3bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb2:	91 83       	std	Z+1, r25	; 0x01
    3bb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bb6:	de 01       	movw	r26, r28
    3bb8:	ad 5b       	subi	r26, 0xBD	; 189
    3bba:	bf 4f       	sbci	r27, 0xFF	; 255
    3bbc:	fe 01       	movw	r30, r28
    3bbe:	ed 5b       	subi	r30, 0xBD	; 189
    3bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc2:	80 81       	ld	r24, Z
    3bc4:	91 81       	ldd	r25, Z+1	; 0x01
    3bc6:	01 97       	sbiw	r24, 0x01	; 1
    3bc8:	11 96       	adiw	r26, 0x01	; 1
    3bca:	9c 93       	st	X, r25
    3bcc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bce:	fe 01       	movw	r30, r28
    3bd0:	ed 5b       	subi	r30, 0xBD	; 189
    3bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd4:	80 81       	ld	r24, Z
    3bd6:	91 81       	ldd	r25, Z+1	; 0x01
    3bd8:	00 97       	sbiw	r24, 0x00	; 0
    3bda:	d1 f6       	brne	.-76     	; 0x3b90 <LCD_init+0x12a>
    3bdc:	24 c0       	rjmp	.+72     	; 0x3c26 <LCD_init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bde:	8e 01       	movw	r16, r28
    3be0:	0d 5b       	subi	r16, 0xBD	; 189
    3be2:	1f 4f       	sbci	r17, 0xFF	; 255
    3be4:	fe 01       	movw	r30, r28
    3be6:	eb 5b       	subi	r30, 0xBB	; 187
    3be8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bea:	60 81       	ld	r22, Z
    3bec:	71 81       	ldd	r23, Z+1	; 0x01
    3bee:	82 81       	ldd	r24, Z+2	; 0x02
    3bf0:	93 81       	ldd	r25, Z+3	; 0x03
    3bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	cb 01       	movw	r24, r22
    3bfa:	f8 01       	movw	r30, r16
    3bfc:	91 83       	std	Z+1, r25	; 0x01
    3bfe:	80 83       	st	Z, r24
    3c00:	fe 01       	movw	r30, r28
    3c02:	ed 5b       	subi	r30, 0xBD	; 189
    3c04:	ff 4f       	sbci	r31, 0xFF	; 255
    3c06:	80 81       	ld	r24, Z
    3c08:	91 81       	ldd	r25, Z+1	; 0x01
    3c0a:	fe 01       	movw	r30, r28
    3c0c:	ff 96       	adiw	r30, 0x3f	; 63
    3c0e:	91 83       	std	Z+1, r25	; 0x01
    3c10:	80 83       	st	Z, r24
    3c12:	fe 01       	movw	r30, r28
    3c14:	ff 96       	adiw	r30, 0x3f	; 63
    3c16:	80 81       	ld	r24, Z
    3c18:	91 81       	ldd	r25, Z+1	; 0x01
    3c1a:	01 97       	sbiw	r24, 0x01	; 1
    3c1c:	f1 f7       	brne	.-4      	; 0x3c1a <LCD_init+0x1b4>
    3c1e:	fe 01       	movw	r30, r28
    3c20:	ff 96       	adiw	r30, 0x3f	; 63
    3c22:	91 83       	std	Z+1, r25	; 0x01
    3c24:	80 83       	st	Z, r24
	//wait for
	_delay_ms(50);
	// init 4bit
	LCD_function_Set_4bit();
    3c26:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <LCD_function_Set_4bit>
    3c2a:	80 e0       	ldi	r24, 0x00	; 0
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	a8 e4       	ldi	r26, 0x48	; 72
    3c30:	b2 e4       	ldi	r27, 0x42	; 66
    3c32:	8b af       	std	Y+59, r24	; 0x3b
    3c34:	9c af       	std	Y+60, r25	; 0x3c
    3c36:	ad af       	std	Y+61, r26	; 0x3d
    3c38:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c3a:	6b ad       	ldd	r22, Y+59	; 0x3b
    3c3c:	7c ad       	ldd	r23, Y+60	; 0x3c
    3c3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c40:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c42:	2b ea       	ldi	r18, 0xAB	; 171
    3c44:	3a ea       	ldi	r19, 0xAA	; 170
    3c46:	4a e2       	ldi	r20, 0x2A	; 42
    3c48:	50 e4       	ldi	r21, 0x40	; 64
    3c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c4e:	dc 01       	movw	r26, r24
    3c50:	cb 01       	movw	r24, r22
    3c52:	8f ab       	std	Y+55, r24	; 0x37
    3c54:	98 af       	std	Y+56, r25	; 0x38
    3c56:	a9 af       	std	Y+57, r26	; 0x39
    3c58:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    3c5a:	6f a9       	ldd	r22, Y+55	; 0x37
    3c5c:	78 ad       	ldd	r23, Y+56	; 0x38
    3c5e:	89 ad       	ldd	r24, Y+57	; 0x39
    3c60:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c62:	20 e0       	ldi	r18, 0x00	; 0
    3c64:	30 e0       	ldi	r19, 0x00	; 0
    3c66:	40 e8       	ldi	r20, 0x80	; 128
    3c68:	5f e3       	ldi	r21, 0x3F	; 63
    3c6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c6e:	88 23       	and	r24, r24
    3c70:	1c f4       	brge	.+6      	; 0x3c78 <LCD_init+0x212>
		__ticks = 1;
    3c72:	81 e0       	ldi	r24, 0x01	; 1
    3c74:	8e ab       	std	Y+54, r24	; 0x36
    3c76:	91 c0       	rjmp	.+290    	; 0x3d9a <LCD_init+0x334>
	else if (__tmp > 255)
    3c78:	6f a9       	ldd	r22, Y+55	; 0x37
    3c7a:	78 ad       	ldd	r23, Y+56	; 0x38
    3c7c:	89 ad       	ldd	r24, Y+57	; 0x39
    3c7e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c80:	20 e0       	ldi	r18, 0x00	; 0
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	4f e7       	ldi	r20, 0x7F	; 127
    3c86:	53 e4       	ldi	r21, 0x43	; 67
    3c88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c8c:	18 16       	cp	r1, r24
    3c8e:	0c f0       	brlt	.+2      	; 0x3c92 <LCD_init+0x22c>
    3c90:	7b c0       	rjmp	.+246    	; 0x3d88 <LCD_init+0x322>
	{
		_delay_ms(__us / 1000.0);
    3c92:	6b ad       	ldd	r22, Y+59	; 0x3b
    3c94:	7c ad       	ldd	r23, Y+60	; 0x3c
    3c96:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c98:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c9a:	20 e0       	ldi	r18, 0x00	; 0
    3c9c:	30 e0       	ldi	r19, 0x00	; 0
    3c9e:	4a e7       	ldi	r20, 0x7A	; 122
    3ca0:	54 e4       	ldi	r21, 0x44	; 68
    3ca2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ca6:	dc 01       	movw	r26, r24
    3ca8:	cb 01       	movw	r24, r22
    3caa:	8a ab       	std	Y+50, r24	; 0x32
    3cac:	9b ab       	std	Y+51, r25	; 0x33
    3cae:	ac ab       	std	Y+52, r26	; 0x34
    3cb0:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cb2:	6a a9       	ldd	r22, Y+50	; 0x32
    3cb4:	7b a9       	ldd	r23, Y+51	; 0x33
    3cb6:	8c a9       	ldd	r24, Y+52	; 0x34
    3cb8:	9d a9       	ldd	r25, Y+53	; 0x35
    3cba:	20 e0       	ldi	r18, 0x00	; 0
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	4a ef       	ldi	r20, 0xFA	; 250
    3cc0:	54 e4       	ldi	r21, 0x44	; 68
    3cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc6:	dc 01       	movw	r26, r24
    3cc8:	cb 01       	movw	r24, r22
    3cca:	8e a7       	std	Y+46, r24	; 0x2e
    3ccc:	9f a7       	std	Y+47, r25	; 0x2f
    3cce:	a8 ab       	std	Y+48, r26	; 0x30
    3cd0:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    3cd2:	6e a5       	ldd	r22, Y+46	; 0x2e
    3cd4:	7f a5       	ldd	r23, Y+47	; 0x2f
    3cd6:	88 a9       	ldd	r24, Y+48	; 0x30
    3cd8:	99 a9       	ldd	r25, Y+49	; 0x31
    3cda:	20 e0       	ldi	r18, 0x00	; 0
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	40 e8       	ldi	r20, 0x80	; 128
    3ce0:	5f e3       	ldi	r21, 0x3F	; 63
    3ce2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ce6:	88 23       	and	r24, r24
    3ce8:	2c f4       	brge	.+10     	; 0x3cf4 <LCD_init+0x28e>
		__ticks = 1;
    3cea:	81 e0       	ldi	r24, 0x01	; 1
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	9d a7       	std	Y+45, r25	; 0x2d
    3cf0:	8c a7       	std	Y+44, r24	; 0x2c
    3cf2:	3f c0       	rjmp	.+126    	; 0x3d72 <LCD_init+0x30c>
	else if (__tmp > 65535)
    3cf4:	6e a5       	ldd	r22, Y+46	; 0x2e
    3cf6:	7f a5       	ldd	r23, Y+47	; 0x2f
    3cf8:	88 a9       	ldd	r24, Y+48	; 0x30
    3cfa:	99 a9       	ldd	r25, Y+49	; 0x31
    3cfc:	20 e0       	ldi	r18, 0x00	; 0
    3cfe:	3f ef       	ldi	r19, 0xFF	; 255
    3d00:	4f e7       	ldi	r20, 0x7F	; 127
    3d02:	57 e4       	ldi	r21, 0x47	; 71
    3d04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d08:	18 16       	cp	r1, r24
    3d0a:	4c f5       	brge	.+82     	; 0x3d5e <LCD_init+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d0c:	6a a9       	ldd	r22, Y+50	; 0x32
    3d0e:	7b a9       	ldd	r23, Y+51	; 0x33
    3d10:	8c a9       	ldd	r24, Y+52	; 0x34
    3d12:	9d a9       	ldd	r25, Y+53	; 0x35
    3d14:	20 e0       	ldi	r18, 0x00	; 0
    3d16:	30 e0       	ldi	r19, 0x00	; 0
    3d18:	40 e2       	ldi	r20, 0x20	; 32
    3d1a:	51 e4       	ldi	r21, 0x41	; 65
    3d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d20:	dc 01       	movw	r26, r24
    3d22:	cb 01       	movw	r24, r22
    3d24:	bc 01       	movw	r22, r24
    3d26:	cd 01       	movw	r24, r26
    3d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d2c:	dc 01       	movw	r26, r24
    3d2e:	cb 01       	movw	r24, r22
    3d30:	9d a7       	std	Y+45, r25	; 0x2d
    3d32:	8c a7       	std	Y+44, r24	; 0x2c
    3d34:	0f c0       	rjmp	.+30     	; 0x3d54 <LCD_init+0x2ee>
    3d36:	88 ec       	ldi	r24, 0xC8	; 200
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	9b a7       	std	Y+43, r25	; 0x2b
    3d3c:	8a a7       	std	Y+42, r24	; 0x2a
    3d3e:	8a a5       	ldd	r24, Y+42	; 0x2a
    3d40:	9b a5       	ldd	r25, Y+43	; 0x2b
    3d42:	01 97       	sbiw	r24, 0x01	; 1
    3d44:	f1 f7       	brne	.-4      	; 0x3d42 <LCD_init+0x2dc>
    3d46:	9b a7       	std	Y+43, r25	; 0x2b
    3d48:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d4a:	8c a5       	ldd	r24, Y+44	; 0x2c
    3d4c:	9d a5       	ldd	r25, Y+45	; 0x2d
    3d4e:	01 97       	sbiw	r24, 0x01	; 1
    3d50:	9d a7       	std	Y+45, r25	; 0x2d
    3d52:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d54:	8c a5       	ldd	r24, Y+44	; 0x2c
    3d56:	9d a5       	ldd	r25, Y+45	; 0x2d
    3d58:	00 97       	sbiw	r24, 0x00	; 0
    3d5a:	69 f7       	brne	.-38     	; 0x3d36 <LCD_init+0x2d0>
    3d5c:	24 c0       	rjmp	.+72     	; 0x3da6 <LCD_init+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d5e:	6e a5       	ldd	r22, Y+46	; 0x2e
    3d60:	7f a5       	ldd	r23, Y+47	; 0x2f
    3d62:	88 a9       	ldd	r24, Y+48	; 0x30
    3d64:	99 a9       	ldd	r25, Y+49	; 0x31
    3d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d6a:	dc 01       	movw	r26, r24
    3d6c:	cb 01       	movw	r24, r22
    3d6e:	9d a7       	std	Y+45, r25	; 0x2d
    3d70:	8c a7       	std	Y+44, r24	; 0x2c
    3d72:	8c a5       	ldd	r24, Y+44	; 0x2c
    3d74:	9d a5       	ldd	r25, Y+45	; 0x2d
    3d76:	99 a7       	std	Y+41, r25	; 0x29
    3d78:	88 a7       	std	Y+40, r24	; 0x28
    3d7a:	88 a5       	ldd	r24, Y+40	; 0x28
    3d7c:	99 a5       	ldd	r25, Y+41	; 0x29
    3d7e:	01 97       	sbiw	r24, 0x01	; 1
    3d80:	f1 f7       	brne	.-4      	; 0x3d7e <LCD_init+0x318>
    3d82:	99 a7       	std	Y+41, r25	; 0x29
    3d84:	88 a7       	std	Y+40, r24	; 0x28
    3d86:	0f c0       	rjmp	.+30     	; 0x3da6 <LCD_init+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3d88:	6f a9       	ldd	r22, Y+55	; 0x37
    3d8a:	78 ad       	ldd	r23, Y+56	; 0x38
    3d8c:	89 ad       	ldd	r24, Y+57	; 0x39
    3d8e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d94:	dc 01       	movw	r26, r24
    3d96:	cb 01       	movw	r24, r22
    3d98:	8e ab       	std	Y+54, r24	; 0x36
    3d9a:	8e a9       	ldd	r24, Y+54	; 0x36
    3d9c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3d9e:	8f a1       	ldd	r24, Y+39	; 0x27
    3da0:	8a 95       	dec	r24
    3da2:	f1 f7       	brne	.-4      	; 0x3da0 <LCD_init+0x33a>
    3da4:	8f a3       	std	Y+39, r24	; 0x27
	// wait > 30 us
	_delay_us(50);
	LCD_write_command_4bit(display_On);
    3da6:	8c e0       	ldi	r24, 0x0C	; 12
    3da8:	0e 94 57 11 	call	0x22ae	; 0x22ae <LCD_write_command_4bit>
    3dac:	80 e0       	ldi	r24, 0x00	; 0
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	a8 e4       	ldi	r26, 0x48	; 72
    3db2:	b2 e4       	ldi	r27, 0x42	; 66
    3db4:	8b a3       	std	Y+35, r24	; 0x23
    3db6:	9c a3       	std	Y+36, r25	; 0x24
    3db8:	ad a3       	std	Y+37, r26	; 0x25
    3dba:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3dbc:	6b a1       	ldd	r22, Y+35	; 0x23
    3dbe:	7c a1       	ldd	r23, Y+36	; 0x24
    3dc0:	8d a1       	ldd	r24, Y+37	; 0x25
    3dc2:	9e a1       	ldd	r25, Y+38	; 0x26
    3dc4:	2b ea       	ldi	r18, 0xAB	; 171
    3dc6:	3a ea       	ldi	r19, 0xAA	; 170
    3dc8:	4a e2       	ldi	r20, 0x2A	; 42
    3dca:	50 e4       	ldi	r21, 0x40	; 64
    3dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dd0:	dc 01       	movw	r26, r24
    3dd2:	cb 01       	movw	r24, r22
    3dd4:	8f 8f       	std	Y+31, r24	; 0x1f
    3dd6:	98 a3       	std	Y+32, r25	; 0x20
    3dd8:	a9 a3       	std	Y+33, r26	; 0x21
    3dda:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3ddc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3dde:	78 a1       	ldd	r23, Y+32	; 0x20
    3de0:	89 a1       	ldd	r24, Y+33	; 0x21
    3de2:	9a a1       	ldd	r25, Y+34	; 0x22
    3de4:	20 e0       	ldi	r18, 0x00	; 0
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	40 e8       	ldi	r20, 0x80	; 128
    3dea:	5f e3       	ldi	r21, 0x3F	; 63
    3dec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3df0:	88 23       	and	r24, r24
    3df2:	1c f4       	brge	.+6      	; 0x3dfa <LCD_init+0x394>
		__ticks = 1;
    3df4:	81 e0       	ldi	r24, 0x01	; 1
    3df6:	8e 8f       	std	Y+30, r24	; 0x1e
    3df8:	91 c0       	rjmp	.+290    	; 0x3f1c <LCD_init+0x4b6>
	else if (__tmp > 255)
    3dfa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3dfc:	78 a1       	ldd	r23, Y+32	; 0x20
    3dfe:	89 a1       	ldd	r24, Y+33	; 0x21
    3e00:	9a a1       	ldd	r25, Y+34	; 0x22
    3e02:	20 e0       	ldi	r18, 0x00	; 0
    3e04:	30 e0       	ldi	r19, 0x00	; 0
    3e06:	4f e7       	ldi	r20, 0x7F	; 127
    3e08:	53 e4       	ldi	r21, 0x43	; 67
    3e0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e0e:	18 16       	cp	r1, r24
    3e10:	0c f0       	brlt	.+2      	; 0x3e14 <LCD_init+0x3ae>
    3e12:	7b c0       	rjmp	.+246    	; 0x3f0a <LCD_init+0x4a4>
	{
		_delay_ms(__us / 1000.0);
    3e14:	6b a1       	ldd	r22, Y+35	; 0x23
    3e16:	7c a1       	ldd	r23, Y+36	; 0x24
    3e18:	8d a1       	ldd	r24, Y+37	; 0x25
    3e1a:	9e a1       	ldd	r25, Y+38	; 0x26
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	4a e7       	ldi	r20, 0x7A	; 122
    3e22:	54 e4       	ldi	r21, 0x44	; 68
    3e24:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	8a 8f       	std	Y+26, r24	; 0x1a
    3e2e:	9b 8f       	std	Y+27, r25	; 0x1b
    3e30:	ac 8f       	std	Y+28, r26	; 0x1c
    3e32:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e34:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3e36:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3e38:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3e3a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3e3c:	20 e0       	ldi	r18, 0x00	; 0
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	4a ef       	ldi	r20, 0xFA	; 250
    3e42:	54 e4       	ldi	r21, 0x44	; 68
    3e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e48:	dc 01       	movw	r26, r24
    3e4a:	cb 01       	movw	r24, r22
    3e4c:	8e 8b       	std	Y+22, r24	; 0x16
    3e4e:	9f 8b       	std	Y+23, r25	; 0x17
    3e50:	a8 8f       	std	Y+24, r26	; 0x18
    3e52:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    3e54:	6e 89       	ldd	r22, Y+22	; 0x16
    3e56:	7f 89       	ldd	r23, Y+23	; 0x17
    3e58:	88 8d       	ldd	r24, Y+24	; 0x18
    3e5a:	99 8d       	ldd	r25, Y+25	; 0x19
    3e5c:	20 e0       	ldi	r18, 0x00	; 0
    3e5e:	30 e0       	ldi	r19, 0x00	; 0
    3e60:	40 e8       	ldi	r20, 0x80	; 128
    3e62:	5f e3       	ldi	r21, 0x3F	; 63
    3e64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e68:	88 23       	and	r24, r24
    3e6a:	2c f4       	brge	.+10     	; 0x3e76 <LCD_init+0x410>
		__ticks = 1;
    3e6c:	81 e0       	ldi	r24, 0x01	; 1
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	9d 8b       	std	Y+21, r25	; 0x15
    3e72:	8c 8b       	std	Y+20, r24	; 0x14
    3e74:	3f c0       	rjmp	.+126    	; 0x3ef4 <LCD_init+0x48e>
	else if (__tmp > 65535)
    3e76:	6e 89       	ldd	r22, Y+22	; 0x16
    3e78:	7f 89       	ldd	r23, Y+23	; 0x17
    3e7a:	88 8d       	ldd	r24, Y+24	; 0x18
    3e7c:	99 8d       	ldd	r25, Y+25	; 0x19
    3e7e:	20 e0       	ldi	r18, 0x00	; 0
    3e80:	3f ef       	ldi	r19, 0xFF	; 255
    3e82:	4f e7       	ldi	r20, 0x7F	; 127
    3e84:	57 e4       	ldi	r21, 0x47	; 71
    3e86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e8a:	18 16       	cp	r1, r24
    3e8c:	4c f5       	brge	.+82     	; 0x3ee0 <LCD_init+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e8e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3e90:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3e92:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3e94:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3e96:	20 e0       	ldi	r18, 0x00	; 0
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	40 e2       	ldi	r20, 0x20	; 32
    3e9c:	51 e4       	ldi	r21, 0x41	; 65
    3e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ea2:	dc 01       	movw	r26, r24
    3ea4:	cb 01       	movw	r24, r22
    3ea6:	bc 01       	movw	r22, r24
    3ea8:	cd 01       	movw	r24, r26
    3eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eae:	dc 01       	movw	r26, r24
    3eb0:	cb 01       	movw	r24, r22
    3eb2:	9d 8b       	std	Y+21, r25	; 0x15
    3eb4:	8c 8b       	std	Y+20, r24	; 0x14
    3eb6:	0f c0       	rjmp	.+30     	; 0x3ed6 <LCD_init+0x470>
    3eb8:	88 ec       	ldi	r24, 0xC8	; 200
    3eba:	90 e0       	ldi	r25, 0x00	; 0
    3ebc:	9b 8b       	std	Y+19, r25	; 0x13
    3ebe:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3ec0:	8a 89       	ldd	r24, Y+18	; 0x12
    3ec2:	9b 89       	ldd	r25, Y+19	; 0x13
    3ec4:	01 97       	sbiw	r24, 0x01	; 1
    3ec6:	f1 f7       	brne	.-4      	; 0x3ec4 <LCD_init+0x45e>
    3ec8:	9b 8b       	std	Y+19, r25	; 0x13
    3eca:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ecc:	8c 89       	ldd	r24, Y+20	; 0x14
    3ece:	9d 89       	ldd	r25, Y+21	; 0x15
    3ed0:	01 97       	sbiw	r24, 0x01	; 1
    3ed2:	9d 8b       	std	Y+21, r25	; 0x15
    3ed4:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ed6:	8c 89       	ldd	r24, Y+20	; 0x14
    3ed8:	9d 89       	ldd	r25, Y+21	; 0x15
    3eda:	00 97       	sbiw	r24, 0x00	; 0
    3edc:	69 f7       	brne	.-38     	; 0x3eb8 <LCD_init+0x452>
    3ede:	24 c0       	rjmp	.+72     	; 0x3f28 <LCD_init+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ee0:	6e 89       	ldd	r22, Y+22	; 0x16
    3ee2:	7f 89       	ldd	r23, Y+23	; 0x17
    3ee4:	88 8d       	ldd	r24, Y+24	; 0x18
    3ee6:	99 8d       	ldd	r25, Y+25	; 0x19
    3ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eec:	dc 01       	movw	r26, r24
    3eee:	cb 01       	movw	r24, r22
    3ef0:	9d 8b       	std	Y+21, r25	; 0x15
    3ef2:	8c 8b       	std	Y+20, r24	; 0x14
    3ef4:	8c 89       	ldd	r24, Y+20	; 0x14
    3ef6:	9d 89       	ldd	r25, Y+21	; 0x15
    3ef8:	99 8b       	std	Y+17, r25	; 0x11
    3efa:	88 8b       	std	Y+16, r24	; 0x10
    3efc:	88 89       	ldd	r24, Y+16	; 0x10
    3efe:	99 89       	ldd	r25, Y+17	; 0x11
    3f00:	01 97       	sbiw	r24, 0x01	; 1
    3f02:	f1 f7       	brne	.-4      	; 0x3f00 <LCD_init+0x49a>
    3f04:	99 8b       	std	Y+17, r25	; 0x11
    3f06:	88 8b       	std	Y+16, r24	; 0x10
    3f08:	0f c0       	rjmp	.+30     	; 0x3f28 <LCD_init+0x4c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3f0a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3f0c:	78 a1       	ldd	r23, Y+32	; 0x20
    3f0e:	89 a1       	ldd	r24, Y+33	; 0x21
    3f10:	9a a1       	ldd	r25, Y+34	; 0x22
    3f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f16:	dc 01       	movw	r26, r24
    3f18:	cb 01       	movw	r24, r22
    3f1a:	8e 8f       	std	Y+30, r24	; 0x1e
    3f1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f1e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3f20:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f22:	8a 95       	dec	r24
    3f24:	f1 f7       	brne	.-4      	; 0x3f22 <LCD_init+0x4bc>
    3f26:	8f 87       	std	Y+15, r24	; 0x0f
	// wait > 30 us
	_delay_us(50);
	LCD_write_command_4bit(clear_Display);
    3f28:	81 e0       	ldi	r24, 0x01	; 1
    3f2a:	0e 94 57 11 	call	0x22ae	; 0x22ae <LCD_write_command_4bit>
    3f2e:	80 e0       	ldi	r24, 0x00	; 0
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	a0 e0       	ldi	r26, 0x00	; 0
    3f34:	b0 e4       	ldi	r27, 0x40	; 64
    3f36:	8b 87       	std	Y+11, r24	; 0x0b
    3f38:	9c 87       	std	Y+12, r25	; 0x0c
    3f3a:	ad 87       	std	Y+13, r26	; 0x0d
    3f3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f40:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f42:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f44:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f46:	20 e0       	ldi	r18, 0x00	; 0
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	4a ef       	ldi	r20, 0xFA	; 250
    3f4c:	54 e4       	ldi	r21, 0x44	; 68
    3f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f52:	dc 01       	movw	r26, r24
    3f54:	cb 01       	movw	r24, r22
    3f56:	8f 83       	std	Y+7, r24	; 0x07
    3f58:	98 87       	std	Y+8, r25	; 0x08
    3f5a:	a9 87       	std	Y+9, r26	; 0x09
    3f5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f5e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f60:	78 85       	ldd	r23, Y+8	; 0x08
    3f62:	89 85       	ldd	r24, Y+9	; 0x09
    3f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f66:	20 e0       	ldi	r18, 0x00	; 0
    3f68:	30 e0       	ldi	r19, 0x00	; 0
    3f6a:	40 e8       	ldi	r20, 0x80	; 128
    3f6c:	5f e3       	ldi	r21, 0x3F	; 63
    3f6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f72:	88 23       	and	r24, r24
    3f74:	2c f4       	brge	.+10     	; 0x3f80 <LCD_init+0x51a>
		__ticks = 1;
    3f76:	81 e0       	ldi	r24, 0x01	; 1
    3f78:	90 e0       	ldi	r25, 0x00	; 0
    3f7a:	9e 83       	std	Y+6, r25	; 0x06
    3f7c:	8d 83       	std	Y+5, r24	; 0x05
    3f7e:	3f c0       	rjmp	.+126    	; 0x3ffe <LCD_init+0x598>
	else if (__tmp > 65535)
    3f80:	6f 81       	ldd	r22, Y+7	; 0x07
    3f82:	78 85       	ldd	r23, Y+8	; 0x08
    3f84:	89 85       	ldd	r24, Y+9	; 0x09
    3f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f88:	20 e0       	ldi	r18, 0x00	; 0
    3f8a:	3f ef       	ldi	r19, 0xFF	; 255
    3f8c:	4f e7       	ldi	r20, 0x7F	; 127
    3f8e:	57 e4       	ldi	r21, 0x47	; 71
    3f90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f94:	18 16       	cp	r1, r24
    3f96:	4c f5       	brge	.+82     	; 0x3fea <LCD_init+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f98:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fa0:	20 e0       	ldi	r18, 0x00	; 0
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	40 e2       	ldi	r20, 0x20	; 32
    3fa6:	51 e4       	ldi	r21, 0x41	; 65
    3fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fac:	dc 01       	movw	r26, r24
    3fae:	cb 01       	movw	r24, r22
    3fb0:	bc 01       	movw	r22, r24
    3fb2:	cd 01       	movw	r24, r26
    3fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fb8:	dc 01       	movw	r26, r24
    3fba:	cb 01       	movw	r24, r22
    3fbc:	9e 83       	std	Y+6, r25	; 0x06
    3fbe:	8d 83       	std	Y+5, r24	; 0x05
    3fc0:	0f c0       	rjmp	.+30     	; 0x3fe0 <LCD_init+0x57a>
    3fc2:	88 ec       	ldi	r24, 0xC8	; 200
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	9c 83       	std	Y+4, r25	; 0x04
    3fc8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3fca:	8b 81       	ldd	r24, Y+3	; 0x03
    3fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    3fce:	01 97       	sbiw	r24, 0x01	; 1
    3fd0:	f1 f7       	brne	.-4      	; 0x3fce <LCD_init+0x568>
    3fd2:	9c 83       	std	Y+4, r25	; 0x04
    3fd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    3fda:	01 97       	sbiw	r24, 0x01	; 1
    3fdc:	9e 83       	std	Y+6, r25	; 0x06
    3fde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fe4:	00 97       	sbiw	r24, 0x00	; 0
    3fe6:	69 f7       	brne	.-38     	; 0x3fc2 <LCD_init+0x55c>
    3fe8:	14 c0       	rjmp	.+40     	; 0x4012 <LCD_init+0x5ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fea:	6f 81       	ldd	r22, Y+7	; 0x07
    3fec:	78 85       	ldd	r23, Y+8	; 0x08
    3fee:	89 85       	ldd	r24, Y+9	; 0x09
    3ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ff6:	dc 01       	movw	r26, r24
    3ff8:	cb 01       	movw	r24, r22
    3ffa:	9e 83       	std	Y+6, r25	; 0x06
    3ffc:	8d 83       	std	Y+5, r24	; 0x05
    3ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    4000:	9e 81       	ldd	r25, Y+6	; 0x06
    4002:	9a 83       	std	Y+2, r25	; 0x02
    4004:	89 83       	std	Y+1, r24	; 0x01
    4006:	89 81       	ldd	r24, Y+1	; 0x01
    4008:	9a 81       	ldd	r25, Y+2	; 0x02
    400a:	01 97       	sbiw	r24, 0x01	; 1
    400c:	f1 f7       	brne	.-4      	; 0x400a <LCD_init+0x5a4>
    400e:	9a 83       	std	Y+2, r25	; 0x02
    4010:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
//	LCD_write_data_4bit(entry_Mode);

#endif

}
    4012:	c4 5b       	subi	r28, 0xB4	; 180
    4014:	df 4f       	sbci	r29, 0xFF	; 255
    4016:	0f b6       	in	r0, 0x3f	; 63
    4018:	f8 94       	cli
    401a:	de bf       	out	0x3e, r29	; 62
    401c:	0f be       	out	0x3f, r0	; 63
    401e:	cd bf       	out	0x3d, r28	; 61
    4020:	cf 91       	pop	r28
    4022:	df 91       	pop	r29
    4024:	1f 91       	pop	r17
    4026:	0f 91       	pop	r16
    4028:	08 95       	ret

0000402a <LCD_set_cursor>:

void LCD_set_cursor(u8 copy_u8_row , u8 copy_u8_Column){
    402a:	df 93       	push	r29
    402c:	cf 93       	push	r28
    402e:	cd b7       	in	r28, 0x3d	; 61
    4030:	de b7       	in	r29, 0x3e	; 62
    4032:	6b 97       	sbiw	r28, 0x1b	; 27
    4034:	0f b6       	in	r0, 0x3f	; 63
    4036:	f8 94       	cli
    4038:	de bf       	out	0x3e, r29	; 62
    403a:	0f be       	out	0x3f, r0	; 63
    403c:	cd bf       	out	0x3d, r28	; 61
    403e:	8a 8f       	std	Y+26, r24	; 0x1a
    4040:	6b 8f       	std	Y+27, r22	; 0x1b
	//delay to smooth things out
	_delay_us(50);

#elif LCD_interface_mode == interface_4bit

	u8 loc_Address = 128+(copy_u8_row*line2_Start)+(copy_u8_Column);
    4042:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4044:	88 2f       	mov	r24, r24
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	02 96       	adiw	r24, 0x02	; 2
    404a:	00 24       	eor	r0, r0
    404c:	96 95       	lsr	r25
    404e:	87 95       	ror	r24
    4050:	07 94       	ror	r0
    4052:	96 95       	lsr	r25
    4054:	87 95       	ror	r24
    4056:	07 94       	ror	r0
    4058:	98 2f       	mov	r25, r24
    405a:	80 2d       	mov	r24, r0
    405c:	98 2f       	mov	r25, r24
    405e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4060:	89 0f       	add	r24, r25
    4062:	89 8f       	std	Y+25, r24	; 0x19
		LCD_write_command_4bit(loc_Address);
    4064:	89 8d       	ldd	r24, Y+25	; 0x19
    4066:	0e 94 57 11 	call	0x22ae	; 0x22ae <LCD_write_command_4bit>
    406a:	80 e0       	ldi	r24, 0x00	; 0
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	a8 e4       	ldi	r26, 0x48	; 72
    4070:	b2 e4       	ldi	r27, 0x42	; 66
    4072:	8d 8b       	std	Y+21, r24	; 0x15
    4074:	9e 8b       	std	Y+22, r25	; 0x16
    4076:	af 8b       	std	Y+23, r26	; 0x17
    4078:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    407a:	6d 89       	ldd	r22, Y+21	; 0x15
    407c:	7e 89       	ldd	r23, Y+22	; 0x16
    407e:	8f 89       	ldd	r24, Y+23	; 0x17
    4080:	98 8d       	ldd	r25, Y+24	; 0x18
    4082:	2b ea       	ldi	r18, 0xAB	; 171
    4084:	3a ea       	ldi	r19, 0xAA	; 170
    4086:	4a e2       	ldi	r20, 0x2A	; 42
    4088:	50 e4       	ldi	r21, 0x40	; 64
    408a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    408e:	dc 01       	movw	r26, r24
    4090:	cb 01       	movw	r24, r22
    4092:	89 8b       	std	Y+17, r24	; 0x11
    4094:	9a 8b       	std	Y+18, r25	; 0x12
    4096:	ab 8b       	std	Y+19, r26	; 0x13
    4098:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    409a:	69 89       	ldd	r22, Y+17	; 0x11
    409c:	7a 89       	ldd	r23, Y+18	; 0x12
    409e:	8b 89       	ldd	r24, Y+19	; 0x13
    40a0:	9c 89       	ldd	r25, Y+20	; 0x14
    40a2:	20 e0       	ldi	r18, 0x00	; 0
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	40 e8       	ldi	r20, 0x80	; 128
    40a8:	5f e3       	ldi	r21, 0x3F	; 63
    40aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40ae:	88 23       	and	r24, r24
    40b0:	1c f4       	brge	.+6      	; 0x40b8 <LCD_set_cursor+0x8e>
		__ticks = 1;
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	88 8b       	std	Y+16, r24	; 0x10
    40b6:	91 c0       	rjmp	.+290    	; 0x41da <LCD_set_cursor+0x1b0>
	else if (__tmp > 255)
    40b8:	69 89       	ldd	r22, Y+17	; 0x11
    40ba:	7a 89       	ldd	r23, Y+18	; 0x12
    40bc:	8b 89       	ldd	r24, Y+19	; 0x13
    40be:	9c 89       	ldd	r25, Y+20	; 0x14
    40c0:	20 e0       	ldi	r18, 0x00	; 0
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	4f e7       	ldi	r20, 0x7F	; 127
    40c6:	53 e4       	ldi	r21, 0x43	; 67
    40c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40cc:	18 16       	cp	r1, r24
    40ce:	0c f0       	brlt	.+2      	; 0x40d2 <LCD_set_cursor+0xa8>
    40d0:	7b c0       	rjmp	.+246    	; 0x41c8 <LCD_set_cursor+0x19e>
	{
		_delay_ms(__us / 1000.0);
    40d2:	6d 89       	ldd	r22, Y+21	; 0x15
    40d4:	7e 89       	ldd	r23, Y+22	; 0x16
    40d6:	8f 89       	ldd	r24, Y+23	; 0x17
    40d8:	98 8d       	ldd	r25, Y+24	; 0x18
    40da:	20 e0       	ldi	r18, 0x00	; 0
    40dc:	30 e0       	ldi	r19, 0x00	; 0
    40de:	4a e7       	ldi	r20, 0x7A	; 122
    40e0:	54 e4       	ldi	r21, 0x44	; 68
    40e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    40e6:	dc 01       	movw	r26, r24
    40e8:	cb 01       	movw	r24, r22
    40ea:	8c 87       	std	Y+12, r24	; 0x0c
    40ec:	9d 87       	std	Y+13, r25	; 0x0d
    40ee:	ae 87       	std	Y+14, r26	; 0x0e
    40f0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    40f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    40f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    40f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    40fa:	20 e0       	ldi	r18, 0x00	; 0
    40fc:	30 e0       	ldi	r19, 0x00	; 0
    40fe:	4a ef       	ldi	r20, 0xFA	; 250
    4100:	54 e4       	ldi	r21, 0x44	; 68
    4102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4106:	dc 01       	movw	r26, r24
    4108:	cb 01       	movw	r24, r22
    410a:	88 87       	std	Y+8, r24	; 0x08
    410c:	99 87       	std	Y+9, r25	; 0x09
    410e:	aa 87       	std	Y+10, r26	; 0x0a
    4110:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4112:	68 85       	ldd	r22, Y+8	; 0x08
    4114:	79 85       	ldd	r23, Y+9	; 0x09
    4116:	8a 85       	ldd	r24, Y+10	; 0x0a
    4118:	9b 85       	ldd	r25, Y+11	; 0x0b
    411a:	20 e0       	ldi	r18, 0x00	; 0
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	40 e8       	ldi	r20, 0x80	; 128
    4120:	5f e3       	ldi	r21, 0x3F	; 63
    4122:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4126:	88 23       	and	r24, r24
    4128:	2c f4       	brge	.+10     	; 0x4134 <LCD_set_cursor+0x10a>
		__ticks = 1;
    412a:	81 e0       	ldi	r24, 0x01	; 1
    412c:	90 e0       	ldi	r25, 0x00	; 0
    412e:	9f 83       	std	Y+7, r25	; 0x07
    4130:	8e 83       	std	Y+6, r24	; 0x06
    4132:	3f c0       	rjmp	.+126    	; 0x41b2 <LCD_set_cursor+0x188>
	else if (__tmp > 65535)
    4134:	68 85       	ldd	r22, Y+8	; 0x08
    4136:	79 85       	ldd	r23, Y+9	; 0x09
    4138:	8a 85       	ldd	r24, Y+10	; 0x0a
    413a:	9b 85       	ldd	r25, Y+11	; 0x0b
    413c:	20 e0       	ldi	r18, 0x00	; 0
    413e:	3f ef       	ldi	r19, 0xFF	; 255
    4140:	4f e7       	ldi	r20, 0x7F	; 127
    4142:	57 e4       	ldi	r21, 0x47	; 71
    4144:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4148:	18 16       	cp	r1, r24
    414a:	4c f5       	brge	.+82     	; 0x419e <LCD_set_cursor+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    414c:	6c 85       	ldd	r22, Y+12	; 0x0c
    414e:	7d 85       	ldd	r23, Y+13	; 0x0d
    4150:	8e 85       	ldd	r24, Y+14	; 0x0e
    4152:	9f 85       	ldd	r25, Y+15	; 0x0f
    4154:	20 e0       	ldi	r18, 0x00	; 0
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	40 e2       	ldi	r20, 0x20	; 32
    415a:	51 e4       	ldi	r21, 0x41	; 65
    415c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4160:	dc 01       	movw	r26, r24
    4162:	cb 01       	movw	r24, r22
    4164:	bc 01       	movw	r22, r24
    4166:	cd 01       	movw	r24, r26
    4168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    416c:	dc 01       	movw	r26, r24
    416e:	cb 01       	movw	r24, r22
    4170:	9f 83       	std	Y+7, r25	; 0x07
    4172:	8e 83       	std	Y+6, r24	; 0x06
    4174:	0f c0       	rjmp	.+30     	; 0x4194 <LCD_set_cursor+0x16a>
    4176:	88 ec       	ldi	r24, 0xC8	; 200
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	9d 83       	std	Y+5, r25	; 0x05
    417c:	8c 83       	std	Y+4, r24	; 0x04
    417e:	8c 81       	ldd	r24, Y+4	; 0x04
    4180:	9d 81       	ldd	r25, Y+5	; 0x05
    4182:	01 97       	sbiw	r24, 0x01	; 1
    4184:	f1 f7       	brne	.-4      	; 0x4182 <LCD_set_cursor+0x158>
    4186:	9d 83       	std	Y+5, r25	; 0x05
    4188:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    418a:	8e 81       	ldd	r24, Y+6	; 0x06
    418c:	9f 81       	ldd	r25, Y+7	; 0x07
    418e:	01 97       	sbiw	r24, 0x01	; 1
    4190:	9f 83       	std	Y+7, r25	; 0x07
    4192:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4194:	8e 81       	ldd	r24, Y+6	; 0x06
    4196:	9f 81       	ldd	r25, Y+7	; 0x07
    4198:	00 97       	sbiw	r24, 0x00	; 0
    419a:	69 f7       	brne	.-38     	; 0x4176 <LCD_set_cursor+0x14c>
    419c:	24 c0       	rjmp	.+72     	; 0x41e6 <LCD_set_cursor+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    419e:	68 85       	ldd	r22, Y+8	; 0x08
    41a0:	79 85       	ldd	r23, Y+9	; 0x09
    41a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    41a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    41a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41aa:	dc 01       	movw	r26, r24
    41ac:	cb 01       	movw	r24, r22
    41ae:	9f 83       	std	Y+7, r25	; 0x07
    41b0:	8e 83       	std	Y+6, r24	; 0x06
    41b2:	8e 81       	ldd	r24, Y+6	; 0x06
    41b4:	9f 81       	ldd	r25, Y+7	; 0x07
    41b6:	9b 83       	std	Y+3, r25	; 0x03
    41b8:	8a 83       	std	Y+2, r24	; 0x02
    41ba:	8a 81       	ldd	r24, Y+2	; 0x02
    41bc:	9b 81       	ldd	r25, Y+3	; 0x03
    41be:	01 97       	sbiw	r24, 0x01	; 1
    41c0:	f1 f7       	brne	.-4      	; 0x41be <LCD_set_cursor+0x194>
    41c2:	9b 83       	std	Y+3, r25	; 0x03
    41c4:	8a 83       	std	Y+2, r24	; 0x02
    41c6:	0f c0       	rjmp	.+30     	; 0x41e6 <LCD_set_cursor+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    41c8:	69 89       	ldd	r22, Y+17	; 0x11
    41ca:	7a 89       	ldd	r23, Y+18	; 0x12
    41cc:	8b 89       	ldd	r24, Y+19	; 0x13
    41ce:	9c 89       	ldd	r25, Y+20	; 0x14
    41d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d4:	dc 01       	movw	r26, r24
    41d6:	cb 01       	movw	r24, r22
    41d8:	88 8b       	std	Y+16, r24	; 0x10
    41da:	88 89       	ldd	r24, Y+16	; 0x10
    41dc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    41de:	89 81       	ldd	r24, Y+1	; 0x01
    41e0:	8a 95       	dec	r24
    41e2:	f1 f7       	brne	.-4      	; 0x41e0 <LCD_set_cursor+0x1b6>
    41e4:	89 83       	std	Y+1, r24	; 0x01

#endif



}
    41e6:	6b 96       	adiw	r28, 0x1b	; 27
    41e8:	0f b6       	in	r0, 0x3f	; 63
    41ea:	f8 94       	cli
    41ec:	de bf       	out	0x3e, r29	; 62
    41ee:	0f be       	out	0x3f, r0	; 63
    41f0:	cd bf       	out	0x3d, r28	; 61
    41f2:	cf 91       	pop	r28
    41f4:	df 91       	pop	r29
    41f6:	08 95       	ret

000041f8 <LCD_on>:

void LCD_on(){
    41f8:	df 93       	push	r29
    41fa:	cf 93       	push	r28
    41fc:	cd b7       	in	r28, 0x3d	; 61
    41fe:	de b7       	in	r29, 0x3e	; 62
    4200:	68 97       	sbiw	r28, 0x18	; 24
    4202:	0f b6       	in	r0, 0x3f	; 63
    4204:	f8 94       	cli
    4206:	de bf       	out	0x3e, r29	; 62
    4208:	0f be       	out	0x3f, r0	; 63
    420a:	cd bf       	out	0x3d, r28	; 61
	LCD_write_command_8bit(display_On);
	_delay_us(50);

#elif LCD_interface_mode == interface_4bit

	LCD_write_command_4bit(display_On);
    420c:	8c e0       	ldi	r24, 0x0C	; 12
    420e:	0e 94 57 11 	call	0x22ae	; 0x22ae <LCD_write_command_4bit>
    4212:	80 e0       	ldi	r24, 0x00	; 0
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	a8 e4       	ldi	r26, 0x48	; 72
    4218:	b2 e4       	ldi	r27, 0x42	; 66
    421a:	8d 8b       	std	Y+21, r24	; 0x15
    421c:	9e 8b       	std	Y+22, r25	; 0x16
    421e:	af 8b       	std	Y+23, r26	; 0x17
    4220:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4222:	6d 89       	ldd	r22, Y+21	; 0x15
    4224:	7e 89       	ldd	r23, Y+22	; 0x16
    4226:	8f 89       	ldd	r24, Y+23	; 0x17
    4228:	98 8d       	ldd	r25, Y+24	; 0x18
    422a:	2b ea       	ldi	r18, 0xAB	; 171
    422c:	3a ea       	ldi	r19, 0xAA	; 170
    422e:	4a e2       	ldi	r20, 0x2A	; 42
    4230:	50 e4       	ldi	r21, 0x40	; 64
    4232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4236:	dc 01       	movw	r26, r24
    4238:	cb 01       	movw	r24, r22
    423a:	89 8b       	std	Y+17, r24	; 0x11
    423c:	9a 8b       	std	Y+18, r25	; 0x12
    423e:	ab 8b       	std	Y+19, r26	; 0x13
    4240:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4242:	69 89       	ldd	r22, Y+17	; 0x11
    4244:	7a 89       	ldd	r23, Y+18	; 0x12
    4246:	8b 89       	ldd	r24, Y+19	; 0x13
    4248:	9c 89       	ldd	r25, Y+20	; 0x14
    424a:	20 e0       	ldi	r18, 0x00	; 0
    424c:	30 e0       	ldi	r19, 0x00	; 0
    424e:	40 e8       	ldi	r20, 0x80	; 128
    4250:	5f e3       	ldi	r21, 0x3F	; 63
    4252:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4256:	88 23       	and	r24, r24
    4258:	1c f4       	brge	.+6      	; 0x4260 <LCD_on+0x68>
		__ticks = 1;
    425a:	81 e0       	ldi	r24, 0x01	; 1
    425c:	88 8b       	std	Y+16, r24	; 0x10
    425e:	91 c0       	rjmp	.+290    	; 0x4382 <LCD_on+0x18a>
	else if (__tmp > 255)
    4260:	69 89       	ldd	r22, Y+17	; 0x11
    4262:	7a 89       	ldd	r23, Y+18	; 0x12
    4264:	8b 89       	ldd	r24, Y+19	; 0x13
    4266:	9c 89       	ldd	r25, Y+20	; 0x14
    4268:	20 e0       	ldi	r18, 0x00	; 0
    426a:	30 e0       	ldi	r19, 0x00	; 0
    426c:	4f e7       	ldi	r20, 0x7F	; 127
    426e:	53 e4       	ldi	r21, 0x43	; 67
    4270:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4274:	18 16       	cp	r1, r24
    4276:	0c f0       	brlt	.+2      	; 0x427a <LCD_on+0x82>
    4278:	7b c0       	rjmp	.+246    	; 0x4370 <LCD_on+0x178>
	{
		_delay_ms(__us / 1000.0);
    427a:	6d 89       	ldd	r22, Y+21	; 0x15
    427c:	7e 89       	ldd	r23, Y+22	; 0x16
    427e:	8f 89       	ldd	r24, Y+23	; 0x17
    4280:	98 8d       	ldd	r25, Y+24	; 0x18
    4282:	20 e0       	ldi	r18, 0x00	; 0
    4284:	30 e0       	ldi	r19, 0x00	; 0
    4286:	4a e7       	ldi	r20, 0x7A	; 122
    4288:	54 e4       	ldi	r21, 0x44	; 68
    428a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    428e:	dc 01       	movw	r26, r24
    4290:	cb 01       	movw	r24, r22
    4292:	8c 87       	std	Y+12, r24	; 0x0c
    4294:	9d 87       	std	Y+13, r25	; 0x0d
    4296:	ae 87       	std	Y+14, r26	; 0x0e
    4298:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    429a:	6c 85       	ldd	r22, Y+12	; 0x0c
    429c:	7d 85       	ldd	r23, Y+13	; 0x0d
    429e:	8e 85       	ldd	r24, Y+14	; 0x0e
    42a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    42a2:	20 e0       	ldi	r18, 0x00	; 0
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	4a ef       	ldi	r20, 0xFA	; 250
    42a8:	54 e4       	ldi	r21, 0x44	; 68
    42aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ae:	dc 01       	movw	r26, r24
    42b0:	cb 01       	movw	r24, r22
    42b2:	88 87       	std	Y+8, r24	; 0x08
    42b4:	99 87       	std	Y+9, r25	; 0x09
    42b6:	aa 87       	std	Y+10, r26	; 0x0a
    42b8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    42ba:	68 85       	ldd	r22, Y+8	; 0x08
    42bc:	79 85       	ldd	r23, Y+9	; 0x09
    42be:	8a 85       	ldd	r24, Y+10	; 0x0a
    42c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    42c2:	20 e0       	ldi	r18, 0x00	; 0
    42c4:	30 e0       	ldi	r19, 0x00	; 0
    42c6:	40 e8       	ldi	r20, 0x80	; 128
    42c8:	5f e3       	ldi	r21, 0x3F	; 63
    42ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42ce:	88 23       	and	r24, r24
    42d0:	2c f4       	brge	.+10     	; 0x42dc <LCD_on+0xe4>
		__ticks = 1;
    42d2:	81 e0       	ldi	r24, 0x01	; 1
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	9f 83       	std	Y+7, r25	; 0x07
    42d8:	8e 83       	std	Y+6, r24	; 0x06
    42da:	3f c0       	rjmp	.+126    	; 0x435a <LCD_on+0x162>
	else if (__tmp > 65535)
    42dc:	68 85       	ldd	r22, Y+8	; 0x08
    42de:	79 85       	ldd	r23, Y+9	; 0x09
    42e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    42e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    42e4:	20 e0       	ldi	r18, 0x00	; 0
    42e6:	3f ef       	ldi	r19, 0xFF	; 255
    42e8:	4f e7       	ldi	r20, 0x7F	; 127
    42ea:	57 e4       	ldi	r21, 0x47	; 71
    42ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42f0:	18 16       	cp	r1, r24
    42f2:	4c f5       	brge	.+82     	; 0x4346 <LCD_on+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    42f6:	7d 85       	ldd	r23, Y+13	; 0x0d
    42f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    42fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    42fc:	20 e0       	ldi	r18, 0x00	; 0
    42fe:	30 e0       	ldi	r19, 0x00	; 0
    4300:	40 e2       	ldi	r20, 0x20	; 32
    4302:	51 e4       	ldi	r21, 0x41	; 65
    4304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4308:	dc 01       	movw	r26, r24
    430a:	cb 01       	movw	r24, r22
    430c:	bc 01       	movw	r22, r24
    430e:	cd 01       	movw	r24, r26
    4310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4314:	dc 01       	movw	r26, r24
    4316:	cb 01       	movw	r24, r22
    4318:	9f 83       	std	Y+7, r25	; 0x07
    431a:	8e 83       	std	Y+6, r24	; 0x06
    431c:	0f c0       	rjmp	.+30     	; 0x433c <LCD_on+0x144>
    431e:	88 ec       	ldi	r24, 0xC8	; 200
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	9d 83       	std	Y+5, r25	; 0x05
    4324:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4326:	8c 81       	ldd	r24, Y+4	; 0x04
    4328:	9d 81       	ldd	r25, Y+5	; 0x05
    432a:	01 97       	sbiw	r24, 0x01	; 1
    432c:	f1 f7       	brne	.-4      	; 0x432a <LCD_on+0x132>
    432e:	9d 83       	std	Y+5, r25	; 0x05
    4330:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4332:	8e 81       	ldd	r24, Y+6	; 0x06
    4334:	9f 81       	ldd	r25, Y+7	; 0x07
    4336:	01 97       	sbiw	r24, 0x01	; 1
    4338:	9f 83       	std	Y+7, r25	; 0x07
    433a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    433c:	8e 81       	ldd	r24, Y+6	; 0x06
    433e:	9f 81       	ldd	r25, Y+7	; 0x07
    4340:	00 97       	sbiw	r24, 0x00	; 0
    4342:	69 f7       	brne	.-38     	; 0x431e <LCD_on+0x126>
    4344:	24 c0       	rjmp	.+72     	; 0x438e <LCD_on+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4346:	68 85       	ldd	r22, Y+8	; 0x08
    4348:	79 85       	ldd	r23, Y+9	; 0x09
    434a:	8a 85       	ldd	r24, Y+10	; 0x0a
    434c:	9b 85       	ldd	r25, Y+11	; 0x0b
    434e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4352:	dc 01       	movw	r26, r24
    4354:	cb 01       	movw	r24, r22
    4356:	9f 83       	std	Y+7, r25	; 0x07
    4358:	8e 83       	std	Y+6, r24	; 0x06
    435a:	8e 81       	ldd	r24, Y+6	; 0x06
    435c:	9f 81       	ldd	r25, Y+7	; 0x07
    435e:	9b 83       	std	Y+3, r25	; 0x03
    4360:	8a 83       	std	Y+2, r24	; 0x02
    4362:	8a 81       	ldd	r24, Y+2	; 0x02
    4364:	9b 81       	ldd	r25, Y+3	; 0x03
    4366:	01 97       	sbiw	r24, 0x01	; 1
    4368:	f1 f7       	brne	.-4      	; 0x4366 <LCD_on+0x16e>
    436a:	9b 83       	std	Y+3, r25	; 0x03
    436c:	8a 83       	std	Y+2, r24	; 0x02
    436e:	0f c0       	rjmp	.+30     	; 0x438e <LCD_on+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4370:	69 89       	ldd	r22, Y+17	; 0x11
    4372:	7a 89       	ldd	r23, Y+18	; 0x12
    4374:	8b 89       	ldd	r24, Y+19	; 0x13
    4376:	9c 89       	ldd	r25, Y+20	; 0x14
    4378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    437c:	dc 01       	movw	r26, r24
    437e:	cb 01       	movw	r24, r22
    4380:	88 8b       	std	Y+16, r24	; 0x10
    4382:	88 89       	ldd	r24, Y+16	; 0x10
    4384:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4386:	89 81       	ldd	r24, Y+1	; 0x01
    4388:	8a 95       	dec	r24
    438a:	f1 f7       	brne	.-4      	; 0x4388 <LCD_on+0x190>
    438c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);

#endif


}
    438e:	68 96       	adiw	r28, 0x18	; 24
    4390:	0f b6       	in	r0, 0x3f	; 63
    4392:	f8 94       	cli
    4394:	de bf       	out	0x3e, r29	; 62
    4396:	0f be       	out	0x3f, r0	; 63
    4398:	cd bf       	out	0x3d, r28	; 61
    439a:	cf 91       	pop	r28
    439c:	df 91       	pop	r29
    439e:	08 95       	ret

000043a0 <LCD_off>:

void LCD_off(){
    43a0:	df 93       	push	r29
    43a2:	cf 93       	push	r28
    43a4:	cd b7       	in	r28, 0x3d	; 61
    43a6:	de b7       	in	r29, 0x3e	; 62
    43a8:	68 97       	sbiw	r28, 0x18	; 24
    43aa:	0f b6       	in	r0, 0x3f	; 63
    43ac:	f8 94       	cli
    43ae:	de bf       	out	0x3e, r29	; 62
    43b0:	0f be       	out	0x3f, r0	; 63
    43b2:	cd bf       	out	0x3d, r28	; 61
	LCD_write_command_8bit(display_Off);
	_delay_us(50);

#elif LCD_interface_mode == interface_4bit

	LCD_write_command_4bit(display_Off);
    43b4:	88 e0       	ldi	r24, 0x08	; 8
    43b6:	0e 94 57 11 	call	0x22ae	; 0x22ae <LCD_write_command_4bit>
    43ba:	80 e0       	ldi	r24, 0x00	; 0
    43bc:	90 e0       	ldi	r25, 0x00	; 0
    43be:	a8 e4       	ldi	r26, 0x48	; 72
    43c0:	b2 e4       	ldi	r27, 0x42	; 66
    43c2:	8d 8b       	std	Y+21, r24	; 0x15
    43c4:	9e 8b       	std	Y+22, r25	; 0x16
    43c6:	af 8b       	std	Y+23, r26	; 0x17
    43c8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    43ca:	6d 89       	ldd	r22, Y+21	; 0x15
    43cc:	7e 89       	ldd	r23, Y+22	; 0x16
    43ce:	8f 89       	ldd	r24, Y+23	; 0x17
    43d0:	98 8d       	ldd	r25, Y+24	; 0x18
    43d2:	2b ea       	ldi	r18, 0xAB	; 171
    43d4:	3a ea       	ldi	r19, 0xAA	; 170
    43d6:	4a e2       	ldi	r20, 0x2A	; 42
    43d8:	50 e4       	ldi	r21, 0x40	; 64
    43da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43de:	dc 01       	movw	r26, r24
    43e0:	cb 01       	movw	r24, r22
    43e2:	89 8b       	std	Y+17, r24	; 0x11
    43e4:	9a 8b       	std	Y+18, r25	; 0x12
    43e6:	ab 8b       	std	Y+19, r26	; 0x13
    43e8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    43ea:	69 89       	ldd	r22, Y+17	; 0x11
    43ec:	7a 89       	ldd	r23, Y+18	; 0x12
    43ee:	8b 89       	ldd	r24, Y+19	; 0x13
    43f0:	9c 89       	ldd	r25, Y+20	; 0x14
    43f2:	20 e0       	ldi	r18, 0x00	; 0
    43f4:	30 e0       	ldi	r19, 0x00	; 0
    43f6:	40 e8       	ldi	r20, 0x80	; 128
    43f8:	5f e3       	ldi	r21, 0x3F	; 63
    43fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43fe:	88 23       	and	r24, r24
    4400:	1c f4       	brge	.+6      	; 0x4408 <LCD_off+0x68>
		__ticks = 1;
    4402:	81 e0       	ldi	r24, 0x01	; 1
    4404:	88 8b       	std	Y+16, r24	; 0x10
    4406:	91 c0       	rjmp	.+290    	; 0x452a <LCD_off+0x18a>
	else if (__tmp > 255)
    4408:	69 89       	ldd	r22, Y+17	; 0x11
    440a:	7a 89       	ldd	r23, Y+18	; 0x12
    440c:	8b 89       	ldd	r24, Y+19	; 0x13
    440e:	9c 89       	ldd	r25, Y+20	; 0x14
    4410:	20 e0       	ldi	r18, 0x00	; 0
    4412:	30 e0       	ldi	r19, 0x00	; 0
    4414:	4f e7       	ldi	r20, 0x7F	; 127
    4416:	53 e4       	ldi	r21, 0x43	; 67
    4418:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    441c:	18 16       	cp	r1, r24
    441e:	0c f0       	brlt	.+2      	; 0x4422 <LCD_off+0x82>
    4420:	7b c0       	rjmp	.+246    	; 0x4518 <LCD_off+0x178>
	{
		_delay_ms(__us / 1000.0);
    4422:	6d 89       	ldd	r22, Y+21	; 0x15
    4424:	7e 89       	ldd	r23, Y+22	; 0x16
    4426:	8f 89       	ldd	r24, Y+23	; 0x17
    4428:	98 8d       	ldd	r25, Y+24	; 0x18
    442a:	20 e0       	ldi	r18, 0x00	; 0
    442c:	30 e0       	ldi	r19, 0x00	; 0
    442e:	4a e7       	ldi	r20, 0x7A	; 122
    4430:	54 e4       	ldi	r21, 0x44	; 68
    4432:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4436:	dc 01       	movw	r26, r24
    4438:	cb 01       	movw	r24, r22
    443a:	8c 87       	std	Y+12, r24	; 0x0c
    443c:	9d 87       	std	Y+13, r25	; 0x0d
    443e:	ae 87       	std	Y+14, r26	; 0x0e
    4440:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4442:	6c 85       	ldd	r22, Y+12	; 0x0c
    4444:	7d 85       	ldd	r23, Y+13	; 0x0d
    4446:	8e 85       	ldd	r24, Y+14	; 0x0e
    4448:	9f 85       	ldd	r25, Y+15	; 0x0f
    444a:	20 e0       	ldi	r18, 0x00	; 0
    444c:	30 e0       	ldi	r19, 0x00	; 0
    444e:	4a ef       	ldi	r20, 0xFA	; 250
    4450:	54 e4       	ldi	r21, 0x44	; 68
    4452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4456:	dc 01       	movw	r26, r24
    4458:	cb 01       	movw	r24, r22
    445a:	88 87       	std	Y+8, r24	; 0x08
    445c:	99 87       	std	Y+9, r25	; 0x09
    445e:	aa 87       	std	Y+10, r26	; 0x0a
    4460:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4462:	68 85       	ldd	r22, Y+8	; 0x08
    4464:	79 85       	ldd	r23, Y+9	; 0x09
    4466:	8a 85       	ldd	r24, Y+10	; 0x0a
    4468:	9b 85       	ldd	r25, Y+11	; 0x0b
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	30 e0       	ldi	r19, 0x00	; 0
    446e:	40 e8       	ldi	r20, 0x80	; 128
    4470:	5f e3       	ldi	r21, 0x3F	; 63
    4472:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4476:	88 23       	and	r24, r24
    4478:	2c f4       	brge	.+10     	; 0x4484 <LCD_off+0xe4>
		__ticks = 1;
    447a:	81 e0       	ldi	r24, 0x01	; 1
    447c:	90 e0       	ldi	r25, 0x00	; 0
    447e:	9f 83       	std	Y+7, r25	; 0x07
    4480:	8e 83       	std	Y+6, r24	; 0x06
    4482:	3f c0       	rjmp	.+126    	; 0x4502 <LCD_off+0x162>
	else if (__tmp > 65535)
    4484:	68 85       	ldd	r22, Y+8	; 0x08
    4486:	79 85       	ldd	r23, Y+9	; 0x09
    4488:	8a 85       	ldd	r24, Y+10	; 0x0a
    448a:	9b 85       	ldd	r25, Y+11	; 0x0b
    448c:	20 e0       	ldi	r18, 0x00	; 0
    448e:	3f ef       	ldi	r19, 0xFF	; 255
    4490:	4f e7       	ldi	r20, 0x7F	; 127
    4492:	57 e4       	ldi	r21, 0x47	; 71
    4494:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4498:	18 16       	cp	r1, r24
    449a:	4c f5       	brge	.+82     	; 0x44ee <LCD_off+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    449c:	6c 85       	ldd	r22, Y+12	; 0x0c
    449e:	7d 85       	ldd	r23, Y+13	; 0x0d
    44a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    44a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    44a4:	20 e0       	ldi	r18, 0x00	; 0
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	40 e2       	ldi	r20, 0x20	; 32
    44aa:	51 e4       	ldi	r21, 0x41	; 65
    44ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44b0:	dc 01       	movw	r26, r24
    44b2:	cb 01       	movw	r24, r22
    44b4:	bc 01       	movw	r22, r24
    44b6:	cd 01       	movw	r24, r26
    44b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44bc:	dc 01       	movw	r26, r24
    44be:	cb 01       	movw	r24, r22
    44c0:	9f 83       	std	Y+7, r25	; 0x07
    44c2:	8e 83       	std	Y+6, r24	; 0x06
    44c4:	0f c0       	rjmp	.+30     	; 0x44e4 <LCD_off+0x144>
    44c6:	88 ec       	ldi	r24, 0xC8	; 200
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	9d 83       	std	Y+5, r25	; 0x05
    44cc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    44ce:	8c 81       	ldd	r24, Y+4	; 0x04
    44d0:	9d 81       	ldd	r25, Y+5	; 0x05
    44d2:	01 97       	sbiw	r24, 0x01	; 1
    44d4:	f1 f7       	brne	.-4      	; 0x44d2 <LCD_off+0x132>
    44d6:	9d 83       	std	Y+5, r25	; 0x05
    44d8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44da:	8e 81       	ldd	r24, Y+6	; 0x06
    44dc:	9f 81       	ldd	r25, Y+7	; 0x07
    44de:	01 97       	sbiw	r24, 0x01	; 1
    44e0:	9f 83       	std	Y+7, r25	; 0x07
    44e2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44e4:	8e 81       	ldd	r24, Y+6	; 0x06
    44e6:	9f 81       	ldd	r25, Y+7	; 0x07
    44e8:	00 97       	sbiw	r24, 0x00	; 0
    44ea:	69 f7       	brne	.-38     	; 0x44c6 <LCD_off+0x126>
    44ec:	24 c0       	rjmp	.+72     	; 0x4536 <LCD_off+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44ee:	68 85       	ldd	r22, Y+8	; 0x08
    44f0:	79 85       	ldd	r23, Y+9	; 0x09
    44f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    44f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    44f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44fa:	dc 01       	movw	r26, r24
    44fc:	cb 01       	movw	r24, r22
    44fe:	9f 83       	std	Y+7, r25	; 0x07
    4500:	8e 83       	std	Y+6, r24	; 0x06
    4502:	8e 81       	ldd	r24, Y+6	; 0x06
    4504:	9f 81       	ldd	r25, Y+7	; 0x07
    4506:	9b 83       	std	Y+3, r25	; 0x03
    4508:	8a 83       	std	Y+2, r24	; 0x02
    450a:	8a 81       	ldd	r24, Y+2	; 0x02
    450c:	9b 81       	ldd	r25, Y+3	; 0x03
    450e:	01 97       	sbiw	r24, 0x01	; 1
    4510:	f1 f7       	brne	.-4      	; 0x450e <LCD_off+0x16e>
    4512:	9b 83       	std	Y+3, r25	; 0x03
    4514:	8a 83       	std	Y+2, r24	; 0x02
    4516:	0f c0       	rjmp	.+30     	; 0x4536 <LCD_off+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4518:	69 89       	ldd	r22, Y+17	; 0x11
    451a:	7a 89       	ldd	r23, Y+18	; 0x12
    451c:	8b 89       	ldd	r24, Y+19	; 0x13
    451e:	9c 89       	ldd	r25, Y+20	; 0x14
    4520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4524:	dc 01       	movw	r26, r24
    4526:	cb 01       	movw	r24, r22
    4528:	88 8b       	std	Y+16, r24	; 0x10
    452a:	88 89       	ldd	r24, Y+16	; 0x10
    452c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    452e:	89 81       	ldd	r24, Y+1	; 0x01
    4530:	8a 95       	dec	r24
    4532:	f1 f7       	brne	.-4      	; 0x4530 <LCD_off+0x190>
    4534:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);

#endif


}
    4536:	68 96       	adiw	r28, 0x18	; 24
    4538:	0f b6       	in	r0, 0x3f	; 63
    453a:	f8 94       	cli
    453c:	de bf       	out	0x3e, r29	; 62
    453e:	0f be       	out	0x3f, r0	; 63
    4540:	cd bf       	out	0x3d, r28	; 61
    4542:	cf 91       	pop	r28
    4544:	df 91       	pop	r29
    4546:	08 95       	ret

00004548 <LCD_clear_display>:

void LCD_clear_display(){
    4548:	df 93       	push	r29
    454a:	cf 93       	push	r28
    454c:	cd b7       	in	r28, 0x3d	; 61
    454e:	de b7       	in	r29, 0x3e	; 62
    4550:	6c 97       	sbiw	r28, 0x1c	; 28
    4552:	0f b6       	in	r0, 0x3f	; 63
    4554:	f8 94       	cli
    4556:	de bf       	out	0x3e, r29	; 62
    4558:	0f be       	out	0x3f, r0	; 63
    455a:	cd bf       	out	0x3d, r28	; 61
	//return home
	LCD_write_command_8bit(return_Home);
	_delay_ms(2);

#elif LCD_interface_mode == interface_4bit
	LCD_write_command_4bit(clear_Display);
    455c:	81 e0       	ldi	r24, 0x01	; 1
    455e:	0e 94 57 11 	call	0x22ae	; 0x22ae <LCD_write_command_4bit>
    4562:	80 e0       	ldi	r24, 0x00	; 0
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	a0 e0       	ldi	r26, 0x00	; 0
    4568:	b0 e4       	ldi	r27, 0x40	; 64
    456a:	89 8f       	std	Y+25, r24	; 0x19
    456c:	9a 8f       	std	Y+26, r25	; 0x1a
    456e:	ab 8f       	std	Y+27, r26	; 0x1b
    4570:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4572:	69 8d       	ldd	r22, Y+25	; 0x19
    4574:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4576:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4578:	9c 8d       	ldd	r25, Y+28	; 0x1c
    457a:	20 e0       	ldi	r18, 0x00	; 0
    457c:	30 e0       	ldi	r19, 0x00	; 0
    457e:	4a ef       	ldi	r20, 0xFA	; 250
    4580:	54 e4       	ldi	r21, 0x44	; 68
    4582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4586:	dc 01       	movw	r26, r24
    4588:	cb 01       	movw	r24, r22
    458a:	8d 8b       	std	Y+21, r24	; 0x15
    458c:	9e 8b       	std	Y+22, r25	; 0x16
    458e:	af 8b       	std	Y+23, r26	; 0x17
    4590:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4592:	6d 89       	ldd	r22, Y+21	; 0x15
    4594:	7e 89       	ldd	r23, Y+22	; 0x16
    4596:	8f 89       	ldd	r24, Y+23	; 0x17
    4598:	98 8d       	ldd	r25, Y+24	; 0x18
    459a:	20 e0       	ldi	r18, 0x00	; 0
    459c:	30 e0       	ldi	r19, 0x00	; 0
    459e:	40 e8       	ldi	r20, 0x80	; 128
    45a0:	5f e3       	ldi	r21, 0x3F	; 63
    45a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45a6:	88 23       	and	r24, r24
    45a8:	2c f4       	brge	.+10     	; 0x45b4 <LCD_clear_display+0x6c>
		__ticks = 1;
    45aa:	81 e0       	ldi	r24, 0x01	; 1
    45ac:	90 e0       	ldi	r25, 0x00	; 0
    45ae:	9c 8b       	std	Y+20, r25	; 0x14
    45b0:	8b 8b       	std	Y+19, r24	; 0x13
    45b2:	3f c0       	rjmp	.+126    	; 0x4632 <LCD_clear_display+0xea>
	else if (__tmp > 65535)
    45b4:	6d 89       	ldd	r22, Y+21	; 0x15
    45b6:	7e 89       	ldd	r23, Y+22	; 0x16
    45b8:	8f 89       	ldd	r24, Y+23	; 0x17
    45ba:	98 8d       	ldd	r25, Y+24	; 0x18
    45bc:	20 e0       	ldi	r18, 0x00	; 0
    45be:	3f ef       	ldi	r19, 0xFF	; 255
    45c0:	4f e7       	ldi	r20, 0x7F	; 127
    45c2:	57 e4       	ldi	r21, 0x47	; 71
    45c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45c8:	18 16       	cp	r1, r24
    45ca:	4c f5       	brge	.+82     	; 0x461e <LCD_clear_display+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45cc:	69 8d       	ldd	r22, Y+25	; 0x19
    45ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45d4:	20 e0       	ldi	r18, 0x00	; 0
    45d6:	30 e0       	ldi	r19, 0x00	; 0
    45d8:	40 e2       	ldi	r20, 0x20	; 32
    45da:	51 e4       	ldi	r21, 0x41	; 65
    45dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45e0:	dc 01       	movw	r26, r24
    45e2:	cb 01       	movw	r24, r22
    45e4:	bc 01       	movw	r22, r24
    45e6:	cd 01       	movw	r24, r26
    45e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ec:	dc 01       	movw	r26, r24
    45ee:	cb 01       	movw	r24, r22
    45f0:	9c 8b       	std	Y+20, r25	; 0x14
    45f2:	8b 8b       	std	Y+19, r24	; 0x13
    45f4:	0f c0       	rjmp	.+30     	; 0x4614 <LCD_clear_display+0xcc>
    45f6:	88 ec       	ldi	r24, 0xC8	; 200
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	9a 8b       	std	Y+18, r25	; 0x12
    45fc:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    45fe:	89 89       	ldd	r24, Y+17	; 0x11
    4600:	9a 89       	ldd	r25, Y+18	; 0x12
    4602:	01 97       	sbiw	r24, 0x01	; 1
    4604:	f1 f7       	brne	.-4      	; 0x4602 <LCD_clear_display+0xba>
    4606:	9a 8b       	std	Y+18, r25	; 0x12
    4608:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    460a:	8b 89       	ldd	r24, Y+19	; 0x13
    460c:	9c 89       	ldd	r25, Y+20	; 0x14
    460e:	01 97       	sbiw	r24, 0x01	; 1
    4610:	9c 8b       	std	Y+20, r25	; 0x14
    4612:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4614:	8b 89       	ldd	r24, Y+19	; 0x13
    4616:	9c 89       	ldd	r25, Y+20	; 0x14
    4618:	00 97       	sbiw	r24, 0x00	; 0
    461a:	69 f7       	brne	.-38     	; 0x45f6 <LCD_clear_display+0xae>
    461c:	14 c0       	rjmp	.+40     	; 0x4646 <LCD_clear_display+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    461e:	6d 89       	ldd	r22, Y+21	; 0x15
    4620:	7e 89       	ldd	r23, Y+22	; 0x16
    4622:	8f 89       	ldd	r24, Y+23	; 0x17
    4624:	98 8d       	ldd	r25, Y+24	; 0x18
    4626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    462a:	dc 01       	movw	r26, r24
    462c:	cb 01       	movw	r24, r22
    462e:	9c 8b       	std	Y+20, r25	; 0x14
    4630:	8b 8b       	std	Y+19, r24	; 0x13
    4632:	8b 89       	ldd	r24, Y+19	; 0x13
    4634:	9c 89       	ldd	r25, Y+20	; 0x14
    4636:	98 8b       	std	Y+16, r25	; 0x10
    4638:	8f 87       	std	Y+15, r24	; 0x0f
    463a:	8f 85       	ldd	r24, Y+15	; 0x0f
    463c:	98 89       	ldd	r25, Y+16	; 0x10
    463e:	01 97       	sbiw	r24, 0x01	; 1
    4640:	f1 f7       	brne	.-4      	; 0x463e <LCD_clear_display+0xf6>
    4642:	98 8b       	std	Y+16, r25	; 0x10
    4644:	8f 87       	std	Y+15, r24	; 0x0f
	//wait more than 1.53 ms
	_delay_ms(2);
	//return home
	LCD_write_command_4bit(return_Home);
    4646:	82 e0       	ldi	r24, 0x02	; 2
    4648:	0e 94 57 11 	call	0x22ae	; 0x22ae <LCD_write_command_4bit>
    464c:	80 e0       	ldi	r24, 0x00	; 0
    464e:	90 e0       	ldi	r25, 0x00	; 0
    4650:	a0 e0       	ldi	r26, 0x00	; 0
    4652:	b0 e4       	ldi	r27, 0x40	; 64
    4654:	8b 87       	std	Y+11, r24	; 0x0b
    4656:	9c 87       	std	Y+12, r25	; 0x0c
    4658:	ad 87       	std	Y+13, r26	; 0x0d
    465a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    465c:	6b 85       	ldd	r22, Y+11	; 0x0b
    465e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4660:	8d 85       	ldd	r24, Y+13	; 0x0d
    4662:	9e 85       	ldd	r25, Y+14	; 0x0e
    4664:	20 e0       	ldi	r18, 0x00	; 0
    4666:	30 e0       	ldi	r19, 0x00	; 0
    4668:	4a ef       	ldi	r20, 0xFA	; 250
    466a:	54 e4       	ldi	r21, 0x44	; 68
    466c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4670:	dc 01       	movw	r26, r24
    4672:	cb 01       	movw	r24, r22
    4674:	8f 83       	std	Y+7, r24	; 0x07
    4676:	98 87       	std	Y+8, r25	; 0x08
    4678:	a9 87       	std	Y+9, r26	; 0x09
    467a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    467c:	6f 81       	ldd	r22, Y+7	; 0x07
    467e:	78 85       	ldd	r23, Y+8	; 0x08
    4680:	89 85       	ldd	r24, Y+9	; 0x09
    4682:	9a 85       	ldd	r25, Y+10	; 0x0a
    4684:	20 e0       	ldi	r18, 0x00	; 0
    4686:	30 e0       	ldi	r19, 0x00	; 0
    4688:	40 e8       	ldi	r20, 0x80	; 128
    468a:	5f e3       	ldi	r21, 0x3F	; 63
    468c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4690:	88 23       	and	r24, r24
    4692:	2c f4       	brge	.+10     	; 0x469e <LCD_clear_display+0x156>
		__ticks = 1;
    4694:	81 e0       	ldi	r24, 0x01	; 1
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	9e 83       	std	Y+6, r25	; 0x06
    469a:	8d 83       	std	Y+5, r24	; 0x05
    469c:	3f c0       	rjmp	.+126    	; 0x471c <LCD_clear_display+0x1d4>
	else if (__tmp > 65535)
    469e:	6f 81       	ldd	r22, Y+7	; 0x07
    46a0:	78 85       	ldd	r23, Y+8	; 0x08
    46a2:	89 85       	ldd	r24, Y+9	; 0x09
    46a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    46a6:	20 e0       	ldi	r18, 0x00	; 0
    46a8:	3f ef       	ldi	r19, 0xFF	; 255
    46aa:	4f e7       	ldi	r20, 0x7F	; 127
    46ac:	57 e4       	ldi	r21, 0x47	; 71
    46ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46b2:	18 16       	cp	r1, r24
    46b4:	4c f5       	brge	.+82     	; 0x4708 <LCD_clear_display+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    46b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    46ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    46bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    46be:	20 e0       	ldi	r18, 0x00	; 0
    46c0:	30 e0       	ldi	r19, 0x00	; 0
    46c2:	40 e2       	ldi	r20, 0x20	; 32
    46c4:	51 e4       	ldi	r21, 0x41	; 65
    46c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46ca:	dc 01       	movw	r26, r24
    46cc:	cb 01       	movw	r24, r22
    46ce:	bc 01       	movw	r22, r24
    46d0:	cd 01       	movw	r24, r26
    46d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46d6:	dc 01       	movw	r26, r24
    46d8:	cb 01       	movw	r24, r22
    46da:	9e 83       	std	Y+6, r25	; 0x06
    46dc:	8d 83       	std	Y+5, r24	; 0x05
    46de:	0f c0       	rjmp	.+30     	; 0x46fe <LCD_clear_display+0x1b6>
    46e0:	88 ec       	ldi	r24, 0xC8	; 200
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	9c 83       	std	Y+4, r25	; 0x04
    46e6:	8b 83       	std	Y+3, r24	; 0x03
    46e8:	8b 81       	ldd	r24, Y+3	; 0x03
    46ea:	9c 81       	ldd	r25, Y+4	; 0x04
    46ec:	01 97       	sbiw	r24, 0x01	; 1
    46ee:	f1 f7       	brne	.-4      	; 0x46ec <LCD_clear_display+0x1a4>
    46f0:	9c 83       	std	Y+4, r25	; 0x04
    46f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46f4:	8d 81       	ldd	r24, Y+5	; 0x05
    46f6:	9e 81       	ldd	r25, Y+6	; 0x06
    46f8:	01 97       	sbiw	r24, 0x01	; 1
    46fa:	9e 83       	std	Y+6, r25	; 0x06
    46fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4700:	9e 81       	ldd	r25, Y+6	; 0x06
    4702:	00 97       	sbiw	r24, 0x00	; 0
    4704:	69 f7       	brne	.-38     	; 0x46e0 <LCD_clear_display+0x198>
    4706:	14 c0       	rjmp	.+40     	; 0x4730 <LCD_clear_display+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4708:	6f 81       	ldd	r22, Y+7	; 0x07
    470a:	78 85       	ldd	r23, Y+8	; 0x08
    470c:	89 85       	ldd	r24, Y+9	; 0x09
    470e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4714:	dc 01       	movw	r26, r24
    4716:	cb 01       	movw	r24, r22
    4718:	9e 83       	std	Y+6, r25	; 0x06
    471a:	8d 83       	std	Y+5, r24	; 0x05
    471c:	8d 81       	ldd	r24, Y+5	; 0x05
    471e:	9e 81       	ldd	r25, Y+6	; 0x06
    4720:	9a 83       	std	Y+2, r25	; 0x02
    4722:	89 83       	std	Y+1, r24	; 0x01
    4724:	89 81       	ldd	r24, Y+1	; 0x01
    4726:	9a 81       	ldd	r25, Y+2	; 0x02
    4728:	01 97       	sbiw	r24, 0x01	; 1
    472a:	f1 f7       	brne	.-4      	; 0x4728 <LCD_clear_display+0x1e0>
    472c:	9a 83       	std	Y+2, r25	; 0x02
    472e:	89 83       	std	Y+1, r24	; 0x01
	// wait more han 1.53 ms
	_delay_ms(2);
#endif


}
    4730:	6c 96       	adiw	r28, 0x1c	; 28
    4732:	0f b6       	in	r0, 0x3f	; 63
    4734:	f8 94       	cli
    4736:	de bf       	out	0x3e, r29	; 62
    4738:	0f be       	out	0x3f, r0	; 63
    473a:	cd bf       	out	0x3d, r28	; 61
    473c:	cf 91       	pop	r28
    473e:	df 91       	pop	r29
    4740:	08 95       	ret

00004742 <LCD_write_char>:

void LCD_write_char(u8 copy_u8_char){
    4742:	df 93       	push	r29
    4744:	cf 93       	push	r28
    4746:	cd b7       	in	r28, 0x3d	; 61
    4748:	de b7       	in	r29, 0x3e	; 62
    474a:	69 97       	sbiw	r28, 0x19	; 25
    474c:	0f b6       	in	r0, 0x3f	; 63
    474e:	f8 94       	cli
    4750:	de bf       	out	0x3e, r29	; 62
    4752:	0f be       	out	0x3f, r0	; 63
    4754:	cd bf       	out	0x3d, r28	; 61
    4756:	89 8f       	std	Y+25, r24	; 0x19
	LCD_write_data_8bit(copy_u8_char);
	// wait more than 39 us
	_delay_us(50);
#elif LCD_interface_mode == interface_4bit
	// send character
	LCD_write_data_4bit(copy_u8_char);
    4758:	89 8d       	ldd	r24, Y+25	; 0x19
    475a:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <LCD_write_data_4bit>
    475e:	80 e0       	ldi	r24, 0x00	; 0
    4760:	90 e0       	ldi	r25, 0x00	; 0
    4762:	a8 e4       	ldi	r26, 0x48	; 72
    4764:	b2 e4       	ldi	r27, 0x42	; 66
    4766:	8d 8b       	std	Y+21, r24	; 0x15
    4768:	9e 8b       	std	Y+22, r25	; 0x16
    476a:	af 8b       	std	Y+23, r26	; 0x17
    476c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    476e:	6d 89       	ldd	r22, Y+21	; 0x15
    4770:	7e 89       	ldd	r23, Y+22	; 0x16
    4772:	8f 89       	ldd	r24, Y+23	; 0x17
    4774:	98 8d       	ldd	r25, Y+24	; 0x18
    4776:	2b ea       	ldi	r18, 0xAB	; 171
    4778:	3a ea       	ldi	r19, 0xAA	; 170
    477a:	4a e2       	ldi	r20, 0x2A	; 42
    477c:	50 e4       	ldi	r21, 0x40	; 64
    477e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4782:	dc 01       	movw	r26, r24
    4784:	cb 01       	movw	r24, r22
    4786:	89 8b       	std	Y+17, r24	; 0x11
    4788:	9a 8b       	std	Y+18, r25	; 0x12
    478a:	ab 8b       	std	Y+19, r26	; 0x13
    478c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    478e:	69 89       	ldd	r22, Y+17	; 0x11
    4790:	7a 89       	ldd	r23, Y+18	; 0x12
    4792:	8b 89       	ldd	r24, Y+19	; 0x13
    4794:	9c 89       	ldd	r25, Y+20	; 0x14
    4796:	20 e0       	ldi	r18, 0x00	; 0
    4798:	30 e0       	ldi	r19, 0x00	; 0
    479a:	40 e8       	ldi	r20, 0x80	; 128
    479c:	5f e3       	ldi	r21, 0x3F	; 63
    479e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47a2:	88 23       	and	r24, r24
    47a4:	1c f4       	brge	.+6      	; 0x47ac <LCD_write_char+0x6a>
		__ticks = 1;
    47a6:	81 e0       	ldi	r24, 0x01	; 1
    47a8:	88 8b       	std	Y+16, r24	; 0x10
    47aa:	91 c0       	rjmp	.+290    	; 0x48ce <LCD_write_char+0x18c>
	else if (__tmp > 255)
    47ac:	69 89       	ldd	r22, Y+17	; 0x11
    47ae:	7a 89       	ldd	r23, Y+18	; 0x12
    47b0:	8b 89       	ldd	r24, Y+19	; 0x13
    47b2:	9c 89       	ldd	r25, Y+20	; 0x14
    47b4:	20 e0       	ldi	r18, 0x00	; 0
    47b6:	30 e0       	ldi	r19, 0x00	; 0
    47b8:	4f e7       	ldi	r20, 0x7F	; 127
    47ba:	53 e4       	ldi	r21, 0x43	; 67
    47bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47c0:	18 16       	cp	r1, r24
    47c2:	0c f0       	brlt	.+2      	; 0x47c6 <LCD_write_char+0x84>
    47c4:	7b c0       	rjmp	.+246    	; 0x48bc <LCD_write_char+0x17a>
	{
		_delay_ms(__us / 1000.0);
    47c6:	6d 89       	ldd	r22, Y+21	; 0x15
    47c8:	7e 89       	ldd	r23, Y+22	; 0x16
    47ca:	8f 89       	ldd	r24, Y+23	; 0x17
    47cc:	98 8d       	ldd	r25, Y+24	; 0x18
    47ce:	20 e0       	ldi	r18, 0x00	; 0
    47d0:	30 e0       	ldi	r19, 0x00	; 0
    47d2:	4a e7       	ldi	r20, 0x7A	; 122
    47d4:	54 e4       	ldi	r21, 0x44	; 68
    47d6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    47da:	dc 01       	movw	r26, r24
    47dc:	cb 01       	movw	r24, r22
    47de:	8c 87       	std	Y+12, r24	; 0x0c
    47e0:	9d 87       	std	Y+13, r25	; 0x0d
    47e2:	ae 87       	std	Y+14, r26	; 0x0e
    47e4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    47e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    47ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    47ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    47ee:	20 e0       	ldi	r18, 0x00	; 0
    47f0:	30 e0       	ldi	r19, 0x00	; 0
    47f2:	4a ef       	ldi	r20, 0xFA	; 250
    47f4:	54 e4       	ldi	r21, 0x44	; 68
    47f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47fa:	dc 01       	movw	r26, r24
    47fc:	cb 01       	movw	r24, r22
    47fe:	88 87       	std	Y+8, r24	; 0x08
    4800:	99 87       	std	Y+9, r25	; 0x09
    4802:	aa 87       	std	Y+10, r26	; 0x0a
    4804:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4806:	68 85       	ldd	r22, Y+8	; 0x08
    4808:	79 85       	ldd	r23, Y+9	; 0x09
    480a:	8a 85       	ldd	r24, Y+10	; 0x0a
    480c:	9b 85       	ldd	r25, Y+11	; 0x0b
    480e:	20 e0       	ldi	r18, 0x00	; 0
    4810:	30 e0       	ldi	r19, 0x00	; 0
    4812:	40 e8       	ldi	r20, 0x80	; 128
    4814:	5f e3       	ldi	r21, 0x3F	; 63
    4816:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    481a:	88 23       	and	r24, r24
    481c:	2c f4       	brge	.+10     	; 0x4828 <LCD_write_char+0xe6>
		__ticks = 1;
    481e:	81 e0       	ldi	r24, 0x01	; 1
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	9f 83       	std	Y+7, r25	; 0x07
    4824:	8e 83       	std	Y+6, r24	; 0x06
    4826:	3f c0       	rjmp	.+126    	; 0x48a6 <LCD_write_char+0x164>
	else if (__tmp > 65535)
    4828:	68 85       	ldd	r22, Y+8	; 0x08
    482a:	79 85       	ldd	r23, Y+9	; 0x09
    482c:	8a 85       	ldd	r24, Y+10	; 0x0a
    482e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4830:	20 e0       	ldi	r18, 0x00	; 0
    4832:	3f ef       	ldi	r19, 0xFF	; 255
    4834:	4f e7       	ldi	r20, 0x7F	; 127
    4836:	57 e4       	ldi	r21, 0x47	; 71
    4838:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    483c:	18 16       	cp	r1, r24
    483e:	4c f5       	brge	.+82     	; 0x4892 <LCD_write_char+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4840:	6c 85       	ldd	r22, Y+12	; 0x0c
    4842:	7d 85       	ldd	r23, Y+13	; 0x0d
    4844:	8e 85       	ldd	r24, Y+14	; 0x0e
    4846:	9f 85       	ldd	r25, Y+15	; 0x0f
    4848:	20 e0       	ldi	r18, 0x00	; 0
    484a:	30 e0       	ldi	r19, 0x00	; 0
    484c:	40 e2       	ldi	r20, 0x20	; 32
    484e:	51 e4       	ldi	r21, 0x41	; 65
    4850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4854:	dc 01       	movw	r26, r24
    4856:	cb 01       	movw	r24, r22
    4858:	bc 01       	movw	r22, r24
    485a:	cd 01       	movw	r24, r26
    485c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4860:	dc 01       	movw	r26, r24
    4862:	cb 01       	movw	r24, r22
    4864:	9f 83       	std	Y+7, r25	; 0x07
    4866:	8e 83       	std	Y+6, r24	; 0x06
    4868:	0f c0       	rjmp	.+30     	; 0x4888 <LCD_write_char+0x146>
    486a:	88 ec       	ldi	r24, 0xC8	; 200
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	9d 83       	std	Y+5, r25	; 0x05
    4870:	8c 83       	std	Y+4, r24	; 0x04
    4872:	8c 81       	ldd	r24, Y+4	; 0x04
    4874:	9d 81       	ldd	r25, Y+5	; 0x05
    4876:	01 97       	sbiw	r24, 0x01	; 1
    4878:	f1 f7       	brne	.-4      	; 0x4876 <LCD_write_char+0x134>
    487a:	9d 83       	std	Y+5, r25	; 0x05
    487c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    487e:	8e 81       	ldd	r24, Y+6	; 0x06
    4880:	9f 81       	ldd	r25, Y+7	; 0x07
    4882:	01 97       	sbiw	r24, 0x01	; 1
    4884:	9f 83       	std	Y+7, r25	; 0x07
    4886:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4888:	8e 81       	ldd	r24, Y+6	; 0x06
    488a:	9f 81       	ldd	r25, Y+7	; 0x07
    488c:	00 97       	sbiw	r24, 0x00	; 0
    488e:	69 f7       	brne	.-38     	; 0x486a <LCD_write_char+0x128>
    4890:	24 c0       	rjmp	.+72     	; 0x48da <LCD_write_char+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4892:	68 85       	ldd	r22, Y+8	; 0x08
    4894:	79 85       	ldd	r23, Y+9	; 0x09
    4896:	8a 85       	ldd	r24, Y+10	; 0x0a
    4898:	9b 85       	ldd	r25, Y+11	; 0x0b
    489a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    489e:	dc 01       	movw	r26, r24
    48a0:	cb 01       	movw	r24, r22
    48a2:	9f 83       	std	Y+7, r25	; 0x07
    48a4:	8e 83       	std	Y+6, r24	; 0x06
    48a6:	8e 81       	ldd	r24, Y+6	; 0x06
    48a8:	9f 81       	ldd	r25, Y+7	; 0x07
    48aa:	9b 83       	std	Y+3, r25	; 0x03
    48ac:	8a 83       	std	Y+2, r24	; 0x02
    48ae:	8a 81       	ldd	r24, Y+2	; 0x02
    48b0:	9b 81       	ldd	r25, Y+3	; 0x03
    48b2:	01 97       	sbiw	r24, 0x01	; 1
    48b4:	f1 f7       	brne	.-4      	; 0x48b2 <LCD_write_char+0x170>
    48b6:	9b 83       	std	Y+3, r25	; 0x03
    48b8:	8a 83       	std	Y+2, r24	; 0x02
    48ba:	0f c0       	rjmp	.+30     	; 0x48da <LCD_write_char+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    48bc:	69 89       	ldd	r22, Y+17	; 0x11
    48be:	7a 89       	ldd	r23, Y+18	; 0x12
    48c0:	8b 89       	ldd	r24, Y+19	; 0x13
    48c2:	9c 89       	ldd	r25, Y+20	; 0x14
    48c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48c8:	dc 01       	movw	r26, r24
    48ca:	cb 01       	movw	r24, r22
    48cc:	88 8b       	std	Y+16, r24	; 0x10
    48ce:	88 89       	ldd	r24, Y+16	; 0x10
    48d0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    48d2:	89 81       	ldd	r24, Y+1	; 0x01
    48d4:	8a 95       	dec	r24
    48d6:	f1 f7       	brne	.-4      	; 0x48d4 <LCD_write_char+0x192>
    48d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
#endif

}
    48da:	69 96       	adiw	r28, 0x19	; 25
    48dc:	0f b6       	in	r0, 0x3f	; 63
    48de:	f8 94       	cli
    48e0:	de bf       	out	0x3e, r29	; 62
    48e2:	0f be       	out	0x3f, r0	; 63
    48e4:	cd bf       	out	0x3d, r28	; 61
    48e6:	cf 91       	pop	r28
    48e8:	df 91       	pop	r29
    48ea:	08 95       	ret

000048ec <LCD_write_string>:


void LCD_write_string(u8* Copy_pu8_str){
    48ec:	df 93       	push	r29
    48ee:	cf 93       	push	r28
    48f0:	00 d0       	rcall	.+0      	; 0x48f2 <LCD_write_string+0x6>
    48f2:	0f 92       	push	r0
    48f4:	cd b7       	in	r28, 0x3d	; 61
    48f6:	de b7       	in	r29, 0x3e	; 62
    48f8:	9b 83       	std	Y+3, r25	; 0x03
    48fa:	8a 83       	std	Y+2, r24	; 0x02
	 * this function takes a pointer to a string u8
	 * and send it to the lcd to write on it the desired string
	 *
	 */

	u8 i = 0;
    48fc:	19 82       	std	Y+1, r1	; 0x01
    48fe:	0e c0       	rjmp	.+28     	; 0x491c <LCD_write_string+0x30>

	while(Copy_pu8_str[i] != '\0'){

		LCD_write_char(Copy_pu8_str[i]);
    4900:	89 81       	ldd	r24, Y+1	; 0x01
    4902:	28 2f       	mov	r18, r24
    4904:	30 e0       	ldi	r19, 0x00	; 0
    4906:	8a 81       	ldd	r24, Y+2	; 0x02
    4908:	9b 81       	ldd	r25, Y+3	; 0x03
    490a:	fc 01       	movw	r30, r24
    490c:	e2 0f       	add	r30, r18
    490e:	f3 1f       	adc	r31, r19
    4910:	80 81       	ld	r24, Z
    4912:	0e 94 a1 23 	call	0x4742	; 0x4742 <LCD_write_char>
		i++;
    4916:	89 81       	ldd	r24, Y+1	; 0x01
    4918:	8f 5f       	subi	r24, 0xFF	; 255
    491a:	89 83       	std	Y+1, r24	; 0x01
	 *
	 */

	u8 i = 0;

	while(Copy_pu8_str[i] != '\0'){
    491c:	89 81       	ldd	r24, Y+1	; 0x01
    491e:	28 2f       	mov	r18, r24
    4920:	30 e0       	ldi	r19, 0x00	; 0
    4922:	8a 81       	ldd	r24, Y+2	; 0x02
    4924:	9b 81       	ldd	r25, Y+3	; 0x03
    4926:	fc 01       	movw	r30, r24
    4928:	e2 0f       	add	r30, r18
    492a:	f3 1f       	adc	r31, r19
    492c:	80 81       	ld	r24, Z
    492e:	88 23       	and	r24, r24
    4930:	39 f7       	brne	.-50     	; 0x4900 <LCD_write_string+0x14>

		LCD_write_char(Copy_pu8_str[i]);
		i++;
	}

}
    4932:	0f 90       	pop	r0
    4934:	0f 90       	pop	r0
    4936:	0f 90       	pop	r0
    4938:	cf 91       	pop	r28
    493a:	df 91       	pop	r29
    493c:	08 95       	ret

0000493e <LCD_write_number>:


void LCD_write_number(s32 copy_s32_number){
    493e:	0f 93       	push	r16
    4940:	1f 93       	push	r17
    4942:	df 93       	push	r29
    4944:	cf 93       	push	r28
    4946:	cd b7       	in	r28, 0x3d	; 61
    4948:	de b7       	in	r29, 0x3e	; 62
    494a:	60 97       	sbiw	r28, 0x10	; 16
    494c:	0f b6       	in	r0, 0x3f	; 63
    494e:	f8 94       	cli
    4950:	de bf       	out	0x3e, r29	; 62
    4952:	0f be       	out	0x3f, r0	; 63
    4954:	cd bf       	out	0x3d, r28	; 61
    4956:	6d 87       	std	Y+13, r22	; 0x0d
    4958:	7e 87       	std	Y+14, r23	; 0x0e
    495a:	8f 87       	std	Y+15, r24	; 0x0f
    495c:	98 8b       	std	Y+16, r25	; 0x10
	 *
	 *
	 */
	// if number is 0

	if(copy_s32_number == 0){
    495e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4960:	9e 85       	ldd	r25, Y+14	; 0x0e
    4962:	af 85       	ldd	r26, Y+15	; 0x0f
    4964:	b8 89       	ldd	r27, Y+16	; 0x10
    4966:	00 97       	sbiw	r24, 0x00	; 0
    4968:	a1 05       	cpc	r26, r1
    496a:	b1 05       	cpc	r27, r1
    496c:	21 f4       	brne	.+8      	; 0x4976 <LCD_write_number+0x38>

		LCD_write_char('0');
    496e:	80 e3       	ldi	r24, 0x30	; 48
    4970:	0e 94 a1 23 	call	0x4742	; 0x4742 <LCD_write_char>
    4974:	18 c0       	rjmp	.+48     	; 0x49a6 <LCD_write_number+0x68>
		//negative number
	}else if(copy_s32_number < 0){
    4976:	8d 85       	ldd	r24, Y+13	; 0x0d
    4978:	9e 85       	ldd	r25, Y+14	; 0x0e
    497a:	af 85       	ldd	r26, Y+15	; 0x0f
    497c:	b8 89       	ldd	r27, Y+16	; 0x10
    497e:	bb 23       	and	r27, r27
    4980:	94 f4       	brge	.+36     	; 0x49a6 <LCD_write_number+0x68>

		LCD_write_char('-');
    4982:	8d e2       	ldi	r24, 0x2D	; 45
    4984:	0e 94 a1 23 	call	0x4742	; 0x4742 <LCD_write_char>
		//convert the number to the absolute value
		copy_s32_number *= -1;
    4988:	8d 85       	ldd	r24, Y+13	; 0x0d
    498a:	9e 85       	ldd	r25, Y+14	; 0x0e
    498c:	af 85       	ldd	r26, Y+15	; 0x0f
    498e:	b8 89       	ldd	r27, Y+16	; 0x10
    4990:	b0 95       	com	r27
    4992:	a0 95       	com	r26
    4994:	90 95       	com	r25
    4996:	81 95       	neg	r24
    4998:	9f 4f       	sbci	r25, 0xFF	; 255
    499a:	af 4f       	sbci	r26, 0xFF	; 255
    499c:	bf 4f       	sbci	r27, 0xFF	; 255
    499e:	8d 87       	std	Y+13, r24	; 0x0d
    49a0:	9e 87       	std	Y+14, r25	; 0x0e
    49a2:	af 87       	std	Y+15, r26	; 0x0f
    49a4:	b8 8b       	std	Y+16, r27	; 0x10

	}
	if(copy_s32_number > 0){
    49a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    49a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    49aa:	af 85       	ldd	r26, Y+15	; 0x0f
    49ac:	b8 89       	ldd	r27, Y+16	; 0x10
    49ae:	18 16       	cp	r1, r24
    49b0:	19 06       	cpc	r1, r25
    49b2:	1a 06       	cpc	r1, r26
    49b4:	1b 06       	cpc	r1, r27
    49b6:	0c f0       	brlt	.+2      	; 0x49ba <LCD_write_number+0x7c>
    49b8:	51 c0       	rjmp	.+162    	; 0x4a5c <LCD_write_number+0x11e>
	//container to store the number
	u8 numbers[10];
	u8 i = 0;
    49ba:	1a 82       	std	Y+2, r1	; 0x02
    49bc:	2d c0       	rjmp	.+90     	; 0x4a18 <LCD_write_number+0xda>

	while(copy_s32_number != 0){

		//retreive the last digit from the number
		numbers[i] = copy_s32_number%10;
    49be:	8a 81       	ldd	r24, Y+2	; 0x02
    49c0:	08 2f       	mov	r16, r24
    49c2:	10 e0       	ldi	r17, 0x00	; 0
    49c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    49c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    49c8:	af 85       	ldd	r26, Y+15	; 0x0f
    49ca:	b8 89       	ldd	r27, Y+16	; 0x10
    49cc:	2a e0       	ldi	r18, 0x0A	; 10
    49ce:	30 e0       	ldi	r19, 0x00	; 0
    49d0:	40 e0       	ldi	r20, 0x00	; 0
    49d2:	50 e0       	ldi	r21, 0x00	; 0
    49d4:	bc 01       	movw	r22, r24
    49d6:	cd 01       	movw	r24, r26
    49d8:	0e 94 1d 3e 	call	0x7c3a	; 0x7c3a <__divmodsi4>
    49dc:	dc 01       	movw	r26, r24
    49de:	cb 01       	movw	r24, r22
    49e0:	28 2f       	mov	r18, r24
    49e2:	ce 01       	movw	r24, r28
    49e4:	03 96       	adiw	r24, 0x03	; 3
    49e6:	fc 01       	movw	r30, r24
    49e8:	e0 0f       	add	r30, r16
    49ea:	f1 1f       	adc	r31, r17
    49ec:	20 83       	st	Z, r18
		copy_s32_number /= 10;
    49ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    49f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    49f2:	af 85       	ldd	r26, Y+15	; 0x0f
    49f4:	b8 89       	ldd	r27, Y+16	; 0x10
    49f6:	2a e0       	ldi	r18, 0x0A	; 10
    49f8:	30 e0       	ldi	r19, 0x00	; 0
    49fa:	40 e0       	ldi	r20, 0x00	; 0
    49fc:	50 e0       	ldi	r21, 0x00	; 0
    49fe:	bc 01       	movw	r22, r24
    4a00:	cd 01       	movw	r24, r26
    4a02:	0e 94 1d 3e 	call	0x7c3a	; 0x7c3a <__divmodsi4>
    4a06:	da 01       	movw	r26, r20
    4a08:	c9 01       	movw	r24, r18
    4a0a:	8d 87       	std	Y+13, r24	; 0x0d
    4a0c:	9e 87       	std	Y+14, r25	; 0x0e
    4a0e:	af 87       	std	Y+15, r26	; 0x0f
    4a10:	b8 8b       	std	Y+16, r27	; 0x10
		i++;
    4a12:	8a 81       	ldd	r24, Y+2	; 0x02
    4a14:	8f 5f       	subi	r24, 0xFF	; 255
    4a16:	8a 83       	std	Y+2, r24	; 0x02
	if(copy_s32_number > 0){
	//container to store the number
	u8 numbers[10];
	u8 i = 0;

	while(copy_s32_number != 0){
    4a18:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a1c:	af 85       	ldd	r26, Y+15	; 0x0f
    4a1e:	b8 89       	ldd	r27, Y+16	; 0x10
    4a20:	00 97       	sbiw	r24, 0x00	; 0
    4a22:	a1 05       	cpc	r26, r1
    4a24:	b1 05       	cpc	r27, r1
    4a26:	59 f6       	brne	.-106    	; 0x49be <LCD_write_number+0x80>
		copy_s32_number /= 10;
		i++;
	}

	// reverse array order
	array_Swap(numbers, i);
    4a28:	ce 01       	movw	r24, r28
    4a2a:	03 96       	adiw	r24, 0x03	; 3
    4a2c:	6a 81       	ldd	r22, Y+2	; 0x02
    4a2e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <array_Swap>

	// print the correct order of the number
	for(u8 j = 0; j < i; j++){
    4a32:	19 82       	std	Y+1, r1	; 0x01
    4a34:	0f c0       	rjmp	.+30     	; 0x4a54 <LCD_write_number+0x116>

		LCD_write_char(numbers[j]+'0');
    4a36:	89 81       	ldd	r24, Y+1	; 0x01
    4a38:	28 2f       	mov	r18, r24
    4a3a:	30 e0       	ldi	r19, 0x00	; 0
    4a3c:	ce 01       	movw	r24, r28
    4a3e:	03 96       	adiw	r24, 0x03	; 3
    4a40:	fc 01       	movw	r30, r24
    4a42:	e2 0f       	add	r30, r18
    4a44:	f3 1f       	adc	r31, r19
    4a46:	80 81       	ld	r24, Z
    4a48:	80 5d       	subi	r24, 0xD0	; 208
    4a4a:	0e 94 a1 23 	call	0x4742	; 0x4742 <LCD_write_char>

	// reverse array order
	array_Swap(numbers, i);

	// print the correct order of the number
	for(u8 j = 0; j < i; j++){
    4a4e:	89 81       	ldd	r24, Y+1	; 0x01
    4a50:	8f 5f       	subi	r24, 0xFF	; 255
    4a52:	89 83       	std	Y+1, r24	; 0x01
    4a54:	99 81       	ldd	r25, Y+1	; 0x01
    4a56:	8a 81       	ldd	r24, Y+2	; 0x02
    4a58:	98 17       	cp	r25, r24
    4a5a:	68 f3       	brcs	.-38     	; 0x4a36 <LCD_write_number+0xf8>

		LCD_write_char(numbers[j]+'0');
	}

	}
}
    4a5c:	60 96       	adiw	r28, 0x10	; 16
    4a5e:	0f b6       	in	r0, 0x3f	; 63
    4a60:	f8 94       	cli
    4a62:	de bf       	out	0x3e, r29	; 62
    4a64:	0f be       	out	0x3f, r0	; 63
    4a66:	cd bf       	out	0x3d, r28	; 61
    4a68:	cf 91       	pop	r28
    4a6a:	df 91       	pop	r29
    4a6c:	1f 91       	pop	r17
    4a6e:	0f 91       	pop	r16
    4a70:	08 95       	ret

00004a72 <LCD_write_float>:

void LCD_write_float(f32 copy_f32_number, u8 copy_decimal_point){
    4a72:	ef 92       	push	r14
    4a74:	ff 92       	push	r15
    4a76:	0f 93       	push	r16
    4a78:	1f 93       	push	r17
    4a7a:	df 93       	push	r29
    4a7c:	cf 93       	push	r28
    4a7e:	cd b7       	in	r28, 0x3d	; 61
    4a80:	de b7       	in	r29, 0x3e	; 62
    4a82:	2d 97       	sbiw	r28, 0x0d	; 13
    4a84:	0f b6       	in	r0, 0x3f	; 63
    4a86:	f8 94       	cli
    4a88:	de bf       	out	0x3e, r29	; 62
    4a8a:	0f be       	out	0x3f, r0	; 63
    4a8c:	cd bf       	out	0x3d, r28	; 61
    4a8e:	69 87       	std	Y+9, r22	; 0x09
    4a90:	7a 87       	std	Y+10, r23	; 0x0a
    4a92:	8b 87       	std	Y+11, r24	; 0x0b
    4a94:	9c 87       	std	Y+12, r25	; 0x0c
    4a96:	4d 87       	std	Y+13, r20	; 0x0d
	 * the function doesn't return anything
	 *
	 */

	// store the integer part
	s32 int_value = (s32)copy_f32_number;
    4a98:	69 85       	ldd	r22, Y+9	; 0x09
    4a9a:	7a 85       	ldd	r23, Y+10	; 0x0a
    4a9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a9e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4aa0:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4aa4:	dc 01       	movw	r26, r24
    4aa6:	cb 01       	movw	r24, r22
    4aa8:	8d 83       	std	Y+5, r24	; 0x05
    4aaa:	9e 83       	std	Y+6, r25	; 0x06
    4aac:	af 83       	std	Y+7, r26	; 0x07
    4aae:	b8 87       	std	Y+8, r27	; 0x08

	// store the decimal part
	s32 float_value = (s32)((copy_f32_number -(f32)int_value)*power_10(copy_decimal_point));
    4ab0:	6d 81       	ldd	r22, Y+5	; 0x05
    4ab2:	7e 81       	ldd	r23, Y+6	; 0x06
    4ab4:	8f 81       	ldd	r24, Y+7	; 0x07
    4ab6:	98 85       	ldd	r25, Y+8	; 0x08
    4ab8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4abc:	9b 01       	movw	r18, r22
    4abe:	ac 01       	movw	r20, r24
    4ac0:	69 85       	ldd	r22, Y+9	; 0x09
    4ac2:	7a 85       	ldd	r23, Y+10	; 0x0a
    4ac4:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ac6:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ac8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4acc:	dc 01       	movw	r26, r24
    4ace:	cb 01       	movw	r24, r22
    4ad0:	7c 01       	movw	r14, r24
    4ad2:	8d 01       	movw	r16, r26
    4ad4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ad6:	0e 94 c0 09 	call	0x1380	; 0x1380 <power_10>
    4ada:	dc 01       	movw	r26, r24
    4adc:	cb 01       	movw	r24, r22
    4ade:	bc 01       	movw	r22, r24
    4ae0:	cd 01       	movw	r24, r26
    4ae2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4ae6:	9b 01       	movw	r18, r22
    4ae8:	ac 01       	movw	r20, r24
    4aea:	c8 01       	movw	r24, r16
    4aec:	b7 01       	movw	r22, r14
    4aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4af2:	dc 01       	movw	r26, r24
    4af4:	cb 01       	movw	r24, r22
    4af6:	bc 01       	movw	r22, r24
    4af8:	cd 01       	movw	r24, r26
    4afa:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4afe:	dc 01       	movw	r26, r24
    4b00:	cb 01       	movw	r24, r22
    4b02:	89 83       	std	Y+1, r24	; 0x01
    4b04:	9a 83       	std	Y+2, r25	; 0x02
    4b06:	ab 83       	std	Y+3, r26	; 0x03
    4b08:	bc 83       	std	Y+4, r27	; 0x04

	// print the int part
	LCD_write_number(int_value);
    4b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    4b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    4b0e:	af 81       	ldd	r26, Y+7	; 0x07
    4b10:	b8 85       	ldd	r27, Y+8	; 0x08
    4b12:	bc 01       	movw	r22, r24
    4b14:	cd 01       	movw	r24, r26
    4b16:	0e 94 9f 24 	call	0x493e	; 0x493e <LCD_write_number>
	//print the floating point
	LCD_write_char('.');
    4b1a:	8e e2       	ldi	r24, 0x2E	; 46
    4b1c:	0e 94 a1 23 	call	0x4742	; 0x4742 <LCD_write_char>
	//print the decimal part
	if(float_value > 0 ){
    4b20:	89 81       	ldd	r24, Y+1	; 0x01
    4b22:	9a 81       	ldd	r25, Y+2	; 0x02
    4b24:	ab 81       	ldd	r26, Y+3	; 0x03
    4b26:	bc 81       	ldd	r27, Y+4	; 0x04
    4b28:	18 16       	cp	r1, r24
    4b2a:	19 06       	cpc	r1, r25
    4b2c:	1a 06       	cpc	r1, r26
    4b2e:	1b 06       	cpc	r1, r27
    4b30:	4c f4       	brge	.+18     	; 0x4b44 <LCD_write_float+0xd2>
	LCD_write_number(float_value);
    4b32:	89 81       	ldd	r24, Y+1	; 0x01
    4b34:	9a 81       	ldd	r25, Y+2	; 0x02
    4b36:	ab 81       	ldd	r26, Y+3	; 0x03
    4b38:	bc 81       	ldd	r27, Y+4	; 0x04
    4b3a:	bc 01       	movw	r22, r24
    4b3c:	cd 01       	movw	r24, r26
    4b3e:	0e 94 9f 24 	call	0x493e	; 0x493e <LCD_write_number>
    4b42:	0f c0       	rjmp	.+30     	; 0x4b62 <LCD_write_float+0xf0>
	}else{
	LCD_write_number((float_value * -1));
    4b44:	89 81       	ldd	r24, Y+1	; 0x01
    4b46:	9a 81       	ldd	r25, Y+2	; 0x02
    4b48:	ab 81       	ldd	r26, Y+3	; 0x03
    4b4a:	bc 81       	ldd	r27, Y+4	; 0x04
    4b4c:	b0 95       	com	r27
    4b4e:	a0 95       	com	r26
    4b50:	90 95       	com	r25
    4b52:	81 95       	neg	r24
    4b54:	9f 4f       	sbci	r25, 0xFF	; 255
    4b56:	af 4f       	sbci	r26, 0xFF	; 255
    4b58:	bf 4f       	sbci	r27, 0xFF	; 255
    4b5a:	bc 01       	movw	r22, r24
    4b5c:	cd 01       	movw	r24, r26
    4b5e:	0e 94 9f 24 	call	0x493e	; 0x493e <LCD_write_number>

	}


}
    4b62:	2d 96       	adiw	r28, 0x0d	; 13
    4b64:	0f b6       	in	r0, 0x3f	; 63
    4b66:	f8 94       	cli
    4b68:	de bf       	out	0x3e, r29	; 62
    4b6a:	0f be       	out	0x3f, r0	; 63
    4b6c:	cd bf       	out	0x3d, r28	; 61
    4b6e:	cf 91       	pop	r28
    4b70:	df 91       	pop	r29
    4b72:	1f 91       	pop	r17
    4b74:	0f 91       	pop	r16
    4b76:	ff 90       	pop	r15
    4b78:	ef 90       	pop	r14
    4b7a:	08 95       	ret

00004b7c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4b7c:	df 93       	push	r29
    4b7e:	cf 93       	push	r28
    4b80:	00 d0       	rcall	.+0      	; 0x4b82 <pvPortMalloc+0x6>
    4b82:	00 d0       	rcall	.+0      	; 0x4b84 <pvPortMalloc+0x8>
    4b84:	cd b7       	in	r28, 0x3d	; 61
    4b86:	de b7       	in	r29, 0x3e	; 62
    4b88:	9c 83       	std	Y+4, r25	; 0x04
    4b8a:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    4b8c:	1a 82       	std	Y+2, r1	; 0x02
    4b8e:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    4b90:	0e 94 06 35 	call	0x6a0c	; 0x6a0c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    4b94:	80 91 92 01 	lds	r24, 0x0192
    4b98:	90 91 93 01 	lds	r25, 0x0193
    4b9c:	00 97       	sbiw	r24, 0x00	; 0
    4b9e:	31 f4       	brne	.+12     	; 0x4bac <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    4ba0:	85 e9       	ldi	r24, 0x95	; 149
    4ba2:	91 e0       	ldi	r25, 0x01	; 1
    4ba4:	90 93 93 01 	sts	0x0193, r25
    4ba8:	80 93 92 01 	sts	0x0192, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    4bac:	80 91 90 01 	lds	r24, 0x0190
    4bb0:	90 91 91 01 	lds	r25, 0x0191
    4bb4:	2b 81       	ldd	r18, Y+3	; 0x03
    4bb6:	3c 81       	ldd	r19, Y+4	; 0x04
    4bb8:	82 0f       	add	r24, r18
    4bba:	93 1f       	adc	r25, r19
    4bbc:	23 e0       	ldi	r18, 0x03	; 3
    4bbe:	8f 3f       	cpi	r24, 0xFF	; 255
    4bc0:	92 07       	cpc	r25, r18
    4bc2:	38 f5       	brcc	.+78     	; 0x4c12 <pvPortMalloc+0x96>
    4bc4:	20 91 90 01 	lds	r18, 0x0190
    4bc8:	30 91 91 01 	lds	r19, 0x0191
    4bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    4bce:	9c 81       	ldd	r25, Y+4	; 0x04
    4bd0:	28 0f       	add	r18, r24
    4bd2:	39 1f       	adc	r19, r25
    4bd4:	80 91 90 01 	lds	r24, 0x0190
    4bd8:	90 91 91 01 	lds	r25, 0x0191
    4bdc:	82 17       	cp	r24, r18
    4bde:	93 07       	cpc	r25, r19
    4be0:	c0 f4       	brcc	.+48     	; 0x4c12 <pvPortMalloc+0x96>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    4be2:	20 91 92 01 	lds	r18, 0x0192
    4be6:	30 91 93 01 	lds	r19, 0x0193
    4bea:	80 91 90 01 	lds	r24, 0x0190
    4bee:	90 91 91 01 	lds	r25, 0x0191
    4bf2:	82 0f       	add	r24, r18
    4bf4:	93 1f       	adc	r25, r19
    4bf6:	9a 83       	std	Y+2, r25	; 0x02
    4bf8:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    4bfa:	20 91 90 01 	lds	r18, 0x0190
    4bfe:	30 91 91 01 	lds	r19, 0x0191
    4c02:	8b 81       	ldd	r24, Y+3	; 0x03
    4c04:	9c 81       	ldd	r25, Y+4	; 0x04
    4c06:	82 0f       	add	r24, r18
    4c08:	93 1f       	adc	r25, r19
    4c0a:	90 93 91 01 	sts	0x0191, r25
    4c0e:	80 93 90 01 	sts	0x0190, r24
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    4c12:	0e 94 12 35 	call	0x6a24	; 0x6a24 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    4c16:	89 81       	ldd	r24, Y+1	; 0x01
    4c18:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4c1a:	0f 90       	pop	r0
    4c1c:	0f 90       	pop	r0
    4c1e:	0f 90       	pop	r0
    4c20:	0f 90       	pop	r0
    4c22:	cf 91       	pop	r28
    4c24:	df 91       	pop	r29
    4c26:	08 95       	ret

00004c28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    4c28:	df 93       	push	r29
    4c2a:	cf 93       	push	r28
    4c2c:	00 d0       	rcall	.+0      	; 0x4c2e <vPortFree+0x6>
    4c2e:	cd b7       	in	r28, 0x3d	; 61
    4c30:	de b7       	in	r29, 0x3e	; 62
    4c32:	9a 83       	std	Y+2, r25	; 0x02
    4c34:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    4c36:	0f 90       	pop	r0
    4c38:	0f 90       	pop	r0
    4c3a:	cf 91       	pop	r28
    4c3c:	df 91       	pop	r29
    4c3e:	08 95       	ret

00004c40 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    4c40:	df 93       	push	r29
    4c42:	cf 93       	push	r28
    4c44:	cd b7       	in	r28, 0x3d	; 61
    4c46:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    4c48:	10 92 91 01 	sts	0x0191, r1
    4c4c:	10 92 90 01 	sts	0x0190, r1
}
    4c50:	cf 91       	pop	r28
    4c52:	df 91       	pop	r29
    4c54:	08 95       	ret

00004c56 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    4c56:	df 93       	push	r29
    4c58:	cf 93       	push	r28
    4c5a:	cd b7       	in	r28, 0x3d	; 61
    4c5c:	de b7       	in	r29, 0x3e	; 62
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    4c5e:	20 91 90 01 	lds	r18, 0x0190
    4c62:	30 91 91 01 	lds	r19, 0x0191
    4c66:	8f ef       	ldi	r24, 0xFF	; 255
    4c68:	93 e0       	ldi	r25, 0x03	; 3
    4c6a:	82 1b       	sub	r24, r18
    4c6c:	93 0b       	sbc	r25, r19
}
    4c6e:	cf 91       	pop	r28
    4c70:	df 91       	pop	r29
    4c72:	08 95       	ret

00004c74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    4c74:	df 93       	push	r29
    4c76:	cf 93       	push	r28
    4c78:	00 d0       	rcall	.+0      	; 0x4c7a <vListInitialise+0x6>
    4c7a:	cd b7       	in	r28, 0x3d	; 61
    4c7c:	de b7       	in	r29, 0x3e	; 62
    4c7e:	9a 83       	std	Y+2, r25	; 0x02
    4c80:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    4c82:	89 81       	ldd	r24, Y+1	; 0x01
    4c84:	9a 81       	ldd	r25, Y+2	; 0x02
    4c86:	03 96       	adiw	r24, 0x03	; 3
    4c88:	e9 81       	ldd	r30, Y+1	; 0x01
    4c8a:	fa 81       	ldd	r31, Y+2	; 0x02
    4c8c:	92 83       	std	Z+2, r25	; 0x02
    4c8e:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    4c90:	e9 81       	ldd	r30, Y+1	; 0x01
    4c92:	fa 81       	ldd	r31, Y+2	; 0x02
    4c94:	8f ef       	ldi	r24, 0xFF	; 255
    4c96:	9f ef       	ldi	r25, 0xFF	; 255
    4c98:	94 83       	std	Z+4, r25	; 0x04
    4c9a:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    4c9c:	89 81       	ldd	r24, Y+1	; 0x01
    4c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    4ca0:	03 96       	adiw	r24, 0x03	; 3
    4ca2:	e9 81       	ldd	r30, Y+1	; 0x01
    4ca4:	fa 81       	ldd	r31, Y+2	; 0x02
    4ca6:	96 83       	std	Z+6, r25	; 0x06
    4ca8:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    4caa:	89 81       	ldd	r24, Y+1	; 0x01
    4cac:	9a 81       	ldd	r25, Y+2	; 0x02
    4cae:	03 96       	adiw	r24, 0x03	; 3
    4cb0:	e9 81       	ldd	r30, Y+1	; 0x01
    4cb2:	fa 81       	ldd	r31, Y+2	; 0x02
    4cb4:	90 87       	std	Z+8, r25	; 0x08
    4cb6:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    4cb8:	e9 81       	ldd	r30, Y+1	; 0x01
    4cba:	fa 81       	ldd	r31, Y+2	; 0x02
    4cbc:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    4cbe:	0f 90       	pop	r0
    4cc0:	0f 90       	pop	r0
    4cc2:	cf 91       	pop	r28
    4cc4:	df 91       	pop	r29
    4cc6:	08 95       	ret

00004cc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    4cc8:	df 93       	push	r29
    4cca:	cf 93       	push	r28
    4ccc:	00 d0       	rcall	.+0      	; 0x4cce <vListInitialiseItem+0x6>
    4cce:	cd b7       	in	r28, 0x3d	; 61
    4cd0:	de b7       	in	r29, 0x3e	; 62
    4cd2:	9a 83       	std	Y+2, r25	; 0x02
    4cd4:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
    4cd6:	e9 81       	ldd	r30, Y+1	; 0x01
    4cd8:	fa 81       	ldd	r31, Y+2	; 0x02
    4cda:	11 86       	std	Z+9, r1	; 0x09
    4cdc:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    4cde:	0f 90       	pop	r0
    4ce0:	0f 90       	pop	r0
    4ce2:	cf 91       	pop	r28
    4ce4:	df 91       	pop	r29
    4ce6:	08 95       	ret

00004ce8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    4ce8:	df 93       	push	r29
    4cea:	cf 93       	push	r28
    4cec:	00 d0       	rcall	.+0      	; 0x4cee <vListInsertEnd+0x6>
    4cee:	00 d0       	rcall	.+0      	; 0x4cf0 <vListInsertEnd+0x8>
    4cf0:	00 d0       	rcall	.+0      	; 0x4cf2 <vListInsertEnd+0xa>
    4cf2:	cd b7       	in	r28, 0x3d	; 61
    4cf4:	de b7       	in	r29, 0x3e	; 62
    4cf6:	9c 83       	std	Y+4, r25	; 0x04
    4cf8:	8b 83       	std	Y+3, r24	; 0x03
    4cfa:	7e 83       	std	Y+6, r23	; 0x06
    4cfc:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    4cfe:	eb 81       	ldd	r30, Y+3	; 0x03
    4d00:	fc 81       	ldd	r31, Y+4	; 0x04
    4d02:	81 81       	ldd	r24, Z+1	; 0x01
    4d04:	92 81       	ldd	r25, Z+2	; 0x02
    4d06:	9a 83       	std	Y+2, r25	; 0x02
    4d08:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    4d0a:	ed 81       	ldd	r30, Y+5	; 0x05
    4d0c:	fe 81       	ldd	r31, Y+6	; 0x06
    4d0e:	89 81       	ldd	r24, Y+1	; 0x01
    4d10:	9a 81       	ldd	r25, Y+2	; 0x02
    4d12:	93 83       	std	Z+3, r25	; 0x03
    4d14:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    4d16:	e9 81       	ldd	r30, Y+1	; 0x01
    4d18:	fa 81       	ldd	r31, Y+2	; 0x02
    4d1a:	84 81       	ldd	r24, Z+4	; 0x04
    4d1c:	95 81       	ldd	r25, Z+5	; 0x05
    4d1e:	ed 81       	ldd	r30, Y+5	; 0x05
    4d20:	fe 81       	ldd	r31, Y+6	; 0x06
    4d22:	95 83       	std	Z+5, r25	; 0x05
    4d24:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    4d26:	e9 81       	ldd	r30, Y+1	; 0x01
    4d28:	fa 81       	ldd	r31, Y+2	; 0x02
    4d2a:	04 80       	ldd	r0, Z+4	; 0x04
    4d2c:	f5 81       	ldd	r31, Z+5	; 0x05
    4d2e:	e0 2d       	mov	r30, r0
    4d30:	8d 81       	ldd	r24, Y+5	; 0x05
    4d32:	9e 81       	ldd	r25, Y+6	; 0x06
    4d34:	93 83       	std	Z+3, r25	; 0x03
    4d36:	82 83       	std	Z+2, r24	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    4d38:	e9 81       	ldd	r30, Y+1	; 0x01
    4d3a:	fa 81       	ldd	r31, Y+2	; 0x02
    4d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    4d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    4d40:	95 83       	std	Z+5, r25	; 0x05
    4d42:	84 83       	std	Z+4, r24	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
    4d44:	ed 81       	ldd	r30, Y+5	; 0x05
    4d46:	fe 81       	ldd	r31, Y+6	; 0x06
    4d48:	8b 81       	ldd	r24, Y+3	; 0x03
    4d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    4d4c:	91 87       	std	Z+9, r25	; 0x09
    4d4e:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    4d50:	eb 81       	ldd	r30, Y+3	; 0x03
    4d52:	fc 81       	ldd	r31, Y+4	; 0x04
    4d54:	80 81       	ld	r24, Z
    4d56:	8f 5f       	subi	r24, 0xFF	; 255
    4d58:	eb 81       	ldd	r30, Y+3	; 0x03
    4d5a:	fc 81       	ldd	r31, Y+4	; 0x04
    4d5c:	80 83       	st	Z, r24
}
    4d5e:	26 96       	adiw	r28, 0x06	; 6
    4d60:	0f b6       	in	r0, 0x3f	; 63
    4d62:	f8 94       	cli
    4d64:	de bf       	out	0x3e, r29	; 62
    4d66:	0f be       	out	0x3f, r0	; 63
    4d68:	cd bf       	out	0x3d, r28	; 61
    4d6a:	cf 91       	pop	r28
    4d6c:	df 91       	pop	r29
    4d6e:	08 95       	ret

00004d70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    4d70:	df 93       	push	r29
    4d72:	cf 93       	push	r28
    4d74:	cd b7       	in	r28, 0x3d	; 61
    4d76:	de b7       	in	r29, 0x3e	; 62
    4d78:	28 97       	sbiw	r28, 0x08	; 8
    4d7a:	0f b6       	in	r0, 0x3f	; 63
    4d7c:	f8 94       	cli
    4d7e:	de bf       	out	0x3e, r29	; 62
    4d80:	0f be       	out	0x3f, r0	; 63
    4d82:	cd bf       	out	0x3d, r28	; 61
    4d84:	9e 83       	std	Y+6, r25	; 0x06
    4d86:	8d 83       	std	Y+5, r24	; 0x05
    4d88:	78 87       	std	Y+8, r23	; 0x08
    4d8a:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    4d8c:	ef 81       	ldd	r30, Y+7	; 0x07
    4d8e:	f8 85       	ldd	r31, Y+8	; 0x08
    4d90:	80 81       	ld	r24, Z
    4d92:	91 81       	ldd	r25, Z+1	; 0x01
    4d94:	9a 83       	std	Y+2, r25	; 0x02
    4d96:	89 83       	std	Y+1, r24	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    4d98:	89 81       	ldd	r24, Y+1	; 0x01
    4d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d9c:	2f ef       	ldi	r18, 0xFF	; 255
    4d9e:	8f 3f       	cpi	r24, 0xFF	; 255
    4da0:	92 07       	cpc	r25, r18
    4da2:	39 f4       	brne	.+14     	; 0x4db2 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    4da4:	ed 81       	ldd	r30, Y+5	; 0x05
    4da6:	fe 81       	ldd	r31, Y+6	; 0x06
    4da8:	87 81       	ldd	r24, Z+7	; 0x07
    4daa:	90 85       	ldd	r25, Z+8	; 0x08
    4dac:	9c 83       	std	Y+4, r25	; 0x04
    4dae:	8b 83       	std	Y+3, r24	; 0x03
    4db0:	18 c0       	rjmp	.+48     	; 0x4de2 <vListInsert+0x72>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    4db2:	8d 81       	ldd	r24, Y+5	; 0x05
    4db4:	9e 81       	ldd	r25, Y+6	; 0x06
    4db6:	03 96       	adiw	r24, 0x03	; 3
    4db8:	9c 83       	std	Y+4, r25	; 0x04
    4dba:	8b 83       	std	Y+3, r24	; 0x03
    4dbc:	06 c0       	rjmp	.+12     	; 0x4dca <vListInsert+0x5a>
    4dbe:	eb 81       	ldd	r30, Y+3	; 0x03
    4dc0:	fc 81       	ldd	r31, Y+4	; 0x04
    4dc2:	82 81       	ldd	r24, Z+2	; 0x02
    4dc4:	93 81       	ldd	r25, Z+3	; 0x03
    4dc6:	9c 83       	std	Y+4, r25	; 0x04
    4dc8:	8b 83       	std	Y+3, r24	; 0x03
    4dca:	eb 81       	ldd	r30, Y+3	; 0x03
    4dcc:	fc 81       	ldd	r31, Y+4	; 0x04
    4dce:	02 80       	ldd	r0, Z+2	; 0x02
    4dd0:	f3 81       	ldd	r31, Z+3	; 0x03
    4dd2:	e0 2d       	mov	r30, r0
    4dd4:	20 81       	ld	r18, Z
    4dd6:	31 81       	ldd	r19, Z+1	; 0x01
    4dd8:	89 81       	ldd	r24, Y+1	; 0x01
    4dda:	9a 81       	ldd	r25, Y+2	; 0x02
    4ddc:	82 17       	cp	r24, r18
    4dde:	93 07       	cpc	r25, r19
    4de0:	70 f7       	brcc	.-36     	; 0x4dbe <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    4de2:	eb 81       	ldd	r30, Y+3	; 0x03
    4de4:	fc 81       	ldd	r31, Y+4	; 0x04
    4de6:	82 81       	ldd	r24, Z+2	; 0x02
    4de8:	93 81       	ldd	r25, Z+3	; 0x03
    4dea:	ef 81       	ldd	r30, Y+7	; 0x07
    4dec:	f8 85       	ldd	r31, Y+8	; 0x08
    4dee:	93 83       	std	Z+3, r25	; 0x03
    4df0:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    4df2:	ef 81       	ldd	r30, Y+7	; 0x07
    4df4:	f8 85       	ldd	r31, Y+8	; 0x08
    4df6:	02 80       	ldd	r0, Z+2	; 0x02
    4df8:	f3 81       	ldd	r31, Z+3	; 0x03
    4dfa:	e0 2d       	mov	r30, r0
    4dfc:	8f 81       	ldd	r24, Y+7	; 0x07
    4dfe:	98 85       	ldd	r25, Y+8	; 0x08
    4e00:	95 83       	std	Z+5, r25	; 0x05
    4e02:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    4e04:	ef 81       	ldd	r30, Y+7	; 0x07
    4e06:	f8 85       	ldd	r31, Y+8	; 0x08
    4e08:	8b 81       	ldd	r24, Y+3	; 0x03
    4e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    4e0c:	95 83       	std	Z+5, r25	; 0x05
    4e0e:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = pxNewListItem;
    4e10:	eb 81       	ldd	r30, Y+3	; 0x03
    4e12:	fc 81       	ldd	r31, Y+4	; 0x04
    4e14:	8f 81       	ldd	r24, Y+7	; 0x07
    4e16:	98 85       	ldd	r25, Y+8	; 0x08
    4e18:	93 83       	std	Z+3, r25	; 0x03
    4e1a:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
    4e1c:	ef 81       	ldd	r30, Y+7	; 0x07
    4e1e:	f8 85       	ldd	r31, Y+8	; 0x08
    4e20:	8d 81       	ldd	r24, Y+5	; 0x05
    4e22:	9e 81       	ldd	r25, Y+6	; 0x06
    4e24:	91 87       	std	Z+9, r25	; 0x09
    4e26:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    4e28:	ed 81       	ldd	r30, Y+5	; 0x05
    4e2a:	fe 81       	ldd	r31, Y+6	; 0x06
    4e2c:	80 81       	ld	r24, Z
    4e2e:	8f 5f       	subi	r24, 0xFF	; 255
    4e30:	ed 81       	ldd	r30, Y+5	; 0x05
    4e32:	fe 81       	ldd	r31, Y+6	; 0x06
    4e34:	80 83       	st	Z, r24
}
    4e36:	28 96       	adiw	r28, 0x08	; 8
    4e38:	0f b6       	in	r0, 0x3f	; 63
    4e3a:	f8 94       	cli
    4e3c:	de bf       	out	0x3e, r29	; 62
    4e3e:	0f be       	out	0x3f, r0	; 63
    4e40:	cd bf       	out	0x3d, r28	; 61
    4e42:	cf 91       	pop	r28
    4e44:	df 91       	pop	r29
    4e46:	08 95       	ret

00004e48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    4e48:	df 93       	push	r29
    4e4a:	cf 93       	push	r28
    4e4c:	00 d0       	rcall	.+0      	; 0x4e4e <uxListRemove+0x6>
    4e4e:	00 d0       	rcall	.+0      	; 0x4e50 <uxListRemove+0x8>
    4e50:	cd b7       	in	r28, 0x3d	; 61
    4e52:	de b7       	in	r29, 0x3e	; 62
    4e54:	9c 83       	std	Y+4, r25	; 0x04
    4e56:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    4e58:	eb 81       	ldd	r30, Y+3	; 0x03
    4e5a:	fc 81       	ldd	r31, Y+4	; 0x04
    4e5c:	80 85       	ldd	r24, Z+8	; 0x08
    4e5e:	91 85       	ldd	r25, Z+9	; 0x09
    4e60:	9a 83       	std	Y+2, r25	; 0x02
    4e62:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    4e64:	eb 81       	ldd	r30, Y+3	; 0x03
    4e66:	fc 81       	ldd	r31, Y+4	; 0x04
    4e68:	a2 81       	ldd	r26, Z+2	; 0x02
    4e6a:	b3 81       	ldd	r27, Z+3	; 0x03
    4e6c:	eb 81       	ldd	r30, Y+3	; 0x03
    4e6e:	fc 81       	ldd	r31, Y+4	; 0x04
    4e70:	84 81       	ldd	r24, Z+4	; 0x04
    4e72:	95 81       	ldd	r25, Z+5	; 0x05
    4e74:	15 96       	adiw	r26, 0x05	; 5
    4e76:	9c 93       	st	X, r25
    4e78:	8e 93       	st	-X, r24
    4e7a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    4e7c:	eb 81       	ldd	r30, Y+3	; 0x03
    4e7e:	fc 81       	ldd	r31, Y+4	; 0x04
    4e80:	a4 81       	ldd	r26, Z+4	; 0x04
    4e82:	b5 81       	ldd	r27, Z+5	; 0x05
    4e84:	eb 81       	ldd	r30, Y+3	; 0x03
    4e86:	fc 81       	ldd	r31, Y+4	; 0x04
    4e88:	82 81       	ldd	r24, Z+2	; 0x02
    4e8a:	93 81       	ldd	r25, Z+3	; 0x03
    4e8c:	13 96       	adiw	r26, 0x03	; 3
    4e8e:	9c 93       	st	X, r25
    4e90:	8e 93       	st	-X, r24
    4e92:	12 97       	sbiw	r26, 0x02	; 2

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    4e94:	e9 81       	ldd	r30, Y+1	; 0x01
    4e96:	fa 81       	ldd	r31, Y+2	; 0x02
    4e98:	21 81       	ldd	r18, Z+1	; 0x01
    4e9a:	32 81       	ldd	r19, Z+2	; 0x02
    4e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    4ea0:	28 17       	cp	r18, r24
    4ea2:	39 07       	cpc	r19, r25
    4ea4:	41 f4       	brne	.+16     	; 0x4eb6 <uxListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    4ea6:	eb 81       	ldd	r30, Y+3	; 0x03
    4ea8:	fc 81       	ldd	r31, Y+4	; 0x04
    4eaa:	84 81       	ldd	r24, Z+4	; 0x04
    4eac:	95 81       	ldd	r25, Z+5	; 0x05
    4eae:	e9 81       	ldd	r30, Y+1	; 0x01
    4eb0:	fa 81       	ldd	r31, Y+2	; 0x02
    4eb2:	92 83       	std	Z+2, r25	; 0x02
    4eb4:	81 83       	std	Z+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
    4eb6:	eb 81       	ldd	r30, Y+3	; 0x03
    4eb8:	fc 81       	ldd	r31, Y+4	; 0x04
    4eba:	11 86       	std	Z+9, r1	; 0x09
    4ebc:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    4ebe:	e9 81       	ldd	r30, Y+1	; 0x01
    4ec0:	fa 81       	ldd	r31, Y+2	; 0x02
    4ec2:	80 81       	ld	r24, Z
    4ec4:	81 50       	subi	r24, 0x01	; 1
    4ec6:	e9 81       	ldd	r30, Y+1	; 0x01
    4ec8:	fa 81       	ldd	r31, Y+2	; 0x02
    4eca:	80 83       	st	Z, r24

	return pxList->uxNumberOfItems;
    4ecc:	e9 81       	ldd	r30, Y+1	; 0x01
    4ece:	fa 81       	ldd	r31, Y+2	; 0x02
    4ed0:	80 81       	ld	r24, Z
}
    4ed2:	0f 90       	pop	r0
    4ed4:	0f 90       	pop	r0
    4ed6:	0f 90       	pop	r0
    4ed8:	0f 90       	pop	r0
    4eda:	cf 91       	pop	r28
    4edc:	df 91       	pop	r29
    4ede:	08 95       	ret

00004ee0 <LCD1>:
//CREATING A SEMAPHORE OBJECT

SemaphoreHandle_t LCDsem;


void LCD1(void* vp){
    4ee0:	df 93       	push	r29
    4ee2:	cf 93       	push	r28
    4ee4:	00 d0       	rcall	.+0      	; 0x4ee6 <LCD1+0x6>
    4ee6:	0f 92       	push	r0
    4ee8:	cd b7       	in	r28, 0x3d	; 61
    4eea:	de b7       	in	r29, 0x3e	; 62
    4eec:	9b 83       	std	Y+3, r25	; 0x03
    4eee:	8a 83       	std	Y+2, r24	; 0x02

u8 var;

	while(1){
		var = xSemaphoreTake(LCDsem,10);
    4ef0:	80 91 f1 05 	lds	r24, 0x05F1
    4ef4:	90 91 f2 05 	lds	r25, 0x05F2
    4ef8:	6a e0       	ldi	r22, 0x0A	; 10
    4efa:	70 e0       	ldi	r23, 0x00	; 0
    4efc:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <xQueueSemaphoreTake>
    4f00:	89 83       	std	Y+1, r24	; 0x01

		if(var == pdTRUE){
    4f02:	89 81       	ldd	r24, Y+1	; 0x01
    4f04:	81 30       	cpi	r24, 0x01	; 1
    4f06:	79 f4       	brne	.+30     	; 0x4f26 <LCD1+0x46>
			LCD_write_string("TSK1");
    4f08:	80 e6       	ldi	r24, 0x60	; 96
    4f0a:	90 e0       	ldi	r25, 0x00	; 0
    4f0c:	0e 94 76 24 	call	0x48ec	; 0x48ec <LCD_write_string>
			xSemaphoreGive(LCDsem);
    4f10:	80 91 f1 05 	lds	r24, 0x05F1
    4f14:	90 91 f2 05 	lds	r25, 0x05F2
    4f18:	60 e0       	ldi	r22, 0x00	; 0
    4f1a:	70 e0       	ldi	r23, 0x00	; 0
    4f1c:	40 e0       	ldi	r20, 0x00	; 0
    4f1e:	50 e0       	ldi	r21, 0x00	; 0
    4f20:	20 e0       	ldi	r18, 0x00	; 0
    4f22:	0e 94 06 2c 	call	0x580c	; 0x580c <xQueueGenericSend>
		}
		vTaskDelay(2000);
    4f26:	80 ed       	ldi	r24, 0xD0	; 208
    4f28:	97 e0       	ldi	r25, 0x07	; 7
    4f2a:	0e 94 a6 34 	call	0x694c	; 0x694c <vTaskDelay>
    4f2e:	e0 cf       	rjmp	.-64     	; 0x4ef0 <LCD1+0x10>

00004f30 <LCD2>:

	}


}
void LCD2(void* vp){
    4f30:	df 93       	push	r29
    4f32:	cf 93       	push	r28
    4f34:	00 d0       	rcall	.+0      	; 0x4f36 <LCD2+0x6>
    4f36:	0f 92       	push	r0
    4f38:	cd b7       	in	r28, 0x3d	; 61
    4f3a:	de b7       	in	r29, 0x3e	; 62
    4f3c:	9b 83       	std	Y+3, r25	; 0x03
    4f3e:	8a 83       	std	Y+2, r24	; 0x02

u8 var2;

	while(1){

		var2 = xSemaphoreTake(LCDsem,10);
    4f40:	80 91 f1 05 	lds	r24, 0x05F1
    4f44:	90 91 f2 05 	lds	r25, 0x05F2
    4f48:	6a e0       	ldi	r22, 0x0A	; 10
    4f4a:	70 e0       	ldi	r23, 0x00	; 0
    4f4c:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <xQueueSemaphoreTake>
    4f50:	89 83       	std	Y+1, r24	; 0x01

		if(var2 == pdTRUE){
    4f52:	89 81       	ldd	r24, Y+1	; 0x01
    4f54:	81 30       	cpi	r24, 0x01	; 1
    4f56:	79 f4       	brne	.+30     	; 0x4f76 <LCD2+0x46>

			LCD_write_string("TSK2");
    4f58:	85 e6       	ldi	r24, 0x65	; 101
    4f5a:	90 e0       	ldi	r25, 0x00	; 0
    4f5c:	0e 94 76 24 	call	0x48ec	; 0x48ec <LCD_write_string>


			xSemaphoreGive(LCDsem);
    4f60:	80 91 f1 05 	lds	r24, 0x05F1
    4f64:	90 91 f2 05 	lds	r25, 0x05F2
    4f68:	60 e0       	ldi	r22, 0x00	; 0
    4f6a:	70 e0       	ldi	r23, 0x00	; 0
    4f6c:	40 e0       	ldi	r20, 0x00	; 0
    4f6e:	50 e0       	ldi	r21, 0x00	; 0
    4f70:	20 e0       	ldi	r18, 0x00	; 0
    4f72:	0e 94 06 2c 	call	0x580c	; 0x580c <xQueueGenericSend>
		}

		vTaskDelay(2000);
    4f76:	80 ed       	ldi	r24, 0xD0	; 208
    4f78:	97 e0       	ldi	r25, 0x07	; 7
    4f7a:	0e 94 a6 34 	call	0x694c	; 0x694c <vTaskDelay>
    4f7e:	e0 cf       	rjmp	.-64     	; 0x4f40 <LCD2+0x10>

00004f80 <main>:


}


int main(){
    4f80:	ef 92       	push	r14
    4f82:	ff 92       	push	r15
    4f84:	0f 93       	push	r16
    4f86:	df 93       	push	r29
    4f88:	cf 93       	push	r28
    4f8a:	cd b7       	in	r28, 0x3d	; 61
    4f8c:	de b7       	in	r29, 0x3e	; 62


	LCD_init();
    4f8e:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <LCD_init>


	//LCD_write_number(650);
	vSemaphoreCreateBinary(LCDsem);
    4f92:	81 e0       	ldi	r24, 0x01	; 1
    4f94:	60 e0       	ldi	r22, 0x00	; 0
    4f96:	43 e0       	ldi	r20, 0x03	; 3
    4f98:	0e 94 5a 2b 	call	0x56b4	; 0x56b4 <xQueueGenericCreate>
    4f9c:	90 93 f2 05 	sts	0x05F2, r25
    4fa0:	80 93 f1 05 	sts	0x05F1, r24
    4fa4:	80 91 f1 05 	lds	r24, 0x05F1
    4fa8:	90 91 f2 05 	lds	r25, 0x05F2
    4fac:	00 97       	sbiw	r24, 0x00	; 0
    4fae:	59 f0       	breq	.+22     	; 0x4fc6 <main+0x46>
    4fb0:	80 91 f1 05 	lds	r24, 0x05F1
    4fb4:	90 91 f2 05 	lds	r25, 0x05F2
    4fb8:	60 e0       	ldi	r22, 0x00	; 0
    4fba:	70 e0       	ldi	r23, 0x00	; 0
    4fbc:	40 e0       	ldi	r20, 0x00	; 0
    4fbe:	50 e0       	ldi	r21, 0x00	; 0
    4fc0:	20 e0       	ldi	r18, 0x00	; 0
    4fc2:	0e 94 06 2c 	call	0x580c	; 0x580c <xQueueGenericSend>

	xTaskCreate(LCD1,NULL,250,NULL,1,NULL);
    4fc6:	80 e7       	ldi	r24, 0x70	; 112
    4fc8:	97 e2       	ldi	r25, 0x27	; 39
    4fca:	60 e0       	ldi	r22, 0x00	; 0
    4fcc:	70 e0       	ldi	r23, 0x00	; 0
    4fce:	4a ef       	ldi	r20, 0xFA	; 250
    4fd0:	50 e0       	ldi	r21, 0x00	; 0
    4fd2:	20 e0       	ldi	r18, 0x00	; 0
    4fd4:	30 e0       	ldi	r19, 0x00	; 0
    4fd6:	01 e0       	ldi	r16, 0x01	; 1
    4fd8:	ee 24       	eor	r14, r14
    4fda:	ff 24       	eor	r15, r15
    4fdc:	0e 94 16 32 	call	0x642c	; 0x642c <xTaskCreate>
	xTaskCreate(LCD2,NULL,250,NULL,1,NULL);
    4fe0:	88 e9       	ldi	r24, 0x98	; 152
    4fe2:	97 e2       	ldi	r25, 0x27	; 39
    4fe4:	60 e0       	ldi	r22, 0x00	; 0
    4fe6:	70 e0       	ldi	r23, 0x00	; 0
    4fe8:	4a ef       	ldi	r20, 0xFA	; 250
    4fea:	50 e0       	ldi	r21, 0x00	; 0
    4fec:	20 e0       	ldi	r18, 0x00	; 0
    4fee:	30 e0       	ldi	r19, 0x00	; 0
    4ff0:	01 e0       	ldi	r16, 0x01	; 1
    4ff2:	ee 24       	eor	r14, r14
    4ff4:	ff 24       	eor	r15, r15
    4ff6:	0e 94 16 32 	call	0x642c	; 0x642c <xTaskCreate>


	vTaskStartScheduler();
    4ffa:	0e 94 c8 34 	call	0x6990	; 0x6990 <vTaskStartScheduler>
    4ffe:	ff cf       	rjmp	.-2      	; 0x4ffe <main+0x7e>

00005000 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    5000:	df 93       	push	r29
    5002:	cf 93       	push	r28
    5004:	cd b7       	in	r28, 0x3d	; 61
    5006:	de b7       	in	r29, 0x3e	; 62
    5008:	28 97       	sbiw	r28, 0x08	; 8
    500a:	0f b6       	in	r0, 0x3f	; 63
    500c:	f8 94       	cli
    500e:	de bf       	out	0x3e, r29	; 62
    5010:	0f be       	out	0x3f, r0	; 63
    5012:	cd bf       	out	0x3d, r28	; 61
    5014:	9c 83       	std	Y+4, r25	; 0x04
    5016:	8b 83       	std	Y+3, r24	; 0x03
    5018:	7e 83       	std	Y+6, r23	; 0x06
    501a:	6d 83       	std	Y+5, r22	; 0x05
    501c:	58 87       	std	Y+8, r21	; 0x08
    501e:	4f 83       	std	Y+7, r20	; 0x07
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    5020:	eb 81       	ldd	r30, Y+3	; 0x03
    5022:	fc 81       	ldd	r31, Y+4	; 0x04
    5024:	81 e1       	ldi	r24, 0x11	; 17
    5026:	80 83       	st	Z, r24
	pxTopOfStack--;
    5028:	8b 81       	ldd	r24, Y+3	; 0x03
    502a:	9c 81       	ldd	r25, Y+4	; 0x04
    502c:	01 97       	sbiw	r24, 0x01	; 1
    502e:	9c 83       	std	Y+4, r25	; 0x04
    5030:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    5032:	eb 81       	ldd	r30, Y+3	; 0x03
    5034:	fc 81       	ldd	r31, Y+4	; 0x04
    5036:	82 e2       	ldi	r24, 0x22	; 34
    5038:	80 83       	st	Z, r24
	pxTopOfStack--;
    503a:	8b 81       	ldd	r24, Y+3	; 0x03
    503c:	9c 81       	ldd	r25, Y+4	; 0x04
    503e:	01 97       	sbiw	r24, 0x01	; 1
    5040:	9c 83       	std	Y+4, r25	; 0x04
    5042:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    5044:	eb 81       	ldd	r30, Y+3	; 0x03
    5046:	fc 81       	ldd	r31, Y+4	; 0x04
    5048:	83 e3       	ldi	r24, 0x33	; 51
    504a:	80 83       	st	Z, r24
	pxTopOfStack--;
    504c:	8b 81       	ldd	r24, Y+3	; 0x03
    504e:	9c 81       	ldd	r25, Y+4	; 0x04
    5050:	01 97       	sbiw	r24, 0x01	; 1
    5052:	9c 83       	std	Y+4, r25	; 0x04
    5054:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
    5056:	8d 81       	ldd	r24, Y+5	; 0x05
    5058:	9e 81       	ldd	r25, Y+6	; 0x06
    505a:	9a 83       	std	Y+2, r25	; 0x02
    505c:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    505e:	89 81       	ldd	r24, Y+1	; 0x01
    5060:	eb 81       	ldd	r30, Y+3	; 0x03
    5062:	fc 81       	ldd	r31, Y+4	; 0x04
    5064:	80 83       	st	Z, r24
	pxTopOfStack--;
    5066:	8b 81       	ldd	r24, Y+3	; 0x03
    5068:	9c 81       	ldd	r25, Y+4	; 0x04
    506a:	01 97       	sbiw	r24, 0x01	; 1
    506c:	9c 83       	std	Y+4, r25	; 0x04
    506e:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    5070:	89 81       	ldd	r24, Y+1	; 0x01
    5072:	9a 81       	ldd	r25, Y+2	; 0x02
    5074:	89 2f       	mov	r24, r25
    5076:	99 27       	eor	r25, r25
    5078:	9a 83       	std	Y+2, r25	; 0x02
    507a:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    507c:	89 81       	ldd	r24, Y+1	; 0x01
    507e:	eb 81       	ldd	r30, Y+3	; 0x03
    5080:	fc 81       	ldd	r31, Y+4	; 0x04
    5082:	80 83       	st	Z, r24
	pxTopOfStack--;
    5084:	8b 81       	ldd	r24, Y+3	; 0x03
    5086:	9c 81       	ldd	r25, Y+4	; 0x04
    5088:	01 97       	sbiw	r24, 0x01	; 1
    508a:	9c 83       	std	Y+4, r25	; 0x04
    508c:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    508e:	eb 81       	ldd	r30, Y+3	; 0x03
    5090:	fc 81       	ldd	r31, Y+4	; 0x04
    5092:	10 82       	st	Z, r1
	pxTopOfStack--;
    5094:	8b 81       	ldd	r24, Y+3	; 0x03
    5096:	9c 81       	ldd	r25, Y+4	; 0x04
    5098:	01 97       	sbiw	r24, 0x01	; 1
    509a:	9c 83       	std	Y+4, r25	; 0x04
    509c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    509e:	eb 81       	ldd	r30, Y+3	; 0x03
    50a0:	fc 81       	ldd	r31, Y+4	; 0x04
    50a2:	80 e8       	ldi	r24, 0x80	; 128
    50a4:	80 83       	st	Z, r24
	pxTopOfStack--;
    50a6:	8b 81       	ldd	r24, Y+3	; 0x03
    50a8:	9c 81       	ldd	r25, Y+4	; 0x04
    50aa:	01 97       	sbiw	r24, 0x01	; 1
    50ac:	9c 83       	std	Y+4, r25	; 0x04
    50ae:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    50b0:	eb 81       	ldd	r30, Y+3	; 0x03
    50b2:	fc 81       	ldd	r31, Y+4	; 0x04
    50b4:	10 82       	st	Z, r1
	pxTopOfStack--;
    50b6:	8b 81       	ldd	r24, Y+3	; 0x03
    50b8:	9c 81       	ldd	r25, Y+4	; 0x04
    50ba:	01 97       	sbiw	r24, 0x01	; 1
    50bc:	9c 83       	std	Y+4, r25	; 0x04
    50be:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    50c0:	eb 81       	ldd	r30, Y+3	; 0x03
    50c2:	fc 81       	ldd	r31, Y+4	; 0x04
    50c4:	82 e0       	ldi	r24, 0x02	; 2
    50c6:	80 83       	st	Z, r24
	pxTopOfStack--;
    50c8:	8b 81       	ldd	r24, Y+3	; 0x03
    50ca:	9c 81       	ldd	r25, Y+4	; 0x04
    50cc:	01 97       	sbiw	r24, 0x01	; 1
    50ce:	9c 83       	std	Y+4, r25	; 0x04
    50d0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    50d2:	eb 81       	ldd	r30, Y+3	; 0x03
    50d4:	fc 81       	ldd	r31, Y+4	; 0x04
    50d6:	83 e0       	ldi	r24, 0x03	; 3
    50d8:	80 83       	st	Z, r24
	pxTopOfStack--;
    50da:	8b 81       	ldd	r24, Y+3	; 0x03
    50dc:	9c 81       	ldd	r25, Y+4	; 0x04
    50de:	01 97       	sbiw	r24, 0x01	; 1
    50e0:	9c 83       	std	Y+4, r25	; 0x04
    50e2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    50e4:	eb 81       	ldd	r30, Y+3	; 0x03
    50e6:	fc 81       	ldd	r31, Y+4	; 0x04
    50e8:	84 e0       	ldi	r24, 0x04	; 4
    50ea:	80 83       	st	Z, r24
	pxTopOfStack--;
    50ec:	8b 81       	ldd	r24, Y+3	; 0x03
    50ee:	9c 81       	ldd	r25, Y+4	; 0x04
    50f0:	01 97       	sbiw	r24, 0x01	; 1
    50f2:	9c 83       	std	Y+4, r25	; 0x04
    50f4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    50f6:	eb 81       	ldd	r30, Y+3	; 0x03
    50f8:	fc 81       	ldd	r31, Y+4	; 0x04
    50fa:	85 e0       	ldi	r24, 0x05	; 5
    50fc:	80 83       	st	Z, r24
	pxTopOfStack--;
    50fe:	8b 81       	ldd	r24, Y+3	; 0x03
    5100:	9c 81       	ldd	r25, Y+4	; 0x04
    5102:	01 97       	sbiw	r24, 0x01	; 1
    5104:	9c 83       	std	Y+4, r25	; 0x04
    5106:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    5108:	eb 81       	ldd	r30, Y+3	; 0x03
    510a:	fc 81       	ldd	r31, Y+4	; 0x04
    510c:	86 e0       	ldi	r24, 0x06	; 6
    510e:	80 83       	st	Z, r24
	pxTopOfStack--;
    5110:	8b 81       	ldd	r24, Y+3	; 0x03
    5112:	9c 81       	ldd	r25, Y+4	; 0x04
    5114:	01 97       	sbiw	r24, 0x01	; 1
    5116:	9c 83       	std	Y+4, r25	; 0x04
    5118:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    511a:	eb 81       	ldd	r30, Y+3	; 0x03
    511c:	fc 81       	ldd	r31, Y+4	; 0x04
    511e:	87 e0       	ldi	r24, 0x07	; 7
    5120:	80 83       	st	Z, r24
	pxTopOfStack--;
    5122:	8b 81       	ldd	r24, Y+3	; 0x03
    5124:	9c 81       	ldd	r25, Y+4	; 0x04
    5126:	01 97       	sbiw	r24, 0x01	; 1
    5128:	9c 83       	std	Y+4, r25	; 0x04
    512a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    512c:	eb 81       	ldd	r30, Y+3	; 0x03
    512e:	fc 81       	ldd	r31, Y+4	; 0x04
    5130:	88 e0       	ldi	r24, 0x08	; 8
    5132:	80 83       	st	Z, r24
	pxTopOfStack--;
    5134:	8b 81       	ldd	r24, Y+3	; 0x03
    5136:	9c 81       	ldd	r25, Y+4	; 0x04
    5138:	01 97       	sbiw	r24, 0x01	; 1
    513a:	9c 83       	std	Y+4, r25	; 0x04
    513c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    513e:	eb 81       	ldd	r30, Y+3	; 0x03
    5140:	fc 81       	ldd	r31, Y+4	; 0x04
    5142:	89 e0       	ldi	r24, 0x09	; 9
    5144:	80 83       	st	Z, r24
	pxTopOfStack--;
    5146:	8b 81       	ldd	r24, Y+3	; 0x03
    5148:	9c 81       	ldd	r25, Y+4	; 0x04
    514a:	01 97       	sbiw	r24, 0x01	; 1
    514c:	9c 83       	std	Y+4, r25	; 0x04
    514e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    5150:	eb 81       	ldd	r30, Y+3	; 0x03
    5152:	fc 81       	ldd	r31, Y+4	; 0x04
    5154:	80 e1       	ldi	r24, 0x10	; 16
    5156:	80 83       	st	Z, r24
	pxTopOfStack--;
    5158:	8b 81       	ldd	r24, Y+3	; 0x03
    515a:	9c 81       	ldd	r25, Y+4	; 0x04
    515c:	01 97       	sbiw	r24, 0x01	; 1
    515e:	9c 83       	std	Y+4, r25	; 0x04
    5160:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    5162:	eb 81       	ldd	r30, Y+3	; 0x03
    5164:	fc 81       	ldd	r31, Y+4	; 0x04
    5166:	81 e1       	ldi	r24, 0x11	; 17
    5168:	80 83       	st	Z, r24
	pxTopOfStack--;
    516a:	8b 81       	ldd	r24, Y+3	; 0x03
    516c:	9c 81       	ldd	r25, Y+4	; 0x04
    516e:	01 97       	sbiw	r24, 0x01	; 1
    5170:	9c 83       	std	Y+4, r25	; 0x04
    5172:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    5174:	eb 81       	ldd	r30, Y+3	; 0x03
    5176:	fc 81       	ldd	r31, Y+4	; 0x04
    5178:	82 e1       	ldi	r24, 0x12	; 18
    517a:	80 83       	st	Z, r24
	pxTopOfStack--;
    517c:	8b 81       	ldd	r24, Y+3	; 0x03
    517e:	9c 81       	ldd	r25, Y+4	; 0x04
    5180:	01 97       	sbiw	r24, 0x01	; 1
    5182:	9c 83       	std	Y+4, r25	; 0x04
    5184:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    5186:	eb 81       	ldd	r30, Y+3	; 0x03
    5188:	fc 81       	ldd	r31, Y+4	; 0x04
    518a:	83 e1       	ldi	r24, 0x13	; 19
    518c:	80 83       	st	Z, r24
	pxTopOfStack--;
    518e:	8b 81       	ldd	r24, Y+3	; 0x03
    5190:	9c 81       	ldd	r25, Y+4	; 0x04
    5192:	01 97       	sbiw	r24, 0x01	; 1
    5194:	9c 83       	std	Y+4, r25	; 0x04
    5196:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    5198:	eb 81       	ldd	r30, Y+3	; 0x03
    519a:	fc 81       	ldd	r31, Y+4	; 0x04
    519c:	84 e1       	ldi	r24, 0x14	; 20
    519e:	80 83       	st	Z, r24
	pxTopOfStack--;
    51a0:	8b 81       	ldd	r24, Y+3	; 0x03
    51a2:	9c 81       	ldd	r25, Y+4	; 0x04
    51a4:	01 97       	sbiw	r24, 0x01	; 1
    51a6:	9c 83       	std	Y+4, r25	; 0x04
    51a8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    51aa:	eb 81       	ldd	r30, Y+3	; 0x03
    51ac:	fc 81       	ldd	r31, Y+4	; 0x04
    51ae:	85 e1       	ldi	r24, 0x15	; 21
    51b0:	80 83       	st	Z, r24
	pxTopOfStack--;
    51b2:	8b 81       	ldd	r24, Y+3	; 0x03
    51b4:	9c 81       	ldd	r25, Y+4	; 0x04
    51b6:	01 97       	sbiw	r24, 0x01	; 1
    51b8:	9c 83       	std	Y+4, r25	; 0x04
    51ba:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    51bc:	eb 81       	ldd	r30, Y+3	; 0x03
    51be:	fc 81       	ldd	r31, Y+4	; 0x04
    51c0:	86 e1       	ldi	r24, 0x16	; 22
    51c2:	80 83       	st	Z, r24
	pxTopOfStack--;
    51c4:	8b 81       	ldd	r24, Y+3	; 0x03
    51c6:	9c 81       	ldd	r25, Y+4	; 0x04
    51c8:	01 97       	sbiw	r24, 0x01	; 1
    51ca:	9c 83       	std	Y+4, r25	; 0x04
    51cc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    51ce:	eb 81       	ldd	r30, Y+3	; 0x03
    51d0:	fc 81       	ldd	r31, Y+4	; 0x04
    51d2:	87 e1       	ldi	r24, 0x17	; 23
    51d4:	80 83       	st	Z, r24
	pxTopOfStack--;
    51d6:	8b 81       	ldd	r24, Y+3	; 0x03
    51d8:	9c 81       	ldd	r25, Y+4	; 0x04
    51da:	01 97       	sbiw	r24, 0x01	; 1
    51dc:	9c 83       	std	Y+4, r25	; 0x04
    51de:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    51e0:	eb 81       	ldd	r30, Y+3	; 0x03
    51e2:	fc 81       	ldd	r31, Y+4	; 0x04
    51e4:	88 e1       	ldi	r24, 0x18	; 24
    51e6:	80 83       	st	Z, r24
	pxTopOfStack--;
    51e8:	8b 81       	ldd	r24, Y+3	; 0x03
    51ea:	9c 81       	ldd	r25, Y+4	; 0x04
    51ec:	01 97       	sbiw	r24, 0x01	; 1
    51ee:	9c 83       	std	Y+4, r25	; 0x04
    51f0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    51f2:	eb 81       	ldd	r30, Y+3	; 0x03
    51f4:	fc 81       	ldd	r31, Y+4	; 0x04
    51f6:	89 e1       	ldi	r24, 0x19	; 25
    51f8:	80 83       	st	Z, r24
	pxTopOfStack--;
    51fa:	8b 81       	ldd	r24, Y+3	; 0x03
    51fc:	9c 81       	ldd	r25, Y+4	; 0x04
    51fe:	01 97       	sbiw	r24, 0x01	; 1
    5200:	9c 83       	std	Y+4, r25	; 0x04
    5202:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    5204:	eb 81       	ldd	r30, Y+3	; 0x03
    5206:	fc 81       	ldd	r31, Y+4	; 0x04
    5208:	80 e2       	ldi	r24, 0x20	; 32
    520a:	80 83       	st	Z, r24
	pxTopOfStack--;
    520c:	8b 81       	ldd	r24, Y+3	; 0x03
    520e:	9c 81       	ldd	r25, Y+4	; 0x04
    5210:	01 97       	sbiw	r24, 0x01	; 1
    5212:	9c 83       	std	Y+4, r25	; 0x04
    5214:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    5216:	eb 81       	ldd	r30, Y+3	; 0x03
    5218:	fc 81       	ldd	r31, Y+4	; 0x04
    521a:	81 e2       	ldi	r24, 0x21	; 33
    521c:	80 83       	st	Z, r24
	pxTopOfStack--;
    521e:	8b 81       	ldd	r24, Y+3	; 0x03
    5220:	9c 81       	ldd	r25, Y+4	; 0x04
    5222:	01 97       	sbiw	r24, 0x01	; 1
    5224:	9c 83       	std	Y+4, r25	; 0x04
    5226:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    5228:	eb 81       	ldd	r30, Y+3	; 0x03
    522a:	fc 81       	ldd	r31, Y+4	; 0x04
    522c:	82 e2       	ldi	r24, 0x22	; 34
    522e:	80 83       	st	Z, r24
	pxTopOfStack--;
    5230:	8b 81       	ldd	r24, Y+3	; 0x03
    5232:	9c 81       	ldd	r25, Y+4	; 0x04
    5234:	01 97       	sbiw	r24, 0x01	; 1
    5236:	9c 83       	std	Y+4, r25	; 0x04
    5238:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    523a:	eb 81       	ldd	r30, Y+3	; 0x03
    523c:	fc 81       	ldd	r31, Y+4	; 0x04
    523e:	83 e2       	ldi	r24, 0x23	; 35
    5240:	80 83       	st	Z, r24
	pxTopOfStack--;
    5242:	8b 81       	ldd	r24, Y+3	; 0x03
    5244:	9c 81       	ldd	r25, Y+4	; 0x04
    5246:	01 97       	sbiw	r24, 0x01	; 1
    5248:	9c 83       	std	Y+4, r25	; 0x04
    524a:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
    524c:	8f 81       	ldd	r24, Y+7	; 0x07
    524e:	98 85       	ldd	r25, Y+8	; 0x08
    5250:	9a 83       	std	Y+2, r25	; 0x02
    5252:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    5254:	89 81       	ldd	r24, Y+1	; 0x01
    5256:	eb 81       	ldd	r30, Y+3	; 0x03
    5258:	fc 81       	ldd	r31, Y+4	; 0x04
    525a:	80 83       	st	Z, r24
	pxTopOfStack--;
    525c:	8b 81       	ldd	r24, Y+3	; 0x03
    525e:	9c 81       	ldd	r25, Y+4	; 0x04
    5260:	01 97       	sbiw	r24, 0x01	; 1
    5262:	9c 83       	std	Y+4, r25	; 0x04
    5264:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    5266:	89 81       	ldd	r24, Y+1	; 0x01
    5268:	9a 81       	ldd	r25, Y+2	; 0x02
    526a:	89 2f       	mov	r24, r25
    526c:	99 27       	eor	r25, r25
    526e:	9a 83       	std	Y+2, r25	; 0x02
    5270:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    5272:	89 81       	ldd	r24, Y+1	; 0x01
    5274:	eb 81       	ldd	r30, Y+3	; 0x03
    5276:	fc 81       	ldd	r31, Y+4	; 0x04
    5278:	80 83       	st	Z, r24
	pxTopOfStack--;
    527a:	8b 81       	ldd	r24, Y+3	; 0x03
    527c:	9c 81       	ldd	r25, Y+4	; 0x04
    527e:	01 97       	sbiw	r24, 0x01	; 1
    5280:	9c 83       	std	Y+4, r25	; 0x04
    5282:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    5284:	eb 81       	ldd	r30, Y+3	; 0x03
    5286:	fc 81       	ldd	r31, Y+4	; 0x04
    5288:	86 e2       	ldi	r24, 0x26	; 38
    528a:	80 83       	st	Z, r24
	pxTopOfStack--;
    528c:	8b 81       	ldd	r24, Y+3	; 0x03
    528e:	9c 81       	ldd	r25, Y+4	; 0x04
    5290:	01 97       	sbiw	r24, 0x01	; 1
    5292:	9c 83       	std	Y+4, r25	; 0x04
    5294:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    5296:	eb 81       	ldd	r30, Y+3	; 0x03
    5298:	fc 81       	ldd	r31, Y+4	; 0x04
    529a:	87 e2       	ldi	r24, 0x27	; 39
    529c:	80 83       	st	Z, r24
	pxTopOfStack--;
    529e:	8b 81       	ldd	r24, Y+3	; 0x03
    52a0:	9c 81       	ldd	r25, Y+4	; 0x04
    52a2:	01 97       	sbiw	r24, 0x01	; 1
    52a4:	9c 83       	std	Y+4, r25	; 0x04
    52a6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    52a8:	eb 81       	ldd	r30, Y+3	; 0x03
    52aa:	fc 81       	ldd	r31, Y+4	; 0x04
    52ac:	88 e2       	ldi	r24, 0x28	; 40
    52ae:	80 83       	st	Z, r24
	pxTopOfStack--;
    52b0:	8b 81       	ldd	r24, Y+3	; 0x03
    52b2:	9c 81       	ldd	r25, Y+4	; 0x04
    52b4:	01 97       	sbiw	r24, 0x01	; 1
    52b6:	9c 83       	std	Y+4, r25	; 0x04
    52b8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    52ba:	eb 81       	ldd	r30, Y+3	; 0x03
    52bc:	fc 81       	ldd	r31, Y+4	; 0x04
    52be:	89 e2       	ldi	r24, 0x29	; 41
    52c0:	80 83       	st	Z, r24
	pxTopOfStack--;
    52c2:	8b 81       	ldd	r24, Y+3	; 0x03
    52c4:	9c 81       	ldd	r25, Y+4	; 0x04
    52c6:	01 97       	sbiw	r24, 0x01	; 1
    52c8:	9c 83       	std	Y+4, r25	; 0x04
    52ca:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    52cc:	eb 81       	ldd	r30, Y+3	; 0x03
    52ce:	fc 81       	ldd	r31, Y+4	; 0x04
    52d0:	80 e3       	ldi	r24, 0x30	; 48
    52d2:	80 83       	st	Z, r24
	pxTopOfStack--;
    52d4:	8b 81       	ldd	r24, Y+3	; 0x03
    52d6:	9c 81       	ldd	r25, Y+4	; 0x04
    52d8:	01 97       	sbiw	r24, 0x01	; 1
    52da:	9c 83       	std	Y+4, r25	; 0x04
    52dc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    52de:	eb 81       	ldd	r30, Y+3	; 0x03
    52e0:	fc 81       	ldd	r31, Y+4	; 0x04
    52e2:	81 e3       	ldi	r24, 0x31	; 49
    52e4:	80 83       	st	Z, r24
	pxTopOfStack--;
    52e6:	8b 81       	ldd	r24, Y+3	; 0x03
    52e8:	9c 81       	ldd	r25, Y+4	; 0x04
    52ea:	01 97       	sbiw	r24, 0x01	; 1
    52ec:	9c 83       	std	Y+4, r25	; 0x04
    52ee:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    52f0:	8b 81       	ldd	r24, Y+3	; 0x03
    52f2:	9c 81       	ldd	r25, Y+4	; 0x04
}
    52f4:	28 96       	adiw	r28, 0x08	; 8
    52f6:	0f b6       	in	r0, 0x3f	; 63
    52f8:	f8 94       	cli
    52fa:	de bf       	out	0x3e, r29	; 62
    52fc:	0f be       	out	0x3f, r0	; 63
    52fe:	cd bf       	out	0x3d, r28	; 61
    5300:	cf 91       	pop	r28
    5302:	df 91       	pop	r29
    5304:	08 95       	ret

00005306 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    5306:	df 93       	push	r29
    5308:	cf 93       	push	r28
    530a:	cd b7       	in	r28, 0x3d	; 61
    530c:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    530e:	0e 94 75 2a 	call	0x54ea	; 0x54ea <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    5312:	a0 91 94 05 	lds	r26, 0x0594
    5316:	b0 91 95 05 	lds	r27, 0x0595
    531a:	cd 91       	ld	r28, X+
    531c:	cd bf       	out	0x3d, r28	; 61
    531e:	dd 91       	ld	r29, X+
    5320:	de bf       	out	0x3e, r29	; 62
    5322:	ff 91       	pop	r31
    5324:	ef 91       	pop	r30
    5326:	df 91       	pop	r29
    5328:	cf 91       	pop	r28
    532a:	bf 91       	pop	r27
    532c:	af 91       	pop	r26
    532e:	9f 91       	pop	r25
    5330:	8f 91       	pop	r24
    5332:	7f 91       	pop	r23
    5334:	6f 91       	pop	r22
    5336:	5f 91       	pop	r21
    5338:	4f 91       	pop	r20
    533a:	3f 91       	pop	r19
    533c:	2f 91       	pop	r18
    533e:	1f 91       	pop	r17
    5340:	0f 91       	pop	r16
    5342:	ff 90       	pop	r15
    5344:	ef 90       	pop	r14
    5346:	df 90       	pop	r13
    5348:	cf 90       	pop	r12
    534a:	bf 90       	pop	r11
    534c:	af 90       	pop	r10
    534e:	9f 90       	pop	r9
    5350:	8f 90       	pop	r8
    5352:	7f 90       	pop	r7
    5354:	6f 90       	pop	r6
    5356:	5f 90       	pop	r5
    5358:	4f 90       	pop	r4
    535a:	3f 90       	pop	r3
    535c:	2f 90       	pop	r2
    535e:	1f 90       	pop	r1
    5360:	0f 90       	pop	r0
    5362:	0f be       	out	0x3f, r0	; 63
    5364:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    5366:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    5368:	81 e0       	ldi	r24, 0x01	; 1
}
    536a:	cf 91       	pop	r28
    536c:	df 91       	pop	r29
    536e:	08 95       	ret

00005370 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5370:	df 93       	push	r29
    5372:	cf 93       	push	r28
    5374:	cd b7       	in	r28, 0x3d	; 61
    5376:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    5378:	cf 91       	pop	r28
    537a:	df 91       	pop	r29
    537c:	08 95       	ret

0000537e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    537e:	0f 92       	push	r0
    5380:	0f b6       	in	r0, 0x3f	; 63
    5382:	f8 94       	cli
    5384:	0f 92       	push	r0
    5386:	1f 92       	push	r1
    5388:	11 24       	eor	r1, r1
    538a:	2f 92       	push	r2
    538c:	3f 92       	push	r3
    538e:	4f 92       	push	r4
    5390:	5f 92       	push	r5
    5392:	6f 92       	push	r6
    5394:	7f 92       	push	r7
    5396:	8f 92       	push	r8
    5398:	9f 92       	push	r9
    539a:	af 92       	push	r10
    539c:	bf 92       	push	r11
    539e:	cf 92       	push	r12
    53a0:	df 92       	push	r13
    53a2:	ef 92       	push	r14
    53a4:	ff 92       	push	r15
    53a6:	0f 93       	push	r16
    53a8:	1f 93       	push	r17
    53aa:	2f 93       	push	r18
    53ac:	3f 93       	push	r19
    53ae:	4f 93       	push	r20
    53b0:	5f 93       	push	r21
    53b2:	6f 93       	push	r22
    53b4:	7f 93       	push	r23
    53b6:	8f 93       	push	r24
    53b8:	9f 93       	push	r25
    53ba:	af 93       	push	r26
    53bc:	bf 93       	push	r27
    53be:	cf 93       	push	r28
    53c0:	df 93       	push	r29
    53c2:	ef 93       	push	r30
    53c4:	ff 93       	push	r31
    53c6:	a0 91 94 05 	lds	r26, 0x0594
    53ca:	b0 91 95 05 	lds	r27, 0x0595
    53ce:	0d b6       	in	r0, 0x3d	; 61
    53d0:	0d 92       	st	X+, r0
    53d2:	0e b6       	in	r0, 0x3e	; 62
    53d4:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    53d6:	0e 94 e7 36 	call	0x6dce	; 0x6dce <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    53da:	a0 91 94 05 	lds	r26, 0x0594
    53de:	b0 91 95 05 	lds	r27, 0x0595
    53e2:	cd 91       	ld	r28, X+
    53e4:	cd bf       	out	0x3d, r28	; 61
    53e6:	dd 91       	ld	r29, X+
    53e8:	de bf       	out	0x3e, r29	; 62
    53ea:	ff 91       	pop	r31
    53ec:	ef 91       	pop	r30
    53ee:	df 91       	pop	r29
    53f0:	cf 91       	pop	r28
    53f2:	bf 91       	pop	r27
    53f4:	af 91       	pop	r26
    53f6:	9f 91       	pop	r25
    53f8:	8f 91       	pop	r24
    53fa:	7f 91       	pop	r23
    53fc:	6f 91       	pop	r22
    53fe:	5f 91       	pop	r21
    5400:	4f 91       	pop	r20
    5402:	3f 91       	pop	r19
    5404:	2f 91       	pop	r18
    5406:	1f 91       	pop	r17
    5408:	0f 91       	pop	r16
    540a:	ff 90       	pop	r15
    540c:	ef 90       	pop	r14
    540e:	df 90       	pop	r13
    5410:	cf 90       	pop	r12
    5412:	bf 90       	pop	r11
    5414:	af 90       	pop	r10
    5416:	9f 90       	pop	r9
    5418:	8f 90       	pop	r8
    541a:	7f 90       	pop	r7
    541c:	6f 90       	pop	r6
    541e:	5f 90       	pop	r5
    5420:	4f 90       	pop	r4
    5422:	3f 90       	pop	r3
    5424:	2f 90       	pop	r2
    5426:	1f 90       	pop	r1
    5428:	0f 90       	pop	r0
    542a:	0f be       	out	0x3f, r0	; 63
    542c:	0f 90       	pop	r0

	asm volatile ( "ret" );
    542e:	08 95       	ret

00005430 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    5430:	0f 92       	push	r0
    5432:	0f b6       	in	r0, 0x3f	; 63
    5434:	f8 94       	cli
    5436:	0f 92       	push	r0
    5438:	1f 92       	push	r1
    543a:	11 24       	eor	r1, r1
    543c:	2f 92       	push	r2
    543e:	3f 92       	push	r3
    5440:	4f 92       	push	r4
    5442:	5f 92       	push	r5
    5444:	6f 92       	push	r6
    5446:	7f 92       	push	r7
    5448:	8f 92       	push	r8
    544a:	9f 92       	push	r9
    544c:	af 92       	push	r10
    544e:	bf 92       	push	r11
    5450:	cf 92       	push	r12
    5452:	df 92       	push	r13
    5454:	ef 92       	push	r14
    5456:	ff 92       	push	r15
    5458:	0f 93       	push	r16
    545a:	1f 93       	push	r17
    545c:	2f 93       	push	r18
    545e:	3f 93       	push	r19
    5460:	4f 93       	push	r20
    5462:	5f 93       	push	r21
    5464:	6f 93       	push	r22
    5466:	7f 93       	push	r23
    5468:	8f 93       	push	r24
    546a:	9f 93       	push	r25
    546c:	af 93       	push	r26
    546e:	bf 93       	push	r27
    5470:	cf 93       	push	r28
    5472:	df 93       	push	r29
    5474:	ef 93       	push	r30
    5476:	ff 93       	push	r31
    5478:	a0 91 94 05 	lds	r26, 0x0594
    547c:	b0 91 95 05 	lds	r27, 0x0595
    5480:	0d b6       	in	r0, 0x3d	; 61
    5482:	0d 92       	st	X+, r0
    5484:	0e b6       	in	r0, 0x3e	; 62
    5486:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    5488:	0e 94 02 36 	call	0x6c04	; 0x6c04 <xTaskIncrementTick>
    548c:	88 23       	and	r24, r24
    548e:	11 f0       	breq	.+4      	; 0x5494 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    5490:	0e 94 e7 36 	call	0x6dce	; 0x6dce <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    5494:	a0 91 94 05 	lds	r26, 0x0594
    5498:	b0 91 95 05 	lds	r27, 0x0595
    549c:	cd 91       	ld	r28, X+
    549e:	cd bf       	out	0x3d, r28	; 61
    54a0:	dd 91       	ld	r29, X+
    54a2:	de bf       	out	0x3e, r29	; 62
    54a4:	ff 91       	pop	r31
    54a6:	ef 91       	pop	r30
    54a8:	df 91       	pop	r29
    54aa:	cf 91       	pop	r28
    54ac:	bf 91       	pop	r27
    54ae:	af 91       	pop	r26
    54b0:	9f 91       	pop	r25
    54b2:	8f 91       	pop	r24
    54b4:	7f 91       	pop	r23
    54b6:	6f 91       	pop	r22
    54b8:	5f 91       	pop	r21
    54ba:	4f 91       	pop	r20
    54bc:	3f 91       	pop	r19
    54be:	2f 91       	pop	r18
    54c0:	1f 91       	pop	r17
    54c2:	0f 91       	pop	r16
    54c4:	ff 90       	pop	r15
    54c6:	ef 90       	pop	r14
    54c8:	df 90       	pop	r13
    54ca:	cf 90       	pop	r12
    54cc:	bf 90       	pop	r11
    54ce:	af 90       	pop	r10
    54d0:	9f 90       	pop	r9
    54d2:	8f 90       	pop	r8
    54d4:	7f 90       	pop	r7
    54d6:	6f 90       	pop	r6
    54d8:	5f 90       	pop	r5
    54da:	4f 90       	pop	r4
    54dc:	3f 90       	pop	r3
    54de:	2f 90       	pop	r2
    54e0:	1f 90       	pop	r1
    54e2:	0f 90       	pop	r0
    54e4:	0f be       	out	0x3f, r0	; 63
    54e6:	0f 90       	pop	r0

	asm volatile ( "ret" );
    54e8:	08 95       	ret

000054ea <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    54ea:	df 93       	push	r29
    54ec:	cf 93       	push	r28
    54ee:	00 d0       	rcall	.+0      	; 0x54f0 <prvSetupTimerInterrupt+0x6>
    54f0:	00 d0       	rcall	.+0      	; 0x54f2 <prvSetupTimerInterrupt+0x8>
    54f2:	00 d0       	rcall	.+0      	; 0x54f4 <prvSetupTimerInterrupt+0xa>
    54f4:	cd b7       	in	r28, 0x3d	; 61
    54f6:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    54f8:	80 e4       	ldi	r24, 0x40	; 64
    54fa:	9f e1       	ldi	r25, 0x1F	; 31
    54fc:	a0 e0       	ldi	r26, 0x00	; 0
    54fe:	b0 e0       	ldi	r27, 0x00	; 0
    5500:	8b 83       	std	Y+3, r24	; 0x03
    5502:	9c 83       	std	Y+4, r25	; 0x04
    5504:	ad 83       	std	Y+5, r26	; 0x05
    5506:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    5508:	8b 81       	ldd	r24, Y+3	; 0x03
    550a:	9c 81       	ldd	r25, Y+4	; 0x04
    550c:	ad 81       	ldd	r26, Y+5	; 0x05
    550e:	be 81       	ldd	r27, Y+6	; 0x06
    5510:	68 94       	set
    5512:	15 f8       	bld	r1, 5
    5514:	b6 95       	lsr	r27
    5516:	a7 95       	ror	r26
    5518:	97 95       	ror	r25
    551a:	87 95       	ror	r24
    551c:	16 94       	lsr	r1
    551e:	d1 f7       	brne	.-12     	; 0x5514 <prvSetupTimerInterrupt+0x2a>
    5520:	8b 83       	std	Y+3, r24	; 0x03
    5522:	9c 83       	std	Y+4, r25	; 0x04
    5524:	ad 83       	std	Y+5, r26	; 0x05
    5526:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    5528:	8b 81       	ldd	r24, Y+3	; 0x03
    552a:	9c 81       	ldd	r25, Y+4	; 0x04
    552c:	ad 81       	ldd	r26, Y+5	; 0x05
    552e:	be 81       	ldd	r27, Y+6	; 0x06
    5530:	01 97       	sbiw	r24, 0x01	; 1
    5532:	a1 09       	sbc	r26, r1
    5534:	b1 09       	sbc	r27, r1
    5536:	8b 83       	std	Y+3, r24	; 0x03
    5538:	9c 83       	std	Y+4, r25	; 0x04
    553a:	ad 83       	std	Y+5, r26	; 0x05
    553c:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    553e:	8b 81       	ldd	r24, Y+3	; 0x03
    5540:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    5542:	8b 81       	ldd	r24, Y+3	; 0x03
    5544:	9c 81       	ldd	r25, Y+4	; 0x04
    5546:	ad 81       	ldd	r26, Y+5	; 0x05
    5548:	be 81       	ldd	r27, Y+6	; 0x06
    554a:	89 2f       	mov	r24, r25
    554c:	9a 2f       	mov	r25, r26
    554e:	ab 2f       	mov	r26, r27
    5550:	bb 27       	eor	r27, r27
    5552:	8b 83       	std	Y+3, r24	; 0x03
    5554:	9c 83       	std	Y+4, r25	; 0x04
    5556:	ad 83       	std	Y+5, r26	; 0x05
    5558:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    555a:	8b 81       	ldd	r24, Y+3	; 0x03
    555c:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    555e:	eb e4       	ldi	r30, 0x4B	; 75
    5560:	f0 e0       	ldi	r31, 0x00	; 0
    5562:	8a 81       	ldd	r24, Y+2	; 0x02
    5564:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    5566:	ea e4       	ldi	r30, 0x4A	; 74
    5568:	f0 e0       	ldi	r31, 0x00	; 0
    556a:	89 81       	ldd	r24, Y+1	; 0x01
    556c:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    556e:	8b e0       	ldi	r24, 0x0B	; 11
    5570:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    5572:	ee e4       	ldi	r30, 0x4E	; 78
    5574:	f0 e0       	ldi	r31, 0x00	; 0
    5576:	89 81       	ldd	r24, Y+1	; 0x01
    5578:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    557a:	e9 e5       	ldi	r30, 0x59	; 89
    557c:	f0 e0       	ldi	r31, 0x00	; 0
    557e:	80 81       	ld	r24, Z
    5580:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    5582:	89 81       	ldd	r24, Y+1	; 0x01
    5584:	80 61       	ori	r24, 0x10	; 16
    5586:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    5588:	e9 e5       	ldi	r30, 0x59	; 89
    558a:	f0 e0       	ldi	r31, 0x00	; 0
    558c:	89 81       	ldd	r24, Y+1	; 0x01
    558e:	80 83       	st	Z, r24
}
    5590:	26 96       	adiw	r28, 0x06	; 6
    5592:	0f b6       	in	r0, 0x3f	; 63
    5594:	f8 94       	cli
    5596:	de bf       	out	0x3e, r29	; 62
    5598:	0f be       	out	0x3f, r0	; 63
    559a:	cd bf       	out	0x3d, r28	; 61
    559c:	cf 91       	pop	r28
    559e:	df 91       	pop	r29
    55a0:	08 95       	ret

000055a2 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    55a2:	0e 94 18 2a 	call	0x5430	; 0x5430 <vPortYieldFromTick>
		asm volatile ( "reti" );
    55a6:	18 95       	reti

000055a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    55a8:	df 93       	push	r29
    55aa:	cf 93       	push	r28
    55ac:	00 d0       	rcall	.+0      	; 0x55ae <xQueueGenericReset+0x6>
    55ae:	00 d0       	rcall	.+0      	; 0x55b0 <xQueueGenericReset+0x8>
    55b0:	0f 92       	push	r0
    55b2:	cd b7       	in	r28, 0x3d	; 61
    55b4:	de b7       	in	r29, 0x3e	; 62
    55b6:	9c 83       	std	Y+4, r25	; 0x04
    55b8:	8b 83       	std	Y+3, r24	; 0x03
    55ba:	6d 83       	std	Y+5, r22	; 0x05
Queue_t * const pxQueue = xQueue;
    55bc:	8b 81       	ldd	r24, Y+3	; 0x03
    55be:	9c 81       	ldd	r25, Y+4	; 0x04
    55c0:	9a 83       	std	Y+2, r25	; 0x02
    55c2:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    55c4:	0f b6       	in	r0, 0x3f	; 63
    55c6:	f8 94       	cli
    55c8:	0f 92       	push	r0
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    55ca:	e9 81       	ldd	r30, Y+1	; 0x01
    55cc:	fa 81       	ldd	r31, Y+2	; 0x02
    55ce:	40 81       	ld	r20, Z
    55d0:	51 81       	ldd	r21, Z+1	; 0x01
    55d2:	e9 81       	ldd	r30, Y+1	; 0x01
    55d4:	fa 81       	ldd	r31, Y+2	; 0x02
    55d6:	83 8d       	ldd	r24, Z+27	; 0x1b
    55d8:	28 2f       	mov	r18, r24
    55da:	30 e0       	ldi	r19, 0x00	; 0
    55dc:	e9 81       	ldd	r30, Y+1	; 0x01
    55de:	fa 81       	ldd	r31, Y+2	; 0x02
    55e0:	84 8d       	ldd	r24, Z+28	; 0x1c
    55e2:	88 2f       	mov	r24, r24
    55e4:	90 e0       	ldi	r25, 0x00	; 0
    55e6:	bc 01       	movw	r22, r24
    55e8:	26 9f       	mul	r18, r22
    55ea:	c0 01       	movw	r24, r0
    55ec:	27 9f       	mul	r18, r23
    55ee:	90 0d       	add	r25, r0
    55f0:	36 9f       	mul	r19, r22
    55f2:	90 0d       	add	r25, r0
    55f4:	11 24       	eor	r1, r1
    55f6:	84 0f       	add	r24, r20
    55f8:	95 1f       	adc	r25, r21
    55fa:	e9 81       	ldd	r30, Y+1	; 0x01
    55fc:	fa 81       	ldd	r31, Y+2	; 0x02
    55fe:	95 83       	std	Z+5, r25	; 0x05
    5600:	84 83       	std	Z+4, r24	; 0x04
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    5602:	e9 81       	ldd	r30, Y+1	; 0x01
    5604:	fa 81       	ldd	r31, Y+2	; 0x02
    5606:	12 8e       	std	Z+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    5608:	e9 81       	ldd	r30, Y+1	; 0x01
    560a:	fa 81       	ldd	r31, Y+2	; 0x02
    560c:	80 81       	ld	r24, Z
    560e:	91 81       	ldd	r25, Z+1	; 0x01
    5610:	e9 81       	ldd	r30, Y+1	; 0x01
    5612:	fa 81       	ldd	r31, Y+2	; 0x02
    5614:	93 83       	std	Z+3, r25	; 0x03
    5616:	82 83       	std	Z+2, r24	; 0x02
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    5618:	e9 81       	ldd	r30, Y+1	; 0x01
    561a:	fa 81       	ldd	r31, Y+2	; 0x02
    561c:	40 81       	ld	r20, Z
    561e:	51 81       	ldd	r21, Z+1	; 0x01
    5620:	e9 81       	ldd	r30, Y+1	; 0x01
    5622:	fa 81       	ldd	r31, Y+2	; 0x02
    5624:	83 8d       	ldd	r24, Z+27	; 0x1b
    5626:	88 2f       	mov	r24, r24
    5628:	90 e0       	ldi	r25, 0x00	; 0
    562a:	9c 01       	movw	r18, r24
    562c:	21 50       	subi	r18, 0x01	; 1
    562e:	30 40       	sbci	r19, 0x00	; 0
    5630:	e9 81       	ldd	r30, Y+1	; 0x01
    5632:	fa 81       	ldd	r31, Y+2	; 0x02
    5634:	84 8d       	ldd	r24, Z+28	; 0x1c
    5636:	88 2f       	mov	r24, r24
    5638:	90 e0       	ldi	r25, 0x00	; 0
    563a:	bc 01       	movw	r22, r24
    563c:	26 9f       	mul	r18, r22
    563e:	c0 01       	movw	r24, r0
    5640:	27 9f       	mul	r18, r23
    5642:	90 0d       	add	r25, r0
    5644:	36 9f       	mul	r19, r22
    5646:	90 0d       	add	r25, r0
    5648:	11 24       	eor	r1, r1
    564a:	84 0f       	add	r24, r20
    564c:	95 1f       	adc	r25, r21
    564e:	e9 81       	ldd	r30, Y+1	; 0x01
    5650:	fa 81       	ldd	r31, Y+2	; 0x02
    5652:	97 83       	std	Z+7, r25	; 0x07
    5654:	86 83       	std	Z+6, r24	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
    5656:	e9 81       	ldd	r30, Y+1	; 0x01
    5658:	fa 81       	ldd	r31, Y+2	; 0x02
    565a:	8f ef       	ldi	r24, 0xFF	; 255
    565c:	85 8f       	std	Z+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
    565e:	e9 81       	ldd	r30, Y+1	; 0x01
    5660:	fa 81       	ldd	r31, Y+2	; 0x02
    5662:	8f ef       	ldi	r24, 0xFF	; 255
    5664:	86 8f       	std	Z+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    5666:	8d 81       	ldd	r24, Y+5	; 0x05
    5668:	88 23       	and	r24, r24
    566a:	79 f4       	brne	.+30     	; 0x568a <xQueueGenericReset+0xe2>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    566c:	e9 81       	ldd	r30, Y+1	; 0x01
    566e:	fa 81       	ldd	r31, Y+2	; 0x02
    5670:	80 85       	ldd	r24, Z+8	; 0x08
    5672:	88 23       	and	r24, r24
    5674:	a1 f0       	breq	.+40     	; 0x569e <xQueueGenericReset+0xf6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    5676:	89 81       	ldd	r24, Y+1	; 0x01
    5678:	9a 81       	ldd	r25, Y+2	; 0x02
    567a:	08 96       	adiw	r24, 0x08	; 8
    567c:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <xTaskRemoveFromEventList>
    5680:	88 23       	and	r24, r24
    5682:	69 f0       	breq	.+26     	; 0x569e <xQueueGenericReset+0xf6>
				{
					queueYIELD_IF_USING_PREEMPTION();
    5684:	0e 94 bf 29 	call	0x537e	; 0x537e <vPortYield>
    5688:	0a c0       	rjmp	.+20     	; 0x569e <xQueueGenericReset+0xf6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    568a:	89 81       	ldd	r24, Y+1	; 0x01
    568c:	9a 81       	ldd	r25, Y+2	; 0x02
    568e:	08 96       	adiw	r24, 0x08	; 8
    5690:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    5694:	89 81       	ldd	r24, Y+1	; 0x01
    5696:	9a 81       	ldd	r25, Y+2	; 0x02
    5698:	41 96       	adiw	r24, 0x11	; 17
    569a:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    569e:	0f 90       	pop	r0
    56a0:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    56a2:	81 e0       	ldi	r24, 0x01	; 1
}
    56a4:	0f 90       	pop	r0
    56a6:	0f 90       	pop	r0
    56a8:	0f 90       	pop	r0
    56aa:	0f 90       	pop	r0
    56ac:	0f 90       	pop	r0
    56ae:	cf 91       	pop	r28
    56b0:	df 91       	pop	r29
    56b2:	08 95       	ret

000056b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    56b4:	0f 93       	push	r16
    56b6:	1f 93       	push	r17
    56b8:	df 93       	push	r29
    56ba:	cf 93       	push	r28
    56bc:	cd b7       	in	r28, 0x3d	; 61
    56be:	de b7       	in	r29, 0x3e	; 62
    56c0:	29 97       	sbiw	r28, 0x09	; 9
    56c2:	0f b6       	in	r0, 0x3f	; 63
    56c4:	f8 94       	cli
    56c6:	de bf       	out	0x3e, r29	; 62
    56c8:	0f be       	out	0x3f, r0	; 63
    56ca:	cd bf       	out	0x3d, r28	; 61
    56cc:	8f 83       	std	Y+7, r24	; 0x07
    56ce:	68 87       	std	Y+8, r22	; 0x08
    56d0:	49 87       	std	Y+9, r20	; 0x09
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    56d2:	88 85       	ldd	r24, Y+8	; 0x08
    56d4:	88 23       	and	r24, r24
    56d6:	19 f4       	brne	.+6      	; 0x56de <xQueueGenericCreate+0x2a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    56d8:	1c 82       	std	Y+4, r1	; 0x04
    56da:	1b 82       	std	Y+3, r1	; 0x03
    56dc:	10 c0       	rjmp	.+32     	; 0x56fe <xQueueGenericCreate+0x4a>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    56de:	8f 81       	ldd	r24, Y+7	; 0x07
    56e0:	28 2f       	mov	r18, r24
    56e2:	30 e0       	ldi	r19, 0x00	; 0
    56e4:	88 85       	ldd	r24, Y+8	; 0x08
    56e6:	88 2f       	mov	r24, r24
    56e8:	90 e0       	ldi	r25, 0x00	; 0
    56ea:	ac 01       	movw	r20, r24
    56ec:	24 9f       	mul	r18, r20
    56ee:	c0 01       	movw	r24, r0
    56f0:	25 9f       	mul	r18, r21
    56f2:	90 0d       	add	r25, r0
    56f4:	34 9f       	mul	r19, r20
    56f6:	90 0d       	add	r25, r0
    56f8:	11 24       	eor	r1, r1
    56fa:	9c 83       	std	Y+4, r25	; 0x04
    56fc:	8b 83       	std	Y+3, r24	; 0x03
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
    56fe:	8b 81       	ldd	r24, Y+3	; 0x03
    5700:	9c 81       	ldd	r25, Y+4	; 0x04
    5702:	4f 96       	adiw	r24, 0x1f	; 31
    5704:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <pvPortMalloc>
    5708:	9e 83       	std	Y+6, r25	; 0x06
    570a:	8d 83       	std	Y+5, r24	; 0x05

		if( pxNewQueue != NULL )
    570c:	8d 81       	ldd	r24, Y+5	; 0x05
    570e:	9e 81       	ldd	r25, Y+6	; 0x06
    5710:	00 97       	sbiw	r24, 0x00	; 0
    5712:	a1 f0       	breq	.+40     	; 0x573c <xQueueGenericCreate+0x88>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
    5714:	8d 81       	ldd	r24, Y+5	; 0x05
    5716:	9e 81       	ldd	r25, Y+6	; 0x06
    5718:	9a 83       	std	Y+2, r25	; 0x02
    571a:	89 83       	std	Y+1, r24	; 0x01
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    571c:	89 81       	ldd	r24, Y+1	; 0x01
    571e:	9a 81       	ldd	r25, Y+2	; 0x02
    5720:	4f 96       	adiw	r24, 0x1f	; 31
    5722:	9a 83       	std	Y+2, r25	; 0x02
    5724:	89 83       	std	Y+1, r24	; 0x01
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    5726:	29 81       	ldd	r18, Y+1	; 0x01
    5728:	3a 81       	ldd	r19, Y+2	; 0x02
    572a:	ed 81       	ldd	r30, Y+5	; 0x05
    572c:	fe 81       	ldd	r31, Y+6	; 0x06
    572e:	8f 81       	ldd	r24, Y+7	; 0x07
    5730:	68 85       	ldd	r22, Y+8	; 0x08
    5732:	a9 01       	movw	r20, r18
    5734:	29 85       	ldd	r18, Y+9	; 0x09
    5736:	8f 01       	movw	r16, r30
    5738:	0e 94 ab 2b 	call	0x5756	; 0x5756 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
    573c:	8d 81       	ldd	r24, Y+5	; 0x05
    573e:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    5740:	29 96       	adiw	r28, 0x09	; 9
    5742:	0f b6       	in	r0, 0x3f	; 63
    5744:	f8 94       	cli
    5746:	de bf       	out	0x3e, r29	; 62
    5748:	0f be       	out	0x3f, r0	; 63
    574a:	cd bf       	out	0x3d, r28	; 61
    574c:	cf 91       	pop	r28
    574e:	df 91       	pop	r29
    5750:	1f 91       	pop	r17
    5752:	0f 91       	pop	r16
    5754:	08 95       	ret

00005756 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    5756:	0f 93       	push	r16
    5758:	1f 93       	push	r17
    575a:	df 93       	push	r29
    575c:	cf 93       	push	r28
    575e:	cd b7       	in	r28, 0x3d	; 61
    5760:	de b7       	in	r29, 0x3e	; 62
    5762:	27 97       	sbiw	r28, 0x07	; 7
    5764:	0f b6       	in	r0, 0x3f	; 63
    5766:	f8 94       	cli
    5768:	de bf       	out	0x3e, r29	; 62
    576a:	0f be       	out	0x3f, r0	; 63
    576c:	cd bf       	out	0x3d, r28	; 61
    576e:	89 83       	std	Y+1, r24	; 0x01
    5770:	6a 83       	std	Y+2, r22	; 0x02
    5772:	5c 83       	std	Y+4, r21	; 0x04
    5774:	4b 83       	std	Y+3, r20	; 0x03
    5776:	2d 83       	std	Y+5, r18	; 0x05
    5778:	1f 83       	std	Y+7, r17	; 0x07
    577a:	0e 83       	std	Y+6, r16	; 0x06
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    577c:	8a 81       	ldd	r24, Y+2	; 0x02
    577e:	88 23       	and	r24, r24
    5780:	39 f4       	brne	.+14     	; 0x5790 <prvInitialiseNewQueue+0x3a>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    5782:	8e 81       	ldd	r24, Y+6	; 0x06
    5784:	9f 81       	ldd	r25, Y+7	; 0x07
    5786:	ee 81       	ldd	r30, Y+6	; 0x06
    5788:	ff 81       	ldd	r31, Y+7	; 0x07
    578a:	91 83       	std	Z+1, r25	; 0x01
    578c:	80 83       	st	Z, r24
    578e:	06 c0       	rjmp	.+12     	; 0x579c <prvInitialiseNewQueue+0x46>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    5790:	8b 81       	ldd	r24, Y+3	; 0x03
    5792:	9c 81       	ldd	r25, Y+4	; 0x04
    5794:	ee 81       	ldd	r30, Y+6	; 0x06
    5796:	ff 81       	ldd	r31, Y+7	; 0x07
    5798:	91 83       	std	Z+1, r25	; 0x01
    579a:	80 83       	st	Z, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    579c:	ee 81       	ldd	r30, Y+6	; 0x06
    579e:	ff 81       	ldd	r31, Y+7	; 0x07
    57a0:	89 81       	ldd	r24, Y+1	; 0x01
    57a2:	83 8f       	std	Z+27, r24	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
    57a4:	ee 81       	ldd	r30, Y+6	; 0x06
    57a6:	ff 81       	ldd	r31, Y+7	; 0x07
    57a8:	8a 81       	ldd	r24, Y+2	; 0x02
    57aa:	84 8f       	std	Z+28, r24	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    57ac:	8e 81       	ldd	r24, Y+6	; 0x06
    57ae:	9f 81       	ldd	r25, Y+7	; 0x07
    57b0:	61 e0       	ldi	r22, 0x01	; 1
    57b2:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    57b6:	27 96       	adiw	r28, 0x07	; 7
    57b8:	0f b6       	in	r0, 0x3f	; 63
    57ba:	f8 94       	cli
    57bc:	de bf       	out	0x3e, r29	; 62
    57be:	0f be       	out	0x3f, r0	; 63
    57c0:	cd bf       	out	0x3d, r28	; 61
    57c2:	cf 91       	pop	r28
    57c4:	df 91       	pop	r29
    57c6:	1f 91       	pop	r17
    57c8:	0f 91       	pop	r16
    57ca:	08 95       	ret

000057cc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
    57cc:	df 93       	push	r29
    57ce:	cf 93       	push	r28
    57d0:	00 d0       	rcall	.+0      	; 0x57d2 <xQueueCreateCountingSemaphore+0x6>
    57d2:	00 d0       	rcall	.+0      	; 0x57d4 <xQueueCreateCountingSemaphore+0x8>
    57d4:	cd b7       	in	r28, 0x3d	; 61
    57d6:	de b7       	in	r29, 0x3e	; 62
    57d8:	8b 83       	std	Y+3, r24	; 0x03
    57da:	6c 83       	std	Y+4, r22	; 0x04
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
    57dc:	8b 81       	ldd	r24, Y+3	; 0x03
    57de:	60 e0       	ldi	r22, 0x00	; 0
    57e0:	42 e0       	ldi	r20, 0x02	; 2
    57e2:	0e 94 5a 2b 	call	0x56b4	; 0x56b4 <xQueueGenericCreate>
    57e6:	9a 83       	std	Y+2, r25	; 0x02
    57e8:	89 83       	std	Y+1, r24	; 0x01

		if( xHandle != NULL )
    57ea:	89 81       	ldd	r24, Y+1	; 0x01
    57ec:	9a 81       	ldd	r25, Y+2	; 0x02
    57ee:	00 97       	sbiw	r24, 0x00	; 0
    57f0:	21 f0       	breq	.+8      	; 0x57fa <xQueueCreateCountingSemaphore+0x2e>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
    57f2:	e9 81       	ldd	r30, Y+1	; 0x01
    57f4:	fa 81       	ldd	r31, Y+2	; 0x02
    57f6:	8c 81       	ldd	r24, Y+4	; 0x04
    57f8:	82 8f       	std	Z+26, r24	; 0x1a
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
    57fa:	89 81       	ldd	r24, Y+1	; 0x01
    57fc:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    57fe:	0f 90       	pop	r0
    5800:	0f 90       	pop	r0
    5802:	0f 90       	pop	r0
    5804:	0f 90       	pop	r0
    5806:	cf 91       	pop	r28
    5808:	df 91       	pop	r29
    580a:	08 95       	ret

0000580c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    580c:	df 93       	push	r29
    580e:	cf 93       	push	r28
    5810:	cd b7       	in	r28, 0x3d	; 61
    5812:	de b7       	in	r29, 0x3e	; 62
    5814:	2f 97       	sbiw	r28, 0x0f	; 15
    5816:	0f b6       	in	r0, 0x3f	; 63
    5818:	f8 94       	cli
    581a:	de bf       	out	0x3e, r29	; 62
    581c:	0f be       	out	0x3f, r0	; 63
    581e:	cd bf       	out	0x3d, r28	; 61
    5820:	99 87       	std	Y+9, r25	; 0x09
    5822:	88 87       	std	Y+8, r24	; 0x08
    5824:	7b 87       	std	Y+11, r23	; 0x0b
    5826:	6a 87       	std	Y+10, r22	; 0x0a
    5828:	5d 87       	std	Y+13, r21	; 0x0d
    582a:	4c 87       	std	Y+12, r20	; 0x0c
    582c:	2e 87       	std	Y+14, r18	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    582e:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    5830:	88 85       	ldd	r24, Y+8	; 0x08
    5832:	99 85       	ldd	r25, Y+9	; 0x09
    5834:	9a 83       	std	Y+2, r25	; 0x02
    5836:	89 83       	std	Y+1, r24	; 0x01
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    5838:	0f b6       	in	r0, 0x3f	; 63
    583a:	f8 94       	cli
    583c:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    583e:	e9 81       	ldd	r30, Y+1	; 0x01
    5840:	fa 81       	ldd	r31, Y+2	; 0x02
    5842:	92 8d       	ldd	r25, Z+26	; 0x1a
    5844:	e9 81       	ldd	r30, Y+1	; 0x01
    5846:	fa 81       	ldd	r31, Y+2	; 0x02
    5848:	83 8d       	ldd	r24, Z+27	; 0x1b
    584a:	98 17       	cp	r25, r24
    584c:	18 f0       	brcs	.+6      	; 0x5854 <xQueueGenericSend+0x48>
    584e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5850:	82 30       	cpi	r24, 0x02	; 2
    5852:	11 f5       	brne	.+68     	; 0x5898 <xQueueGenericSend+0x8c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    5854:	89 81       	ldd	r24, Y+1	; 0x01
    5856:	9a 81       	ldd	r25, Y+2	; 0x02
    5858:	2a 85       	ldd	r18, Y+10	; 0x0a
    585a:	3b 85       	ldd	r19, Y+11	; 0x0b
    585c:	b9 01       	movw	r22, r18
    585e:	4e 85       	ldd	r20, Y+14	; 0x0e
    5860:	0e 94 58 30 	call	0x60b0	; 0x60b0 <prvCopyDataToQueue>
    5864:	8b 83       	std	Y+3, r24	; 0x03

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    5866:	e9 81       	ldd	r30, Y+1	; 0x01
    5868:	fa 81       	ldd	r31, Y+2	; 0x02
    586a:	81 89       	ldd	r24, Z+17	; 0x11
    586c:	88 23       	and	r24, r24
    586e:	51 f0       	breq	.+20     	; 0x5884 <xQueueGenericSend+0x78>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5870:	89 81       	ldd	r24, Y+1	; 0x01
    5872:	9a 81       	ldd	r25, Y+2	; 0x02
    5874:	41 96       	adiw	r24, 0x11	; 17
    5876:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <xTaskRemoveFromEventList>
    587a:	88 23       	and	r24, r24
    587c:	41 f0       	breq	.+16     	; 0x588e <xQueueGenericSend+0x82>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    587e:	0e 94 bf 29 	call	0x537e	; 0x537e <vPortYield>
    5882:	05 c0       	rjmp	.+10     	; 0x588e <xQueueGenericSend+0x82>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    5884:	8b 81       	ldd	r24, Y+3	; 0x03
    5886:	88 23       	and	r24, r24
    5888:	11 f0       	breq	.+4      	; 0x588e <xQueueGenericSend+0x82>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    588a:	0e 94 bf 29 	call	0x537e	; 0x537e <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    588e:	0f 90       	pop	r0
    5890:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    5892:	81 e0       	ldi	r24, 0x01	; 1
    5894:	8f 87       	std	Y+15, r24	; 0x0f
    5896:	5c c0       	rjmp	.+184    	; 0x5950 <xQueueGenericSend+0x144>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    5898:	8c 85       	ldd	r24, Y+12	; 0x0c
    589a:	9d 85       	ldd	r25, Y+13	; 0x0d
    589c:	00 97       	sbiw	r24, 0x00	; 0
    589e:	21 f4       	brne	.+8      	; 0x58a8 <xQueueGenericSend+0x9c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    58a0:	0f 90       	pop	r0
    58a2:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    58a4:	1f 86       	std	Y+15, r1	; 0x0f
    58a6:	54 c0       	rjmp	.+168    	; 0x5950 <xQueueGenericSend+0x144>
				}
				else if( xEntryTimeSet == pdFALSE )
    58a8:	8c 81       	ldd	r24, Y+4	; 0x04
    58aa:	88 23       	and	r24, r24
    58ac:	31 f4       	brne	.+12     	; 0x58ba <xQueueGenericSend+0xae>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    58ae:	ce 01       	movw	r24, r28
    58b0:	05 96       	adiw	r24, 0x05	; 5
    58b2:	0e 94 8c 38 	call	0x7118	; 0x7118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    58b6:	81 e0       	ldi	r24, 0x01	; 1
    58b8:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    58ba:	0f 90       	pop	r0
    58bc:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    58be:	0e 94 06 35 	call	0x6a0c	; 0x6a0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    58c2:	0f b6       	in	r0, 0x3f	; 63
    58c4:	f8 94       	cli
    58c6:	0f 92       	push	r0
    58c8:	e9 81       	ldd	r30, Y+1	; 0x01
    58ca:	fa 81       	ldd	r31, Y+2	; 0x02
    58cc:	85 8d       	ldd	r24, Z+29	; 0x1d
    58ce:	8f 3f       	cpi	r24, 0xFF	; 255
    58d0:	19 f4       	brne	.+6      	; 0x58d8 <xQueueGenericSend+0xcc>
    58d2:	e9 81       	ldd	r30, Y+1	; 0x01
    58d4:	fa 81       	ldd	r31, Y+2	; 0x02
    58d6:	15 8e       	std	Z+29, r1	; 0x1d
    58d8:	e9 81       	ldd	r30, Y+1	; 0x01
    58da:	fa 81       	ldd	r31, Y+2	; 0x02
    58dc:	86 8d       	ldd	r24, Z+30	; 0x1e
    58de:	8f 3f       	cpi	r24, 0xFF	; 255
    58e0:	19 f4       	brne	.+6      	; 0x58e8 <xQueueGenericSend+0xdc>
    58e2:	e9 81       	ldd	r30, Y+1	; 0x01
    58e4:	fa 81       	ldd	r31, Y+2	; 0x02
    58e6:	16 8e       	std	Z+30, r1	; 0x1e
    58e8:	0f 90       	pop	r0
    58ea:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    58ec:	ce 01       	movw	r24, r28
    58ee:	05 96       	adiw	r24, 0x05	; 5
    58f0:	9e 01       	movw	r18, r28
    58f2:	24 5f       	subi	r18, 0xF4	; 244
    58f4:	3f 4f       	sbci	r19, 0xFF	; 255
    58f6:	b9 01       	movw	r22, r18
    58f8:	0e 94 a5 38 	call	0x714a	; 0x714a <xTaskCheckForTimeOut>
    58fc:	88 23       	and	r24, r24
    58fe:	09 f5       	brne	.+66     	; 0x5942 <xQueueGenericSend+0x136>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    5900:	89 81       	ldd	r24, Y+1	; 0x01
    5902:	9a 81       	ldd	r25, Y+2	; 0x02
    5904:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <prvIsQueueFull>
    5908:	88 23       	and	r24, r24
    590a:	a1 f0       	breq	.+40     	; 0x5934 <xQueueGenericSend+0x128>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    590c:	89 81       	ldd	r24, Y+1	; 0x01
    590e:	9a 81       	ldd	r25, Y+2	; 0x02
    5910:	08 96       	adiw	r24, 0x08	; 8
    5912:	2c 85       	ldd	r18, Y+12	; 0x0c
    5914:	3d 85       	ldd	r19, Y+13	; 0x0d
    5916:	b9 01       	movw	r22, r18
    5918:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    591c:	89 81       	ldd	r24, Y+1	; 0x01
    591e:	9a 81       	ldd	r25, Y+2	; 0x02
    5920:	0e 94 45 31 	call	0x628a	; 0x628a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    5924:	0e 94 12 35 	call	0x6a24	; 0x6a24 <xTaskResumeAll>
    5928:	88 23       	and	r24, r24
    592a:	09 f0       	breq	.+2      	; 0x592e <xQueueGenericSend+0x122>
    592c:	85 cf       	rjmp	.-246    	; 0x5838 <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
    592e:	0e 94 bf 29 	call	0x537e	; 0x537e <vPortYield>
    5932:	82 cf       	rjmp	.-252    	; 0x5838 <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    5934:	89 81       	ldd	r24, Y+1	; 0x01
    5936:	9a 81       	ldd	r25, Y+2	; 0x02
    5938:	0e 94 45 31 	call	0x628a	; 0x628a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    593c:	0e 94 12 35 	call	0x6a24	; 0x6a24 <xTaskResumeAll>
    5940:	7b cf       	rjmp	.-266    	; 0x5838 <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    5942:	89 81       	ldd	r24, Y+1	; 0x01
    5944:	9a 81       	ldd	r25, Y+2	; 0x02
    5946:	0e 94 45 31 	call	0x628a	; 0x628a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    594a:	0e 94 12 35 	call	0x6a24	; 0x6a24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    594e:	1f 86       	std	Y+15, r1	; 0x0f
    5950:	8f 85       	ldd	r24, Y+15	; 0x0f
		}
	} /*lint -restore */
}
    5952:	2f 96       	adiw	r28, 0x0f	; 15
    5954:	0f b6       	in	r0, 0x3f	; 63
    5956:	f8 94       	cli
    5958:	de bf       	out	0x3e, r29	; 62
    595a:	0f be       	out	0x3f, r0	; 63
    595c:	cd bf       	out	0x3d, r28	; 61
    595e:	cf 91       	pop	r28
    5960:	df 91       	pop	r29
    5962:	08 95       	ret

00005964 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    5964:	df 93       	push	r29
    5966:	cf 93       	push	r28
    5968:	cd b7       	in	r28, 0x3d	; 61
    596a:	de b7       	in	r29, 0x3e	; 62
    596c:	2c 97       	sbiw	r28, 0x0c	; 12
    596e:	0f b6       	in	r0, 0x3f	; 63
    5970:	f8 94       	cli
    5972:	de bf       	out	0x3e, r29	; 62
    5974:	0f be       	out	0x3f, r0	; 63
    5976:	cd bf       	out	0x3d, r28	; 61
    5978:	9f 83       	std	Y+7, r25	; 0x07
    597a:	8e 83       	std	Y+6, r24	; 0x06
    597c:	79 87       	std	Y+9, r23	; 0x09
    597e:	68 87       	std	Y+8, r22	; 0x08
    5980:	5b 87       	std	Y+11, r21	; 0x0b
    5982:	4a 87       	std	Y+10, r20	; 0x0a
    5984:	2c 87       	std	Y+12, r18	; 0x0c
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    5986:	8e 81       	ldd	r24, Y+6	; 0x06
    5988:	9f 81       	ldd	r25, Y+7	; 0x07
    598a:	9b 83       	std	Y+3, r25	; 0x03
    598c:	8a 83       	std	Y+2, r24	; 0x02
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    598e:	1c 82       	std	Y+4, r1	; 0x04
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    5990:	ea 81       	ldd	r30, Y+2	; 0x02
    5992:	fb 81       	ldd	r31, Y+3	; 0x03
    5994:	92 8d       	ldd	r25, Z+26	; 0x1a
    5996:	ea 81       	ldd	r30, Y+2	; 0x02
    5998:	fb 81       	ldd	r31, Y+3	; 0x03
    599a:	83 8d       	ldd	r24, Z+27	; 0x1b
    599c:	98 17       	cp	r25, r24
    599e:	18 f0       	brcs	.+6      	; 0x59a6 <xQueueGenericSendFromISR+0x42>
    59a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    59a2:	82 30       	cpi	r24, 0x02	; 2
    59a4:	61 f5       	brne	.+88     	; 0x59fe <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    59a6:	ea 81       	ldd	r30, Y+2	; 0x02
    59a8:	fb 81       	ldd	r31, Y+3	; 0x03
    59aa:	86 8d       	ldd	r24, Z+30	; 0x1e
    59ac:	89 83       	std	Y+1, r24	; 0x01
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    59ae:	8a 81       	ldd	r24, Y+2	; 0x02
    59b0:	9b 81       	ldd	r25, Y+3	; 0x03
    59b2:	28 85       	ldd	r18, Y+8	; 0x08
    59b4:	39 85       	ldd	r19, Y+9	; 0x09
    59b6:	b9 01       	movw	r22, r18
    59b8:	4c 85       	ldd	r20, Y+12	; 0x0c
    59ba:	0e 94 58 30 	call	0x60b0	; 0x60b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    59be:	89 81       	ldd	r24, Y+1	; 0x01
    59c0:	8f 3f       	cpi	r24, 0xFF	; 255
    59c2:	a9 f4       	brne	.+42     	; 0x59ee <xQueueGenericSendFromISR+0x8a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    59c4:	ea 81       	ldd	r30, Y+2	; 0x02
    59c6:	fb 81       	ldd	r31, Y+3	; 0x03
    59c8:	81 89       	ldd	r24, Z+17	; 0x11
    59ca:	88 23       	and	r24, r24
    59cc:	a9 f0       	breq	.+42     	; 0x59f8 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    59ce:	8a 81       	ldd	r24, Y+2	; 0x02
    59d0:	9b 81       	ldd	r25, Y+3	; 0x03
    59d2:	41 96       	adiw	r24, 0x11	; 17
    59d4:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <xTaskRemoveFromEventList>
    59d8:	88 23       	and	r24, r24
    59da:	71 f0       	breq	.+28     	; 0x59f8 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    59dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    59de:	9b 85       	ldd	r25, Y+11	; 0x0b
    59e0:	00 97       	sbiw	r24, 0x00	; 0
    59e2:	51 f0       	breq	.+20     	; 0x59f8 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    59e4:	ea 85       	ldd	r30, Y+10	; 0x0a
    59e6:	fb 85       	ldd	r31, Y+11	; 0x0b
    59e8:	81 e0       	ldi	r24, 0x01	; 1
    59ea:	80 83       	st	Z, r24
    59ec:	05 c0       	rjmp	.+10     	; 0x59f8 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    59ee:	89 81       	ldd	r24, Y+1	; 0x01
    59f0:	8f 5f       	subi	r24, 0xFF	; 255
    59f2:	ea 81       	ldd	r30, Y+2	; 0x02
    59f4:	fb 81       	ldd	r31, Y+3	; 0x03
    59f6:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    59f8:	81 e0       	ldi	r24, 0x01	; 1
    59fa:	8d 83       	std	Y+5, r24	; 0x05
    59fc:	01 c0       	rjmp	.+2      	; 0x5a00 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    59fe:	1d 82       	std	Y+5, r1	; 0x05
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    5a00:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5a02:	2c 96       	adiw	r28, 0x0c	; 12
    5a04:	0f b6       	in	r0, 0x3f	; 63
    5a06:	f8 94       	cli
    5a08:	de bf       	out	0x3e, r29	; 62
    5a0a:	0f be       	out	0x3f, r0	; 63
    5a0c:	cd bf       	out	0x3d, r28	; 61
    5a0e:	cf 91       	pop	r28
    5a10:	df 91       	pop	r29
    5a12:	08 95       	ret

00005a14 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    5a14:	df 93       	push	r29
    5a16:	cf 93       	push	r28
    5a18:	cd b7       	in	r28, 0x3d	; 61
    5a1a:	de b7       	in	r29, 0x3e	; 62
    5a1c:	2a 97       	sbiw	r28, 0x0a	; 10
    5a1e:	0f b6       	in	r0, 0x3f	; 63
    5a20:	f8 94       	cli
    5a22:	de bf       	out	0x3e, r29	; 62
    5a24:	0f be       	out	0x3f, r0	; 63
    5a26:	cd bf       	out	0x3d, r28	; 61
    5a28:	98 87       	std	Y+8, r25	; 0x08
    5a2a:	8f 83       	std	Y+7, r24	; 0x07
    5a2c:	7a 87       	std	Y+10, r23	; 0x0a
    5a2e:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    5a30:	8f 81       	ldd	r24, Y+7	; 0x07
    5a32:	98 85       	ldd	r25, Y+8	; 0x08
    5a34:	9c 83       	std	Y+4, r25	; 0x04
    5a36:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5a38:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    5a3a:	eb 81       	ldd	r30, Y+3	; 0x03
    5a3c:	fc 81       	ldd	r31, Y+4	; 0x04
    5a3e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5a40:	8a 83       	std	Y+2, r24	; 0x02

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    5a42:	eb 81       	ldd	r30, Y+3	; 0x03
    5a44:	fc 81       	ldd	r31, Y+4	; 0x04
    5a46:	93 8d       	ldd	r25, Z+27	; 0x1b
    5a48:	8a 81       	ldd	r24, Y+2	; 0x02
    5a4a:	89 17       	cp	r24, r25
    5a4c:	48 f5       	brcc	.+82     	; 0x5aa0 <xQueueGiveFromISR+0x8c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    5a4e:	eb 81       	ldd	r30, Y+3	; 0x03
    5a50:	fc 81       	ldd	r31, Y+4	; 0x04
    5a52:	86 8d       	ldd	r24, Z+30	; 0x1e
    5a54:	89 83       	std	Y+1, r24	; 0x01
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    5a56:	8a 81       	ldd	r24, Y+2	; 0x02
    5a58:	8f 5f       	subi	r24, 0xFF	; 255
    5a5a:	eb 81       	ldd	r30, Y+3	; 0x03
    5a5c:	fc 81       	ldd	r31, Y+4	; 0x04
    5a5e:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    5a60:	89 81       	ldd	r24, Y+1	; 0x01
    5a62:	8f 3f       	cpi	r24, 0xFF	; 255
    5a64:	a9 f4       	brne	.+42     	; 0x5a90 <xQueueGiveFromISR+0x7c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    5a66:	eb 81       	ldd	r30, Y+3	; 0x03
    5a68:	fc 81       	ldd	r31, Y+4	; 0x04
    5a6a:	81 89       	ldd	r24, Z+17	; 0x11
    5a6c:	88 23       	and	r24, r24
    5a6e:	a9 f0       	breq	.+42     	; 0x5a9a <xQueueGiveFromISR+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5a70:	8b 81       	ldd	r24, Y+3	; 0x03
    5a72:	9c 81       	ldd	r25, Y+4	; 0x04
    5a74:	41 96       	adiw	r24, 0x11	; 17
    5a76:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <xTaskRemoveFromEventList>
    5a7a:	88 23       	and	r24, r24
    5a7c:	71 f0       	breq	.+28     	; 0x5a9a <xQueueGiveFromISR+0x86>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    5a7e:	89 85       	ldd	r24, Y+9	; 0x09
    5a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a82:	00 97       	sbiw	r24, 0x00	; 0
    5a84:	51 f0       	breq	.+20     	; 0x5a9a <xQueueGiveFromISR+0x86>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    5a86:	e9 85       	ldd	r30, Y+9	; 0x09
    5a88:	fa 85       	ldd	r31, Y+10	; 0x0a
    5a8a:	81 e0       	ldi	r24, 0x01	; 1
    5a8c:	80 83       	st	Z, r24
    5a8e:	05 c0       	rjmp	.+10     	; 0x5a9a <xQueueGiveFromISR+0x86>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    5a90:	89 81       	ldd	r24, Y+1	; 0x01
    5a92:	8f 5f       	subi	r24, 0xFF	; 255
    5a94:	eb 81       	ldd	r30, Y+3	; 0x03
    5a96:	fc 81       	ldd	r31, Y+4	; 0x04
    5a98:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    5a9a:	81 e0       	ldi	r24, 0x01	; 1
    5a9c:	8e 83       	std	Y+6, r24	; 0x06
    5a9e:	01 c0       	rjmp	.+2      	; 0x5aa2 <xQueueGiveFromISR+0x8e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    5aa0:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    5aa2:	8e 81       	ldd	r24, Y+6	; 0x06
}
    5aa4:	2a 96       	adiw	r28, 0x0a	; 10
    5aa6:	0f b6       	in	r0, 0x3f	; 63
    5aa8:	f8 94       	cli
    5aaa:	de bf       	out	0x3e, r29	; 62
    5aac:	0f be       	out	0x3f, r0	; 63
    5aae:	cd bf       	out	0x3d, r28	; 61
    5ab0:	cf 91       	pop	r28
    5ab2:	df 91       	pop	r29
    5ab4:	08 95       	ret

00005ab6 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    5ab6:	df 93       	push	r29
    5ab8:	cf 93       	push	r28
    5aba:	cd b7       	in	r28, 0x3d	; 61
    5abc:	de b7       	in	r29, 0x3e	; 62
    5abe:	2e 97       	sbiw	r28, 0x0e	; 14
    5ac0:	0f b6       	in	r0, 0x3f	; 63
    5ac2:	f8 94       	cli
    5ac4:	de bf       	out	0x3e, r29	; 62
    5ac6:	0f be       	out	0x3f, r0	; 63
    5ac8:	cd bf       	out	0x3d, r28	; 61
    5aca:	99 87       	std	Y+9, r25	; 0x09
    5acc:	88 87       	std	Y+8, r24	; 0x08
    5ace:	7b 87       	std	Y+11, r23	; 0x0b
    5ad0:	6a 87       	std	Y+10, r22	; 0x0a
    5ad2:	5d 87       	std	Y+13, r21	; 0x0d
    5ad4:	4c 87       	std	Y+12, r20	; 0x0c
BaseType_t xEntryTimeSet = pdFALSE;
    5ad6:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    5ad8:	88 85       	ldd	r24, Y+8	; 0x08
    5ada:	99 85       	ldd	r25, Y+9	; 0x09
    5adc:	9b 83       	std	Y+3, r25	; 0x03
    5ade:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    5ae0:	0f b6       	in	r0, 0x3f	; 63
    5ae2:	f8 94       	cli
    5ae4:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    5ae6:	ea 81       	ldd	r30, Y+2	; 0x02
    5ae8:	fb 81       	ldd	r31, Y+3	; 0x03
    5aea:	82 8d       	ldd	r24, Z+26	; 0x1a
    5aec:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    5aee:	89 81       	ldd	r24, Y+1	; 0x01
    5af0:	88 23       	and	r24, r24
    5af2:	f9 f0       	breq	.+62     	; 0x5b32 <xQueueReceive+0x7c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    5af4:	8a 81       	ldd	r24, Y+2	; 0x02
    5af6:	9b 81       	ldd	r25, Y+3	; 0x03
    5af8:	2a 85       	ldd	r18, Y+10	; 0x0a
    5afa:	3b 85       	ldd	r19, Y+11	; 0x0b
    5afc:	b9 01       	movw	r22, r18
    5afe:	0e 94 fe 30 	call	0x61fc	; 0x61fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    5b02:	89 81       	ldd	r24, Y+1	; 0x01
    5b04:	81 50       	subi	r24, 0x01	; 1
    5b06:	ea 81       	ldd	r30, Y+2	; 0x02
    5b08:	fb 81       	ldd	r31, Y+3	; 0x03
    5b0a:	82 8f       	std	Z+26, r24	; 0x1a

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5b0c:	ea 81       	ldd	r30, Y+2	; 0x02
    5b0e:	fb 81       	ldd	r31, Y+3	; 0x03
    5b10:	80 85       	ldd	r24, Z+8	; 0x08
    5b12:	88 23       	and	r24, r24
    5b14:	49 f0       	breq	.+18     	; 0x5b28 <xQueueReceive+0x72>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    5b16:	8a 81       	ldd	r24, Y+2	; 0x02
    5b18:	9b 81       	ldd	r25, Y+3	; 0x03
    5b1a:	08 96       	adiw	r24, 0x08	; 8
    5b1c:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <xTaskRemoveFromEventList>
    5b20:	88 23       	and	r24, r24
    5b22:	11 f0       	breq	.+4      	; 0x5b28 <xQueueReceive+0x72>
					{
						queueYIELD_IF_USING_PREEMPTION();
    5b24:	0e 94 bf 29 	call	0x537e	; 0x537e <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    5b28:	0f 90       	pop	r0
    5b2a:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    5b2c:	81 e0       	ldi	r24, 0x01	; 1
    5b2e:	8e 87       	std	Y+14, r24	; 0x0e
    5b30:	63 c0       	rjmp	.+198    	; 0x5bf8 <xQueueReceive+0x142>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    5b32:	8c 85       	ldd	r24, Y+12	; 0x0c
    5b34:	9d 85       	ldd	r25, Y+13	; 0x0d
    5b36:	00 97       	sbiw	r24, 0x00	; 0
    5b38:	21 f4       	brne	.+8      	; 0x5b42 <xQueueReceive+0x8c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    5b3a:	0f 90       	pop	r0
    5b3c:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    5b3e:	1e 86       	std	Y+14, r1	; 0x0e
    5b40:	5b c0       	rjmp	.+182    	; 0x5bf8 <xQueueReceive+0x142>
				}
				else if( xEntryTimeSet == pdFALSE )
    5b42:	8c 81       	ldd	r24, Y+4	; 0x04
    5b44:	88 23       	and	r24, r24
    5b46:	31 f4       	brne	.+12     	; 0x5b54 <xQueueReceive+0x9e>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    5b48:	ce 01       	movw	r24, r28
    5b4a:	05 96       	adiw	r24, 0x05	; 5
    5b4c:	0e 94 8c 38 	call	0x7118	; 0x7118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    5b50:	81 e0       	ldi	r24, 0x01	; 1
    5b52:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    5b54:	0f 90       	pop	r0
    5b56:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    5b58:	0e 94 06 35 	call	0x6a0c	; 0x6a0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    5b5c:	0f b6       	in	r0, 0x3f	; 63
    5b5e:	f8 94       	cli
    5b60:	0f 92       	push	r0
    5b62:	ea 81       	ldd	r30, Y+2	; 0x02
    5b64:	fb 81       	ldd	r31, Y+3	; 0x03
    5b66:	85 8d       	ldd	r24, Z+29	; 0x1d
    5b68:	8f 3f       	cpi	r24, 0xFF	; 255
    5b6a:	19 f4       	brne	.+6      	; 0x5b72 <xQueueReceive+0xbc>
    5b6c:	ea 81       	ldd	r30, Y+2	; 0x02
    5b6e:	fb 81       	ldd	r31, Y+3	; 0x03
    5b70:	15 8e       	std	Z+29, r1	; 0x1d
    5b72:	ea 81       	ldd	r30, Y+2	; 0x02
    5b74:	fb 81       	ldd	r31, Y+3	; 0x03
    5b76:	86 8d       	ldd	r24, Z+30	; 0x1e
    5b78:	8f 3f       	cpi	r24, 0xFF	; 255
    5b7a:	19 f4       	brne	.+6      	; 0x5b82 <xQueueReceive+0xcc>
    5b7c:	ea 81       	ldd	r30, Y+2	; 0x02
    5b7e:	fb 81       	ldd	r31, Y+3	; 0x03
    5b80:	16 8e       	std	Z+30, r1	; 0x1e
    5b82:	0f 90       	pop	r0
    5b84:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    5b86:	ce 01       	movw	r24, r28
    5b88:	05 96       	adiw	r24, 0x05	; 5
    5b8a:	9e 01       	movw	r18, r28
    5b8c:	24 5f       	subi	r18, 0xF4	; 244
    5b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    5b90:	b9 01       	movw	r22, r18
    5b92:	0e 94 a5 38 	call	0x714a	; 0x714a <xTaskCheckForTimeOut>
    5b96:	88 23       	and	r24, r24
    5b98:	09 f5       	brne	.+66     	; 0x5bdc <xQueueReceive+0x126>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    5b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b9c:	9b 81       	ldd	r25, Y+3	; 0x03
    5b9e:	0e 94 98 31 	call	0x6330	; 0x6330 <prvIsQueueEmpty>
    5ba2:	88 23       	and	r24, r24
    5ba4:	a1 f0       	breq	.+40     	; 0x5bce <xQueueReceive+0x118>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    5ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    5ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    5baa:	41 96       	adiw	r24, 0x11	; 17
    5bac:	2c 85       	ldd	r18, Y+12	; 0x0c
    5bae:	3d 85       	ldd	r19, Y+13	; 0x0d
    5bb0:	b9 01       	movw	r22, r18
    5bb2:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    5bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    5bb8:	9b 81       	ldd	r25, Y+3	; 0x03
    5bba:	0e 94 45 31 	call	0x628a	; 0x628a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    5bbe:	0e 94 12 35 	call	0x6a24	; 0x6a24 <xTaskResumeAll>
    5bc2:	88 23       	and	r24, r24
    5bc4:	09 f0       	breq	.+2      	; 0x5bc8 <xQueueReceive+0x112>
    5bc6:	8c cf       	rjmp	.-232    	; 0x5ae0 <xQueueReceive+0x2a>
				{
					portYIELD_WITHIN_API();
    5bc8:	0e 94 bf 29 	call	0x537e	; 0x537e <vPortYield>
    5bcc:	89 cf       	rjmp	.-238    	; 0x5ae0 <xQueueReceive+0x2a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    5bce:	8a 81       	ldd	r24, Y+2	; 0x02
    5bd0:	9b 81       	ldd	r25, Y+3	; 0x03
    5bd2:	0e 94 45 31 	call	0x628a	; 0x628a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    5bd6:	0e 94 12 35 	call	0x6a24	; 0x6a24 <xTaskResumeAll>
    5bda:	82 cf       	rjmp	.-252    	; 0x5ae0 <xQueueReceive+0x2a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    5bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    5bde:	9b 81       	ldd	r25, Y+3	; 0x03
    5be0:	0e 94 45 31 	call	0x628a	; 0x628a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    5be4:	0e 94 12 35 	call	0x6a24	; 0x6a24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    5be8:	8a 81       	ldd	r24, Y+2	; 0x02
    5bea:	9b 81       	ldd	r25, Y+3	; 0x03
    5bec:	0e 94 98 31 	call	0x6330	; 0x6330 <prvIsQueueEmpty>
    5bf0:	88 23       	and	r24, r24
    5bf2:	09 f4       	brne	.+2      	; 0x5bf6 <xQueueReceive+0x140>
    5bf4:	75 cf       	rjmp	.-278    	; 0x5ae0 <xQueueReceive+0x2a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    5bf6:	1e 86       	std	Y+14, r1	; 0x0e
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    5bf8:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    5bfa:	2e 96       	adiw	r28, 0x0e	; 14
    5bfc:	0f b6       	in	r0, 0x3f	; 63
    5bfe:	f8 94       	cli
    5c00:	de bf       	out	0x3e, r29	; 62
    5c02:	0f be       	out	0x3f, r0	; 63
    5c04:	cd bf       	out	0x3d, r28	; 61
    5c06:	cf 91       	pop	r28
    5c08:	df 91       	pop	r29
    5c0a:	08 95       	ret

00005c0c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    5c0c:	df 93       	push	r29
    5c0e:	cf 93       	push	r28
    5c10:	cd b7       	in	r28, 0x3d	; 61
    5c12:	de b7       	in	r29, 0x3e	; 62
    5c14:	2c 97       	sbiw	r28, 0x0c	; 12
    5c16:	0f b6       	in	r0, 0x3f	; 63
    5c18:	f8 94       	cli
    5c1a:	de bf       	out	0x3e, r29	; 62
    5c1c:	0f be       	out	0x3f, r0	; 63
    5c1e:	cd bf       	out	0x3d, r28	; 61
    5c20:	99 87       	std	Y+9, r25	; 0x09
    5c22:	88 87       	std	Y+8, r24	; 0x08
    5c24:	7b 87       	std	Y+11, r23	; 0x0b
    5c26:	6a 87       	std	Y+10, r22	; 0x0a
BaseType_t xEntryTimeSet = pdFALSE;
    5c28:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    5c2a:	88 85       	ldd	r24, Y+8	; 0x08
    5c2c:	99 85       	ldd	r25, Y+9	; 0x09
    5c2e:	9b 83       	std	Y+3, r25	; 0x03
    5c30:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    5c32:	0f b6       	in	r0, 0x3f	; 63
    5c34:	f8 94       	cli
    5c36:	0f 92       	push	r0
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    5c38:	ea 81       	ldd	r30, Y+2	; 0x02
    5c3a:	fb 81       	ldd	r31, Y+3	; 0x03
    5c3c:	82 8d       	ldd	r24, Z+26	; 0x1a
    5c3e:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    5c40:	89 81       	ldd	r24, Y+1	; 0x01
    5c42:	88 23       	and	r24, r24
    5c44:	c1 f0       	breq	.+48     	; 0x5c76 <xQueueSemaphoreTake+0x6a>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    5c46:	89 81       	ldd	r24, Y+1	; 0x01
    5c48:	81 50       	subi	r24, 0x01	; 1
    5c4a:	ea 81       	ldd	r30, Y+2	; 0x02
    5c4c:	fb 81       	ldd	r31, Y+3	; 0x03
    5c4e:	82 8f       	std	Z+26, r24	; 0x1a
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5c50:	ea 81       	ldd	r30, Y+2	; 0x02
    5c52:	fb 81       	ldd	r31, Y+3	; 0x03
    5c54:	80 85       	ldd	r24, Z+8	; 0x08
    5c56:	88 23       	and	r24, r24
    5c58:	49 f0       	breq	.+18     	; 0x5c6c <xQueueSemaphoreTake+0x60>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    5c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    5c5c:	9b 81       	ldd	r25, Y+3	; 0x03
    5c5e:	08 96       	adiw	r24, 0x08	; 8
    5c60:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <xTaskRemoveFromEventList>
    5c64:	88 23       	and	r24, r24
    5c66:	11 f0       	breq	.+4      	; 0x5c6c <xQueueSemaphoreTake+0x60>
					{
						queueYIELD_IF_USING_PREEMPTION();
    5c68:	0e 94 bf 29 	call	0x537e	; 0x537e <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    5c6c:	0f 90       	pop	r0
    5c6e:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    5c70:	81 e0       	ldi	r24, 0x01	; 1
    5c72:	8c 87       	std	Y+12, r24	; 0x0c
    5c74:	63 c0       	rjmp	.+198    	; 0x5d3c <xQueueSemaphoreTake+0x130>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    5c76:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c78:	9b 85       	ldd	r25, Y+11	; 0x0b
    5c7a:	00 97       	sbiw	r24, 0x00	; 0
    5c7c:	21 f4       	brne	.+8      	; 0x5c86 <xQueueSemaphoreTake+0x7a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    5c7e:	0f 90       	pop	r0
    5c80:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    5c82:	1c 86       	std	Y+12, r1	; 0x0c
    5c84:	5b c0       	rjmp	.+182    	; 0x5d3c <xQueueSemaphoreTake+0x130>
				}
				else if( xEntryTimeSet == pdFALSE )
    5c86:	8c 81       	ldd	r24, Y+4	; 0x04
    5c88:	88 23       	and	r24, r24
    5c8a:	31 f4       	brne	.+12     	; 0x5c98 <xQueueSemaphoreTake+0x8c>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    5c8c:	ce 01       	movw	r24, r28
    5c8e:	05 96       	adiw	r24, 0x05	; 5
    5c90:	0e 94 8c 38 	call	0x7118	; 0x7118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    5c94:	81 e0       	ldi	r24, 0x01	; 1
    5c96:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    5c98:	0f 90       	pop	r0
    5c9a:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    5c9c:	0e 94 06 35 	call	0x6a0c	; 0x6a0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    5ca0:	0f b6       	in	r0, 0x3f	; 63
    5ca2:	f8 94       	cli
    5ca4:	0f 92       	push	r0
    5ca6:	ea 81       	ldd	r30, Y+2	; 0x02
    5ca8:	fb 81       	ldd	r31, Y+3	; 0x03
    5caa:	85 8d       	ldd	r24, Z+29	; 0x1d
    5cac:	8f 3f       	cpi	r24, 0xFF	; 255
    5cae:	19 f4       	brne	.+6      	; 0x5cb6 <xQueueSemaphoreTake+0xaa>
    5cb0:	ea 81       	ldd	r30, Y+2	; 0x02
    5cb2:	fb 81       	ldd	r31, Y+3	; 0x03
    5cb4:	15 8e       	std	Z+29, r1	; 0x1d
    5cb6:	ea 81       	ldd	r30, Y+2	; 0x02
    5cb8:	fb 81       	ldd	r31, Y+3	; 0x03
    5cba:	86 8d       	ldd	r24, Z+30	; 0x1e
    5cbc:	8f 3f       	cpi	r24, 0xFF	; 255
    5cbe:	19 f4       	brne	.+6      	; 0x5cc6 <xQueueSemaphoreTake+0xba>
    5cc0:	ea 81       	ldd	r30, Y+2	; 0x02
    5cc2:	fb 81       	ldd	r31, Y+3	; 0x03
    5cc4:	16 8e       	std	Z+30, r1	; 0x1e
    5cc6:	0f 90       	pop	r0
    5cc8:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    5cca:	ce 01       	movw	r24, r28
    5ccc:	05 96       	adiw	r24, 0x05	; 5
    5cce:	9e 01       	movw	r18, r28
    5cd0:	26 5f       	subi	r18, 0xF6	; 246
    5cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    5cd4:	b9 01       	movw	r22, r18
    5cd6:	0e 94 a5 38 	call	0x714a	; 0x714a <xTaskCheckForTimeOut>
    5cda:	88 23       	and	r24, r24
    5cdc:	09 f5       	brne	.+66     	; 0x5d20 <xQueueSemaphoreTake+0x114>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    5cde:	8a 81       	ldd	r24, Y+2	; 0x02
    5ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    5ce2:	0e 94 98 31 	call	0x6330	; 0x6330 <prvIsQueueEmpty>
    5ce6:	88 23       	and	r24, r24
    5ce8:	a1 f0       	breq	.+40     	; 0x5d12 <xQueueSemaphoreTake+0x106>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    5cea:	8a 81       	ldd	r24, Y+2	; 0x02
    5cec:	9b 81       	ldd	r25, Y+3	; 0x03
    5cee:	41 96       	adiw	r24, 0x11	; 17
    5cf0:	2a 85       	ldd	r18, Y+10	; 0x0a
    5cf2:	3b 85       	ldd	r19, Y+11	; 0x0b
    5cf4:	b9 01       	movw	r22, r18
    5cf6:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    5cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    5cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    5cfe:	0e 94 45 31 	call	0x628a	; 0x628a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    5d02:	0e 94 12 35 	call	0x6a24	; 0x6a24 <xTaskResumeAll>
    5d06:	88 23       	and	r24, r24
    5d08:	09 f0       	breq	.+2      	; 0x5d0c <xQueueSemaphoreTake+0x100>
    5d0a:	93 cf       	rjmp	.-218    	; 0x5c32 <xQueueSemaphoreTake+0x26>
				{
					portYIELD_WITHIN_API();
    5d0c:	0e 94 bf 29 	call	0x537e	; 0x537e <vPortYield>
    5d10:	90 cf       	rjmp	.-224    	; 0x5c32 <xQueueSemaphoreTake+0x26>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    5d12:	8a 81       	ldd	r24, Y+2	; 0x02
    5d14:	9b 81       	ldd	r25, Y+3	; 0x03
    5d16:	0e 94 45 31 	call	0x628a	; 0x628a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    5d1a:	0e 94 12 35 	call	0x6a24	; 0x6a24 <xTaskResumeAll>
    5d1e:	89 cf       	rjmp	.-238    	; 0x5c32 <xQueueSemaphoreTake+0x26>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    5d20:	8a 81       	ldd	r24, Y+2	; 0x02
    5d22:	9b 81       	ldd	r25, Y+3	; 0x03
    5d24:	0e 94 45 31 	call	0x628a	; 0x628a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    5d28:	0e 94 12 35 	call	0x6a24	; 0x6a24 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    5d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    5d2e:	9b 81       	ldd	r25, Y+3	; 0x03
    5d30:	0e 94 98 31 	call	0x6330	; 0x6330 <prvIsQueueEmpty>
    5d34:	88 23       	and	r24, r24
    5d36:	09 f4       	brne	.+2      	; 0x5d3a <xQueueSemaphoreTake+0x12e>
    5d38:	7c cf       	rjmp	.-264    	; 0x5c32 <xQueueSemaphoreTake+0x26>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    5d3a:	1c 86       	std	Y+12, r1	; 0x0c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    5d3c:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    5d3e:	2c 96       	adiw	r28, 0x0c	; 12
    5d40:	0f b6       	in	r0, 0x3f	; 63
    5d42:	f8 94       	cli
    5d44:	de bf       	out	0x3e, r29	; 62
    5d46:	0f be       	out	0x3f, r0	; 63
    5d48:	cd bf       	out	0x3d, r28	; 61
    5d4a:	cf 91       	pop	r28
    5d4c:	df 91       	pop	r29
    5d4e:	08 95       	ret

00005d50 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    5d50:	df 93       	push	r29
    5d52:	cf 93       	push	r28
    5d54:	cd b7       	in	r28, 0x3d	; 61
    5d56:	de b7       	in	r29, 0x3e	; 62
    5d58:	60 97       	sbiw	r28, 0x10	; 16
    5d5a:	0f b6       	in	r0, 0x3f	; 63
    5d5c:	f8 94       	cli
    5d5e:	de bf       	out	0x3e, r29	; 62
    5d60:	0f be       	out	0x3f, r0	; 63
    5d62:	cd bf       	out	0x3d, r28	; 61
    5d64:	9b 87       	std	Y+11, r25	; 0x0b
    5d66:	8a 87       	std	Y+10, r24	; 0x0a
    5d68:	7d 87       	std	Y+13, r23	; 0x0d
    5d6a:	6c 87       	std	Y+12, r22	; 0x0c
    5d6c:	5f 87       	std	Y+15, r21	; 0x0f
    5d6e:	4e 87       	std	Y+14, r20	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE;
    5d70:	1e 82       	std	Y+6, r1	; 0x06
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
    5d72:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d74:	9b 85       	ldd	r25, Y+11	; 0x0b
    5d76:	9b 83       	std	Y+3, r25	; 0x03
    5d78:	8a 83       	std	Y+2, r24	; 0x02
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    5d7a:	0f b6       	in	r0, 0x3f	; 63
    5d7c:	f8 94       	cli
    5d7e:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    5d80:	ea 81       	ldd	r30, Y+2	; 0x02
    5d82:	fb 81       	ldd	r31, Y+3	; 0x03
    5d84:	82 8d       	ldd	r24, Z+26	; 0x1a
    5d86:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    5d88:	89 81       	ldd	r24, Y+1	; 0x01
    5d8a:	88 23       	and	r24, r24
    5d8c:	31 f1       	breq	.+76     	; 0x5dda <xQueuePeek+0x8a>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    5d8e:	ea 81       	ldd	r30, Y+2	; 0x02
    5d90:	fb 81       	ldd	r31, Y+3	; 0x03
    5d92:	86 81       	ldd	r24, Z+6	; 0x06
    5d94:	97 81       	ldd	r25, Z+7	; 0x07
    5d96:	9d 83       	std	Y+5, r25	; 0x05
    5d98:	8c 83       	std	Y+4, r24	; 0x04

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    5d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    5d9c:	9b 81       	ldd	r25, Y+3	; 0x03
    5d9e:	2c 85       	ldd	r18, Y+12	; 0x0c
    5da0:	3d 85       	ldd	r19, Y+13	; 0x0d
    5da2:	b9 01       	movw	r22, r18
    5da4:	0e 94 fe 30 	call	0x61fc	; 0x61fc <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    5da8:	ea 81       	ldd	r30, Y+2	; 0x02
    5daa:	fb 81       	ldd	r31, Y+3	; 0x03
    5dac:	8c 81       	ldd	r24, Y+4	; 0x04
    5dae:	9d 81       	ldd	r25, Y+5	; 0x05
    5db0:	97 83       	std	Z+7, r25	; 0x07
    5db2:	86 83       	std	Z+6, r24	; 0x06

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    5db4:	ea 81       	ldd	r30, Y+2	; 0x02
    5db6:	fb 81       	ldd	r31, Y+3	; 0x03
    5db8:	81 89       	ldd	r24, Z+17	; 0x11
    5dba:	88 23       	and	r24, r24
    5dbc:	49 f0       	breq	.+18     	; 0x5dd0 <xQueuePeek+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    5dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    5dc2:	41 96       	adiw	r24, 0x11	; 17
    5dc4:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <xTaskRemoveFromEventList>
    5dc8:	88 23       	and	r24, r24
    5dca:	11 f0       	breq	.+4      	; 0x5dd0 <xQueuePeek+0x80>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
    5dcc:	0e 94 bf 29 	call	0x537e	; 0x537e <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    5dd0:	0f 90       	pop	r0
    5dd2:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    5dd4:	81 e0       	ldi	r24, 0x01	; 1
    5dd6:	88 8b       	std	Y+16, r24	; 0x10
    5dd8:	63 c0       	rjmp	.+198    	; 0x5ea0 <xQueuePeek+0x150>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    5dda:	8e 85       	ldd	r24, Y+14	; 0x0e
    5ddc:	9f 85       	ldd	r25, Y+15	; 0x0f
    5dde:	00 97       	sbiw	r24, 0x00	; 0
    5de0:	21 f4       	brne	.+8      	; 0x5dea <xQueuePeek+0x9a>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    5de2:	0f 90       	pop	r0
    5de4:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    5de6:	18 8a       	std	Y+16, r1	; 0x10
    5de8:	5b c0       	rjmp	.+182    	; 0x5ea0 <xQueuePeek+0x150>
				}
				else if( xEntryTimeSet == pdFALSE )
    5dea:	8e 81       	ldd	r24, Y+6	; 0x06
    5dec:	88 23       	and	r24, r24
    5dee:	31 f4       	brne	.+12     	; 0x5dfc <xQueuePeek+0xac>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    5df0:	ce 01       	movw	r24, r28
    5df2:	07 96       	adiw	r24, 0x07	; 7
    5df4:	0e 94 8c 38 	call	0x7118	; 0x7118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    5df8:	81 e0       	ldi	r24, 0x01	; 1
    5dfa:	8e 83       	std	Y+6, r24	; 0x06
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    5dfc:	0f 90       	pop	r0
    5dfe:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    5e00:	0e 94 06 35 	call	0x6a0c	; 0x6a0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    5e04:	0f b6       	in	r0, 0x3f	; 63
    5e06:	f8 94       	cli
    5e08:	0f 92       	push	r0
    5e0a:	ea 81       	ldd	r30, Y+2	; 0x02
    5e0c:	fb 81       	ldd	r31, Y+3	; 0x03
    5e0e:	85 8d       	ldd	r24, Z+29	; 0x1d
    5e10:	8f 3f       	cpi	r24, 0xFF	; 255
    5e12:	19 f4       	brne	.+6      	; 0x5e1a <xQueuePeek+0xca>
    5e14:	ea 81       	ldd	r30, Y+2	; 0x02
    5e16:	fb 81       	ldd	r31, Y+3	; 0x03
    5e18:	15 8e       	std	Z+29, r1	; 0x1d
    5e1a:	ea 81       	ldd	r30, Y+2	; 0x02
    5e1c:	fb 81       	ldd	r31, Y+3	; 0x03
    5e1e:	86 8d       	ldd	r24, Z+30	; 0x1e
    5e20:	8f 3f       	cpi	r24, 0xFF	; 255
    5e22:	19 f4       	brne	.+6      	; 0x5e2a <xQueuePeek+0xda>
    5e24:	ea 81       	ldd	r30, Y+2	; 0x02
    5e26:	fb 81       	ldd	r31, Y+3	; 0x03
    5e28:	16 8e       	std	Z+30, r1	; 0x1e
    5e2a:	0f 90       	pop	r0
    5e2c:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    5e2e:	ce 01       	movw	r24, r28
    5e30:	07 96       	adiw	r24, 0x07	; 7
    5e32:	9e 01       	movw	r18, r28
    5e34:	22 5f       	subi	r18, 0xF2	; 242
    5e36:	3f 4f       	sbci	r19, 0xFF	; 255
    5e38:	b9 01       	movw	r22, r18
    5e3a:	0e 94 a5 38 	call	0x714a	; 0x714a <xTaskCheckForTimeOut>
    5e3e:	88 23       	and	r24, r24
    5e40:	09 f5       	brne	.+66     	; 0x5e84 <xQueuePeek+0x134>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    5e42:	8a 81       	ldd	r24, Y+2	; 0x02
    5e44:	9b 81       	ldd	r25, Y+3	; 0x03
    5e46:	0e 94 98 31 	call	0x6330	; 0x6330 <prvIsQueueEmpty>
    5e4a:	88 23       	and	r24, r24
    5e4c:	a1 f0       	breq	.+40     	; 0x5e76 <xQueuePeek+0x126>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    5e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    5e50:	9b 81       	ldd	r25, Y+3	; 0x03
    5e52:	41 96       	adiw	r24, 0x11	; 17
    5e54:	2e 85       	ldd	r18, Y+14	; 0x0e
    5e56:	3f 85       	ldd	r19, Y+15	; 0x0f
    5e58:	b9 01       	movw	r22, r18
    5e5a:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    5e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    5e60:	9b 81       	ldd	r25, Y+3	; 0x03
    5e62:	0e 94 45 31 	call	0x628a	; 0x628a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    5e66:	0e 94 12 35 	call	0x6a24	; 0x6a24 <xTaskResumeAll>
    5e6a:	88 23       	and	r24, r24
    5e6c:	09 f0       	breq	.+2      	; 0x5e70 <xQueuePeek+0x120>
    5e6e:	85 cf       	rjmp	.-246    	; 0x5d7a <xQueuePeek+0x2a>
				{
					portYIELD_WITHIN_API();
    5e70:	0e 94 bf 29 	call	0x537e	; 0x537e <vPortYield>
    5e74:	82 cf       	rjmp	.-252    	; 0x5d7a <xQueuePeek+0x2a>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
    5e76:	8a 81       	ldd	r24, Y+2	; 0x02
    5e78:	9b 81       	ldd	r25, Y+3	; 0x03
    5e7a:	0e 94 45 31 	call	0x628a	; 0x628a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    5e7e:	0e 94 12 35 	call	0x6a24	; 0x6a24 <xTaskResumeAll>
    5e82:	7b cf       	rjmp	.-266    	; 0x5d7a <xQueuePeek+0x2a>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
    5e84:	8a 81       	ldd	r24, Y+2	; 0x02
    5e86:	9b 81       	ldd	r25, Y+3	; 0x03
    5e88:	0e 94 45 31 	call	0x628a	; 0x628a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    5e8c:	0e 94 12 35 	call	0x6a24	; 0x6a24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    5e90:	8a 81       	ldd	r24, Y+2	; 0x02
    5e92:	9b 81       	ldd	r25, Y+3	; 0x03
    5e94:	0e 94 98 31 	call	0x6330	; 0x6330 <prvIsQueueEmpty>
    5e98:	88 23       	and	r24, r24
    5e9a:	09 f4       	brne	.+2      	; 0x5e9e <xQueuePeek+0x14e>
    5e9c:	6e cf       	rjmp	.-292    	; 0x5d7a <xQueuePeek+0x2a>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    5e9e:	18 8a       	std	Y+16, r1	; 0x10
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
    5ea0:	88 89       	ldd	r24, Y+16	; 0x10
}
    5ea2:	60 96       	adiw	r28, 0x10	; 16
    5ea4:	0f b6       	in	r0, 0x3f	; 63
    5ea6:	f8 94       	cli
    5ea8:	de bf       	out	0x3e, r29	; 62
    5eaa:	0f be       	out	0x3f, r0	; 63
    5eac:	cd bf       	out	0x3d, r28	; 61
    5eae:	cf 91       	pop	r28
    5eb0:	df 91       	pop	r29
    5eb2:	08 95       	ret

00005eb4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    5eb4:	df 93       	push	r29
    5eb6:	cf 93       	push	r28
    5eb8:	cd b7       	in	r28, 0x3d	; 61
    5eba:	de b7       	in	r29, 0x3e	; 62
    5ebc:	2c 97       	sbiw	r28, 0x0c	; 12
    5ebe:	0f b6       	in	r0, 0x3f	; 63
    5ec0:	f8 94       	cli
    5ec2:	de bf       	out	0x3e, r29	; 62
    5ec4:	0f be       	out	0x3f, r0	; 63
    5ec6:	cd bf       	out	0x3d, r28	; 61
    5ec8:	98 87       	std	Y+8, r25	; 0x08
    5eca:	8f 83       	std	Y+7, r24	; 0x07
    5ecc:	7a 87       	std	Y+10, r23	; 0x0a
    5ece:	69 87       	std	Y+9, r22	; 0x09
    5ed0:	5c 87       	std	Y+12, r21	; 0x0c
    5ed2:	4b 87       	std	Y+11, r20	; 0x0b
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    5ed4:	8f 81       	ldd	r24, Y+7	; 0x07
    5ed6:	98 85       	ldd	r25, Y+8	; 0x08
    5ed8:	9c 83       	std	Y+4, r25	; 0x04
    5eda:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5edc:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    5ede:	eb 81       	ldd	r30, Y+3	; 0x03
    5ee0:	fc 81       	ldd	r31, Y+4	; 0x04
    5ee2:	82 8d       	ldd	r24, Z+26	; 0x1a
    5ee4:	8a 83       	std	Y+2, r24	; 0x02

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    5ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    5ee8:	88 23       	and	r24, r24
    5eea:	81 f1       	breq	.+96     	; 0x5f4c <xQueueReceiveFromISR+0x98>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    5eec:	eb 81       	ldd	r30, Y+3	; 0x03
    5eee:	fc 81       	ldd	r31, Y+4	; 0x04
    5ef0:	85 8d       	ldd	r24, Z+29	; 0x1d
    5ef2:	89 83       	std	Y+1, r24	; 0x01

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    5ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    5ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    5ef8:	29 85       	ldd	r18, Y+9	; 0x09
    5efa:	3a 85       	ldd	r19, Y+10	; 0x0a
    5efc:	b9 01       	movw	r22, r18
    5efe:	0e 94 fe 30 	call	0x61fc	; 0x61fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    5f02:	8a 81       	ldd	r24, Y+2	; 0x02
    5f04:	81 50       	subi	r24, 0x01	; 1
    5f06:	eb 81       	ldd	r30, Y+3	; 0x03
    5f08:	fc 81       	ldd	r31, Y+4	; 0x04
    5f0a:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    5f0c:	89 81       	ldd	r24, Y+1	; 0x01
    5f0e:	8f 3f       	cpi	r24, 0xFF	; 255
    5f10:	a9 f4       	brne	.+42     	; 0x5f3c <xQueueReceiveFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5f12:	eb 81       	ldd	r30, Y+3	; 0x03
    5f14:	fc 81       	ldd	r31, Y+4	; 0x04
    5f16:	80 85       	ldd	r24, Z+8	; 0x08
    5f18:	88 23       	and	r24, r24
    5f1a:	a9 f0       	breq	.+42     	; 0x5f46 <xQueueReceiveFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    5f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    5f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    5f20:	08 96       	adiw	r24, 0x08	; 8
    5f22:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <xTaskRemoveFromEventList>
    5f26:	88 23       	and	r24, r24
    5f28:	71 f0       	breq	.+28     	; 0x5f46 <xQueueReceiveFromISR+0x92>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    5f2a:	8b 85       	ldd	r24, Y+11	; 0x0b
    5f2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    5f2e:	00 97       	sbiw	r24, 0x00	; 0
    5f30:	51 f0       	breq	.+20     	; 0x5f46 <xQueueReceiveFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    5f32:	eb 85       	ldd	r30, Y+11	; 0x0b
    5f34:	fc 85       	ldd	r31, Y+12	; 0x0c
    5f36:	81 e0       	ldi	r24, 0x01	; 1
    5f38:	80 83       	st	Z, r24
    5f3a:	05 c0       	rjmp	.+10     	; 0x5f46 <xQueueReceiveFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    5f3c:	89 81       	ldd	r24, Y+1	; 0x01
    5f3e:	8f 5f       	subi	r24, 0xFF	; 255
    5f40:	eb 81       	ldd	r30, Y+3	; 0x03
    5f42:	fc 81       	ldd	r31, Y+4	; 0x04
    5f44:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    5f46:	81 e0       	ldi	r24, 0x01	; 1
    5f48:	8e 83       	std	Y+6, r24	; 0x06
    5f4a:	01 c0       	rjmp	.+2      	; 0x5f4e <xQueueReceiveFromISR+0x9a>
		}
		else
		{
			xReturn = pdFAIL;
    5f4c:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    5f4e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    5f50:	2c 96       	adiw	r28, 0x0c	; 12
    5f52:	0f b6       	in	r0, 0x3f	; 63
    5f54:	f8 94       	cli
    5f56:	de bf       	out	0x3e, r29	; 62
    5f58:	0f be       	out	0x3f, r0	; 63
    5f5a:	cd bf       	out	0x3d, r28	; 61
    5f5c:	cf 91       	pop	r28
    5f5e:	df 91       	pop	r29
    5f60:	08 95       	ret

00005f62 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    5f62:	df 93       	push	r29
    5f64:	cf 93       	push	r28
    5f66:	cd b7       	in	r28, 0x3d	; 61
    5f68:	de b7       	in	r29, 0x3e	; 62
    5f6a:	2a 97       	sbiw	r28, 0x0a	; 10
    5f6c:	0f b6       	in	r0, 0x3f	; 63
    5f6e:	f8 94       	cli
    5f70:	de bf       	out	0x3e, r29	; 62
    5f72:	0f be       	out	0x3f, r0	; 63
    5f74:	cd bf       	out	0x3d, r28	; 61
    5f76:	98 87       	std	Y+8, r25	; 0x08
    5f78:	8f 83       	std	Y+7, r24	; 0x07
    5f7a:	7a 87       	std	Y+10, r23	; 0x0a
    5f7c:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
    5f7e:	8f 81       	ldd	r24, Y+7	; 0x07
    5f80:	98 85       	ldd	r25, Y+8	; 0x08
    5f82:	9a 83       	std	Y+2, r25	; 0x02
    5f84:	89 83       	std	Y+1, r24	; 0x01
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5f86:	1d 82       	std	Y+5, r1	; 0x05
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    5f88:	e9 81       	ldd	r30, Y+1	; 0x01
    5f8a:	fa 81       	ldd	r31, Y+2	; 0x02
    5f8c:	82 8d       	ldd	r24, Z+26	; 0x1a
    5f8e:	88 23       	and	r24, r24
    5f90:	b1 f0       	breq	.+44     	; 0x5fbe <xQueuePeekFromISR+0x5c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    5f92:	e9 81       	ldd	r30, Y+1	; 0x01
    5f94:	fa 81       	ldd	r31, Y+2	; 0x02
    5f96:	86 81       	ldd	r24, Z+6	; 0x06
    5f98:	97 81       	ldd	r25, Z+7	; 0x07
    5f9a:	9c 83       	std	Y+4, r25	; 0x04
    5f9c:	8b 83       	std	Y+3, r24	; 0x03
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    5f9e:	89 81       	ldd	r24, Y+1	; 0x01
    5fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    5fa2:	29 85       	ldd	r18, Y+9	; 0x09
    5fa4:	3a 85       	ldd	r19, Y+10	; 0x0a
    5fa6:	b9 01       	movw	r22, r18
    5fa8:	0e 94 fe 30 	call	0x61fc	; 0x61fc <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    5fac:	e9 81       	ldd	r30, Y+1	; 0x01
    5fae:	fa 81       	ldd	r31, Y+2	; 0x02
    5fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    5fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    5fb4:	97 83       	std	Z+7, r25	; 0x07
    5fb6:	86 83       	std	Z+6, r24	; 0x06

			xReturn = pdPASS;
    5fb8:	81 e0       	ldi	r24, 0x01	; 1
    5fba:	8e 83       	std	Y+6, r24	; 0x06
    5fbc:	01 c0       	rjmp	.+2      	; 0x5fc0 <xQueuePeekFromISR+0x5e>
		}
		else
		{
			xReturn = pdFAIL;
    5fbe:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    5fc0:	8e 81       	ldd	r24, Y+6	; 0x06
}
    5fc2:	2a 96       	adiw	r28, 0x0a	; 10
    5fc4:	0f b6       	in	r0, 0x3f	; 63
    5fc6:	f8 94       	cli
    5fc8:	de bf       	out	0x3e, r29	; 62
    5fca:	0f be       	out	0x3f, r0	; 63
    5fcc:	cd bf       	out	0x3d, r28	; 61
    5fce:	cf 91       	pop	r28
    5fd0:	df 91       	pop	r29
    5fd2:	08 95       	ret

00005fd4 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    5fd4:	df 93       	push	r29
    5fd6:	cf 93       	push	r28
    5fd8:	00 d0       	rcall	.+0      	; 0x5fda <uxQueueMessagesWaiting+0x6>
    5fda:	0f 92       	push	r0
    5fdc:	cd b7       	in	r28, 0x3d	; 61
    5fde:	de b7       	in	r29, 0x3e	; 62
    5fe0:	9b 83       	std	Y+3, r25	; 0x03
    5fe2:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    5fe4:	0f b6       	in	r0, 0x3f	; 63
    5fe6:	f8 94       	cli
    5fe8:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    5fea:	ea 81       	ldd	r30, Y+2	; 0x02
    5fec:	fb 81       	ldd	r31, Y+3	; 0x03
    5fee:	82 8d       	ldd	r24, Z+26	; 0x1a
    5ff0:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    5ff2:	0f 90       	pop	r0
    5ff4:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    5ff6:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    5ff8:	0f 90       	pop	r0
    5ffa:	0f 90       	pop	r0
    5ffc:	0f 90       	pop	r0
    5ffe:	cf 91       	pop	r28
    6000:	df 91       	pop	r29
    6002:	08 95       	ret

00006004 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    6004:	df 93       	push	r29
    6006:	cf 93       	push	r28
    6008:	00 d0       	rcall	.+0      	; 0x600a <uxQueueSpacesAvailable+0x6>
    600a:	00 d0       	rcall	.+0      	; 0x600c <uxQueueSpacesAvailable+0x8>
    600c:	0f 92       	push	r0
    600e:	cd b7       	in	r28, 0x3d	; 61
    6010:	de b7       	in	r29, 0x3e	; 62
    6012:	9d 83       	std	Y+5, r25	; 0x05
    6014:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
    6016:	8c 81       	ldd	r24, Y+4	; 0x04
    6018:	9d 81       	ldd	r25, Y+5	; 0x05
    601a:	9a 83       	std	Y+2, r25	; 0x02
    601c:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    601e:	0f b6       	in	r0, 0x3f	; 63
    6020:	f8 94       	cli
    6022:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    6024:	e9 81       	ldd	r30, Y+1	; 0x01
    6026:	fa 81       	ldd	r31, Y+2	; 0x02
    6028:	93 8d       	ldd	r25, Z+27	; 0x1b
    602a:	e9 81       	ldd	r30, Y+1	; 0x01
    602c:	fa 81       	ldd	r31, Y+2	; 0x02
    602e:	82 8d       	ldd	r24, Z+26	; 0x1a
    6030:	29 2f       	mov	r18, r25
    6032:	28 1b       	sub	r18, r24
    6034:	82 2f       	mov	r24, r18
    6036:	8b 83       	std	Y+3, r24	; 0x03
	}
	taskEXIT_CRITICAL();
    6038:	0f 90       	pop	r0
    603a:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    603c:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    603e:	0f 90       	pop	r0
    6040:	0f 90       	pop	r0
    6042:	0f 90       	pop	r0
    6044:	0f 90       	pop	r0
    6046:	0f 90       	pop	r0
    6048:	cf 91       	pop	r28
    604a:	df 91       	pop	r29
    604c:	08 95       	ret

0000604e <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    604e:	df 93       	push	r29
    6050:	cf 93       	push	r28
    6052:	00 d0       	rcall	.+0      	; 0x6054 <uxQueueMessagesWaitingFromISR+0x6>
    6054:	00 d0       	rcall	.+0      	; 0x6056 <uxQueueMessagesWaitingFromISR+0x8>
    6056:	0f 92       	push	r0
    6058:	cd b7       	in	r28, 0x3d	; 61
    605a:	de b7       	in	r29, 0x3e	; 62
    605c:	9d 83       	std	Y+5, r25	; 0x05
    605e:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
    6060:	8c 81       	ldd	r24, Y+4	; 0x04
    6062:	9d 81       	ldd	r25, Y+5	; 0x05
    6064:	9a 83       	std	Y+2, r25	; 0x02
    6066:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
    6068:	e9 81       	ldd	r30, Y+1	; 0x01
    606a:	fa 81       	ldd	r31, Y+2	; 0x02
    606c:	82 8d       	ldd	r24, Z+26	; 0x1a
    606e:	8b 83       	std	Y+3, r24	; 0x03

	return uxReturn;
    6070:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    6072:	0f 90       	pop	r0
    6074:	0f 90       	pop	r0
    6076:	0f 90       	pop	r0
    6078:	0f 90       	pop	r0
    607a:	0f 90       	pop	r0
    607c:	cf 91       	pop	r28
    607e:	df 91       	pop	r29
    6080:	08 95       	ret

00006082 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    6082:	df 93       	push	r29
    6084:	cf 93       	push	r28
    6086:	00 d0       	rcall	.+0      	; 0x6088 <vQueueDelete+0x6>
    6088:	00 d0       	rcall	.+0      	; 0x608a <vQueueDelete+0x8>
    608a:	cd b7       	in	r28, 0x3d	; 61
    608c:	de b7       	in	r29, 0x3e	; 62
    608e:	9c 83       	std	Y+4, r25	; 0x04
    6090:	8b 83       	std	Y+3, r24	; 0x03
Queue_t * const pxQueue = xQueue;
    6092:	8b 81       	ldd	r24, Y+3	; 0x03
    6094:	9c 81       	ldd	r25, Y+4	; 0x04
    6096:	9a 83       	std	Y+2, r25	; 0x02
    6098:	89 83       	std	Y+1, r24	; 0x01

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    609a:	89 81       	ldd	r24, Y+1	; 0x01
    609c:	9a 81       	ldd	r25, Y+2	; 0x02
    609e:	0e 94 14 26 	call	0x4c28	; 0x4c28 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    60a2:	0f 90       	pop	r0
    60a4:	0f 90       	pop	r0
    60a6:	0f 90       	pop	r0
    60a8:	0f 90       	pop	r0
    60aa:	cf 91       	pop	r28
    60ac:	df 91       	pop	r29
    60ae:	08 95       	ret

000060b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    60b0:	df 93       	push	r29
    60b2:	cf 93       	push	r28
    60b4:	cd b7       	in	r28, 0x3d	; 61
    60b6:	de b7       	in	r29, 0x3e	; 62
    60b8:	27 97       	sbiw	r28, 0x07	; 7
    60ba:	0f b6       	in	r0, 0x3f	; 63
    60bc:	f8 94       	cli
    60be:	de bf       	out	0x3e, r29	; 62
    60c0:	0f be       	out	0x3f, r0	; 63
    60c2:	cd bf       	out	0x3d, r28	; 61
    60c4:	9c 83       	std	Y+4, r25	; 0x04
    60c6:	8b 83       	std	Y+3, r24	; 0x03
    60c8:	7e 83       	std	Y+6, r23	; 0x06
    60ca:	6d 83       	std	Y+5, r22	; 0x05
    60cc:	4f 83       	std	Y+7, r20	; 0x07
BaseType_t xReturn = pdFALSE;
    60ce:	1a 82       	std	Y+2, r1	; 0x02
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    60d0:	eb 81       	ldd	r30, Y+3	; 0x03
    60d2:	fc 81       	ldd	r31, Y+4	; 0x04
    60d4:	82 8d       	ldd	r24, Z+26	; 0x1a
    60d6:	89 83       	std	Y+1, r24	; 0x01

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    60d8:	eb 81       	ldd	r30, Y+3	; 0x03
    60da:	fc 81       	ldd	r31, Y+4	; 0x04
    60dc:	84 8d       	ldd	r24, Z+28	; 0x1c
    60de:	88 23       	and	r24, r24
    60e0:	09 f4       	brne	.+2      	; 0x60e4 <prvCopyDataToQueue+0x34>
    60e2:	7d c0       	rjmp	.+250    	; 0x61de <prvCopyDataToQueue+0x12e>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    60e4:	8f 81       	ldd	r24, Y+7	; 0x07
    60e6:	88 23       	and	r24, r24
    60e8:	99 f5       	brne	.+102    	; 0x6150 <prvCopyDataToQueue+0xa0>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    60ea:	eb 81       	ldd	r30, Y+3	; 0x03
    60ec:	fc 81       	ldd	r31, Y+4	; 0x04
    60ee:	62 81       	ldd	r22, Z+2	; 0x02
    60f0:	73 81       	ldd	r23, Z+3	; 0x03
    60f2:	eb 81       	ldd	r30, Y+3	; 0x03
    60f4:	fc 81       	ldd	r31, Y+4	; 0x04
    60f6:	84 8d       	ldd	r24, Z+28	; 0x1c
    60f8:	48 2f       	mov	r20, r24
    60fa:	50 e0       	ldi	r21, 0x00	; 0
    60fc:	2d 81       	ldd	r18, Y+5	; 0x05
    60fe:	3e 81       	ldd	r19, Y+6	; 0x06
    6100:	cb 01       	movw	r24, r22
    6102:	b9 01       	movw	r22, r18
    6104:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    6108:	eb 81       	ldd	r30, Y+3	; 0x03
    610a:	fc 81       	ldd	r31, Y+4	; 0x04
    610c:	22 81       	ldd	r18, Z+2	; 0x02
    610e:	33 81       	ldd	r19, Z+3	; 0x03
    6110:	eb 81       	ldd	r30, Y+3	; 0x03
    6112:	fc 81       	ldd	r31, Y+4	; 0x04
    6114:	84 8d       	ldd	r24, Z+28	; 0x1c
    6116:	88 2f       	mov	r24, r24
    6118:	90 e0       	ldi	r25, 0x00	; 0
    611a:	82 0f       	add	r24, r18
    611c:	93 1f       	adc	r25, r19
    611e:	eb 81       	ldd	r30, Y+3	; 0x03
    6120:	fc 81       	ldd	r31, Y+4	; 0x04
    6122:	93 83       	std	Z+3, r25	; 0x03
    6124:	82 83       	std	Z+2, r24	; 0x02
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    6126:	eb 81       	ldd	r30, Y+3	; 0x03
    6128:	fc 81       	ldd	r31, Y+4	; 0x04
    612a:	22 81       	ldd	r18, Z+2	; 0x02
    612c:	33 81       	ldd	r19, Z+3	; 0x03
    612e:	eb 81       	ldd	r30, Y+3	; 0x03
    6130:	fc 81       	ldd	r31, Y+4	; 0x04
    6132:	84 81       	ldd	r24, Z+4	; 0x04
    6134:	95 81       	ldd	r25, Z+5	; 0x05
    6136:	28 17       	cp	r18, r24
    6138:	39 07       	cpc	r19, r25
    613a:	08 f4       	brcc	.+2      	; 0x613e <prvCopyDataToQueue+0x8e>
    613c:	50 c0       	rjmp	.+160    	; 0x61de <prvCopyDataToQueue+0x12e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    613e:	eb 81       	ldd	r30, Y+3	; 0x03
    6140:	fc 81       	ldd	r31, Y+4	; 0x04
    6142:	80 81       	ld	r24, Z
    6144:	91 81       	ldd	r25, Z+1	; 0x01
    6146:	eb 81       	ldd	r30, Y+3	; 0x03
    6148:	fc 81       	ldd	r31, Y+4	; 0x04
    614a:	93 83       	std	Z+3, r25	; 0x03
    614c:	82 83       	std	Z+2, r24	; 0x02
    614e:	47 c0       	rjmp	.+142    	; 0x61de <prvCopyDataToQueue+0x12e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
    6150:	eb 81       	ldd	r30, Y+3	; 0x03
    6152:	fc 81       	ldd	r31, Y+4	; 0x04
    6154:	66 81       	ldd	r22, Z+6	; 0x06
    6156:	77 81       	ldd	r23, Z+7	; 0x07
    6158:	eb 81       	ldd	r30, Y+3	; 0x03
    615a:	fc 81       	ldd	r31, Y+4	; 0x04
    615c:	84 8d       	ldd	r24, Z+28	; 0x1c
    615e:	48 2f       	mov	r20, r24
    6160:	50 e0       	ldi	r21, 0x00	; 0
    6162:	2d 81       	ldd	r18, Y+5	; 0x05
    6164:	3e 81       	ldd	r19, Y+6	; 0x06
    6166:	cb 01       	movw	r24, r22
    6168:	b9 01       	movw	r22, r18
    616a:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    616e:	eb 81       	ldd	r30, Y+3	; 0x03
    6170:	fc 81       	ldd	r31, Y+4	; 0x04
    6172:	26 81       	ldd	r18, Z+6	; 0x06
    6174:	37 81       	ldd	r19, Z+7	; 0x07
    6176:	eb 81       	ldd	r30, Y+3	; 0x03
    6178:	fc 81       	ldd	r31, Y+4	; 0x04
    617a:	84 8d       	ldd	r24, Z+28	; 0x1c
    617c:	88 2f       	mov	r24, r24
    617e:	90 e0       	ldi	r25, 0x00	; 0
    6180:	90 95       	com	r25
    6182:	81 95       	neg	r24
    6184:	9f 4f       	sbci	r25, 0xFF	; 255
    6186:	82 0f       	add	r24, r18
    6188:	93 1f       	adc	r25, r19
    618a:	eb 81       	ldd	r30, Y+3	; 0x03
    618c:	fc 81       	ldd	r31, Y+4	; 0x04
    618e:	97 83       	std	Z+7, r25	; 0x07
    6190:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    6192:	eb 81       	ldd	r30, Y+3	; 0x03
    6194:	fc 81       	ldd	r31, Y+4	; 0x04
    6196:	26 81       	ldd	r18, Z+6	; 0x06
    6198:	37 81       	ldd	r19, Z+7	; 0x07
    619a:	eb 81       	ldd	r30, Y+3	; 0x03
    619c:	fc 81       	ldd	r31, Y+4	; 0x04
    619e:	80 81       	ld	r24, Z
    61a0:	91 81       	ldd	r25, Z+1	; 0x01
    61a2:	28 17       	cp	r18, r24
    61a4:	39 07       	cpc	r19, r25
    61a6:	90 f4       	brcc	.+36     	; 0x61cc <prvCopyDataToQueue+0x11c>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    61a8:	eb 81       	ldd	r30, Y+3	; 0x03
    61aa:	fc 81       	ldd	r31, Y+4	; 0x04
    61ac:	24 81       	ldd	r18, Z+4	; 0x04
    61ae:	35 81       	ldd	r19, Z+5	; 0x05
    61b0:	eb 81       	ldd	r30, Y+3	; 0x03
    61b2:	fc 81       	ldd	r31, Y+4	; 0x04
    61b4:	84 8d       	ldd	r24, Z+28	; 0x1c
    61b6:	88 2f       	mov	r24, r24
    61b8:	90 e0       	ldi	r25, 0x00	; 0
    61ba:	90 95       	com	r25
    61bc:	81 95       	neg	r24
    61be:	9f 4f       	sbci	r25, 0xFF	; 255
    61c0:	82 0f       	add	r24, r18
    61c2:	93 1f       	adc	r25, r19
    61c4:	eb 81       	ldd	r30, Y+3	; 0x03
    61c6:	fc 81       	ldd	r31, Y+4	; 0x04
    61c8:	97 83       	std	Z+7, r25	; 0x07
    61ca:	86 83       	std	Z+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    61cc:	8f 81       	ldd	r24, Y+7	; 0x07
    61ce:	82 30       	cpi	r24, 0x02	; 2
    61d0:	31 f4       	brne	.+12     	; 0x61de <prvCopyDataToQueue+0x12e>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    61d2:	89 81       	ldd	r24, Y+1	; 0x01
    61d4:	88 23       	and	r24, r24
    61d6:	19 f0       	breq	.+6      	; 0x61de <prvCopyDataToQueue+0x12e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    61d8:	89 81       	ldd	r24, Y+1	; 0x01
    61da:	81 50       	subi	r24, 0x01	; 1
    61dc:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    61de:	89 81       	ldd	r24, Y+1	; 0x01
    61e0:	8f 5f       	subi	r24, 0xFF	; 255
    61e2:	eb 81       	ldd	r30, Y+3	; 0x03
    61e4:	fc 81       	ldd	r31, Y+4	; 0x04
    61e6:	82 8f       	std	Z+26, r24	; 0x1a

	return xReturn;
    61e8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    61ea:	27 96       	adiw	r28, 0x07	; 7
    61ec:	0f b6       	in	r0, 0x3f	; 63
    61ee:	f8 94       	cli
    61f0:	de bf       	out	0x3e, r29	; 62
    61f2:	0f be       	out	0x3f, r0	; 63
    61f4:	cd bf       	out	0x3d, r28	; 61
    61f6:	cf 91       	pop	r28
    61f8:	df 91       	pop	r29
    61fa:	08 95       	ret

000061fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    61fc:	df 93       	push	r29
    61fe:	cf 93       	push	r28
    6200:	00 d0       	rcall	.+0      	; 0x6202 <prvCopyDataFromQueue+0x6>
    6202:	00 d0       	rcall	.+0      	; 0x6204 <prvCopyDataFromQueue+0x8>
    6204:	cd b7       	in	r28, 0x3d	; 61
    6206:	de b7       	in	r29, 0x3e	; 62
    6208:	9a 83       	std	Y+2, r25	; 0x02
    620a:	89 83       	std	Y+1, r24	; 0x01
    620c:	7c 83       	std	Y+4, r23	; 0x04
    620e:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    6210:	e9 81       	ldd	r30, Y+1	; 0x01
    6212:	fa 81       	ldd	r31, Y+2	; 0x02
    6214:	84 8d       	ldd	r24, Z+28	; 0x1c
    6216:	88 23       	and	r24, r24
    6218:	89 f1       	breq	.+98     	; 0x627c <prvCopyDataFromQueue+0x80>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    621a:	e9 81       	ldd	r30, Y+1	; 0x01
    621c:	fa 81       	ldd	r31, Y+2	; 0x02
    621e:	26 81       	ldd	r18, Z+6	; 0x06
    6220:	37 81       	ldd	r19, Z+7	; 0x07
    6222:	e9 81       	ldd	r30, Y+1	; 0x01
    6224:	fa 81       	ldd	r31, Y+2	; 0x02
    6226:	84 8d       	ldd	r24, Z+28	; 0x1c
    6228:	88 2f       	mov	r24, r24
    622a:	90 e0       	ldi	r25, 0x00	; 0
    622c:	82 0f       	add	r24, r18
    622e:	93 1f       	adc	r25, r19
    6230:	e9 81       	ldd	r30, Y+1	; 0x01
    6232:	fa 81       	ldd	r31, Y+2	; 0x02
    6234:	97 83       	std	Z+7, r25	; 0x07
    6236:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    6238:	e9 81       	ldd	r30, Y+1	; 0x01
    623a:	fa 81       	ldd	r31, Y+2	; 0x02
    623c:	26 81       	ldd	r18, Z+6	; 0x06
    623e:	37 81       	ldd	r19, Z+7	; 0x07
    6240:	e9 81       	ldd	r30, Y+1	; 0x01
    6242:	fa 81       	ldd	r31, Y+2	; 0x02
    6244:	84 81       	ldd	r24, Z+4	; 0x04
    6246:	95 81       	ldd	r25, Z+5	; 0x05
    6248:	28 17       	cp	r18, r24
    624a:	39 07       	cpc	r19, r25
    624c:	40 f0       	brcs	.+16     	; 0x625e <prvCopyDataFromQueue+0x62>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    624e:	e9 81       	ldd	r30, Y+1	; 0x01
    6250:	fa 81       	ldd	r31, Y+2	; 0x02
    6252:	80 81       	ld	r24, Z
    6254:	91 81       	ldd	r25, Z+1	; 0x01
    6256:	e9 81       	ldd	r30, Y+1	; 0x01
    6258:	fa 81       	ldd	r31, Y+2	; 0x02
    625a:	97 83       	std	Z+7, r25	; 0x07
    625c:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    625e:	e9 81       	ldd	r30, Y+1	; 0x01
    6260:	fa 81       	ldd	r31, Y+2	; 0x02
    6262:	46 81       	ldd	r20, Z+6	; 0x06
    6264:	57 81       	ldd	r21, Z+7	; 0x07
    6266:	e9 81       	ldd	r30, Y+1	; 0x01
    6268:	fa 81       	ldd	r31, Y+2	; 0x02
    626a:	84 8d       	ldd	r24, Z+28	; 0x1c
    626c:	28 2f       	mov	r18, r24
    626e:	30 e0       	ldi	r19, 0x00	; 0
    6270:	8b 81       	ldd	r24, Y+3	; 0x03
    6272:	9c 81       	ldd	r25, Y+4	; 0x04
    6274:	ba 01       	movw	r22, r20
    6276:	a9 01       	movw	r20, r18
    6278:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <memcpy>
	}
}
    627c:	0f 90       	pop	r0
    627e:	0f 90       	pop	r0
    6280:	0f 90       	pop	r0
    6282:	0f 90       	pop	r0
    6284:	cf 91       	pop	r28
    6286:	df 91       	pop	r29
    6288:	08 95       	ret

0000628a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    628a:	df 93       	push	r29
    628c:	cf 93       	push	r28
    628e:	00 d0       	rcall	.+0      	; 0x6290 <prvUnlockQueue+0x6>
    6290:	00 d0       	rcall	.+0      	; 0x6292 <prvUnlockQueue+0x8>
    6292:	cd b7       	in	r28, 0x3d	; 61
    6294:	de b7       	in	r29, 0x3e	; 62
    6296:	9c 83       	std	Y+4, r25	; 0x04
    6298:	8b 83       	std	Y+3, r24	; 0x03

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    629a:	0f b6       	in	r0, 0x3f	; 63
    629c:	f8 94       	cli
    629e:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
    62a0:	eb 81       	ldd	r30, Y+3	; 0x03
    62a2:	fc 81       	ldd	r31, Y+4	; 0x04
    62a4:	86 8d       	ldd	r24, Z+30	; 0x1e
    62a6:	8a 83       	std	Y+2, r24	; 0x02
    62a8:	11 c0       	rjmp	.+34     	; 0x62cc <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    62aa:	eb 81       	ldd	r30, Y+3	; 0x03
    62ac:	fc 81       	ldd	r31, Y+4	; 0x04
    62ae:	81 89       	ldd	r24, Z+17	; 0x11
    62b0:	88 23       	and	r24, r24
    62b2:	79 f0       	breq	.+30     	; 0x62d2 <prvUnlockQueue+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    62b4:	8b 81       	ldd	r24, Y+3	; 0x03
    62b6:	9c 81       	ldd	r25, Y+4	; 0x04
    62b8:	41 96       	adiw	r24, 0x11	; 17
    62ba:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <xTaskRemoveFromEventList>
    62be:	88 23       	and	r24, r24
    62c0:	11 f0       	breq	.+4      	; 0x62c6 <prvUnlockQueue+0x3c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    62c2:	0e 94 08 39 	call	0x7210	; 0x7210 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    62c6:	8a 81       	ldd	r24, Y+2	; 0x02
    62c8:	81 50       	subi	r24, 0x01	; 1
    62ca:	8a 83       	std	Y+2, r24	; 0x02
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    62cc:	8a 81       	ldd	r24, Y+2	; 0x02
    62ce:	18 16       	cp	r1, r24
    62d0:	64 f3       	brlt	.-40     	; 0x62aa <prvUnlockQueue+0x20>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    62d2:	eb 81       	ldd	r30, Y+3	; 0x03
    62d4:	fc 81       	ldd	r31, Y+4	; 0x04
    62d6:	8f ef       	ldi	r24, 0xFF	; 255
    62d8:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    62da:	0f 90       	pop	r0
    62dc:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    62de:	0f b6       	in	r0, 0x3f	; 63
    62e0:	f8 94       	cli
    62e2:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
    62e4:	eb 81       	ldd	r30, Y+3	; 0x03
    62e6:	fc 81       	ldd	r31, Y+4	; 0x04
    62e8:	85 8d       	ldd	r24, Z+29	; 0x1d
    62ea:	89 83       	std	Y+1, r24	; 0x01
    62ec:	11 c0       	rjmp	.+34     	; 0x6310 <prvUnlockQueue+0x86>

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    62ee:	eb 81       	ldd	r30, Y+3	; 0x03
    62f0:	fc 81       	ldd	r31, Y+4	; 0x04
    62f2:	80 85       	ldd	r24, Z+8	; 0x08
    62f4:	88 23       	and	r24, r24
    62f6:	79 f0       	breq	.+30     	; 0x6316 <prvUnlockQueue+0x8c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    62f8:	8b 81       	ldd	r24, Y+3	; 0x03
    62fa:	9c 81       	ldd	r25, Y+4	; 0x04
    62fc:	08 96       	adiw	r24, 0x08	; 8
    62fe:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <xTaskRemoveFromEventList>
    6302:	88 23       	and	r24, r24
    6304:	11 f0       	breq	.+4      	; 0x630a <prvUnlockQueue+0x80>
				{
					vTaskMissedYield();
    6306:	0e 94 08 39 	call	0x7210	; 0x7210 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    630a:	89 81       	ldd	r24, Y+1	; 0x01
    630c:	81 50       	subi	r24, 0x01	; 1
    630e:	89 83       	std	Y+1, r24	; 0x01
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    6310:	89 81       	ldd	r24, Y+1	; 0x01
    6312:	18 16       	cp	r1, r24
    6314:	64 f3       	brlt	.-40     	; 0x62ee <prvUnlockQueue+0x64>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    6316:	eb 81       	ldd	r30, Y+3	; 0x03
    6318:	fc 81       	ldd	r31, Y+4	; 0x04
    631a:	8f ef       	ldi	r24, 0xFF	; 255
    631c:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    631e:	0f 90       	pop	r0
    6320:	0f be       	out	0x3f, r0	; 63
}
    6322:	0f 90       	pop	r0
    6324:	0f 90       	pop	r0
    6326:	0f 90       	pop	r0
    6328:	0f 90       	pop	r0
    632a:	cf 91       	pop	r28
    632c:	df 91       	pop	r29
    632e:	08 95       	ret

00006330 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    6330:	df 93       	push	r29
    6332:	cf 93       	push	r28
    6334:	00 d0       	rcall	.+0      	; 0x6336 <prvIsQueueEmpty+0x6>
    6336:	0f 92       	push	r0
    6338:	cd b7       	in	r28, 0x3d	; 61
    633a:	de b7       	in	r29, 0x3e	; 62
    633c:	9b 83       	std	Y+3, r25	; 0x03
    633e:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    6340:	0f b6       	in	r0, 0x3f	; 63
    6342:	f8 94       	cli
    6344:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    6346:	ea 81       	ldd	r30, Y+2	; 0x02
    6348:	fb 81       	ldd	r31, Y+3	; 0x03
    634a:	82 8d       	ldd	r24, Z+26	; 0x1a
    634c:	88 23       	and	r24, r24
    634e:	19 f4       	brne	.+6      	; 0x6356 <prvIsQueueEmpty+0x26>
		{
			xReturn = pdTRUE;
    6350:	81 e0       	ldi	r24, 0x01	; 1
    6352:	89 83       	std	Y+1, r24	; 0x01
    6354:	01 c0       	rjmp	.+2      	; 0x6358 <prvIsQueueEmpty+0x28>
		}
		else
		{
			xReturn = pdFALSE;
    6356:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    6358:	0f 90       	pop	r0
    635a:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    635c:	89 81       	ldd	r24, Y+1	; 0x01
}
    635e:	0f 90       	pop	r0
    6360:	0f 90       	pop	r0
    6362:	0f 90       	pop	r0
    6364:	cf 91       	pop	r28
    6366:	df 91       	pop	r29
    6368:	08 95       	ret

0000636a <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    636a:	df 93       	push	r29
    636c:	cf 93       	push	r28
    636e:	00 d0       	rcall	.+0      	; 0x6370 <xQueueIsQueueEmptyFromISR+0x6>
    6370:	00 d0       	rcall	.+0      	; 0x6372 <xQueueIsQueueEmptyFromISR+0x8>
    6372:	0f 92       	push	r0
    6374:	cd b7       	in	r28, 0x3d	; 61
    6376:	de b7       	in	r29, 0x3e	; 62
    6378:	9d 83       	std	Y+5, r25	; 0x05
    637a:	8c 83       	std	Y+4, r24	; 0x04
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
    637c:	8c 81       	ldd	r24, Y+4	; 0x04
    637e:	9d 81       	ldd	r25, Y+5	; 0x05
    6380:	9a 83       	std	Y+2, r25	; 0x02
    6382:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    6384:	e9 81       	ldd	r30, Y+1	; 0x01
    6386:	fa 81       	ldd	r31, Y+2	; 0x02
    6388:	82 8d       	ldd	r24, Z+26	; 0x1a
    638a:	88 23       	and	r24, r24
    638c:	19 f4       	brne	.+6      	; 0x6394 <xQueueIsQueueEmptyFromISR+0x2a>
	{
		xReturn = pdTRUE;
    638e:	81 e0       	ldi	r24, 0x01	; 1
    6390:	8b 83       	std	Y+3, r24	; 0x03
    6392:	01 c0       	rjmp	.+2      	; 0x6396 <xQueueIsQueueEmptyFromISR+0x2c>
	}
	else
	{
		xReturn = pdFALSE;
    6394:	1b 82       	std	Y+3, r1	; 0x03
	}

	return xReturn;
    6396:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    6398:	0f 90       	pop	r0
    639a:	0f 90       	pop	r0
    639c:	0f 90       	pop	r0
    639e:	0f 90       	pop	r0
    63a0:	0f 90       	pop	r0
    63a2:	cf 91       	pop	r28
    63a4:	df 91       	pop	r29
    63a6:	08 95       	ret

000063a8 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    63a8:	df 93       	push	r29
    63aa:	cf 93       	push	r28
    63ac:	00 d0       	rcall	.+0      	; 0x63ae <prvIsQueueFull+0x6>
    63ae:	0f 92       	push	r0
    63b0:	cd b7       	in	r28, 0x3d	; 61
    63b2:	de b7       	in	r29, 0x3e	; 62
    63b4:	9b 83       	std	Y+3, r25	; 0x03
    63b6:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    63b8:	0f b6       	in	r0, 0x3f	; 63
    63ba:	f8 94       	cli
    63bc:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    63be:	ea 81       	ldd	r30, Y+2	; 0x02
    63c0:	fb 81       	ldd	r31, Y+3	; 0x03
    63c2:	92 8d       	ldd	r25, Z+26	; 0x1a
    63c4:	ea 81       	ldd	r30, Y+2	; 0x02
    63c6:	fb 81       	ldd	r31, Y+3	; 0x03
    63c8:	83 8d       	ldd	r24, Z+27	; 0x1b
    63ca:	98 17       	cp	r25, r24
    63cc:	19 f4       	brne	.+6      	; 0x63d4 <prvIsQueueFull+0x2c>
		{
			xReturn = pdTRUE;
    63ce:	81 e0       	ldi	r24, 0x01	; 1
    63d0:	89 83       	std	Y+1, r24	; 0x01
    63d2:	01 c0       	rjmp	.+2      	; 0x63d6 <prvIsQueueFull+0x2e>
		}
		else
		{
			xReturn = pdFALSE;
    63d4:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    63d6:	0f 90       	pop	r0
    63d8:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    63da:	89 81       	ldd	r24, Y+1	; 0x01
}
    63dc:	0f 90       	pop	r0
    63de:	0f 90       	pop	r0
    63e0:	0f 90       	pop	r0
    63e2:	cf 91       	pop	r28
    63e4:	df 91       	pop	r29
    63e6:	08 95       	ret

000063e8 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    63e8:	df 93       	push	r29
    63ea:	cf 93       	push	r28
    63ec:	00 d0       	rcall	.+0      	; 0x63ee <xQueueIsQueueFullFromISR+0x6>
    63ee:	00 d0       	rcall	.+0      	; 0x63f0 <xQueueIsQueueFullFromISR+0x8>
    63f0:	0f 92       	push	r0
    63f2:	cd b7       	in	r28, 0x3d	; 61
    63f4:	de b7       	in	r29, 0x3e	; 62
    63f6:	9d 83       	std	Y+5, r25	; 0x05
    63f8:	8c 83       	std	Y+4, r24	; 0x04
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
    63fa:	8c 81       	ldd	r24, Y+4	; 0x04
    63fc:	9d 81       	ldd	r25, Y+5	; 0x05
    63fe:	9a 83       	std	Y+2, r25	; 0x02
    6400:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    6402:	e9 81       	ldd	r30, Y+1	; 0x01
    6404:	fa 81       	ldd	r31, Y+2	; 0x02
    6406:	92 8d       	ldd	r25, Z+26	; 0x1a
    6408:	e9 81       	ldd	r30, Y+1	; 0x01
    640a:	fa 81       	ldd	r31, Y+2	; 0x02
    640c:	83 8d       	ldd	r24, Z+27	; 0x1b
    640e:	98 17       	cp	r25, r24
    6410:	19 f4       	brne	.+6      	; 0x6418 <xQueueIsQueueFullFromISR+0x30>
	{
		xReturn = pdTRUE;
    6412:	81 e0       	ldi	r24, 0x01	; 1
    6414:	8b 83       	std	Y+3, r24	; 0x03
    6416:	01 c0       	rjmp	.+2      	; 0x641a <xQueueIsQueueFullFromISR+0x32>
	}
	else
	{
		xReturn = pdFALSE;
    6418:	1b 82       	std	Y+3, r1	; 0x03
	}

	return xReturn;
    641a:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    641c:	0f 90       	pop	r0
    641e:	0f 90       	pop	r0
    6420:	0f 90       	pop	r0
    6422:	0f 90       	pop	r0
    6424:	0f 90       	pop	r0
    6426:	cf 91       	pop	r28
    6428:	df 91       	pop	r29
    642a:	08 95       	ret

0000642c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    642c:	8f 92       	push	r8
    642e:	9f 92       	push	r9
    6430:	af 92       	push	r10
    6432:	bf 92       	push	r11
    6434:	cf 92       	push	r12
    6436:	df 92       	push	r13
    6438:	ef 92       	push	r14
    643a:	ff 92       	push	r15
    643c:	0f 93       	push	r16
    643e:	1f 93       	push	r17
    6440:	df 93       	push	r29
    6442:	cf 93       	push	r28
    6444:	cd b7       	in	r28, 0x3d	; 61
    6446:	de b7       	in	r29, 0x3e	; 62
    6448:	60 97       	sbiw	r28, 0x10	; 16
    644a:	0f b6       	in	r0, 0x3f	; 63
    644c:	f8 94       	cli
    644e:	de bf       	out	0x3e, r29	; 62
    6450:	0f be       	out	0x3f, r0	; 63
    6452:	cd bf       	out	0x3d, r28	; 61
    6454:	9f 83       	std	Y+7, r25	; 0x07
    6456:	8e 83       	std	Y+6, r24	; 0x06
    6458:	79 87       	std	Y+9, r23	; 0x09
    645a:	68 87       	std	Y+8, r22	; 0x08
    645c:	5b 87       	std	Y+11, r21	; 0x0b
    645e:	4a 87       	std	Y+10, r20	; 0x0a
    6460:	3d 87       	std	Y+13, r19	; 0x0d
    6462:	2c 87       	std	Y+12, r18	; 0x0c
    6464:	0e 87       	std	Y+14, r16	; 0x0e
    6466:	f8 8a       	std	Y+16, r15	; 0x10
    6468:	ef 86       	std	Y+15, r14	; 0x0f
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
    646a:	8a 85       	ldd	r24, Y+10	; 0x0a
    646c:	9b 85       	ldd	r25, Y+11	; 0x0b
    646e:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <pvPortMalloc>
    6472:	9a 83       	std	Y+2, r25	; 0x02
    6474:	89 83       	std	Y+1, r24	; 0x01

			if( pxStack != NULL )
    6476:	89 81       	ldd	r24, Y+1	; 0x01
    6478:	9a 81       	ldd	r25, Y+2	; 0x02
    647a:	00 97       	sbiw	r24, 0x00	; 0
    647c:	b1 f0       	breq	.+44     	; 0x64aa <xTaskCreate+0x7e>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
    647e:	86 e2       	ldi	r24, 0x26	; 38
    6480:	90 e0       	ldi	r25, 0x00	; 0
    6482:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <pvPortMalloc>
    6486:	9d 83       	std	Y+5, r25	; 0x05
    6488:	8c 83       	std	Y+4, r24	; 0x04

				if( pxNewTCB != NULL )
    648a:	8c 81       	ldd	r24, Y+4	; 0x04
    648c:	9d 81       	ldd	r25, Y+5	; 0x05
    648e:	00 97       	sbiw	r24, 0x00	; 0
    6490:	39 f0       	breq	.+14     	; 0x64a0 <xTaskCreate+0x74>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    6492:	ec 81       	ldd	r30, Y+4	; 0x04
    6494:	fd 81       	ldd	r31, Y+5	; 0x05
    6496:	89 81       	ldd	r24, Y+1	; 0x01
    6498:	9a 81       	ldd	r25, Y+2	; 0x02
    649a:	90 8f       	std	Z+24, r25	; 0x18
    649c:	87 8b       	std	Z+23, r24	; 0x17
    649e:	07 c0       	rjmp	.+14     	; 0x64ae <xTaskCreate+0x82>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    64a0:	89 81       	ldd	r24, Y+1	; 0x01
    64a2:	9a 81       	ldd	r25, Y+2	; 0x02
    64a4:	0e 94 14 26 	call	0x4c28	; 0x4c28 <vPortFree>
    64a8:	02 c0       	rjmp	.+4      	; 0x64ae <xTaskCreate+0x82>
				}
			}
			else
			{
				pxNewTCB = NULL;
    64aa:	1d 82       	std	Y+5, r1	; 0x05
    64ac:	1c 82       	std	Y+4, r1	; 0x04
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    64ae:	8c 81       	ldd	r24, Y+4	; 0x04
    64b0:	9d 81       	ldd	r25, Y+5	; 0x05
    64b2:	00 97       	sbiw	r24, 0x00	; 0
    64b4:	e9 f0       	breq	.+58     	; 0x64f0 <xTaskCreate+0xc4>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    64b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    64b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    64ba:	9c 01       	movw	r18, r24
    64bc:	40 e0       	ldi	r20, 0x00	; 0
    64be:	50 e0       	ldi	r21, 0x00	; 0
    64c0:	8e 81       	ldd	r24, Y+6	; 0x06
    64c2:	9f 81       	ldd	r25, Y+7	; 0x07
    64c4:	68 85       	ldd	r22, Y+8	; 0x08
    64c6:	79 85       	ldd	r23, Y+9	; 0x09
    64c8:	ec 85       	ldd	r30, Y+12	; 0x0c
    64ca:	fd 85       	ldd	r31, Y+13	; 0x0d
    64cc:	af 85       	ldd	r26, Y+15	; 0x0f
    64ce:	b8 89       	ldd	r27, Y+16	; 0x10
    64d0:	ac 80       	ldd	r10, Y+4	; 0x04
    64d2:	bd 80       	ldd	r11, Y+5	; 0x05
    64d4:	8f 01       	movw	r16, r30
    64d6:	ee 84       	ldd	r14, Y+14	; 0x0e
    64d8:	6d 01       	movw	r12, r26
    64da:	88 24       	eor	r8, r8
    64dc:	99 24       	eor	r9, r9
    64de:	0e 94 8e 32 	call	0x651c	; 0x651c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    64e2:	8c 81       	ldd	r24, Y+4	; 0x04
    64e4:	9d 81       	ldd	r25, Y+5	; 0x05
    64e6:	0e 94 4a 33 	call	0x6694	; 0x6694 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    64ea:	81 e0       	ldi	r24, 0x01	; 1
    64ec:	8b 83       	std	Y+3, r24	; 0x03
    64ee:	02 c0       	rjmp	.+4      	; 0x64f4 <xTaskCreate+0xc8>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    64f0:	8f ef       	ldi	r24, 0xFF	; 255
    64f2:	8b 83       	std	Y+3, r24	; 0x03
		}

		return xReturn;
    64f4:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    64f6:	60 96       	adiw	r28, 0x10	; 16
    64f8:	0f b6       	in	r0, 0x3f	; 63
    64fa:	f8 94       	cli
    64fc:	de bf       	out	0x3e, r29	; 62
    64fe:	0f be       	out	0x3f, r0	; 63
    6500:	cd bf       	out	0x3d, r28	; 61
    6502:	cf 91       	pop	r28
    6504:	df 91       	pop	r29
    6506:	1f 91       	pop	r17
    6508:	0f 91       	pop	r16
    650a:	ff 90       	pop	r15
    650c:	ef 90       	pop	r14
    650e:	df 90       	pop	r13
    6510:	cf 90       	pop	r12
    6512:	bf 90       	pop	r11
    6514:	af 90       	pop	r10
    6516:	9f 90       	pop	r9
    6518:	8f 90       	pop	r8
    651a:	08 95       	ret

0000651c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    651c:	8f 92       	push	r8
    651e:	9f 92       	push	r9
    6520:	af 92       	push	r10
    6522:	bf 92       	push	r11
    6524:	cf 92       	push	r12
    6526:	df 92       	push	r13
    6528:	ef 92       	push	r14
    652a:	0f 93       	push	r16
    652c:	1f 93       	push	r17
    652e:	df 93       	push	r29
    6530:	cf 93       	push	r28
    6532:	cd b7       	in	r28, 0x3d	; 61
    6534:	de b7       	in	r29, 0x3e	; 62
    6536:	64 97       	sbiw	r28, 0x14	; 20
    6538:	0f b6       	in	r0, 0x3f	; 63
    653a:	f8 94       	cli
    653c:	de bf       	out	0x3e, r29	; 62
    653e:	0f be       	out	0x3f, r0	; 63
    6540:	cd bf       	out	0x3d, r28	; 61
    6542:	9d 83       	std	Y+5, r25	; 0x05
    6544:	8c 83       	std	Y+4, r24	; 0x04
    6546:	7f 83       	std	Y+7, r23	; 0x07
    6548:	6e 83       	std	Y+6, r22	; 0x06
    654a:	28 87       	std	Y+8, r18	; 0x08
    654c:	39 87       	std	Y+9, r19	; 0x09
    654e:	4a 87       	std	Y+10, r20	; 0x0a
    6550:	5b 87       	std	Y+11, r21	; 0x0b
    6552:	1d 87       	std	Y+13, r17	; 0x0d
    6554:	0c 87       	std	Y+12, r16	; 0x0c
    6556:	ee 86       	std	Y+14, r14	; 0x0e
    6558:	d8 8a       	std	Y+16, r13	; 0x10
    655a:	cf 86       	std	Y+15, r12	; 0x0f
    655c:	ba 8a       	std	Y+18, r11	; 0x12
    655e:	a9 8a       	std	Y+17, r10	; 0x11
    6560:	9c 8a       	std	Y+20, r9	; 0x14
    6562:	8b 8a       	std	Y+19, r8	; 0x13
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
    6564:	e9 89       	ldd	r30, Y+17	; 0x11
    6566:	fa 89       	ldd	r31, Y+18	; 0x12
    6568:	27 89       	ldd	r18, Z+23	; 0x17
    656a:	30 8d       	ldd	r19, Z+24	; 0x18
    656c:	88 85       	ldd	r24, Y+8	; 0x08
    656e:	99 85       	ldd	r25, Y+9	; 0x09
    6570:	01 97       	sbiw	r24, 0x01	; 1
    6572:	82 0f       	add	r24, r18
    6574:	93 1f       	adc	r25, r19
    6576:	9b 83       	std	Y+3, r25	; 0x03
    6578:	8a 83       	std	Y+2, r24	; 0x02
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
    657a:	8e 81       	ldd	r24, Y+6	; 0x06
    657c:	9f 81       	ldd	r25, Y+7	; 0x07
    657e:	00 97       	sbiw	r24, 0x00	; 0
    6580:	51 f1       	breq	.+84     	; 0x65d6 <prvInitialiseNewTask+0xba>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    6582:	19 82       	std	Y+1, r1	; 0x01
    6584:	21 c0       	rjmp	.+66     	; 0x65c8 <prvInitialiseNewTask+0xac>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    6586:	89 81       	ldd	r24, Y+1	; 0x01
    6588:	48 2f       	mov	r20, r24
    658a:	50 e0       	ldi	r21, 0x00	; 0
    658c:	89 81       	ldd	r24, Y+1	; 0x01
    658e:	28 2f       	mov	r18, r24
    6590:	30 e0       	ldi	r19, 0x00	; 0
    6592:	8e 81       	ldd	r24, Y+6	; 0x06
    6594:	9f 81       	ldd	r25, Y+7	; 0x07
    6596:	fc 01       	movw	r30, r24
    6598:	e2 0f       	add	r30, r18
    659a:	f3 1f       	adc	r31, r19
    659c:	20 81       	ld	r18, Z
    659e:	89 89       	ldd	r24, Y+17	; 0x11
    65a0:	9a 89       	ldd	r25, Y+18	; 0x12
    65a2:	84 0f       	add	r24, r20
    65a4:	95 1f       	adc	r25, r21
    65a6:	fc 01       	movw	r30, r24
    65a8:	79 96       	adiw	r30, 0x19	; 25
    65aa:	20 83       	st	Z, r18

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
    65ac:	89 81       	ldd	r24, Y+1	; 0x01
    65ae:	28 2f       	mov	r18, r24
    65b0:	30 e0       	ldi	r19, 0x00	; 0
    65b2:	8e 81       	ldd	r24, Y+6	; 0x06
    65b4:	9f 81       	ldd	r25, Y+7	; 0x07
    65b6:	fc 01       	movw	r30, r24
    65b8:	e2 0f       	add	r30, r18
    65ba:	f3 1f       	adc	r31, r19
    65bc:	80 81       	ld	r24, Z
    65be:	88 23       	and	r24, r24
    65c0:	31 f0       	breq	.+12     	; 0x65ce <prvInitialiseNewTask+0xb2>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    65c2:	89 81       	ldd	r24, Y+1	; 0x01
    65c4:	8f 5f       	subi	r24, 0xFF	; 255
    65c6:	89 83       	std	Y+1, r24	; 0x01
    65c8:	89 81       	ldd	r24, Y+1	; 0x01
    65ca:	88 30       	cpi	r24, 0x08	; 8
    65cc:	e0 f2       	brcs	.-72     	; 0x6586 <prvInitialiseNewTask+0x6a>
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    65ce:	e9 89       	ldd	r30, Y+17	; 0x11
    65d0:	fa 89       	ldd	r31, Y+18	; 0x12
    65d2:	10 a2       	std	Z+32, r1	; 0x20
    65d4:	03 c0       	rjmp	.+6      	; 0x65dc <prvInitialiseNewTask+0xc0>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
    65d6:	e9 89       	ldd	r30, Y+17	; 0x11
    65d8:	fa 89       	ldd	r31, Y+18	; 0x12
    65da:	11 8e       	std	Z+25, r1	; 0x19
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    65dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    65de:	84 30       	cpi	r24, 0x04	; 4
    65e0:	10 f0       	brcs	.+4      	; 0x65e6 <prvInitialiseNewTask+0xca>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    65e2:	83 e0       	ldi	r24, 0x03	; 3
    65e4:	8e 87       	std	Y+14, r24	; 0x0e
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    65e6:	e9 89       	ldd	r30, Y+17	; 0x11
    65e8:	fa 89       	ldd	r31, Y+18	; 0x12
    65ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    65ec:	86 8b       	std	Z+22, r24	; 0x16
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    65ee:	89 89       	ldd	r24, Y+17	; 0x11
    65f0:	9a 89       	ldd	r25, Y+18	; 0x12
    65f2:	02 96       	adiw	r24, 0x02	; 2
    65f4:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    65f8:	89 89       	ldd	r24, Y+17	; 0x11
    65fa:	9a 89       	ldd	r25, Y+18	; 0x12
    65fc:	0c 96       	adiw	r24, 0x0c	; 12
    65fe:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    6602:	e9 89       	ldd	r30, Y+17	; 0x11
    6604:	fa 89       	ldd	r31, Y+18	; 0x12
    6606:	89 89       	ldd	r24, Y+17	; 0x11
    6608:	9a 89       	ldd	r25, Y+18	; 0x12
    660a:	91 87       	std	Z+9, r25	; 0x09
    660c:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    660e:	8e 85       	ldd	r24, Y+14	; 0x0e
    6610:	28 2f       	mov	r18, r24
    6612:	30 e0       	ldi	r19, 0x00	; 0
    6614:	84 e0       	ldi	r24, 0x04	; 4
    6616:	90 e0       	ldi	r25, 0x00	; 0
    6618:	82 1b       	sub	r24, r18
    661a:	93 0b       	sbc	r25, r19
    661c:	e9 89       	ldd	r30, Y+17	; 0x11
    661e:	fa 89       	ldd	r31, Y+18	; 0x12
    6620:	95 87       	std	Z+13, r25	; 0x0d
    6622:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    6624:	e9 89       	ldd	r30, Y+17	; 0x11
    6626:	fa 89       	ldd	r31, Y+18	; 0x12
    6628:	89 89       	ldd	r24, Y+17	; 0x11
    662a:	9a 89       	ldd	r25, Y+18	; 0x12
    662c:	93 8b       	std	Z+19, r25	; 0x13
    662e:	82 8b       	std	Z+18, r24	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    6630:	e9 89       	ldd	r30, Y+17	; 0x11
    6632:	fa 89       	ldd	r31, Y+18	; 0x12
    6634:	11 a2       	std	Z+33, r1	; 0x21
    6636:	12 a2       	std	Z+34, r1	; 0x22
    6638:	13 a2       	std	Z+35, r1	; 0x23
    663a:	14 a2       	std	Z+36, r1	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    663c:	e9 89       	ldd	r30, Y+17	; 0x11
    663e:	fa 89       	ldd	r31, Y+18	; 0x12
    6640:	15 a2       	std	Z+37, r1	; 0x25
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    6642:	8a 81       	ldd	r24, Y+2	; 0x02
    6644:	9b 81       	ldd	r25, Y+3	; 0x03
    6646:	2c 81       	ldd	r18, Y+4	; 0x04
    6648:	3d 81       	ldd	r19, Y+5	; 0x05
    664a:	4c 85       	ldd	r20, Y+12	; 0x0c
    664c:	5d 85       	ldd	r21, Y+13	; 0x0d
    664e:	b9 01       	movw	r22, r18
    6650:	0e 94 00 28 	call	0x5000	; 0x5000 <pxPortInitialiseStack>
    6654:	e9 89       	ldd	r30, Y+17	; 0x11
    6656:	fa 89       	ldd	r31, Y+18	; 0x12
    6658:	91 83       	std	Z+1, r25	; 0x01
    665a:	80 83       	st	Z, r24
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
    665c:	8f 85       	ldd	r24, Y+15	; 0x0f
    665e:	98 89       	ldd	r25, Y+16	; 0x10
    6660:	00 97       	sbiw	r24, 0x00	; 0
    6662:	31 f0       	breq	.+12     	; 0x6670 <prvInitialiseNewTask+0x154>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    6664:	ef 85       	ldd	r30, Y+15	; 0x0f
    6666:	f8 89       	ldd	r31, Y+16	; 0x10
    6668:	89 89       	ldd	r24, Y+17	; 0x11
    666a:	9a 89       	ldd	r25, Y+18	; 0x12
    666c:	91 83       	std	Z+1, r25	; 0x01
    666e:	80 83       	st	Z, r24
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    6670:	64 96       	adiw	r28, 0x14	; 20
    6672:	0f b6       	in	r0, 0x3f	; 63
    6674:	f8 94       	cli
    6676:	de bf       	out	0x3e, r29	; 62
    6678:	0f be       	out	0x3f, r0	; 63
    667a:	cd bf       	out	0x3d, r28	; 61
    667c:	cf 91       	pop	r28
    667e:	df 91       	pop	r29
    6680:	1f 91       	pop	r17
    6682:	0f 91       	pop	r16
    6684:	ef 90       	pop	r14
    6686:	df 90       	pop	r13
    6688:	cf 90       	pop	r12
    668a:	bf 90       	pop	r11
    668c:	af 90       	pop	r10
    668e:	9f 90       	pop	r9
    6690:	8f 90       	pop	r8
    6692:	08 95       	ret

00006694 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    6694:	df 93       	push	r29
    6696:	cf 93       	push	r28
    6698:	00 d0       	rcall	.+0      	; 0x669a <prvAddNewTaskToReadyList+0x6>
    669a:	cd b7       	in	r28, 0x3d	; 61
    669c:	de b7       	in	r29, 0x3e	; 62
    669e:	9a 83       	std	Y+2, r25	; 0x02
    66a0:	89 83       	std	Y+1, r24	; 0x01
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    66a2:	0f b6       	in	r0, 0x3f	; 63
    66a4:	f8 94       	cli
    66a6:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    66a8:	80 91 97 05 	lds	r24, 0x0597
    66ac:	8f 5f       	subi	r24, 0xFF	; 255
    66ae:	80 93 97 05 	sts	0x0597, r24
		if( pxCurrentTCB == NULL )
    66b2:	80 91 94 05 	lds	r24, 0x0594
    66b6:	90 91 95 05 	lds	r25, 0x0595
    66ba:	00 97       	sbiw	r24, 0x00	; 0
    66bc:	69 f4       	brne	.+26     	; 0x66d8 <prvAddNewTaskToReadyList+0x44>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    66be:	89 81       	ldd	r24, Y+1	; 0x01
    66c0:	9a 81       	ldd	r25, Y+2	; 0x02
    66c2:	90 93 95 05 	sts	0x0595, r25
    66c6:	80 93 94 05 	sts	0x0594, r24

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    66ca:	80 91 97 05 	lds	r24, 0x0597
    66ce:	81 30       	cpi	r24, 0x01	; 1
    66d0:	b9 f4       	brne	.+46     	; 0x6700 <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    66d2:	0e 94 1c 39 	call	0x7238	; 0x7238 <prvInitialiseTaskLists>
    66d6:	14 c0       	rjmp	.+40     	; 0x6700 <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    66d8:	80 91 9b 05 	lds	r24, 0x059B
    66dc:	88 23       	and	r24, r24
    66de:	81 f4       	brne	.+32     	; 0x6700 <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    66e0:	e0 91 94 05 	lds	r30, 0x0594
    66e4:	f0 91 95 05 	lds	r31, 0x0595
    66e8:	96 89       	ldd	r25, Z+22	; 0x16
    66ea:	e9 81       	ldd	r30, Y+1	; 0x01
    66ec:	fa 81       	ldd	r31, Y+2	; 0x02
    66ee:	86 89       	ldd	r24, Z+22	; 0x16
    66f0:	89 17       	cp	r24, r25
    66f2:	30 f0       	brcs	.+12     	; 0x6700 <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
    66f4:	89 81       	ldd	r24, Y+1	; 0x01
    66f6:	9a 81       	ldd	r25, Y+2	; 0x02
    66f8:	90 93 95 05 	sts	0x0595, r25
    66fc:	80 93 94 05 	sts	0x0594, r24
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    6700:	80 91 9f 05 	lds	r24, 0x059F
    6704:	8f 5f       	subi	r24, 0xFF	; 255
    6706:	80 93 9f 05 	sts	0x059F, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    670a:	e9 81       	ldd	r30, Y+1	; 0x01
    670c:	fa 81       	ldd	r31, Y+2	; 0x02
    670e:	96 89       	ldd	r25, Z+22	; 0x16
    6710:	80 91 9a 05 	lds	r24, 0x059A
    6714:	89 17       	cp	r24, r25
    6716:	28 f4       	brcc	.+10     	; 0x6722 <prvAddNewTaskToReadyList+0x8e>
    6718:	e9 81       	ldd	r30, Y+1	; 0x01
    671a:	fa 81       	ldd	r31, Y+2	; 0x02
    671c:	86 89       	ldd	r24, Z+22	; 0x16
    671e:	80 93 9a 05 	sts	0x059A, r24
    6722:	e9 81       	ldd	r30, Y+1	; 0x01
    6724:	fa 81       	ldd	r31, Y+2	; 0x02
    6726:	86 89       	ldd	r24, Z+22	; 0x16
    6728:	28 2f       	mov	r18, r24
    672a:	30 e0       	ldi	r19, 0x00	; 0
    672c:	c9 01       	movw	r24, r18
    672e:	88 0f       	add	r24, r24
    6730:	99 1f       	adc	r25, r25
    6732:	88 0f       	add	r24, r24
    6734:	99 1f       	adc	r25, r25
    6736:	88 0f       	add	r24, r24
    6738:	99 1f       	adc	r25, r25
    673a:	82 0f       	add	r24, r18
    673c:	93 1f       	adc	r25, r19
    673e:	ac 01       	movw	r20, r24
    6740:	4b 55       	subi	r20, 0x5B	; 91
    6742:	5a 4f       	sbci	r21, 0xFA	; 250
    6744:	89 81       	ldd	r24, Y+1	; 0x01
    6746:	9a 81       	ldd	r25, Y+2	; 0x02
    6748:	9c 01       	movw	r18, r24
    674a:	2e 5f       	subi	r18, 0xFE	; 254
    674c:	3f 4f       	sbci	r19, 0xFF	; 255
    674e:	ca 01       	movw	r24, r20
    6750:	b9 01       	movw	r22, r18
    6752:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    6756:	0f 90       	pop	r0
    6758:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    675a:	80 91 9b 05 	lds	r24, 0x059B
    675e:	88 23       	and	r24, r24
    6760:	61 f0       	breq	.+24     	; 0x677a <prvAddNewTaskToReadyList+0xe6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    6762:	e0 91 94 05 	lds	r30, 0x0594
    6766:	f0 91 95 05 	lds	r31, 0x0595
    676a:	96 89       	ldd	r25, Z+22	; 0x16
    676c:	e9 81       	ldd	r30, Y+1	; 0x01
    676e:	fa 81       	ldd	r31, Y+2	; 0x02
    6770:	86 89       	ldd	r24, Z+22	; 0x16
    6772:	98 17       	cp	r25, r24
    6774:	10 f4       	brcc	.+4      	; 0x677a <prvAddNewTaskToReadyList+0xe6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    6776:	0e 94 bf 29 	call	0x537e	; 0x537e <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    677a:	0f 90       	pop	r0
    677c:	0f 90       	pop	r0
    677e:	cf 91       	pop	r28
    6780:	df 91       	pop	r29
    6782:	08 95       	ret

00006784 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    6784:	df 93       	push	r29
    6786:	cf 93       	push	r28
    6788:	00 d0       	rcall	.+0      	; 0x678a <vTaskDelete+0x6>
    678a:	00 d0       	rcall	.+0      	; 0x678c <vTaskDelete+0x8>
    678c:	00 d0       	rcall	.+0      	; 0x678e <vTaskDelete+0xa>
    678e:	cd b7       	in	r28, 0x3d	; 61
    6790:	de b7       	in	r29, 0x3e	; 62
    6792:	9c 83       	std	Y+4, r25	; 0x04
    6794:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    6796:	0f b6       	in	r0, 0x3f	; 63
    6798:	f8 94       	cli
    679a:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    679c:	8b 81       	ldd	r24, Y+3	; 0x03
    679e:	9c 81       	ldd	r25, Y+4	; 0x04
    67a0:	00 97       	sbiw	r24, 0x00	; 0
    67a2:	39 f4       	brne	.+14     	; 0x67b2 <vTaskDelete+0x2e>
    67a4:	80 91 94 05 	lds	r24, 0x0594
    67a8:	90 91 95 05 	lds	r25, 0x0595
    67ac:	9e 83       	std	Y+6, r25	; 0x06
    67ae:	8d 83       	std	Y+5, r24	; 0x05
    67b0:	04 c0       	rjmp	.+8      	; 0x67ba <vTaskDelete+0x36>
    67b2:	8b 81       	ldd	r24, Y+3	; 0x03
    67b4:	9c 81       	ldd	r25, Y+4	; 0x04
    67b6:	9e 83       	std	Y+6, r25	; 0x06
    67b8:	8d 83       	std	Y+5, r24	; 0x05
    67ba:	8d 81       	ldd	r24, Y+5	; 0x05
    67bc:	9e 81       	ldd	r25, Y+6	; 0x06
    67be:	9a 83       	std	Y+2, r25	; 0x02
    67c0:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    67c2:	89 81       	ldd	r24, Y+1	; 0x01
    67c4:	9a 81       	ldd	r25, Y+2	; 0x02
    67c6:	02 96       	adiw	r24, 0x02	; 2
    67c8:	0e 94 24 27 	call	0x4e48	; 0x4e48 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    67cc:	e9 81       	ldd	r30, Y+1	; 0x01
    67ce:	fa 81       	ldd	r31, Y+2	; 0x02
    67d0:	84 89       	ldd	r24, Z+20	; 0x14
    67d2:	95 89       	ldd	r25, Z+21	; 0x15
    67d4:	00 97       	sbiw	r24, 0x00	; 0
    67d6:	29 f0       	breq	.+10     	; 0x67e2 <vTaskDelete+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    67d8:	89 81       	ldd	r24, Y+1	; 0x01
    67da:	9a 81       	ldd	r25, Y+2	; 0x02
    67dc:	0c 96       	adiw	r24, 0x0c	; 12
    67de:	0e 94 24 27 	call	0x4e48	; 0x4e48 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    67e2:	80 91 9f 05 	lds	r24, 0x059F
    67e6:	8f 5f       	subi	r24, 0xFF	; 255
    67e8:	80 93 9f 05 	sts	0x059F, r24

			if( pxTCB == pxCurrentTCB )
    67ec:	20 91 94 05 	lds	r18, 0x0594
    67f0:	30 91 95 05 	lds	r19, 0x0595
    67f4:	89 81       	ldd	r24, Y+1	; 0x01
    67f6:	9a 81       	ldd	r25, Y+2	; 0x02
    67f8:	82 17       	cp	r24, r18
    67fa:	93 07       	cpc	r25, r19
    67fc:	81 f4       	brne	.+32     	; 0x681e <vTaskDelete+0x9a>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    67fe:	89 81       	ldd	r24, Y+1	; 0x01
    6800:	9a 81       	ldd	r25, Y+2	; 0x02
    6802:	9c 01       	movw	r18, r24
    6804:	2e 5f       	subi	r18, 0xFE	; 254
    6806:	3f 4f       	sbci	r19, 0xFF	; 255
    6808:	88 ee       	ldi	r24, 0xE8	; 232
    680a:	95 e0       	ldi	r25, 0x05	; 5
    680c:	b9 01       	movw	r22, r18
    680e:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    6812:	80 91 96 05 	lds	r24, 0x0596
    6816:	8f 5f       	subi	r24, 0xFF	; 255
    6818:	80 93 96 05 	sts	0x0596, r24
    681c:	0b c0       	rjmp	.+22     	; 0x6834 <vTaskDelete+0xb0>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    681e:	80 91 97 05 	lds	r24, 0x0597
    6822:	81 50       	subi	r24, 0x01	; 1
    6824:	80 93 97 05 	sts	0x0597, r24
				prvDeleteTCB( pxTCB );
    6828:	89 81       	ldd	r24, Y+1	; 0x01
    682a:	9a 81       	ldd	r25, Y+2	; 0x02
    682c:	0e 94 88 39 	call	0x7310	; 0x7310 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    6830:	0e 94 9e 39 	call	0x733c	; 0x733c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    6834:	0f 90       	pop	r0
    6836:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    6838:	80 91 9b 05 	lds	r24, 0x059B
    683c:	88 23       	and	r24, r24
    683e:	59 f0       	breq	.+22     	; 0x6856 <vTaskDelete+0xd2>
		{
			if( pxTCB == pxCurrentTCB )
    6840:	20 91 94 05 	lds	r18, 0x0594
    6844:	30 91 95 05 	lds	r19, 0x0595
    6848:	89 81       	ldd	r24, Y+1	; 0x01
    684a:	9a 81       	ldd	r25, Y+2	; 0x02
    684c:	82 17       	cp	r24, r18
    684e:	93 07       	cpc	r25, r19
    6850:	11 f4       	brne	.+4      	; 0x6856 <vTaskDelete+0xd2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    6852:	0e 94 bf 29 	call	0x537e	; 0x537e <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    6856:	26 96       	adiw	r28, 0x06	; 6
    6858:	0f b6       	in	r0, 0x3f	; 63
    685a:	f8 94       	cli
    685c:	de bf       	out	0x3e, r29	; 62
    685e:	0f be       	out	0x3f, r0	; 63
    6860:	cd bf       	out	0x3d, r28	; 61
    6862:	cf 91       	pop	r28
    6864:	df 91       	pop	r29
    6866:	08 95       	ret

00006868 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    6868:	df 93       	push	r29
    686a:	cf 93       	push	r28
    686c:	cd b7       	in	r28, 0x3d	; 61
    686e:	de b7       	in	r29, 0x3e	; 62
    6870:	2a 97       	sbiw	r28, 0x0a	; 10
    6872:	0f b6       	in	r0, 0x3f	; 63
    6874:	f8 94       	cli
    6876:	de bf       	out	0x3e, r29	; 62
    6878:	0f be       	out	0x3f, r0	; 63
    687a:	cd bf       	out	0x3d, r28	; 61
    687c:	98 87       	std	Y+8, r25	; 0x08
    687e:	8f 83       	std	Y+7, r24	; 0x07
    6880:	7a 87       	std	Y+10, r23	; 0x0a
    6882:	69 87       	std	Y+9, r22	; 0x09
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    6884:	1b 82       	std	Y+3, r1	; 0x03

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    6886:	0e 94 06 35 	call	0x6a0c	; 0x6a0c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    688a:	80 91 98 05 	lds	r24, 0x0598
    688e:	90 91 99 05 	lds	r25, 0x0599
    6892:	9a 83       	std	Y+2, r25	; 0x02
    6894:	89 83       	std	Y+1, r24	; 0x01

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    6896:	ef 81       	ldd	r30, Y+7	; 0x07
    6898:	f8 85       	ldd	r31, Y+8	; 0x08
    689a:	20 81       	ld	r18, Z
    689c:	31 81       	ldd	r19, Z+1	; 0x01
    689e:	89 85       	ldd	r24, Y+9	; 0x09
    68a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    68a2:	82 0f       	add	r24, r18
    68a4:	93 1f       	adc	r25, r19
    68a6:	9e 83       	std	Y+6, r25	; 0x06
    68a8:	8d 83       	std	Y+5, r24	; 0x05

			if( xConstTickCount < *pxPreviousWakeTime )
    68aa:	ef 81       	ldd	r30, Y+7	; 0x07
    68ac:	f8 85       	ldd	r31, Y+8	; 0x08
    68ae:	20 81       	ld	r18, Z
    68b0:	31 81       	ldd	r19, Z+1	; 0x01
    68b2:	89 81       	ldd	r24, Y+1	; 0x01
    68b4:	9a 81       	ldd	r25, Y+2	; 0x02
    68b6:	82 17       	cp	r24, r18
    68b8:	93 07       	cpc	r25, r19
    68ba:	98 f4       	brcc	.+38     	; 0x68e2 <vTaskDelayUntil+0x7a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    68bc:	ef 81       	ldd	r30, Y+7	; 0x07
    68be:	f8 85       	ldd	r31, Y+8	; 0x08
    68c0:	20 81       	ld	r18, Z
    68c2:	31 81       	ldd	r19, Z+1	; 0x01
    68c4:	8d 81       	ldd	r24, Y+5	; 0x05
    68c6:	9e 81       	ldd	r25, Y+6	; 0x06
    68c8:	82 17       	cp	r24, r18
    68ca:	93 07       	cpc	r25, r19
    68cc:	e0 f4       	brcc	.+56     	; 0x6906 <vTaskDelayUntil+0x9e>
    68ce:	2d 81       	ldd	r18, Y+5	; 0x05
    68d0:	3e 81       	ldd	r19, Y+6	; 0x06
    68d2:	89 81       	ldd	r24, Y+1	; 0x01
    68d4:	9a 81       	ldd	r25, Y+2	; 0x02
    68d6:	82 17       	cp	r24, r18
    68d8:	93 07       	cpc	r25, r19
    68da:	a8 f4       	brcc	.+42     	; 0x6906 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    68dc:	81 e0       	ldi	r24, 0x01	; 1
    68de:	8b 83       	std	Y+3, r24	; 0x03
    68e0:	12 c0       	rjmp	.+36     	; 0x6906 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    68e2:	ef 81       	ldd	r30, Y+7	; 0x07
    68e4:	f8 85       	ldd	r31, Y+8	; 0x08
    68e6:	20 81       	ld	r18, Z
    68e8:	31 81       	ldd	r19, Z+1	; 0x01
    68ea:	8d 81       	ldd	r24, Y+5	; 0x05
    68ec:	9e 81       	ldd	r25, Y+6	; 0x06
    68ee:	82 17       	cp	r24, r18
    68f0:	93 07       	cpc	r25, r19
    68f2:	38 f0       	brcs	.+14     	; 0x6902 <vTaskDelayUntil+0x9a>
    68f4:	2d 81       	ldd	r18, Y+5	; 0x05
    68f6:	3e 81       	ldd	r19, Y+6	; 0x06
    68f8:	89 81       	ldd	r24, Y+1	; 0x01
    68fa:	9a 81       	ldd	r25, Y+2	; 0x02
    68fc:	82 17       	cp	r24, r18
    68fe:	93 07       	cpc	r25, r19
    6900:	10 f4       	brcc	.+4      	; 0x6906 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    6902:	81 e0       	ldi	r24, 0x01	; 1
    6904:	8b 83       	std	Y+3, r24	; 0x03
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    6906:	ef 81       	ldd	r30, Y+7	; 0x07
    6908:	f8 85       	ldd	r31, Y+8	; 0x08
    690a:	8d 81       	ldd	r24, Y+5	; 0x05
    690c:	9e 81       	ldd	r25, Y+6	; 0x06
    690e:	91 83       	std	Z+1, r25	; 0x01
    6910:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    6912:	8b 81       	ldd	r24, Y+3	; 0x03
    6914:	88 23       	and	r24, r24
    6916:	49 f0       	breq	.+18     	; 0x692a <vTaskDelayUntil+0xc2>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    6918:	8d 81       	ldd	r24, Y+5	; 0x05
    691a:	9e 81       	ldd	r25, Y+6	; 0x06
    691c:	29 81       	ldd	r18, Y+1	; 0x01
    691e:	3a 81       	ldd	r19, Y+2	; 0x02
    6920:	82 1b       	sub	r24, r18
    6922:	93 0b       	sbc	r25, r19
    6924:	60 e0       	ldi	r22, 0x00	; 0
    6926:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    692a:	0e 94 12 35 	call	0x6a24	; 0x6a24 <xTaskResumeAll>
    692e:	8c 83       	std	Y+4, r24	; 0x04

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    6930:	8c 81       	ldd	r24, Y+4	; 0x04
    6932:	88 23       	and	r24, r24
    6934:	11 f4       	brne	.+4      	; 0x693a <vTaskDelayUntil+0xd2>
		{
			portYIELD_WITHIN_API();
    6936:	0e 94 bf 29 	call	0x537e	; 0x537e <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    693a:	2a 96       	adiw	r28, 0x0a	; 10
    693c:	0f b6       	in	r0, 0x3f	; 63
    693e:	f8 94       	cli
    6940:	de bf       	out	0x3e, r29	; 62
    6942:	0f be       	out	0x3f, r0	; 63
    6944:	cd bf       	out	0x3d, r28	; 61
    6946:	cf 91       	pop	r28
    6948:	df 91       	pop	r29
    694a:	08 95       	ret

0000694c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    694c:	df 93       	push	r29
    694e:	cf 93       	push	r28
    6950:	00 d0       	rcall	.+0      	; 0x6952 <vTaskDelay+0x6>
    6952:	0f 92       	push	r0
    6954:	cd b7       	in	r28, 0x3d	; 61
    6956:	de b7       	in	r29, 0x3e	; 62
    6958:	9b 83       	std	Y+3, r25	; 0x03
    695a:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xAlreadyYielded = pdFALSE;
    695c:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    695e:	8a 81       	ldd	r24, Y+2	; 0x02
    6960:	9b 81       	ldd	r25, Y+3	; 0x03
    6962:	00 97       	sbiw	r24, 0x00	; 0
    6964:	51 f0       	breq	.+20     	; 0x697a <vTaskDelay+0x2e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    6966:	0e 94 06 35 	call	0x6a0c	; 0x6a0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    696a:	8a 81       	ldd	r24, Y+2	; 0x02
    696c:	9b 81       	ldd	r25, Y+3	; 0x03
    696e:	60 e0       	ldi	r22, 0x00	; 0
    6970:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    6974:	0e 94 12 35 	call	0x6a24	; 0x6a24 <xTaskResumeAll>
    6978:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    697a:	89 81       	ldd	r24, Y+1	; 0x01
    697c:	88 23       	and	r24, r24
    697e:	11 f4       	brne	.+4      	; 0x6984 <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    6980:	0e 94 bf 29 	call	0x537e	; 0x537e <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    6984:	0f 90       	pop	r0
    6986:	0f 90       	pop	r0
    6988:	0f 90       	pop	r0
    698a:	cf 91       	pop	r28
    698c:	df 91       	pop	r29
    698e:	08 95       	ret

00006990 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    6990:	ef 92       	push	r14
    6992:	ff 92       	push	r15
    6994:	0f 93       	push	r16
    6996:	df 93       	push	r29
    6998:	cf 93       	push	r28
    699a:	0f 92       	push	r0
    699c:	cd b7       	in	r28, 0x3d	; 61
    699e:	de b7       	in	r29, 0x3e	; 62
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    69a0:	82 e1       	ldi	r24, 0x12	; 18
    69a2:	99 e3       	ldi	r25, 0x39	; 57
    69a4:	2a e6       	ldi	r18, 0x6A	; 106
    69a6:	30 e0       	ldi	r19, 0x00	; 0
    69a8:	e2 ea       	ldi	r30, 0xA2	; 162
    69aa:	f5 e0       	ldi	r31, 0x05	; 5
    69ac:	b9 01       	movw	r22, r18
    69ae:	40 e8       	ldi	r20, 0x80	; 128
    69b0:	50 e0       	ldi	r21, 0x00	; 0
    69b2:	20 e0       	ldi	r18, 0x00	; 0
    69b4:	30 e0       	ldi	r19, 0x00	; 0
    69b6:	00 e0       	ldi	r16, 0x00	; 0
    69b8:	7f 01       	movw	r14, r30
    69ba:	0e 94 16 32 	call	0x642c	; 0x642c <xTaskCreate>
    69be:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    69c0:	89 81       	ldd	r24, Y+1	; 0x01
    69c2:	81 30       	cpi	r24, 0x01	; 1
    69c4:	81 f4       	brne	.+32     	; 0x69e6 <vTaskStartScheduler+0x56>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    69c6:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    69c8:	8f ef       	ldi	r24, 0xFF	; 255
    69ca:	9f ef       	ldi	r25, 0xFF	; 255
    69cc:	90 93 a1 05 	sts	0x05A1, r25
    69d0:	80 93 a0 05 	sts	0x05A0, r24
		xSchedulerRunning = pdTRUE;
    69d4:	81 e0       	ldi	r24, 0x01	; 1
    69d6:	80 93 9b 05 	sts	0x059B, r24
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    69da:	10 92 99 05 	sts	0x0599, r1
    69de:	10 92 98 05 	sts	0x0598, r1

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    69e2:	0e 94 83 29 	call	0x5306	; 0x5306 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    69e6:	0f 90       	pop	r0
    69e8:	cf 91       	pop	r28
    69ea:	df 91       	pop	r29
    69ec:	0f 91       	pop	r16
    69ee:	ff 90       	pop	r15
    69f0:	ef 90       	pop	r14
    69f2:	08 95       	ret

000069f4 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    69f4:	df 93       	push	r29
    69f6:	cf 93       	push	r28
    69f8:	cd b7       	in	r28, 0x3d	; 61
    69fa:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    69fc:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    69fe:	10 92 9b 05 	sts	0x059B, r1
	vPortEndScheduler();
    6a02:	0e 94 b8 29 	call	0x5370	; 0x5370 <vPortEndScheduler>
}
    6a06:	cf 91       	pop	r28
    6a08:	df 91       	pop	r29
    6a0a:	08 95       	ret

00006a0c <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    6a0c:	df 93       	push	r29
    6a0e:	cf 93       	push	r28
    6a10:	cd b7       	in	r28, 0x3d	; 61
    6a12:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    6a14:	80 91 a4 05 	lds	r24, 0x05A4
    6a18:	8f 5f       	subi	r24, 0xFF	; 255
    6a1a:	80 93 a4 05 	sts	0x05A4, r24
	portMEMORY_BARRIER();
}
    6a1e:	cf 91       	pop	r28
    6a20:	df 91       	pop	r29
    6a22:	08 95       	ret

00006a24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    6a24:	df 93       	push	r29
    6a26:	cf 93       	push	r28
    6a28:	00 d0       	rcall	.+0      	; 0x6a2a <xTaskResumeAll+0x6>
    6a2a:	00 d0       	rcall	.+0      	; 0x6a2c <xTaskResumeAll+0x8>
    6a2c:	cd b7       	in	r28, 0x3d	; 61
    6a2e:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB = NULL;
    6a30:	1c 82       	std	Y+4, r1	; 0x04
    6a32:	1b 82       	std	Y+3, r1	; 0x03
BaseType_t xAlreadyYielded = pdFALSE;
    6a34:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    6a36:	0f b6       	in	r0, 0x3f	; 63
    6a38:	f8 94       	cli
    6a3a:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    6a3c:	80 91 a4 05 	lds	r24, 0x05A4
    6a40:	81 50       	subi	r24, 0x01	; 1
    6a42:	80 93 a4 05 	sts	0x05A4, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    6a46:	80 91 a4 05 	lds	r24, 0x05A4
    6a4a:	88 23       	and	r24, r24
    6a4c:	09 f0       	breq	.+2      	; 0x6a50 <xTaskResumeAll+0x2c>
    6a4e:	73 c0       	rjmp	.+230    	; 0x6b36 <xTaskResumeAll+0x112>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    6a50:	80 91 97 05 	lds	r24, 0x0597
    6a54:	88 23       	and	r24, r24
    6a56:	09 f4       	brne	.+2      	; 0x6a5a <xTaskResumeAll+0x36>
    6a58:	6e c0       	rjmp	.+220    	; 0x6b36 <xTaskResumeAll+0x112>
    6a5a:	45 c0       	rjmp	.+138    	; 0x6ae6 <xTaskResumeAll+0xc2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    6a5c:	e0 91 e4 05 	lds	r30, 0x05E4
    6a60:	f0 91 e5 05 	lds	r31, 0x05E5
    6a64:	86 81       	ldd	r24, Z+6	; 0x06
    6a66:	97 81       	ldd	r25, Z+7	; 0x07
    6a68:	9c 83       	std	Y+4, r25	; 0x04
    6a6a:	8b 83       	std	Y+3, r24	; 0x03
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    6a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    6a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    6a70:	0c 96       	adiw	r24, 0x0c	; 12
    6a72:	0e 94 24 27 	call	0x4e48	; 0x4e48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    6a76:	8b 81       	ldd	r24, Y+3	; 0x03
    6a78:	9c 81       	ldd	r25, Y+4	; 0x04
    6a7a:	02 96       	adiw	r24, 0x02	; 2
    6a7c:	0e 94 24 27 	call	0x4e48	; 0x4e48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    6a80:	eb 81       	ldd	r30, Y+3	; 0x03
    6a82:	fc 81       	ldd	r31, Y+4	; 0x04
    6a84:	96 89       	ldd	r25, Z+22	; 0x16
    6a86:	80 91 9a 05 	lds	r24, 0x059A
    6a8a:	89 17       	cp	r24, r25
    6a8c:	28 f4       	brcc	.+10     	; 0x6a98 <xTaskResumeAll+0x74>
    6a8e:	eb 81       	ldd	r30, Y+3	; 0x03
    6a90:	fc 81       	ldd	r31, Y+4	; 0x04
    6a92:	86 89       	ldd	r24, Z+22	; 0x16
    6a94:	80 93 9a 05 	sts	0x059A, r24
    6a98:	eb 81       	ldd	r30, Y+3	; 0x03
    6a9a:	fc 81       	ldd	r31, Y+4	; 0x04
    6a9c:	86 89       	ldd	r24, Z+22	; 0x16
    6a9e:	28 2f       	mov	r18, r24
    6aa0:	30 e0       	ldi	r19, 0x00	; 0
    6aa2:	c9 01       	movw	r24, r18
    6aa4:	88 0f       	add	r24, r24
    6aa6:	99 1f       	adc	r25, r25
    6aa8:	88 0f       	add	r24, r24
    6aaa:	99 1f       	adc	r25, r25
    6aac:	88 0f       	add	r24, r24
    6aae:	99 1f       	adc	r25, r25
    6ab0:	82 0f       	add	r24, r18
    6ab2:	93 1f       	adc	r25, r19
    6ab4:	ac 01       	movw	r20, r24
    6ab6:	4b 55       	subi	r20, 0x5B	; 91
    6ab8:	5a 4f       	sbci	r21, 0xFA	; 250
    6aba:	8b 81       	ldd	r24, Y+3	; 0x03
    6abc:	9c 81       	ldd	r25, Y+4	; 0x04
    6abe:	9c 01       	movw	r18, r24
    6ac0:	2e 5f       	subi	r18, 0xFE	; 254
    6ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    6ac4:	ca 01       	movw	r24, r20
    6ac6:	b9 01       	movw	r22, r18
    6ac8:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    6acc:	eb 81       	ldd	r30, Y+3	; 0x03
    6ace:	fc 81       	ldd	r31, Y+4	; 0x04
    6ad0:	96 89       	ldd	r25, Z+22	; 0x16
    6ad2:	e0 91 94 05 	lds	r30, 0x0594
    6ad6:	f0 91 95 05 	lds	r31, 0x0595
    6ada:	86 89       	ldd	r24, Z+22	; 0x16
    6adc:	98 17       	cp	r25, r24
    6ade:	18 f0       	brcs	.+6      	; 0x6ae6 <xTaskResumeAll+0xc2>
					{
						xYieldPending = pdTRUE;
    6ae0:	81 e0       	ldi	r24, 0x01	; 1
    6ae2:	80 93 9d 05 	sts	0x059D, r24
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    6ae6:	80 91 df 05 	lds	r24, 0x05DF
    6aea:	88 23       	and	r24, r24
    6aec:	09 f0       	breq	.+2      	; 0x6af0 <xTaskResumeAll+0xcc>
    6aee:	b6 cf       	rjmp	.-148    	; 0x6a5c <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    6af0:	8b 81       	ldd	r24, Y+3	; 0x03
    6af2:	9c 81       	ldd	r25, Y+4	; 0x04
    6af4:	00 97       	sbiw	r24, 0x00	; 0
    6af6:	11 f0       	breq	.+4      	; 0x6afc <xTaskResumeAll+0xd8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    6af8:	0e 94 9e 39 	call	0x733c	; 0x733c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    6afc:	80 91 9c 05 	lds	r24, 0x059C
    6b00:	89 83       	std	Y+1, r24	; 0x01

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    6b02:	89 81       	ldd	r24, Y+1	; 0x01
    6b04:	88 23       	and	r24, r24
    6b06:	79 f0       	breq	.+30     	; 0x6b26 <xTaskResumeAll+0x102>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    6b08:	0e 94 02 36 	call	0x6c04	; 0x6c04 <xTaskIncrementTick>
    6b0c:	88 23       	and	r24, r24
    6b0e:	19 f0       	breq	.+6      	; 0x6b16 <xTaskResumeAll+0xf2>
							{
								xYieldPending = pdTRUE;
    6b10:	81 e0       	ldi	r24, 0x01	; 1
    6b12:	80 93 9d 05 	sts	0x059D, r24
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    6b16:	89 81       	ldd	r24, Y+1	; 0x01
    6b18:	81 50       	subi	r24, 0x01	; 1
    6b1a:	89 83       	std	Y+1, r24	; 0x01
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    6b1c:	89 81       	ldd	r24, Y+1	; 0x01
    6b1e:	88 23       	and	r24, r24
    6b20:	99 f7       	brne	.-26     	; 0x6b08 <xTaskResumeAll+0xe4>

						uxPendedTicks = 0;
    6b22:	10 92 9c 05 	sts	0x059C, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    6b26:	80 91 9d 05 	lds	r24, 0x059D
    6b2a:	88 23       	and	r24, r24
    6b2c:	21 f0       	breq	.+8      	; 0x6b36 <xTaskResumeAll+0x112>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    6b2e:	81 e0       	ldi	r24, 0x01	; 1
    6b30:	8a 83       	std	Y+2, r24	; 0x02
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    6b32:	0e 94 bf 29 	call	0x537e	; 0x537e <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    6b36:	0f 90       	pop	r0
    6b38:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    6b3a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    6b3c:	0f 90       	pop	r0
    6b3e:	0f 90       	pop	r0
    6b40:	0f 90       	pop	r0
    6b42:	0f 90       	pop	r0
    6b44:	cf 91       	pop	r28
    6b46:	df 91       	pop	r29
    6b48:	08 95       	ret

00006b4a <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    6b4a:	df 93       	push	r29
    6b4c:	cf 93       	push	r28
    6b4e:	00 d0       	rcall	.+0      	; 0x6b50 <xTaskGetTickCount+0x6>
    6b50:	cd b7       	in	r28, 0x3d	; 61
    6b52:	de b7       	in	r29, 0x3e	; 62
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    6b54:	0f b6       	in	r0, 0x3f	; 63
    6b56:	f8 94       	cli
    6b58:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    6b5a:	80 91 98 05 	lds	r24, 0x0598
    6b5e:	90 91 99 05 	lds	r25, 0x0599
    6b62:	9a 83       	std	Y+2, r25	; 0x02
    6b64:	89 83       	std	Y+1, r24	; 0x01
	}
	portTICK_TYPE_EXIT_CRITICAL();
    6b66:	0f 90       	pop	r0
    6b68:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    6b6a:	89 81       	ldd	r24, Y+1	; 0x01
    6b6c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    6b6e:	0f 90       	pop	r0
    6b70:	0f 90       	pop	r0
    6b72:	cf 91       	pop	r28
    6b74:	df 91       	pop	r29
    6b76:	08 95       	ret

00006b78 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    6b78:	df 93       	push	r29
    6b7a:	cf 93       	push	r28
    6b7c:	00 d0       	rcall	.+0      	; 0x6b7e <xTaskGetTickCountFromISR+0x6>
    6b7e:	0f 92       	push	r0
    6b80:	cd b7       	in	r28, 0x3d	; 61
    6b82:	de b7       	in	r29, 0x3e	; 62
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    6b84:	19 82       	std	Y+1, r1	; 0x01
	{
		xReturn = xTickCount;
    6b86:	80 91 98 05 	lds	r24, 0x0598
    6b8a:	90 91 99 05 	lds	r25, 0x0599
    6b8e:	9b 83       	std	Y+3, r25	; 0x03
    6b90:	8a 83       	std	Y+2, r24	; 0x02
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    6b92:	8a 81       	ldd	r24, Y+2	; 0x02
    6b94:	9b 81       	ldd	r25, Y+3	; 0x03
}
    6b96:	0f 90       	pop	r0
    6b98:	0f 90       	pop	r0
    6b9a:	0f 90       	pop	r0
    6b9c:	cf 91       	pop	r28
    6b9e:	df 91       	pop	r29
    6ba0:	08 95       	ret

00006ba2 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    6ba2:	df 93       	push	r29
    6ba4:	cf 93       	push	r28
    6ba6:	cd b7       	in	r28, 0x3d	; 61
    6ba8:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    6baa:	80 91 97 05 	lds	r24, 0x0597
}
    6bae:	cf 91       	pop	r28
    6bb0:	df 91       	pop	r29
    6bb2:	08 95       	ret

00006bb4 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    6bb4:	df 93       	push	r29
    6bb6:	cf 93       	push	r28
    6bb8:	00 d0       	rcall	.+0      	; 0x6bba <pcTaskGetName+0x6>
    6bba:	00 d0       	rcall	.+0      	; 0x6bbc <pcTaskGetName+0x8>
    6bbc:	00 d0       	rcall	.+0      	; 0x6bbe <pcTaskGetName+0xa>
    6bbe:	cd b7       	in	r28, 0x3d	; 61
    6bc0:	de b7       	in	r29, 0x3e	; 62
    6bc2:	9c 83       	std	Y+4, r25	; 0x04
    6bc4:	8b 83       	std	Y+3, r24	; 0x03
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    6bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    6bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    6bca:	00 97       	sbiw	r24, 0x00	; 0
    6bcc:	39 f4       	brne	.+14     	; 0x6bdc <pcTaskGetName+0x28>
    6bce:	80 91 94 05 	lds	r24, 0x0594
    6bd2:	90 91 95 05 	lds	r25, 0x0595
    6bd6:	9e 83       	std	Y+6, r25	; 0x06
    6bd8:	8d 83       	std	Y+5, r24	; 0x05
    6bda:	04 c0       	rjmp	.+8      	; 0x6be4 <pcTaskGetName+0x30>
    6bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    6bde:	9c 81       	ldd	r25, Y+4	; 0x04
    6be0:	9e 83       	std	Y+6, r25	; 0x06
    6be2:	8d 83       	std	Y+5, r24	; 0x05
    6be4:	8d 81       	ldd	r24, Y+5	; 0x05
    6be6:	9e 81       	ldd	r25, Y+6	; 0x06
    6be8:	9a 83       	std	Y+2, r25	; 0x02
    6bea:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    6bec:	89 81       	ldd	r24, Y+1	; 0x01
    6bee:	9a 81       	ldd	r25, Y+2	; 0x02
    6bf0:	49 96       	adiw	r24, 0x19	; 25
}
    6bf2:	26 96       	adiw	r28, 0x06	; 6
    6bf4:	0f b6       	in	r0, 0x3f	; 63
    6bf6:	f8 94       	cli
    6bf8:	de bf       	out	0x3e, r29	; 62
    6bfa:	0f be       	out	0x3f, r0	; 63
    6bfc:	cd bf       	out	0x3d, r28	; 61
    6bfe:	cf 91       	pop	r28
    6c00:	df 91       	pop	r29
    6c02:	08 95       	ret

00006c04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    6c04:	df 93       	push	r29
    6c06:	cf 93       	push	r28
    6c08:	cd b7       	in	r28, 0x3d	; 61
    6c0a:	de b7       	in	r29, 0x3e	; 62
    6c0c:	29 97       	sbiw	r28, 0x09	; 9
    6c0e:	0f b6       	in	r0, 0x3f	; 63
    6c10:	f8 94       	cli
    6c12:	de bf       	out	0x3e, r29	; 62
    6c14:	0f be       	out	0x3f, r0	; 63
    6c16:	cd bf       	out	0x3d, r28	; 61
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    6c18:	1d 82       	std	Y+5, r1	; 0x05

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    6c1a:	80 91 a4 05 	lds	r24, 0x05A4
    6c1e:	88 23       	and	r24, r24
    6c20:	09 f0       	breq	.+2      	; 0x6c24 <xTaskIncrementTick+0x20>
    6c22:	c0 c0       	rjmp	.+384    	; 0x6da4 <xTaskIncrementTick+0x1a0>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    6c24:	80 91 98 05 	lds	r24, 0x0598
    6c28:	90 91 99 05 	lds	r25, 0x0599
    6c2c:	01 96       	adiw	r24, 0x01	; 1
    6c2e:	9c 83       	std	Y+4, r25	; 0x04
    6c30:	8b 83       	std	Y+3, r24	; 0x03

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    6c32:	8b 81       	ldd	r24, Y+3	; 0x03
    6c34:	9c 81       	ldd	r25, Y+4	; 0x04
    6c36:	90 93 99 05 	sts	0x0599, r25
    6c3a:	80 93 98 05 	sts	0x0598, r24

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    6c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    6c40:	9c 81       	ldd	r25, Y+4	; 0x04
    6c42:	00 97       	sbiw	r24, 0x00	; 0
    6c44:	d9 f4       	brne	.+54     	; 0x6c7c <xTaskIncrementTick+0x78>
		{
			taskSWITCH_DELAYED_LISTS();
    6c46:	80 91 db 05 	lds	r24, 0x05DB
    6c4a:	90 91 dc 05 	lds	r25, 0x05DC
    6c4e:	9a 83       	std	Y+2, r25	; 0x02
    6c50:	89 83       	std	Y+1, r24	; 0x01
    6c52:	80 91 dd 05 	lds	r24, 0x05DD
    6c56:	90 91 de 05 	lds	r25, 0x05DE
    6c5a:	90 93 dc 05 	sts	0x05DC, r25
    6c5e:	80 93 db 05 	sts	0x05DB, r24
    6c62:	89 81       	ldd	r24, Y+1	; 0x01
    6c64:	9a 81       	ldd	r25, Y+2	; 0x02
    6c66:	90 93 de 05 	sts	0x05DE, r25
    6c6a:	80 93 dd 05 	sts	0x05DD, r24
    6c6e:	80 91 9e 05 	lds	r24, 0x059E
    6c72:	8f 5f       	subi	r24, 0xFF	; 255
    6c74:	80 93 9e 05 	sts	0x059E, r24
    6c78:	0e 94 9e 39 	call	0x733c	; 0x733c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    6c7c:	20 91 a0 05 	lds	r18, 0x05A0
    6c80:	30 91 a1 05 	lds	r19, 0x05A1
    6c84:	8b 81       	ldd	r24, Y+3	; 0x03
    6c86:	9c 81       	ldd	r25, Y+4	; 0x04
    6c88:	82 17       	cp	r24, r18
    6c8a:	93 07       	cpc	r25, r19
    6c8c:	08 f4       	brcc	.+2      	; 0x6c90 <xTaskIncrementTick+0x8c>
    6c8e:	71 c0       	rjmp	.+226    	; 0x6d72 <xTaskIncrementTick+0x16e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    6c90:	e0 91 db 05 	lds	r30, 0x05DB
    6c94:	f0 91 dc 05 	lds	r31, 0x05DC
    6c98:	80 81       	ld	r24, Z
    6c9a:	88 23       	and	r24, r24
    6c9c:	39 f4       	brne	.+14     	; 0x6cac <xTaskIncrementTick+0xa8>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    6c9e:	8f ef       	ldi	r24, 0xFF	; 255
    6ca0:	9f ef       	ldi	r25, 0xFF	; 255
    6ca2:	90 93 a1 05 	sts	0x05A1, r25
    6ca6:	80 93 a0 05 	sts	0x05A0, r24
    6caa:	63 c0       	rjmp	.+198    	; 0x6d72 <xTaskIncrementTick+0x16e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    6cac:	e0 91 db 05 	lds	r30, 0x05DB
    6cb0:	f0 91 dc 05 	lds	r31, 0x05DC
    6cb4:	05 80       	ldd	r0, Z+5	; 0x05
    6cb6:	f6 81       	ldd	r31, Z+6	; 0x06
    6cb8:	e0 2d       	mov	r30, r0
    6cba:	86 81       	ldd	r24, Z+6	; 0x06
    6cbc:	97 81       	ldd	r25, Z+7	; 0x07
    6cbe:	99 87       	std	Y+9, r25	; 0x09
    6cc0:	88 87       	std	Y+8, r24	; 0x08
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    6cc2:	e8 85       	ldd	r30, Y+8	; 0x08
    6cc4:	f9 85       	ldd	r31, Y+9	; 0x09
    6cc6:	82 81       	ldd	r24, Z+2	; 0x02
    6cc8:	93 81       	ldd	r25, Z+3	; 0x03
    6cca:	9f 83       	std	Y+7, r25	; 0x07
    6ccc:	8e 83       	std	Y+6, r24	; 0x06

					if( xConstTickCount < xItemValue )
    6cce:	2b 81       	ldd	r18, Y+3	; 0x03
    6cd0:	3c 81       	ldd	r19, Y+4	; 0x04
    6cd2:	8e 81       	ldd	r24, Y+6	; 0x06
    6cd4:	9f 81       	ldd	r25, Y+7	; 0x07
    6cd6:	28 17       	cp	r18, r24
    6cd8:	39 07       	cpc	r19, r25
    6cda:	38 f4       	brcc	.+14     	; 0x6cea <xTaskIncrementTick+0xe6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    6cdc:	8e 81       	ldd	r24, Y+6	; 0x06
    6cde:	9f 81       	ldd	r25, Y+7	; 0x07
    6ce0:	90 93 a1 05 	sts	0x05A1, r25
    6ce4:	80 93 a0 05 	sts	0x05A0, r24
    6ce8:	44 c0       	rjmp	.+136    	; 0x6d72 <xTaskIncrementTick+0x16e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    6cea:	88 85       	ldd	r24, Y+8	; 0x08
    6cec:	99 85       	ldd	r25, Y+9	; 0x09
    6cee:	02 96       	adiw	r24, 0x02	; 2
    6cf0:	0e 94 24 27 	call	0x4e48	; 0x4e48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    6cf4:	e8 85       	ldd	r30, Y+8	; 0x08
    6cf6:	f9 85       	ldd	r31, Y+9	; 0x09
    6cf8:	84 89       	ldd	r24, Z+20	; 0x14
    6cfa:	95 89       	ldd	r25, Z+21	; 0x15
    6cfc:	00 97       	sbiw	r24, 0x00	; 0
    6cfe:	29 f0       	breq	.+10     	; 0x6d0a <xTaskIncrementTick+0x106>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    6d00:	88 85       	ldd	r24, Y+8	; 0x08
    6d02:	99 85       	ldd	r25, Y+9	; 0x09
    6d04:	0c 96       	adiw	r24, 0x0c	; 12
    6d06:	0e 94 24 27 	call	0x4e48	; 0x4e48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    6d0a:	e8 85       	ldd	r30, Y+8	; 0x08
    6d0c:	f9 85       	ldd	r31, Y+9	; 0x09
    6d0e:	96 89       	ldd	r25, Z+22	; 0x16
    6d10:	80 91 9a 05 	lds	r24, 0x059A
    6d14:	89 17       	cp	r24, r25
    6d16:	28 f4       	brcc	.+10     	; 0x6d22 <xTaskIncrementTick+0x11e>
    6d18:	e8 85       	ldd	r30, Y+8	; 0x08
    6d1a:	f9 85       	ldd	r31, Y+9	; 0x09
    6d1c:	86 89       	ldd	r24, Z+22	; 0x16
    6d1e:	80 93 9a 05 	sts	0x059A, r24
    6d22:	e8 85       	ldd	r30, Y+8	; 0x08
    6d24:	f9 85       	ldd	r31, Y+9	; 0x09
    6d26:	86 89       	ldd	r24, Z+22	; 0x16
    6d28:	28 2f       	mov	r18, r24
    6d2a:	30 e0       	ldi	r19, 0x00	; 0
    6d2c:	c9 01       	movw	r24, r18
    6d2e:	88 0f       	add	r24, r24
    6d30:	99 1f       	adc	r25, r25
    6d32:	88 0f       	add	r24, r24
    6d34:	99 1f       	adc	r25, r25
    6d36:	88 0f       	add	r24, r24
    6d38:	99 1f       	adc	r25, r25
    6d3a:	82 0f       	add	r24, r18
    6d3c:	93 1f       	adc	r25, r19
    6d3e:	ac 01       	movw	r20, r24
    6d40:	4b 55       	subi	r20, 0x5B	; 91
    6d42:	5a 4f       	sbci	r21, 0xFA	; 250
    6d44:	88 85       	ldd	r24, Y+8	; 0x08
    6d46:	99 85       	ldd	r25, Y+9	; 0x09
    6d48:	9c 01       	movw	r18, r24
    6d4a:	2e 5f       	subi	r18, 0xFE	; 254
    6d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    6d4e:	ca 01       	movw	r24, r20
    6d50:	b9 01       	movw	r22, r18
    6d52:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    6d56:	e8 85       	ldd	r30, Y+8	; 0x08
    6d58:	f9 85       	ldd	r31, Y+9	; 0x09
    6d5a:	96 89       	ldd	r25, Z+22	; 0x16
    6d5c:	e0 91 94 05 	lds	r30, 0x0594
    6d60:	f0 91 95 05 	lds	r31, 0x0595
    6d64:	86 89       	ldd	r24, Z+22	; 0x16
    6d66:	98 17       	cp	r25, r24
    6d68:	08 f4       	brcc	.+2      	; 0x6d6c <xTaskIncrementTick+0x168>
    6d6a:	92 cf       	rjmp	.-220    	; 0x6c90 <xTaskIncrementTick+0x8c>
						{
							xSwitchRequired = pdTRUE;
    6d6c:	81 e0       	ldi	r24, 0x01	; 1
    6d6e:	8d 83       	std	Y+5, r24	; 0x05
    6d70:	8f cf       	rjmp	.-226    	; 0x6c90 <xTaskIncrementTick+0x8c>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    6d72:	e0 91 94 05 	lds	r30, 0x0594
    6d76:	f0 91 95 05 	lds	r31, 0x0595
    6d7a:	86 89       	ldd	r24, Z+22	; 0x16
    6d7c:	28 2f       	mov	r18, r24
    6d7e:	30 e0       	ldi	r19, 0x00	; 0
    6d80:	c9 01       	movw	r24, r18
    6d82:	88 0f       	add	r24, r24
    6d84:	99 1f       	adc	r25, r25
    6d86:	88 0f       	add	r24, r24
    6d88:	99 1f       	adc	r25, r25
    6d8a:	88 0f       	add	r24, r24
    6d8c:	99 1f       	adc	r25, r25
    6d8e:	82 0f       	add	r24, r18
    6d90:	93 1f       	adc	r25, r19
    6d92:	fc 01       	movw	r30, r24
    6d94:	eb 55       	subi	r30, 0x5B	; 91
    6d96:	fa 4f       	sbci	r31, 0xFA	; 250
    6d98:	80 81       	ld	r24, Z
    6d9a:	82 30       	cpi	r24, 0x02	; 2
    6d9c:	40 f0       	brcs	.+16     	; 0x6dae <xTaskIncrementTick+0x1aa>
			{
				xSwitchRequired = pdTRUE;
    6d9e:	81 e0       	ldi	r24, 0x01	; 1
    6da0:	8d 83       	std	Y+5, r24	; 0x05
    6da2:	05 c0       	rjmp	.+10     	; 0x6dae <xTaskIncrementTick+0x1aa>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    6da4:	80 91 9c 05 	lds	r24, 0x059C
    6da8:	8f 5f       	subi	r24, 0xFF	; 255
    6daa:	80 93 9c 05 	sts	0x059C, r24
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    6dae:	80 91 9d 05 	lds	r24, 0x059D
    6db2:	88 23       	and	r24, r24
    6db4:	11 f0       	breq	.+4      	; 0x6dba <xTaskIncrementTick+0x1b6>
		{
			xSwitchRequired = pdTRUE;
    6db6:	81 e0       	ldi	r24, 0x01	; 1
    6db8:	8d 83       	std	Y+5, r24	; 0x05
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    6dba:	8d 81       	ldd	r24, Y+5	; 0x05
}
    6dbc:	29 96       	adiw	r28, 0x09	; 9
    6dbe:	0f b6       	in	r0, 0x3f	; 63
    6dc0:	f8 94       	cli
    6dc2:	de bf       	out	0x3e, r29	; 62
    6dc4:	0f be       	out	0x3f, r0	; 63
    6dc6:	cd bf       	out	0x3d, r28	; 61
    6dc8:	cf 91       	pop	r28
    6dca:	df 91       	pop	r29
    6dcc:	08 95       	ret

00006dce <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    6dce:	df 93       	push	r29
    6dd0:	cf 93       	push	r28
    6dd2:	00 d0       	rcall	.+0      	; 0x6dd4 <vTaskSwitchContext+0x6>
    6dd4:	0f 92       	push	r0
    6dd6:	cd b7       	in	r28, 0x3d	; 61
    6dd8:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    6dda:	80 91 a4 05 	lds	r24, 0x05A4
    6dde:	88 23       	and	r24, r24
    6de0:	21 f0       	breq	.+8      	; 0x6dea <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    6de2:	81 e0       	ldi	r24, 0x01	; 1
    6de4:	80 93 9d 05 	sts	0x059D, r24
    6de8:	59 c0       	rjmp	.+178    	; 0x6e9c <vTaskSwitchContext+0xce>
	}
	else
	{
		xYieldPending = pdFALSE;
    6dea:	10 92 9d 05 	sts	0x059D, r1
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    6dee:	80 91 9a 05 	lds	r24, 0x059A
    6df2:	8b 83       	std	Y+3, r24	; 0x03
    6df4:	03 c0       	rjmp	.+6      	; 0x6dfc <vTaskSwitchContext+0x2e>
    6df6:	8b 81       	ldd	r24, Y+3	; 0x03
    6df8:	81 50       	subi	r24, 0x01	; 1
    6dfa:	8b 83       	std	Y+3, r24	; 0x03
    6dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    6dfe:	28 2f       	mov	r18, r24
    6e00:	30 e0       	ldi	r19, 0x00	; 0
    6e02:	c9 01       	movw	r24, r18
    6e04:	88 0f       	add	r24, r24
    6e06:	99 1f       	adc	r25, r25
    6e08:	88 0f       	add	r24, r24
    6e0a:	99 1f       	adc	r25, r25
    6e0c:	88 0f       	add	r24, r24
    6e0e:	99 1f       	adc	r25, r25
    6e10:	82 0f       	add	r24, r18
    6e12:	93 1f       	adc	r25, r19
    6e14:	fc 01       	movw	r30, r24
    6e16:	eb 55       	subi	r30, 0x5B	; 91
    6e18:	fa 4f       	sbci	r31, 0xFA	; 250
    6e1a:	80 81       	ld	r24, Z
    6e1c:	88 23       	and	r24, r24
    6e1e:	59 f3       	breq	.-42     	; 0x6df6 <vTaskSwitchContext+0x28>
    6e20:	8b 81       	ldd	r24, Y+3	; 0x03
    6e22:	28 2f       	mov	r18, r24
    6e24:	30 e0       	ldi	r19, 0x00	; 0
    6e26:	c9 01       	movw	r24, r18
    6e28:	88 0f       	add	r24, r24
    6e2a:	99 1f       	adc	r25, r25
    6e2c:	88 0f       	add	r24, r24
    6e2e:	99 1f       	adc	r25, r25
    6e30:	88 0f       	add	r24, r24
    6e32:	99 1f       	adc	r25, r25
    6e34:	82 0f       	add	r24, r18
    6e36:	93 1f       	adc	r25, r19
    6e38:	8b 55       	subi	r24, 0x5B	; 91
    6e3a:	9a 4f       	sbci	r25, 0xFA	; 250
    6e3c:	9a 83       	std	Y+2, r25	; 0x02
    6e3e:	89 83       	std	Y+1, r24	; 0x01
    6e40:	e9 81       	ldd	r30, Y+1	; 0x01
    6e42:	fa 81       	ldd	r31, Y+2	; 0x02
    6e44:	01 80       	ldd	r0, Z+1	; 0x01
    6e46:	f2 81       	ldd	r31, Z+2	; 0x02
    6e48:	e0 2d       	mov	r30, r0
    6e4a:	82 81       	ldd	r24, Z+2	; 0x02
    6e4c:	93 81       	ldd	r25, Z+3	; 0x03
    6e4e:	e9 81       	ldd	r30, Y+1	; 0x01
    6e50:	fa 81       	ldd	r31, Y+2	; 0x02
    6e52:	92 83       	std	Z+2, r25	; 0x02
    6e54:	81 83       	std	Z+1, r24	; 0x01
    6e56:	e9 81       	ldd	r30, Y+1	; 0x01
    6e58:	fa 81       	ldd	r31, Y+2	; 0x02
    6e5a:	21 81       	ldd	r18, Z+1	; 0x01
    6e5c:	32 81       	ldd	r19, Z+2	; 0x02
    6e5e:	89 81       	ldd	r24, Y+1	; 0x01
    6e60:	9a 81       	ldd	r25, Y+2	; 0x02
    6e62:	03 96       	adiw	r24, 0x03	; 3
    6e64:	28 17       	cp	r18, r24
    6e66:	39 07       	cpc	r19, r25
    6e68:	59 f4       	brne	.+22     	; 0x6e80 <vTaskSwitchContext+0xb2>
    6e6a:	e9 81       	ldd	r30, Y+1	; 0x01
    6e6c:	fa 81       	ldd	r31, Y+2	; 0x02
    6e6e:	01 80       	ldd	r0, Z+1	; 0x01
    6e70:	f2 81       	ldd	r31, Z+2	; 0x02
    6e72:	e0 2d       	mov	r30, r0
    6e74:	82 81       	ldd	r24, Z+2	; 0x02
    6e76:	93 81       	ldd	r25, Z+3	; 0x03
    6e78:	e9 81       	ldd	r30, Y+1	; 0x01
    6e7a:	fa 81       	ldd	r31, Y+2	; 0x02
    6e7c:	92 83       	std	Z+2, r25	; 0x02
    6e7e:	81 83       	std	Z+1, r24	; 0x01
    6e80:	e9 81       	ldd	r30, Y+1	; 0x01
    6e82:	fa 81       	ldd	r31, Y+2	; 0x02
    6e84:	01 80       	ldd	r0, Z+1	; 0x01
    6e86:	f2 81       	ldd	r31, Z+2	; 0x02
    6e88:	e0 2d       	mov	r30, r0
    6e8a:	86 81       	ldd	r24, Z+6	; 0x06
    6e8c:	97 81       	ldd	r25, Z+7	; 0x07
    6e8e:	90 93 95 05 	sts	0x0595, r25
    6e92:	80 93 94 05 	sts	0x0594, r24
    6e96:	8b 81       	ldd	r24, Y+3	; 0x03
    6e98:	80 93 9a 05 	sts	0x059A, r24
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    6e9c:	0f 90       	pop	r0
    6e9e:	0f 90       	pop	r0
    6ea0:	0f 90       	pop	r0
    6ea2:	cf 91       	pop	r28
    6ea4:	df 91       	pop	r29
    6ea6:	08 95       	ret

00006ea8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    6ea8:	df 93       	push	r29
    6eaa:	cf 93       	push	r28
    6eac:	00 d0       	rcall	.+0      	; 0x6eae <vTaskPlaceOnEventList+0x6>
    6eae:	00 d0       	rcall	.+0      	; 0x6eb0 <vTaskPlaceOnEventList+0x8>
    6eb0:	cd b7       	in	r28, 0x3d	; 61
    6eb2:	de b7       	in	r29, 0x3e	; 62
    6eb4:	9a 83       	std	Y+2, r25	; 0x02
    6eb6:	89 83       	std	Y+1, r24	; 0x01
    6eb8:	7c 83       	std	Y+4, r23	; 0x04
    6eba:	6b 83       	std	Y+3, r22	; 0x03

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    6ebc:	80 91 94 05 	lds	r24, 0x0594
    6ec0:	90 91 95 05 	lds	r25, 0x0595
    6ec4:	9c 01       	movw	r18, r24
    6ec6:	24 5f       	subi	r18, 0xF4	; 244
    6ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    6eca:	89 81       	ldd	r24, Y+1	; 0x01
    6ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    6ece:	b9 01       	movw	r22, r18
    6ed0:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    6ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    6ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    6ed8:	61 e0       	ldi	r22, 0x01	; 1
    6eda:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <prvAddCurrentTaskToDelayedList>
}
    6ede:	0f 90       	pop	r0
    6ee0:	0f 90       	pop	r0
    6ee2:	0f 90       	pop	r0
    6ee4:	0f 90       	pop	r0
    6ee6:	cf 91       	pop	r28
    6ee8:	df 91       	pop	r29
    6eea:	08 95       	ret

00006eec <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    6eec:	df 93       	push	r29
    6eee:	cf 93       	push	r28
    6ef0:	00 d0       	rcall	.+0      	; 0x6ef2 <vTaskPlaceOnUnorderedEventList+0x6>
    6ef2:	00 d0       	rcall	.+0      	; 0x6ef4 <vTaskPlaceOnUnorderedEventList+0x8>
    6ef4:	00 d0       	rcall	.+0      	; 0x6ef6 <vTaskPlaceOnUnorderedEventList+0xa>
    6ef6:	cd b7       	in	r28, 0x3d	; 61
    6ef8:	de b7       	in	r29, 0x3e	; 62
    6efa:	9a 83       	std	Y+2, r25	; 0x02
    6efc:	89 83       	std	Y+1, r24	; 0x01
    6efe:	7c 83       	std	Y+4, r23	; 0x04
    6f00:	6b 83       	std	Y+3, r22	; 0x03
    6f02:	5e 83       	std	Y+6, r21	; 0x06
    6f04:	4d 83       	std	Y+5, r20	; 0x05
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    6f06:	e0 91 94 05 	lds	r30, 0x0594
    6f0a:	f0 91 95 05 	lds	r31, 0x0595
    6f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    6f10:	9c 81       	ldd	r25, Y+4	; 0x04
    6f12:	90 68       	ori	r25, 0x80	; 128
    6f14:	95 87       	std	Z+13, r25	; 0x0d
    6f16:	84 87       	std	Z+12, r24	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    6f18:	80 91 94 05 	lds	r24, 0x0594
    6f1c:	90 91 95 05 	lds	r25, 0x0595
    6f20:	9c 01       	movw	r18, r24
    6f22:	24 5f       	subi	r18, 0xF4	; 244
    6f24:	3f 4f       	sbci	r19, 0xFF	; 255
    6f26:	89 81       	ldd	r24, Y+1	; 0x01
    6f28:	9a 81       	ldd	r25, Y+2	; 0x02
    6f2a:	b9 01       	movw	r22, r18
    6f2c:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    6f30:	8d 81       	ldd	r24, Y+5	; 0x05
    6f32:	9e 81       	ldd	r25, Y+6	; 0x06
    6f34:	61 e0       	ldi	r22, 0x01	; 1
    6f36:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <prvAddCurrentTaskToDelayedList>
}
    6f3a:	26 96       	adiw	r28, 0x06	; 6
    6f3c:	0f b6       	in	r0, 0x3f	; 63
    6f3e:	f8 94       	cli
    6f40:	de bf       	out	0x3e, r29	; 62
    6f42:	0f be       	out	0x3f, r0	; 63
    6f44:	cd bf       	out	0x3d, r28	; 61
    6f46:	cf 91       	pop	r28
    6f48:	df 91       	pop	r29
    6f4a:	08 95       	ret

00006f4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    6f4c:	df 93       	push	r29
    6f4e:	cf 93       	push	r28
    6f50:	00 d0       	rcall	.+0      	; 0x6f52 <xTaskRemoveFromEventList+0x6>
    6f52:	00 d0       	rcall	.+0      	; 0x6f54 <xTaskRemoveFromEventList+0x8>
    6f54:	0f 92       	push	r0
    6f56:	cd b7       	in	r28, 0x3d	; 61
    6f58:	de b7       	in	r29, 0x3e	; 62
    6f5a:	9d 83       	std	Y+5, r25	; 0x05
    6f5c:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    6f5e:	ec 81       	ldd	r30, Y+4	; 0x04
    6f60:	fd 81       	ldd	r31, Y+5	; 0x05
    6f62:	05 80       	ldd	r0, Z+5	; 0x05
    6f64:	f6 81       	ldd	r31, Z+6	; 0x06
    6f66:	e0 2d       	mov	r30, r0
    6f68:	86 81       	ldd	r24, Z+6	; 0x06
    6f6a:	97 81       	ldd	r25, Z+7	; 0x07
    6f6c:	9b 83       	std	Y+3, r25	; 0x03
    6f6e:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    6f70:	8a 81       	ldd	r24, Y+2	; 0x02
    6f72:	9b 81       	ldd	r25, Y+3	; 0x03
    6f74:	0c 96       	adiw	r24, 0x0c	; 12
    6f76:	0e 94 24 27 	call	0x4e48	; 0x4e48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    6f7a:	80 91 a4 05 	lds	r24, 0x05A4
    6f7e:	88 23       	and	r24, r24
    6f80:	61 f5       	brne	.+88     	; 0x6fda <xTaskRemoveFromEventList+0x8e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    6f82:	8a 81       	ldd	r24, Y+2	; 0x02
    6f84:	9b 81       	ldd	r25, Y+3	; 0x03
    6f86:	02 96       	adiw	r24, 0x02	; 2
    6f88:	0e 94 24 27 	call	0x4e48	; 0x4e48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    6f8c:	ea 81       	ldd	r30, Y+2	; 0x02
    6f8e:	fb 81       	ldd	r31, Y+3	; 0x03
    6f90:	96 89       	ldd	r25, Z+22	; 0x16
    6f92:	80 91 9a 05 	lds	r24, 0x059A
    6f96:	89 17       	cp	r24, r25
    6f98:	28 f4       	brcc	.+10     	; 0x6fa4 <xTaskRemoveFromEventList+0x58>
    6f9a:	ea 81       	ldd	r30, Y+2	; 0x02
    6f9c:	fb 81       	ldd	r31, Y+3	; 0x03
    6f9e:	86 89       	ldd	r24, Z+22	; 0x16
    6fa0:	80 93 9a 05 	sts	0x059A, r24
    6fa4:	ea 81       	ldd	r30, Y+2	; 0x02
    6fa6:	fb 81       	ldd	r31, Y+3	; 0x03
    6fa8:	86 89       	ldd	r24, Z+22	; 0x16
    6faa:	28 2f       	mov	r18, r24
    6fac:	30 e0       	ldi	r19, 0x00	; 0
    6fae:	c9 01       	movw	r24, r18
    6fb0:	88 0f       	add	r24, r24
    6fb2:	99 1f       	adc	r25, r25
    6fb4:	88 0f       	add	r24, r24
    6fb6:	99 1f       	adc	r25, r25
    6fb8:	88 0f       	add	r24, r24
    6fba:	99 1f       	adc	r25, r25
    6fbc:	82 0f       	add	r24, r18
    6fbe:	93 1f       	adc	r25, r19
    6fc0:	ac 01       	movw	r20, r24
    6fc2:	4b 55       	subi	r20, 0x5B	; 91
    6fc4:	5a 4f       	sbci	r21, 0xFA	; 250
    6fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    6fc8:	9b 81       	ldd	r25, Y+3	; 0x03
    6fca:	9c 01       	movw	r18, r24
    6fcc:	2e 5f       	subi	r18, 0xFE	; 254
    6fce:	3f 4f       	sbci	r19, 0xFF	; 255
    6fd0:	ca 01       	movw	r24, r20
    6fd2:	b9 01       	movw	r22, r18
    6fd4:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <vListInsertEnd>
    6fd8:	0a c0       	rjmp	.+20     	; 0x6fee <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    6fda:	8a 81       	ldd	r24, Y+2	; 0x02
    6fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    6fde:	9c 01       	movw	r18, r24
    6fe0:	24 5f       	subi	r18, 0xF4	; 244
    6fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    6fe4:	8f ed       	ldi	r24, 0xDF	; 223
    6fe6:	95 e0       	ldi	r25, 0x05	; 5
    6fe8:	b9 01       	movw	r22, r18
    6fea:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    6fee:	ea 81       	ldd	r30, Y+2	; 0x02
    6ff0:	fb 81       	ldd	r31, Y+3	; 0x03
    6ff2:	96 89       	ldd	r25, Z+22	; 0x16
    6ff4:	e0 91 94 05 	lds	r30, 0x0594
    6ff8:	f0 91 95 05 	lds	r31, 0x0595
    6ffc:	86 89       	ldd	r24, Z+22	; 0x16
    6ffe:	89 17       	cp	r24, r25
    7000:	30 f4       	brcc	.+12     	; 0x700e <xTaskRemoveFromEventList+0xc2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    7002:	81 e0       	ldi	r24, 0x01	; 1
    7004:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    7006:	81 e0       	ldi	r24, 0x01	; 1
    7008:	80 93 9d 05 	sts	0x059D, r24
    700c:	01 c0       	rjmp	.+2      	; 0x7010 <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		xReturn = pdFALSE;
    700e:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    7010:	89 81       	ldd	r24, Y+1	; 0x01
}
    7012:	0f 90       	pop	r0
    7014:	0f 90       	pop	r0
    7016:	0f 90       	pop	r0
    7018:	0f 90       	pop	r0
    701a:	0f 90       	pop	r0
    701c:	cf 91       	pop	r28
    701e:	df 91       	pop	r29
    7020:	08 95       	ret

00007022 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    7022:	df 93       	push	r29
    7024:	cf 93       	push	r28
    7026:	00 d0       	rcall	.+0      	; 0x7028 <vTaskRemoveFromUnorderedEventList+0x6>
    7028:	00 d0       	rcall	.+0      	; 0x702a <vTaskRemoveFromUnorderedEventList+0x8>
    702a:	00 d0       	rcall	.+0      	; 0x702c <vTaskRemoveFromUnorderedEventList+0xa>
    702c:	cd b7       	in	r28, 0x3d	; 61
    702e:	de b7       	in	r29, 0x3e	; 62
    7030:	9c 83       	std	Y+4, r25	; 0x04
    7032:	8b 83       	std	Y+3, r24	; 0x03
    7034:	7e 83       	std	Y+6, r23	; 0x06
    7036:	6d 83       	std	Y+5, r22	; 0x05
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    7038:	8d 81       	ldd	r24, Y+5	; 0x05
    703a:	9e 81       	ldd	r25, Y+6	; 0x06
    703c:	90 68       	ori	r25, 0x80	; 128
    703e:	eb 81       	ldd	r30, Y+3	; 0x03
    7040:	fc 81       	ldd	r31, Y+4	; 0x04
    7042:	91 83       	std	Z+1, r25	; 0x01
    7044:	80 83       	st	Z, r24

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    7046:	eb 81       	ldd	r30, Y+3	; 0x03
    7048:	fc 81       	ldd	r31, Y+4	; 0x04
    704a:	86 81       	ldd	r24, Z+6	; 0x06
    704c:	97 81       	ldd	r25, Z+7	; 0x07
    704e:	9a 83       	std	Y+2, r25	; 0x02
    7050:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    7052:	8b 81       	ldd	r24, Y+3	; 0x03
    7054:	9c 81       	ldd	r25, Y+4	; 0x04
    7056:	0e 94 24 27 	call	0x4e48	; 0x4e48 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    705a:	89 81       	ldd	r24, Y+1	; 0x01
    705c:	9a 81       	ldd	r25, Y+2	; 0x02
    705e:	02 96       	adiw	r24, 0x02	; 2
    7060:	0e 94 24 27 	call	0x4e48	; 0x4e48 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    7064:	e9 81       	ldd	r30, Y+1	; 0x01
    7066:	fa 81       	ldd	r31, Y+2	; 0x02
    7068:	96 89       	ldd	r25, Z+22	; 0x16
    706a:	80 91 9a 05 	lds	r24, 0x059A
    706e:	89 17       	cp	r24, r25
    7070:	28 f4       	brcc	.+10     	; 0x707c <vTaskRemoveFromUnorderedEventList+0x5a>
    7072:	e9 81       	ldd	r30, Y+1	; 0x01
    7074:	fa 81       	ldd	r31, Y+2	; 0x02
    7076:	86 89       	ldd	r24, Z+22	; 0x16
    7078:	80 93 9a 05 	sts	0x059A, r24
    707c:	e9 81       	ldd	r30, Y+1	; 0x01
    707e:	fa 81       	ldd	r31, Y+2	; 0x02
    7080:	86 89       	ldd	r24, Z+22	; 0x16
    7082:	28 2f       	mov	r18, r24
    7084:	30 e0       	ldi	r19, 0x00	; 0
    7086:	c9 01       	movw	r24, r18
    7088:	88 0f       	add	r24, r24
    708a:	99 1f       	adc	r25, r25
    708c:	88 0f       	add	r24, r24
    708e:	99 1f       	adc	r25, r25
    7090:	88 0f       	add	r24, r24
    7092:	99 1f       	adc	r25, r25
    7094:	82 0f       	add	r24, r18
    7096:	93 1f       	adc	r25, r19
    7098:	ac 01       	movw	r20, r24
    709a:	4b 55       	subi	r20, 0x5B	; 91
    709c:	5a 4f       	sbci	r21, 0xFA	; 250
    709e:	89 81       	ldd	r24, Y+1	; 0x01
    70a0:	9a 81       	ldd	r25, Y+2	; 0x02
    70a2:	9c 01       	movw	r18, r24
    70a4:	2e 5f       	subi	r18, 0xFE	; 254
    70a6:	3f 4f       	sbci	r19, 0xFF	; 255
    70a8:	ca 01       	movw	r24, r20
    70aa:	b9 01       	movw	r22, r18
    70ac:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    70b0:	e9 81       	ldd	r30, Y+1	; 0x01
    70b2:	fa 81       	ldd	r31, Y+2	; 0x02
    70b4:	96 89       	ldd	r25, Z+22	; 0x16
    70b6:	e0 91 94 05 	lds	r30, 0x0594
    70ba:	f0 91 95 05 	lds	r31, 0x0595
    70be:	86 89       	ldd	r24, Z+22	; 0x16
    70c0:	89 17       	cp	r24, r25
    70c2:	18 f4       	brcc	.+6      	; 0x70ca <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
    70c4:	81 e0       	ldi	r24, 0x01	; 1
    70c6:	80 93 9d 05 	sts	0x059D, r24
	}
}
    70ca:	26 96       	adiw	r28, 0x06	; 6
    70cc:	0f b6       	in	r0, 0x3f	; 63
    70ce:	f8 94       	cli
    70d0:	de bf       	out	0x3e, r29	; 62
    70d2:	0f be       	out	0x3f, r0	; 63
    70d4:	cd bf       	out	0x3d, r28	; 61
    70d6:	cf 91       	pop	r28
    70d8:	df 91       	pop	r29
    70da:	08 95       	ret

000070dc <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    70dc:	df 93       	push	r29
    70de:	cf 93       	push	r28
    70e0:	00 d0       	rcall	.+0      	; 0x70e2 <vTaskSetTimeOutState+0x6>
    70e2:	cd b7       	in	r28, 0x3d	; 61
    70e4:	de b7       	in	r29, 0x3e	; 62
    70e6:	9a 83       	std	Y+2, r25	; 0x02
    70e8:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
    70ea:	0f b6       	in	r0, 0x3f	; 63
    70ec:	f8 94       	cli
    70ee:	0f 92       	push	r0
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
    70f0:	80 91 9e 05 	lds	r24, 0x059E
    70f4:	e9 81       	ldd	r30, Y+1	; 0x01
    70f6:	fa 81       	ldd	r31, Y+2	; 0x02
    70f8:	80 83       	st	Z, r24
		pxTimeOut->xTimeOnEntering = xTickCount;
    70fa:	80 91 98 05 	lds	r24, 0x0598
    70fe:	90 91 99 05 	lds	r25, 0x0599
    7102:	e9 81       	ldd	r30, Y+1	; 0x01
    7104:	fa 81       	ldd	r31, Y+2	; 0x02
    7106:	92 83       	std	Z+2, r25	; 0x02
    7108:	81 83       	std	Z+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    710a:	0f 90       	pop	r0
    710c:	0f be       	out	0x3f, r0	; 63
}
    710e:	0f 90       	pop	r0
    7110:	0f 90       	pop	r0
    7112:	cf 91       	pop	r28
    7114:	df 91       	pop	r29
    7116:	08 95       	ret

00007118 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    7118:	df 93       	push	r29
    711a:	cf 93       	push	r28
    711c:	00 d0       	rcall	.+0      	; 0x711e <vTaskInternalSetTimeOutState+0x6>
    711e:	cd b7       	in	r28, 0x3d	; 61
    7120:	de b7       	in	r29, 0x3e	; 62
    7122:	9a 83       	std	Y+2, r25	; 0x02
    7124:	89 83       	std	Y+1, r24	; 0x01
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    7126:	80 91 9e 05 	lds	r24, 0x059E
    712a:	e9 81       	ldd	r30, Y+1	; 0x01
    712c:	fa 81       	ldd	r31, Y+2	; 0x02
    712e:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    7130:	80 91 98 05 	lds	r24, 0x0598
    7134:	90 91 99 05 	lds	r25, 0x0599
    7138:	e9 81       	ldd	r30, Y+1	; 0x01
    713a:	fa 81       	ldd	r31, Y+2	; 0x02
    713c:	92 83       	std	Z+2, r25	; 0x02
    713e:	81 83       	std	Z+1, r24	; 0x01
}
    7140:	0f 90       	pop	r0
    7142:	0f 90       	pop	r0
    7144:	cf 91       	pop	r28
    7146:	df 91       	pop	r29
    7148:	08 95       	ret

0000714a <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    714a:	df 93       	push	r29
    714c:	cf 93       	push	r28
    714e:	cd b7       	in	r28, 0x3d	; 61
    7150:	de b7       	in	r29, 0x3e	; 62
    7152:	29 97       	sbiw	r28, 0x09	; 9
    7154:	0f b6       	in	r0, 0x3f	; 63
    7156:	f8 94       	cli
    7158:	de bf       	out	0x3e, r29	; 62
    715a:	0f be       	out	0x3f, r0	; 63
    715c:	cd bf       	out	0x3d, r28	; 61
    715e:	9f 83       	std	Y+7, r25	; 0x07
    7160:	8e 83       	std	Y+6, r24	; 0x06
    7162:	79 87       	std	Y+9, r23	; 0x09
    7164:	68 87       	std	Y+8, r22	; 0x08
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    7166:	0f b6       	in	r0, 0x3f	; 63
    7168:	f8 94       	cli
    716a:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    716c:	80 91 98 05 	lds	r24, 0x0598
    7170:	90 91 99 05 	lds	r25, 0x0599
    7174:	9c 83       	std	Y+4, r25	; 0x04
    7176:	8b 83       	std	Y+3, r24	; 0x03
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    7178:	ee 81       	ldd	r30, Y+6	; 0x06
    717a:	ff 81       	ldd	r31, Y+7	; 0x07
    717c:	21 81       	ldd	r18, Z+1	; 0x01
    717e:	32 81       	ldd	r19, Z+2	; 0x02
    7180:	8b 81       	ldd	r24, Y+3	; 0x03
    7182:	9c 81       	ldd	r25, Y+4	; 0x04
    7184:	82 1b       	sub	r24, r18
    7186:	93 0b       	sbc	r25, r19
    7188:	9a 83       	std	Y+2, r25	; 0x02
    718a:	89 83       	std	Y+1, r24	; 0x01
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    718c:	ee 81       	ldd	r30, Y+6	; 0x06
    718e:	ff 81       	ldd	r31, Y+7	; 0x07
    7190:	90 81       	ld	r25, Z
    7192:	80 91 9e 05 	lds	r24, 0x059E
    7196:	98 17       	cp	r25, r24
    7198:	61 f0       	breq	.+24     	; 0x71b2 <xTaskCheckForTimeOut+0x68>
    719a:	ee 81       	ldd	r30, Y+6	; 0x06
    719c:	ff 81       	ldd	r31, Y+7	; 0x07
    719e:	21 81       	ldd	r18, Z+1	; 0x01
    71a0:	32 81       	ldd	r19, Z+2	; 0x02
    71a2:	8b 81       	ldd	r24, Y+3	; 0x03
    71a4:	9c 81       	ldd	r25, Y+4	; 0x04
    71a6:	82 17       	cp	r24, r18
    71a8:	93 07       	cpc	r25, r19
    71aa:	18 f0       	brcs	.+6      	; 0x71b2 <xTaskCheckForTimeOut+0x68>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    71ac:	81 e0       	ldi	r24, 0x01	; 1
    71ae:	8d 83       	std	Y+5, r24	; 0x05
    71b0:	23 c0       	rjmp	.+70     	; 0x71f8 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    71b2:	e8 85       	ldd	r30, Y+8	; 0x08
    71b4:	f9 85       	ldd	r31, Y+9	; 0x09
    71b6:	20 81       	ld	r18, Z
    71b8:	31 81       	ldd	r19, Z+1	; 0x01
    71ba:	89 81       	ldd	r24, Y+1	; 0x01
    71bc:	9a 81       	ldd	r25, Y+2	; 0x02
    71be:	82 17       	cp	r24, r18
    71c0:	93 07       	cpc	r25, r19
    71c2:	a0 f4       	brcc	.+40     	; 0x71ec <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    71c4:	e8 85       	ldd	r30, Y+8	; 0x08
    71c6:	f9 85       	ldd	r31, Y+9	; 0x09
    71c8:	20 81       	ld	r18, Z
    71ca:	31 81       	ldd	r19, Z+1	; 0x01
    71cc:	89 81       	ldd	r24, Y+1	; 0x01
    71ce:	9a 81       	ldd	r25, Y+2	; 0x02
    71d0:	a9 01       	movw	r20, r18
    71d2:	48 1b       	sub	r20, r24
    71d4:	59 0b       	sbc	r21, r25
    71d6:	ca 01       	movw	r24, r20
    71d8:	e8 85       	ldd	r30, Y+8	; 0x08
    71da:	f9 85       	ldd	r31, Y+9	; 0x09
    71dc:	91 83       	std	Z+1, r25	; 0x01
    71de:	80 83       	st	Z, r24
			vTaskInternalSetTimeOutState( pxTimeOut );
    71e0:	8e 81       	ldd	r24, Y+6	; 0x06
    71e2:	9f 81       	ldd	r25, Y+7	; 0x07
    71e4:	0e 94 8c 38 	call	0x7118	; 0x7118 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
    71e8:	1d 82       	std	Y+5, r1	; 0x05
    71ea:	06 c0       	rjmp	.+12     	; 0x71f8 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
    71ec:	e8 85       	ldd	r30, Y+8	; 0x08
    71ee:	f9 85       	ldd	r31, Y+9	; 0x09
    71f0:	11 82       	std	Z+1, r1	; 0x01
    71f2:	10 82       	st	Z, r1
			xReturn = pdTRUE;
    71f4:	81 e0       	ldi	r24, 0x01	; 1
    71f6:	8d 83       	std	Y+5, r24	; 0x05
		}
	}
	taskEXIT_CRITICAL();
    71f8:	0f 90       	pop	r0
    71fa:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    71fc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    71fe:	29 96       	adiw	r28, 0x09	; 9
    7200:	0f b6       	in	r0, 0x3f	; 63
    7202:	f8 94       	cli
    7204:	de bf       	out	0x3e, r29	; 62
    7206:	0f be       	out	0x3f, r0	; 63
    7208:	cd bf       	out	0x3d, r28	; 61
    720a:	cf 91       	pop	r28
    720c:	df 91       	pop	r29
    720e:	08 95       	ret

00007210 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    7210:	df 93       	push	r29
    7212:	cf 93       	push	r28
    7214:	cd b7       	in	r28, 0x3d	; 61
    7216:	de b7       	in	r29, 0x3e	; 62
	xYieldPending = pdTRUE;
    7218:	81 e0       	ldi	r24, 0x01	; 1
    721a:	80 93 9d 05 	sts	0x059D, r24
}
    721e:	cf 91       	pop	r28
    7220:	df 91       	pop	r29
    7222:	08 95       	ret

00007224 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    7224:	df 93       	push	r29
    7226:	cf 93       	push	r28
    7228:	00 d0       	rcall	.+0      	; 0x722a <prvIdleTask+0x6>
    722a:	cd b7       	in	r28, 0x3d	; 61
    722c:	de b7       	in	r29, 0x3e	; 62
    722e:	9a 83       	std	Y+2, r25	; 0x02
    7230:	89 83       	std	Y+1, r24	; 0x01

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    7232:	0e 94 59 39 	call	0x72b2	; 0x72b2 <prvCheckTasksWaitingTermination>
    7236:	fd cf       	rjmp	.-6      	; 0x7232 <prvIdleTask+0xe>

00007238 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    7238:	df 93       	push	r29
    723a:	cf 93       	push	r28
    723c:	0f 92       	push	r0
    723e:	cd b7       	in	r28, 0x3d	; 61
    7240:	de b7       	in	r29, 0x3e	; 62
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    7242:	19 82       	std	Y+1, r1	; 0x01
    7244:	13 c0       	rjmp	.+38     	; 0x726c <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    7246:	89 81       	ldd	r24, Y+1	; 0x01
    7248:	28 2f       	mov	r18, r24
    724a:	30 e0       	ldi	r19, 0x00	; 0
    724c:	c9 01       	movw	r24, r18
    724e:	88 0f       	add	r24, r24
    7250:	99 1f       	adc	r25, r25
    7252:	88 0f       	add	r24, r24
    7254:	99 1f       	adc	r25, r25
    7256:	88 0f       	add	r24, r24
    7258:	99 1f       	adc	r25, r25
    725a:	82 0f       	add	r24, r18
    725c:	93 1f       	adc	r25, r19
    725e:	8b 55       	subi	r24, 0x5B	; 91
    7260:	9a 4f       	sbci	r25, 0xFA	; 250
    7262:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    7266:	89 81       	ldd	r24, Y+1	; 0x01
    7268:	8f 5f       	subi	r24, 0xFF	; 255
    726a:	89 83       	std	Y+1, r24	; 0x01
    726c:	89 81       	ldd	r24, Y+1	; 0x01
    726e:	84 30       	cpi	r24, 0x04	; 4
    7270:	50 f3       	brcs	.-44     	; 0x7246 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    7272:	89 ec       	ldi	r24, 0xC9	; 201
    7274:	95 e0       	ldi	r25, 0x05	; 5
    7276:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    727a:	82 ed       	ldi	r24, 0xD2	; 210
    727c:	95 e0       	ldi	r25, 0x05	; 5
    727e:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    7282:	8f ed       	ldi	r24, 0xDF	; 223
    7284:	95 e0       	ldi	r25, 0x05	; 5
    7286:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    728a:	88 ee       	ldi	r24, 0xE8	; 232
    728c:	95 e0       	ldi	r25, 0x05	; 5
    728e:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    7292:	89 ec       	ldi	r24, 0xC9	; 201
    7294:	95 e0       	ldi	r25, 0x05	; 5
    7296:	90 93 dc 05 	sts	0x05DC, r25
    729a:	80 93 db 05 	sts	0x05DB, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    729e:	82 ed       	ldi	r24, 0xD2	; 210
    72a0:	95 e0       	ldi	r25, 0x05	; 5
    72a2:	90 93 de 05 	sts	0x05DE, r25
    72a6:	80 93 dd 05 	sts	0x05DD, r24
}
    72aa:	0f 90       	pop	r0
    72ac:	cf 91       	pop	r28
    72ae:	df 91       	pop	r29
    72b0:	08 95       	ret

000072b2 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    72b2:	df 93       	push	r29
    72b4:	cf 93       	push	r28
    72b6:	00 d0       	rcall	.+0      	; 0x72b8 <prvCheckTasksWaitingTermination+0x6>
    72b8:	cd b7       	in	r28, 0x3d	; 61
    72ba:	de b7       	in	r29, 0x3e	; 62
    72bc:	20 c0       	rjmp	.+64     	; 0x72fe <prvCheckTasksWaitingTermination+0x4c>

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
    72be:	0f b6       	in	r0, 0x3f	; 63
    72c0:	f8 94       	cli
    72c2:	0f 92       	push	r0
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    72c4:	e0 91 ed 05 	lds	r30, 0x05ED
    72c8:	f0 91 ee 05 	lds	r31, 0x05EE
    72cc:	86 81       	ldd	r24, Z+6	; 0x06
    72ce:	97 81       	ldd	r25, Z+7	; 0x07
    72d0:	9a 83       	std	Y+2, r25	; 0x02
    72d2:	89 83       	std	Y+1, r24	; 0x01
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    72d4:	89 81       	ldd	r24, Y+1	; 0x01
    72d6:	9a 81       	ldd	r25, Y+2	; 0x02
    72d8:	02 96       	adiw	r24, 0x02	; 2
    72da:	0e 94 24 27 	call	0x4e48	; 0x4e48 <uxListRemove>
				--uxCurrentNumberOfTasks;
    72de:	80 91 97 05 	lds	r24, 0x0597
    72e2:	81 50       	subi	r24, 0x01	; 1
    72e4:	80 93 97 05 	sts	0x0597, r24
				--uxDeletedTasksWaitingCleanUp;
    72e8:	80 91 96 05 	lds	r24, 0x0596
    72ec:	81 50       	subi	r24, 0x01	; 1
    72ee:	80 93 96 05 	sts	0x0596, r24
			}
			taskEXIT_CRITICAL();
    72f2:	0f 90       	pop	r0
    72f4:	0f be       	out	0x3f, r0	; 63

			prvDeleteTCB( pxTCB );
    72f6:	89 81       	ldd	r24, Y+1	; 0x01
    72f8:	9a 81       	ldd	r25, Y+2	; 0x02
    72fa:	0e 94 88 39 	call	0x7310	; 0x7310 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    72fe:	80 91 96 05 	lds	r24, 0x0596
    7302:	88 23       	and	r24, r24
    7304:	e1 f6       	brne	.-72     	; 0x72be <prvCheckTasksWaitingTermination+0xc>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    7306:	0f 90       	pop	r0
    7308:	0f 90       	pop	r0
    730a:	cf 91       	pop	r28
    730c:	df 91       	pop	r29
    730e:	08 95       	ret

00007310 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    7310:	df 93       	push	r29
    7312:	cf 93       	push	r28
    7314:	00 d0       	rcall	.+0      	; 0x7316 <prvDeleteTCB+0x6>
    7316:	cd b7       	in	r28, 0x3d	; 61
    7318:	de b7       	in	r29, 0x3e	; 62
    731a:	9a 83       	std	Y+2, r25	; 0x02
    731c:	89 83       	std	Y+1, r24	; 0x01

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    731e:	e9 81       	ldd	r30, Y+1	; 0x01
    7320:	fa 81       	ldd	r31, Y+2	; 0x02
    7322:	87 89       	ldd	r24, Z+23	; 0x17
    7324:	90 8d       	ldd	r25, Z+24	; 0x18
    7326:	0e 94 14 26 	call	0x4c28	; 0x4c28 <vPortFree>
			vPortFree( pxTCB );
    732a:	89 81       	ldd	r24, Y+1	; 0x01
    732c:	9a 81       	ldd	r25, Y+2	; 0x02
    732e:	0e 94 14 26 	call	0x4c28	; 0x4c28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    7332:	0f 90       	pop	r0
    7334:	0f 90       	pop	r0
    7336:	cf 91       	pop	r28
    7338:	df 91       	pop	r29
    733a:	08 95       	ret

0000733c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    733c:	df 93       	push	r29
    733e:	cf 93       	push	r28
    7340:	00 d0       	rcall	.+0      	; 0x7342 <prvResetNextTaskUnblockTime+0x6>
    7342:	cd b7       	in	r28, 0x3d	; 61
    7344:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    7346:	e0 91 db 05 	lds	r30, 0x05DB
    734a:	f0 91 dc 05 	lds	r31, 0x05DC
    734e:	80 81       	ld	r24, Z
    7350:	88 23       	and	r24, r24
    7352:	39 f4       	brne	.+14     	; 0x7362 <prvResetNextTaskUnblockTime+0x26>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    7354:	8f ef       	ldi	r24, 0xFF	; 255
    7356:	9f ef       	ldi	r25, 0xFF	; 255
    7358:	90 93 a1 05 	sts	0x05A1, r25
    735c:	80 93 a0 05 	sts	0x05A0, r24
    7360:	13 c0       	rjmp	.+38     	; 0x7388 <prvResetNextTaskUnblockTime+0x4c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    7362:	e0 91 db 05 	lds	r30, 0x05DB
    7366:	f0 91 dc 05 	lds	r31, 0x05DC
    736a:	05 80       	ldd	r0, Z+5	; 0x05
    736c:	f6 81       	ldd	r31, Z+6	; 0x06
    736e:	e0 2d       	mov	r30, r0
    7370:	86 81       	ldd	r24, Z+6	; 0x06
    7372:	97 81       	ldd	r25, Z+7	; 0x07
    7374:	9a 83       	std	Y+2, r25	; 0x02
    7376:	89 83       	std	Y+1, r24	; 0x01
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    7378:	e9 81       	ldd	r30, Y+1	; 0x01
    737a:	fa 81       	ldd	r31, Y+2	; 0x02
    737c:	82 81       	ldd	r24, Z+2	; 0x02
    737e:	93 81       	ldd	r25, Z+3	; 0x03
    7380:	90 93 a1 05 	sts	0x05A1, r25
    7384:	80 93 a0 05 	sts	0x05A0, r24
	}
}
    7388:	0f 90       	pop	r0
    738a:	0f 90       	pop	r0
    738c:	cf 91       	pop	r28
    738e:	df 91       	pop	r29
    7390:	08 95       	ret

00007392 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    7392:	df 93       	push	r29
    7394:	cf 93       	push	r28
    7396:	00 d0       	rcall	.+0      	; 0x7398 <uxTaskResetEventItemValue+0x6>
    7398:	cd b7       	in	r28, 0x3d	; 61
    739a:	de b7       	in	r29, 0x3e	; 62
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    739c:	e0 91 94 05 	lds	r30, 0x0594
    73a0:	f0 91 95 05 	lds	r31, 0x0595
    73a4:	84 85       	ldd	r24, Z+12	; 0x0c
    73a6:	95 85       	ldd	r25, Z+13	; 0x0d
    73a8:	9a 83       	std	Y+2, r25	; 0x02
    73aa:	89 83       	std	Y+1, r24	; 0x01

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    73ac:	a0 91 94 05 	lds	r26, 0x0594
    73b0:	b0 91 95 05 	lds	r27, 0x0595
    73b4:	e0 91 94 05 	lds	r30, 0x0594
    73b8:	f0 91 95 05 	lds	r31, 0x0595
    73bc:	86 89       	ldd	r24, Z+22	; 0x16
    73be:	28 2f       	mov	r18, r24
    73c0:	30 e0       	ldi	r19, 0x00	; 0
    73c2:	84 e0       	ldi	r24, 0x04	; 4
    73c4:	90 e0       	ldi	r25, 0x00	; 0
    73c6:	82 1b       	sub	r24, r18
    73c8:	93 0b       	sbc	r25, r19
    73ca:	1d 96       	adiw	r26, 0x0d	; 13
    73cc:	9c 93       	st	X, r25
    73ce:	8e 93       	st	-X, r24
    73d0:	1c 97       	sbiw	r26, 0x0c	; 12

	return uxReturn;
    73d2:	89 81       	ldd	r24, Y+1	; 0x01
    73d4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    73d6:	0f 90       	pop	r0
    73d8:	0f 90       	pop	r0
    73da:	cf 91       	pop	r28
    73dc:	df 91       	pop	r29
    73de:	08 95       	ret

000073e0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    73e0:	df 93       	push	r29
    73e2:	cf 93       	push	r28
    73e4:	cd b7       	in	r28, 0x3d	; 61
    73e6:	de b7       	in	r29, 0x3e	; 62
    73e8:	27 97       	sbiw	r28, 0x07	; 7
    73ea:	0f b6       	in	r0, 0x3f	; 63
    73ec:	f8 94       	cli
    73ee:	de bf       	out	0x3e, r29	; 62
    73f0:	0f be       	out	0x3f, r0	; 63
    73f2:	cd bf       	out	0x3d, r28	; 61
    73f4:	8d 83       	std	Y+5, r24	; 0x05
    73f6:	7f 83       	std	Y+7, r23	; 0x07
    73f8:	6e 83       	std	Y+6, r22	; 0x06
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    73fa:	0f b6       	in	r0, 0x3f	; 63
    73fc:	f8 94       	cli
    73fe:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    7400:	e0 91 94 05 	lds	r30, 0x0594
    7404:	f0 91 95 05 	lds	r31, 0x0595
    7408:	81 a1       	ldd	r24, Z+33	; 0x21
    740a:	92 a1       	ldd	r25, Z+34	; 0x22
    740c:	a3 a1       	ldd	r26, Z+35	; 0x23
    740e:	b4 a1       	ldd	r27, Z+36	; 0x24
    7410:	00 97       	sbiw	r24, 0x00	; 0
    7412:	a1 05       	cpc	r26, r1
    7414:	b1 05       	cpc	r27, r1
    7416:	89 f4       	brne	.+34     	; 0x743a <ulTaskNotifyTake+0x5a>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    7418:	e0 91 94 05 	lds	r30, 0x0594
    741c:	f0 91 95 05 	lds	r31, 0x0595
    7420:	81 e0       	ldi	r24, 0x01	; 1
    7422:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    7424:	8e 81       	ldd	r24, Y+6	; 0x06
    7426:	9f 81       	ldd	r25, Y+7	; 0x07
    7428:	00 97       	sbiw	r24, 0x00	; 0
    742a:	39 f0       	breq	.+14     	; 0x743a <ulTaskNotifyTake+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    742c:	8e 81       	ldd	r24, Y+6	; 0x06
    742e:	9f 81       	ldd	r25, Y+7	; 0x07
    7430:	61 e0       	ldi	r22, 0x01	; 1
    7432:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    7436:	0e 94 bf 29 	call	0x537e	; 0x537e <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    743a:	0f 90       	pop	r0
    743c:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    743e:	0f b6       	in	r0, 0x3f	; 63
    7440:	f8 94       	cli
    7442:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    7444:	e0 91 94 05 	lds	r30, 0x0594
    7448:	f0 91 95 05 	lds	r31, 0x0595
    744c:	81 a1       	ldd	r24, Z+33	; 0x21
    744e:	92 a1       	ldd	r25, Z+34	; 0x22
    7450:	a3 a1       	ldd	r26, Z+35	; 0x23
    7452:	b4 a1       	ldd	r27, Z+36	; 0x24
    7454:	89 83       	std	Y+1, r24	; 0x01
    7456:	9a 83       	std	Y+2, r25	; 0x02
    7458:	ab 83       	std	Y+3, r26	; 0x03
    745a:	bc 83       	std	Y+4, r27	; 0x04

			if( ulReturn != 0UL )
    745c:	89 81       	ldd	r24, Y+1	; 0x01
    745e:	9a 81       	ldd	r25, Y+2	; 0x02
    7460:	ab 81       	ldd	r26, Y+3	; 0x03
    7462:	bc 81       	ldd	r27, Y+4	; 0x04
    7464:	00 97       	sbiw	r24, 0x00	; 0
    7466:	a1 05       	cpc	r26, r1
    7468:	b1 05       	cpc	r27, r1
    746a:	d9 f0       	breq	.+54     	; 0x74a2 <ulTaskNotifyTake+0xc2>
			{
				if( xClearCountOnExit != pdFALSE )
    746c:	8d 81       	ldd	r24, Y+5	; 0x05
    746e:	88 23       	and	r24, r24
    7470:	49 f0       	breq	.+18     	; 0x7484 <ulTaskNotifyTake+0xa4>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    7472:	e0 91 94 05 	lds	r30, 0x0594
    7476:	f0 91 95 05 	lds	r31, 0x0595
    747a:	11 a2       	std	Z+33, r1	; 0x21
    747c:	12 a2       	std	Z+34, r1	; 0x22
    747e:	13 a2       	std	Z+35, r1	; 0x23
    7480:	14 a2       	std	Z+36, r1	; 0x24
    7482:	0f c0       	rjmp	.+30     	; 0x74a2 <ulTaskNotifyTake+0xc2>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
    7484:	e0 91 94 05 	lds	r30, 0x0594
    7488:	f0 91 95 05 	lds	r31, 0x0595
    748c:	89 81       	ldd	r24, Y+1	; 0x01
    748e:	9a 81       	ldd	r25, Y+2	; 0x02
    7490:	ab 81       	ldd	r26, Y+3	; 0x03
    7492:	bc 81       	ldd	r27, Y+4	; 0x04
    7494:	01 97       	sbiw	r24, 0x01	; 1
    7496:	a1 09       	sbc	r26, r1
    7498:	b1 09       	sbc	r27, r1
    749a:	81 a3       	std	Z+33, r24	; 0x21
    749c:	92 a3       	std	Z+34, r25	; 0x22
    749e:	a3 a3       	std	Z+35, r26	; 0x23
    74a0:	b4 a3       	std	Z+36, r27	; 0x24
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    74a2:	e0 91 94 05 	lds	r30, 0x0594
    74a6:	f0 91 95 05 	lds	r31, 0x0595
    74aa:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    74ac:	0f 90       	pop	r0
    74ae:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
    74b0:	89 81       	ldd	r24, Y+1	; 0x01
    74b2:	9a 81       	ldd	r25, Y+2	; 0x02
    74b4:	ab 81       	ldd	r26, Y+3	; 0x03
    74b6:	bc 81       	ldd	r27, Y+4	; 0x04
	}
    74b8:	bc 01       	movw	r22, r24
    74ba:	cd 01       	movw	r24, r26
    74bc:	27 96       	adiw	r28, 0x07	; 7
    74be:	0f b6       	in	r0, 0x3f	; 63
    74c0:	f8 94       	cli
    74c2:	de bf       	out	0x3e, r29	; 62
    74c4:	0f be       	out	0x3f, r0	; 63
    74c6:	cd bf       	out	0x3d, r28	; 61
    74c8:	cf 91       	pop	r28
    74ca:	df 91       	pop	r29
    74cc:	08 95       	ret

000074ce <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    74ce:	ef 92       	push	r14
    74d0:	ff 92       	push	r15
    74d2:	0f 93       	push	r16
    74d4:	1f 93       	push	r17
    74d6:	df 93       	push	r29
    74d8:	cf 93       	push	r28
    74da:	cd b7       	in	r28, 0x3d	; 61
    74dc:	de b7       	in	r29, 0x3e	; 62
    74de:	2d 97       	sbiw	r28, 0x0d	; 13
    74e0:	0f b6       	in	r0, 0x3f	; 63
    74e2:	f8 94       	cli
    74e4:	de bf       	out	0x3e, r29	; 62
    74e6:	0f be       	out	0x3f, r0	; 63
    74e8:	cd bf       	out	0x3d, r28	; 61
    74ea:	6a 83       	std	Y+2, r22	; 0x02
    74ec:	7b 83       	std	Y+3, r23	; 0x03
    74ee:	8c 83       	std	Y+4, r24	; 0x04
    74f0:	9d 83       	std	Y+5, r25	; 0x05
    74f2:	2e 83       	std	Y+6, r18	; 0x06
    74f4:	3f 83       	std	Y+7, r19	; 0x07
    74f6:	48 87       	std	Y+8, r20	; 0x08
    74f8:	59 87       	std	Y+9, r21	; 0x09
    74fa:	1b 87       	std	Y+11, r17	; 0x0b
    74fc:	0a 87       	std	Y+10, r16	; 0x0a
    74fe:	fd 86       	std	Y+13, r15	; 0x0d
    7500:	ec 86       	std	Y+12, r14	; 0x0c
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    7502:	0f b6       	in	r0, 0x3f	; 63
    7504:	f8 94       	cli
    7506:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    7508:	e0 91 94 05 	lds	r30, 0x0594
    750c:	f0 91 95 05 	lds	r31, 0x0595
    7510:	85 a1       	ldd	r24, Z+37	; 0x25
    7512:	82 30       	cpi	r24, 0x02	; 2
    7514:	49 f1       	breq	.+82     	; 0x7568 <xTaskNotifyWait+0x9a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    7516:	e0 91 94 05 	lds	r30, 0x0594
    751a:	f0 91 95 05 	lds	r31, 0x0595
    751e:	21 a1       	ldd	r18, Z+33	; 0x21
    7520:	32 a1       	ldd	r19, Z+34	; 0x22
    7522:	43 a1       	ldd	r20, Z+35	; 0x23
    7524:	54 a1       	ldd	r21, Z+36	; 0x24
    7526:	8a 81       	ldd	r24, Y+2	; 0x02
    7528:	9b 81       	ldd	r25, Y+3	; 0x03
    752a:	ac 81       	ldd	r26, Y+4	; 0x04
    752c:	bd 81       	ldd	r27, Y+5	; 0x05
    752e:	80 95       	com	r24
    7530:	90 95       	com	r25
    7532:	a0 95       	com	r26
    7534:	b0 95       	com	r27
    7536:	82 23       	and	r24, r18
    7538:	93 23       	and	r25, r19
    753a:	a4 23       	and	r26, r20
    753c:	b5 23       	and	r27, r21
    753e:	81 a3       	std	Z+33, r24	; 0x21
    7540:	92 a3       	std	Z+34, r25	; 0x22
    7542:	a3 a3       	std	Z+35, r26	; 0x23
    7544:	b4 a3       	std	Z+36, r27	; 0x24

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    7546:	e0 91 94 05 	lds	r30, 0x0594
    754a:	f0 91 95 05 	lds	r31, 0x0595
    754e:	81 e0       	ldi	r24, 0x01	; 1
    7550:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    7552:	8c 85       	ldd	r24, Y+12	; 0x0c
    7554:	9d 85       	ldd	r25, Y+13	; 0x0d
    7556:	00 97       	sbiw	r24, 0x00	; 0
    7558:	39 f0       	breq	.+14     	; 0x7568 <xTaskNotifyWait+0x9a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    755a:	8c 85       	ldd	r24, Y+12	; 0x0c
    755c:	9d 85       	ldd	r25, Y+13	; 0x0d
    755e:	61 e0       	ldi	r22, 0x01	; 1
    7560:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    7564:	0e 94 bf 29 	call	0x537e	; 0x537e <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    7568:	0f 90       	pop	r0
    756a:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    756c:	0f b6       	in	r0, 0x3f	; 63
    756e:	f8 94       	cli
    7570:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    7572:	8a 85       	ldd	r24, Y+10	; 0x0a
    7574:	9b 85       	ldd	r25, Y+11	; 0x0b
    7576:	00 97       	sbiw	r24, 0x00	; 0
    7578:	71 f0       	breq	.+28     	; 0x7596 <xTaskNotifyWait+0xc8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    757a:	e0 91 94 05 	lds	r30, 0x0594
    757e:	f0 91 95 05 	lds	r31, 0x0595
    7582:	81 a1       	ldd	r24, Z+33	; 0x21
    7584:	92 a1       	ldd	r25, Z+34	; 0x22
    7586:	a3 a1       	ldd	r26, Z+35	; 0x23
    7588:	b4 a1       	ldd	r27, Z+36	; 0x24
    758a:	ea 85       	ldd	r30, Y+10	; 0x0a
    758c:	fb 85       	ldd	r31, Y+11	; 0x0b
    758e:	80 83       	st	Z, r24
    7590:	91 83       	std	Z+1, r25	; 0x01
    7592:	a2 83       	std	Z+2, r26	; 0x02
    7594:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    7596:	e0 91 94 05 	lds	r30, 0x0594
    759a:	f0 91 95 05 	lds	r31, 0x0595
    759e:	85 a1       	ldd	r24, Z+37	; 0x25
    75a0:	82 30       	cpi	r24, 0x02	; 2
    75a2:	11 f0       	breq	.+4      	; 0x75a8 <xTaskNotifyWait+0xda>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    75a4:	19 82       	std	Y+1, r1	; 0x01
    75a6:	1a c0       	rjmp	.+52     	; 0x75dc <xTaskNotifyWait+0x10e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    75a8:	e0 91 94 05 	lds	r30, 0x0594
    75ac:	f0 91 95 05 	lds	r31, 0x0595
    75b0:	21 a1       	ldd	r18, Z+33	; 0x21
    75b2:	32 a1       	ldd	r19, Z+34	; 0x22
    75b4:	43 a1       	ldd	r20, Z+35	; 0x23
    75b6:	54 a1       	ldd	r21, Z+36	; 0x24
    75b8:	8e 81       	ldd	r24, Y+6	; 0x06
    75ba:	9f 81       	ldd	r25, Y+7	; 0x07
    75bc:	a8 85       	ldd	r26, Y+8	; 0x08
    75be:	b9 85       	ldd	r27, Y+9	; 0x09
    75c0:	80 95       	com	r24
    75c2:	90 95       	com	r25
    75c4:	a0 95       	com	r26
    75c6:	b0 95       	com	r27
    75c8:	82 23       	and	r24, r18
    75ca:	93 23       	and	r25, r19
    75cc:	a4 23       	and	r26, r20
    75ce:	b5 23       	and	r27, r21
    75d0:	81 a3       	std	Z+33, r24	; 0x21
    75d2:	92 a3       	std	Z+34, r25	; 0x22
    75d4:	a3 a3       	std	Z+35, r26	; 0x23
    75d6:	b4 a3       	std	Z+36, r27	; 0x24
				xReturn = pdTRUE;
    75d8:	81 e0       	ldi	r24, 0x01	; 1
    75da:	89 83       	std	Y+1, r24	; 0x01
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    75dc:	e0 91 94 05 	lds	r30, 0x0594
    75e0:	f0 91 95 05 	lds	r31, 0x0595
    75e4:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    75e6:	0f 90       	pop	r0
    75e8:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    75ea:	89 81       	ldd	r24, Y+1	; 0x01
	}
    75ec:	2d 96       	adiw	r28, 0x0d	; 13
    75ee:	0f b6       	in	r0, 0x3f	; 63
    75f0:	f8 94       	cli
    75f2:	de bf       	out	0x3e, r29	; 62
    75f4:	0f be       	out	0x3f, r0	; 63
    75f6:	cd bf       	out	0x3d, r28	; 61
    75f8:	cf 91       	pop	r28
    75fa:	df 91       	pop	r29
    75fc:	1f 91       	pop	r17
    75fe:	0f 91       	pop	r16
    7600:	ff 90       	pop	r15
    7602:	ef 90       	pop	r14
    7604:	08 95       	ret

00007606 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    7606:	0f 93       	push	r16
    7608:	1f 93       	push	r17
    760a:	df 93       	push	r29
    760c:	cf 93       	push	r28
    760e:	cd b7       	in	r28, 0x3d	; 61
    7610:	de b7       	in	r29, 0x3e	; 62
    7612:	2f 97       	sbiw	r28, 0x0f	; 15
    7614:	0f b6       	in	r0, 0x3f	; 63
    7616:	f8 94       	cli
    7618:	de bf       	out	0x3e, r29	; 62
    761a:	0f be       	out	0x3f, r0	; 63
    761c:	cd bf       	out	0x3d, r28	; 61
    761e:	9e 83       	std	Y+6, r25	; 0x06
    7620:	8d 83       	std	Y+5, r24	; 0x05
    7622:	4f 83       	std	Y+7, r20	; 0x07
    7624:	58 87       	std	Y+8, r21	; 0x08
    7626:	69 87       	std	Y+9, r22	; 0x09
    7628:	7a 87       	std	Y+10, r23	; 0x0a
    762a:	2b 87       	std	Y+11, r18	; 0x0b
    762c:	1d 87       	std	Y+13, r17	; 0x0d
    762e:	0c 87       	std	Y+12, r16	; 0x0c
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    7630:	81 e0       	ldi	r24, 0x01	; 1
    7632:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
    7634:	8d 81       	ldd	r24, Y+5	; 0x05
    7636:	9e 81       	ldd	r25, Y+6	; 0x06
    7638:	9c 83       	std	Y+4, r25	; 0x04
    763a:	8b 83       	std	Y+3, r24	; 0x03

		taskENTER_CRITICAL();
    763c:	0f b6       	in	r0, 0x3f	; 63
    763e:	f8 94       	cli
    7640:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    7642:	8c 85       	ldd	r24, Y+12	; 0x0c
    7644:	9d 85       	ldd	r25, Y+13	; 0x0d
    7646:	00 97       	sbiw	r24, 0x00	; 0
    7648:	61 f0       	breq	.+24     	; 0x7662 <xTaskGenericNotify+0x5c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    764a:	eb 81       	ldd	r30, Y+3	; 0x03
    764c:	fc 81       	ldd	r31, Y+4	; 0x04
    764e:	81 a1       	ldd	r24, Z+33	; 0x21
    7650:	92 a1       	ldd	r25, Z+34	; 0x22
    7652:	a3 a1       	ldd	r26, Z+35	; 0x23
    7654:	b4 a1       	ldd	r27, Z+36	; 0x24
    7656:	ec 85       	ldd	r30, Y+12	; 0x0c
    7658:	fd 85       	ldd	r31, Y+13	; 0x0d
    765a:	80 83       	st	Z, r24
    765c:	91 83       	std	Z+1, r25	; 0x01
    765e:	a2 83       	std	Z+2, r26	; 0x02
    7660:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    7662:	eb 81       	ldd	r30, Y+3	; 0x03
    7664:	fc 81       	ldd	r31, Y+4	; 0x04
    7666:	85 a1       	ldd	r24, Z+37	; 0x25
    7668:	89 83       	std	Y+1, r24	; 0x01

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    766a:	eb 81       	ldd	r30, Y+3	; 0x03
    766c:	fc 81       	ldd	r31, Y+4	; 0x04
    766e:	82 e0       	ldi	r24, 0x02	; 2
    7670:	85 a3       	std	Z+37, r24	; 0x25

			switch( eAction )
    7672:	8b 85       	ldd	r24, Y+11	; 0x0b
    7674:	28 2f       	mov	r18, r24
    7676:	30 e0       	ldi	r19, 0x00	; 0
    7678:	3f 87       	std	Y+15, r19	; 0x0f
    767a:	2e 87       	std	Y+14, r18	; 0x0e
    767c:	8e 85       	ldd	r24, Y+14	; 0x0e
    767e:	9f 85       	ldd	r25, Y+15	; 0x0f
    7680:	82 30       	cpi	r24, 0x02	; 2
    7682:	91 05       	cpc	r25, r1
    7684:	59 f1       	breq	.+86     	; 0x76dc <xTaskGenericNotify+0xd6>
    7686:	2e 85       	ldd	r18, Y+14	; 0x0e
    7688:	3f 85       	ldd	r19, Y+15	; 0x0f
    768a:	23 30       	cpi	r18, 0x03	; 3
    768c:	31 05       	cpc	r19, r1
    768e:	34 f4       	brge	.+12     	; 0x769c <xTaskGenericNotify+0x96>
    7690:	8e 85       	ldd	r24, Y+14	; 0x0e
    7692:	9f 85       	ldd	r25, Y+15	; 0x0f
    7694:	81 30       	cpi	r24, 0x01	; 1
    7696:	91 05       	cpc	r25, r1
    7698:	61 f0       	breq	.+24     	; 0x76b2 <xTaskGenericNotify+0xac>
    769a:	4a c0       	rjmp	.+148    	; 0x7730 <xTaskGenericNotify+0x12a>
    769c:	2e 85       	ldd	r18, Y+14	; 0x0e
    769e:	3f 85       	ldd	r19, Y+15	; 0x0f
    76a0:	23 30       	cpi	r18, 0x03	; 3
    76a2:	31 05       	cpc	r19, r1
    76a4:	59 f1       	breq	.+86     	; 0x76fc <xTaskGenericNotify+0xf6>
    76a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    76a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    76aa:	84 30       	cpi	r24, 0x04	; 4
    76ac:	91 05       	cpc	r25, r1
    76ae:	89 f1       	breq	.+98     	; 0x7712 <xTaskGenericNotify+0x10c>
    76b0:	3f c0       	rjmp	.+126    	; 0x7730 <xTaskGenericNotify+0x12a>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    76b2:	eb 81       	ldd	r30, Y+3	; 0x03
    76b4:	fc 81       	ldd	r31, Y+4	; 0x04
    76b6:	21 a1       	ldd	r18, Z+33	; 0x21
    76b8:	32 a1       	ldd	r19, Z+34	; 0x22
    76ba:	43 a1       	ldd	r20, Z+35	; 0x23
    76bc:	54 a1       	ldd	r21, Z+36	; 0x24
    76be:	8f 81       	ldd	r24, Y+7	; 0x07
    76c0:	98 85       	ldd	r25, Y+8	; 0x08
    76c2:	a9 85       	ldd	r26, Y+9	; 0x09
    76c4:	ba 85       	ldd	r27, Y+10	; 0x0a
    76c6:	82 2b       	or	r24, r18
    76c8:	93 2b       	or	r25, r19
    76ca:	a4 2b       	or	r26, r20
    76cc:	b5 2b       	or	r27, r21
    76ce:	eb 81       	ldd	r30, Y+3	; 0x03
    76d0:	fc 81       	ldd	r31, Y+4	; 0x04
    76d2:	81 a3       	std	Z+33, r24	; 0x21
    76d4:	92 a3       	std	Z+34, r25	; 0x22
    76d6:	a3 a3       	std	Z+35, r26	; 0x23
    76d8:	b4 a3       	std	Z+36, r27	; 0x24
    76da:	2a c0       	rjmp	.+84     	; 0x7730 <xTaskGenericNotify+0x12a>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    76dc:	eb 81       	ldd	r30, Y+3	; 0x03
    76de:	fc 81       	ldd	r31, Y+4	; 0x04
    76e0:	81 a1       	ldd	r24, Z+33	; 0x21
    76e2:	92 a1       	ldd	r25, Z+34	; 0x22
    76e4:	a3 a1       	ldd	r26, Z+35	; 0x23
    76e6:	b4 a1       	ldd	r27, Z+36	; 0x24
    76e8:	01 96       	adiw	r24, 0x01	; 1
    76ea:	a1 1d       	adc	r26, r1
    76ec:	b1 1d       	adc	r27, r1
    76ee:	eb 81       	ldd	r30, Y+3	; 0x03
    76f0:	fc 81       	ldd	r31, Y+4	; 0x04
    76f2:	81 a3       	std	Z+33, r24	; 0x21
    76f4:	92 a3       	std	Z+34, r25	; 0x22
    76f6:	a3 a3       	std	Z+35, r26	; 0x23
    76f8:	b4 a3       	std	Z+36, r27	; 0x24
    76fa:	1a c0       	rjmp	.+52     	; 0x7730 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    76fc:	eb 81       	ldd	r30, Y+3	; 0x03
    76fe:	fc 81       	ldd	r31, Y+4	; 0x04
    7700:	8f 81       	ldd	r24, Y+7	; 0x07
    7702:	98 85       	ldd	r25, Y+8	; 0x08
    7704:	a9 85       	ldd	r26, Y+9	; 0x09
    7706:	ba 85       	ldd	r27, Y+10	; 0x0a
    7708:	81 a3       	std	Z+33, r24	; 0x21
    770a:	92 a3       	std	Z+34, r25	; 0x22
    770c:	a3 a3       	std	Z+35, r26	; 0x23
    770e:	b4 a3       	std	Z+36, r27	; 0x24
    7710:	0f c0       	rjmp	.+30     	; 0x7730 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    7712:	89 81       	ldd	r24, Y+1	; 0x01
    7714:	82 30       	cpi	r24, 0x02	; 2
    7716:	59 f0       	breq	.+22     	; 0x772e <xTaskGenericNotify+0x128>
					{
						pxTCB->ulNotifiedValue = ulValue;
    7718:	eb 81       	ldd	r30, Y+3	; 0x03
    771a:	fc 81       	ldd	r31, Y+4	; 0x04
    771c:	8f 81       	ldd	r24, Y+7	; 0x07
    771e:	98 85       	ldd	r25, Y+8	; 0x08
    7720:	a9 85       	ldd	r26, Y+9	; 0x09
    7722:	ba 85       	ldd	r27, Y+10	; 0x0a
    7724:	81 a3       	std	Z+33, r24	; 0x21
    7726:	92 a3       	std	Z+34, r25	; 0x22
    7728:	a3 a3       	std	Z+35, r26	; 0x23
    772a:	b4 a3       	std	Z+36, r27	; 0x24
    772c:	01 c0       	rjmp	.+2      	; 0x7730 <xTaskGenericNotify+0x12a>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    772e:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    7730:	89 81       	ldd	r24, Y+1	; 0x01
    7732:	81 30       	cpi	r24, 0x01	; 1
    7734:	b9 f5       	brne	.+110    	; 0x77a4 <xTaskGenericNotify+0x19e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    7736:	8b 81       	ldd	r24, Y+3	; 0x03
    7738:	9c 81       	ldd	r25, Y+4	; 0x04
    773a:	02 96       	adiw	r24, 0x02	; 2
    773c:	0e 94 24 27 	call	0x4e48	; 0x4e48 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    7740:	eb 81       	ldd	r30, Y+3	; 0x03
    7742:	fc 81       	ldd	r31, Y+4	; 0x04
    7744:	96 89       	ldd	r25, Z+22	; 0x16
    7746:	80 91 9a 05 	lds	r24, 0x059A
    774a:	89 17       	cp	r24, r25
    774c:	28 f4       	brcc	.+10     	; 0x7758 <xTaskGenericNotify+0x152>
    774e:	eb 81       	ldd	r30, Y+3	; 0x03
    7750:	fc 81       	ldd	r31, Y+4	; 0x04
    7752:	86 89       	ldd	r24, Z+22	; 0x16
    7754:	80 93 9a 05 	sts	0x059A, r24
    7758:	eb 81       	ldd	r30, Y+3	; 0x03
    775a:	fc 81       	ldd	r31, Y+4	; 0x04
    775c:	86 89       	ldd	r24, Z+22	; 0x16
    775e:	28 2f       	mov	r18, r24
    7760:	30 e0       	ldi	r19, 0x00	; 0
    7762:	c9 01       	movw	r24, r18
    7764:	88 0f       	add	r24, r24
    7766:	99 1f       	adc	r25, r25
    7768:	88 0f       	add	r24, r24
    776a:	99 1f       	adc	r25, r25
    776c:	88 0f       	add	r24, r24
    776e:	99 1f       	adc	r25, r25
    7770:	82 0f       	add	r24, r18
    7772:	93 1f       	adc	r25, r19
    7774:	ac 01       	movw	r20, r24
    7776:	4b 55       	subi	r20, 0x5B	; 91
    7778:	5a 4f       	sbci	r21, 0xFA	; 250
    777a:	8b 81       	ldd	r24, Y+3	; 0x03
    777c:	9c 81       	ldd	r25, Y+4	; 0x04
    777e:	9c 01       	movw	r18, r24
    7780:	2e 5f       	subi	r18, 0xFE	; 254
    7782:	3f 4f       	sbci	r19, 0xFF	; 255
    7784:	ca 01       	movw	r24, r20
    7786:	b9 01       	movw	r22, r18
    7788:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    778c:	eb 81       	ldd	r30, Y+3	; 0x03
    778e:	fc 81       	ldd	r31, Y+4	; 0x04
    7790:	96 89       	ldd	r25, Z+22	; 0x16
    7792:	e0 91 94 05 	lds	r30, 0x0594
    7796:	f0 91 95 05 	lds	r31, 0x0595
    779a:	86 89       	ldd	r24, Z+22	; 0x16
    779c:	89 17       	cp	r24, r25
    779e:	10 f4       	brcc	.+4      	; 0x77a4 <xTaskGenericNotify+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    77a0:	0e 94 bf 29 	call	0x537e	; 0x537e <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    77a4:	0f 90       	pop	r0
    77a6:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    77a8:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    77aa:	2f 96       	adiw	r28, 0x0f	; 15
    77ac:	0f b6       	in	r0, 0x3f	; 63
    77ae:	f8 94       	cli
    77b0:	de bf       	out	0x3e, r29	; 62
    77b2:	0f be       	out	0x3f, r0	; 63
    77b4:	cd bf       	out	0x3d, r28	; 61
    77b6:	cf 91       	pop	r28
    77b8:	df 91       	pop	r29
    77ba:	1f 91       	pop	r17
    77bc:	0f 91       	pop	r16
    77be:	08 95       	ret

000077c0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    77c0:	ef 92       	push	r14
    77c2:	ff 92       	push	r15
    77c4:	0f 93       	push	r16
    77c6:	1f 93       	push	r17
    77c8:	df 93       	push	r29
    77ca:	cf 93       	push	r28
    77cc:	cd b7       	in	r28, 0x3d	; 61
    77ce:	de b7       	in	r29, 0x3e	; 62
    77d0:	62 97       	sbiw	r28, 0x12	; 18
    77d2:	0f b6       	in	r0, 0x3f	; 63
    77d4:	f8 94       	cli
    77d6:	de bf       	out	0x3e, r29	; 62
    77d8:	0f be       	out	0x3f, r0	; 63
    77da:	cd bf       	out	0x3d, r28	; 61
    77dc:	9f 83       	std	Y+7, r25	; 0x07
    77de:	8e 83       	std	Y+6, r24	; 0x06
    77e0:	48 87       	std	Y+8, r20	; 0x08
    77e2:	59 87       	std	Y+9, r21	; 0x09
    77e4:	6a 87       	std	Y+10, r22	; 0x0a
    77e6:	7b 87       	std	Y+11, r23	; 0x0b
    77e8:	2c 87       	std	Y+12, r18	; 0x0c
    77ea:	1e 87       	std	Y+14, r17	; 0x0e
    77ec:	0d 87       	std	Y+13, r16	; 0x0d
    77ee:	f8 8a       	std	Y+16, r15	; 0x10
    77f0:	ef 86       	std	Y+15, r14	; 0x0f
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    77f2:	81 e0       	ldi	r24, 0x01	; 1
    77f4:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
    77f6:	8e 81       	ldd	r24, Y+6	; 0x06
    77f8:	9f 81       	ldd	r25, Y+7	; 0x07
    77fa:	9d 83       	std	Y+5, r25	; 0x05
    77fc:	8c 83       	std	Y+4, r24	; 0x04

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    77fe:	19 82       	std	Y+1, r1	; 0x01
		{
			if( pulPreviousNotificationValue != NULL )
    7800:	8d 85       	ldd	r24, Y+13	; 0x0d
    7802:	9e 85       	ldd	r25, Y+14	; 0x0e
    7804:	00 97       	sbiw	r24, 0x00	; 0
    7806:	61 f0       	breq	.+24     	; 0x7820 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    7808:	ec 81       	ldd	r30, Y+4	; 0x04
    780a:	fd 81       	ldd	r31, Y+5	; 0x05
    780c:	81 a1       	ldd	r24, Z+33	; 0x21
    780e:	92 a1       	ldd	r25, Z+34	; 0x22
    7810:	a3 a1       	ldd	r26, Z+35	; 0x23
    7812:	b4 a1       	ldd	r27, Z+36	; 0x24
    7814:	ed 85       	ldd	r30, Y+13	; 0x0d
    7816:	fe 85       	ldd	r31, Y+14	; 0x0e
    7818:	80 83       	st	Z, r24
    781a:	91 83       	std	Z+1, r25	; 0x01
    781c:	a2 83       	std	Z+2, r26	; 0x02
    781e:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    7820:	ec 81       	ldd	r30, Y+4	; 0x04
    7822:	fd 81       	ldd	r31, Y+5	; 0x05
    7824:	85 a1       	ldd	r24, Z+37	; 0x25
    7826:	8b 83       	std	Y+3, r24	; 0x03
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    7828:	ec 81       	ldd	r30, Y+4	; 0x04
    782a:	fd 81       	ldd	r31, Y+5	; 0x05
    782c:	82 e0       	ldi	r24, 0x02	; 2
    782e:	85 a3       	std	Z+37, r24	; 0x25

			switch( eAction )
    7830:	8c 85       	ldd	r24, Y+12	; 0x0c
    7832:	28 2f       	mov	r18, r24
    7834:	30 e0       	ldi	r19, 0x00	; 0
    7836:	3a 8b       	std	Y+18, r19	; 0x12
    7838:	29 8b       	std	Y+17, r18	; 0x11
    783a:	89 89       	ldd	r24, Y+17	; 0x11
    783c:	9a 89       	ldd	r25, Y+18	; 0x12
    783e:	82 30       	cpi	r24, 0x02	; 2
    7840:	91 05       	cpc	r25, r1
    7842:	59 f1       	breq	.+86     	; 0x789a <xTaskGenericNotifyFromISR+0xda>
    7844:	29 89       	ldd	r18, Y+17	; 0x11
    7846:	3a 89       	ldd	r19, Y+18	; 0x12
    7848:	23 30       	cpi	r18, 0x03	; 3
    784a:	31 05       	cpc	r19, r1
    784c:	34 f4       	brge	.+12     	; 0x785a <xTaskGenericNotifyFromISR+0x9a>
    784e:	89 89       	ldd	r24, Y+17	; 0x11
    7850:	9a 89       	ldd	r25, Y+18	; 0x12
    7852:	81 30       	cpi	r24, 0x01	; 1
    7854:	91 05       	cpc	r25, r1
    7856:	61 f0       	breq	.+24     	; 0x7870 <xTaskGenericNotifyFromISR+0xb0>
    7858:	4a c0       	rjmp	.+148    	; 0x78ee <xTaskGenericNotifyFromISR+0x12e>
    785a:	29 89       	ldd	r18, Y+17	; 0x11
    785c:	3a 89       	ldd	r19, Y+18	; 0x12
    785e:	23 30       	cpi	r18, 0x03	; 3
    7860:	31 05       	cpc	r19, r1
    7862:	59 f1       	breq	.+86     	; 0x78ba <xTaskGenericNotifyFromISR+0xfa>
    7864:	89 89       	ldd	r24, Y+17	; 0x11
    7866:	9a 89       	ldd	r25, Y+18	; 0x12
    7868:	84 30       	cpi	r24, 0x04	; 4
    786a:	91 05       	cpc	r25, r1
    786c:	89 f1       	breq	.+98     	; 0x78d0 <xTaskGenericNotifyFromISR+0x110>
    786e:	3f c0       	rjmp	.+126    	; 0x78ee <xTaskGenericNotifyFromISR+0x12e>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    7870:	ec 81       	ldd	r30, Y+4	; 0x04
    7872:	fd 81       	ldd	r31, Y+5	; 0x05
    7874:	21 a1       	ldd	r18, Z+33	; 0x21
    7876:	32 a1       	ldd	r19, Z+34	; 0x22
    7878:	43 a1       	ldd	r20, Z+35	; 0x23
    787a:	54 a1       	ldd	r21, Z+36	; 0x24
    787c:	88 85       	ldd	r24, Y+8	; 0x08
    787e:	99 85       	ldd	r25, Y+9	; 0x09
    7880:	aa 85       	ldd	r26, Y+10	; 0x0a
    7882:	bb 85       	ldd	r27, Y+11	; 0x0b
    7884:	82 2b       	or	r24, r18
    7886:	93 2b       	or	r25, r19
    7888:	a4 2b       	or	r26, r20
    788a:	b5 2b       	or	r27, r21
    788c:	ec 81       	ldd	r30, Y+4	; 0x04
    788e:	fd 81       	ldd	r31, Y+5	; 0x05
    7890:	81 a3       	std	Z+33, r24	; 0x21
    7892:	92 a3       	std	Z+34, r25	; 0x22
    7894:	a3 a3       	std	Z+35, r26	; 0x23
    7896:	b4 a3       	std	Z+36, r27	; 0x24
    7898:	2a c0       	rjmp	.+84     	; 0x78ee <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    789a:	ec 81       	ldd	r30, Y+4	; 0x04
    789c:	fd 81       	ldd	r31, Y+5	; 0x05
    789e:	81 a1       	ldd	r24, Z+33	; 0x21
    78a0:	92 a1       	ldd	r25, Z+34	; 0x22
    78a2:	a3 a1       	ldd	r26, Z+35	; 0x23
    78a4:	b4 a1       	ldd	r27, Z+36	; 0x24
    78a6:	01 96       	adiw	r24, 0x01	; 1
    78a8:	a1 1d       	adc	r26, r1
    78aa:	b1 1d       	adc	r27, r1
    78ac:	ec 81       	ldd	r30, Y+4	; 0x04
    78ae:	fd 81       	ldd	r31, Y+5	; 0x05
    78b0:	81 a3       	std	Z+33, r24	; 0x21
    78b2:	92 a3       	std	Z+34, r25	; 0x22
    78b4:	a3 a3       	std	Z+35, r26	; 0x23
    78b6:	b4 a3       	std	Z+36, r27	; 0x24
    78b8:	1a c0       	rjmp	.+52     	; 0x78ee <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    78ba:	ec 81       	ldd	r30, Y+4	; 0x04
    78bc:	fd 81       	ldd	r31, Y+5	; 0x05
    78be:	88 85       	ldd	r24, Y+8	; 0x08
    78c0:	99 85       	ldd	r25, Y+9	; 0x09
    78c2:	aa 85       	ldd	r26, Y+10	; 0x0a
    78c4:	bb 85       	ldd	r27, Y+11	; 0x0b
    78c6:	81 a3       	std	Z+33, r24	; 0x21
    78c8:	92 a3       	std	Z+34, r25	; 0x22
    78ca:	a3 a3       	std	Z+35, r26	; 0x23
    78cc:	b4 a3       	std	Z+36, r27	; 0x24
    78ce:	0f c0       	rjmp	.+30     	; 0x78ee <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    78d0:	8b 81       	ldd	r24, Y+3	; 0x03
    78d2:	82 30       	cpi	r24, 0x02	; 2
    78d4:	59 f0       	breq	.+22     	; 0x78ec <xTaskGenericNotifyFromISR+0x12c>
					{
						pxTCB->ulNotifiedValue = ulValue;
    78d6:	ec 81       	ldd	r30, Y+4	; 0x04
    78d8:	fd 81       	ldd	r31, Y+5	; 0x05
    78da:	88 85       	ldd	r24, Y+8	; 0x08
    78dc:	99 85       	ldd	r25, Y+9	; 0x09
    78de:	aa 85       	ldd	r26, Y+10	; 0x0a
    78e0:	bb 85       	ldd	r27, Y+11	; 0x0b
    78e2:	81 a3       	std	Z+33, r24	; 0x21
    78e4:	92 a3       	std	Z+34, r25	; 0x22
    78e6:	a3 a3       	std	Z+35, r26	; 0x23
    78e8:	b4 a3       	std	Z+36, r27	; 0x24
    78ea:	01 c0       	rjmp	.+2      	; 0x78ee <xTaskGenericNotifyFromISR+0x12e>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    78ec:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    78ee:	8b 81       	ldd	r24, Y+3	; 0x03
    78f0:	81 30       	cpi	r24, 0x01	; 1
    78f2:	09 f0       	breq	.+2      	; 0x78f6 <xTaskGenericNotifyFromISR+0x136>
    78f4:	4f c0       	rjmp	.+158    	; 0x7994 <xTaskGenericNotifyFromISR+0x1d4>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    78f6:	80 91 a4 05 	lds	r24, 0x05A4
    78fa:	88 23       	and	r24, r24
    78fc:	61 f5       	brne	.+88     	; 0x7956 <xTaskGenericNotifyFromISR+0x196>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    78fe:	8c 81       	ldd	r24, Y+4	; 0x04
    7900:	9d 81       	ldd	r25, Y+5	; 0x05
    7902:	02 96       	adiw	r24, 0x02	; 2
    7904:	0e 94 24 27 	call	0x4e48	; 0x4e48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    7908:	ec 81       	ldd	r30, Y+4	; 0x04
    790a:	fd 81       	ldd	r31, Y+5	; 0x05
    790c:	96 89       	ldd	r25, Z+22	; 0x16
    790e:	80 91 9a 05 	lds	r24, 0x059A
    7912:	89 17       	cp	r24, r25
    7914:	28 f4       	brcc	.+10     	; 0x7920 <xTaskGenericNotifyFromISR+0x160>
    7916:	ec 81       	ldd	r30, Y+4	; 0x04
    7918:	fd 81       	ldd	r31, Y+5	; 0x05
    791a:	86 89       	ldd	r24, Z+22	; 0x16
    791c:	80 93 9a 05 	sts	0x059A, r24
    7920:	ec 81       	ldd	r30, Y+4	; 0x04
    7922:	fd 81       	ldd	r31, Y+5	; 0x05
    7924:	86 89       	ldd	r24, Z+22	; 0x16
    7926:	28 2f       	mov	r18, r24
    7928:	30 e0       	ldi	r19, 0x00	; 0
    792a:	c9 01       	movw	r24, r18
    792c:	88 0f       	add	r24, r24
    792e:	99 1f       	adc	r25, r25
    7930:	88 0f       	add	r24, r24
    7932:	99 1f       	adc	r25, r25
    7934:	88 0f       	add	r24, r24
    7936:	99 1f       	adc	r25, r25
    7938:	82 0f       	add	r24, r18
    793a:	93 1f       	adc	r25, r19
    793c:	ac 01       	movw	r20, r24
    793e:	4b 55       	subi	r20, 0x5B	; 91
    7940:	5a 4f       	sbci	r21, 0xFA	; 250
    7942:	8c 81       	ldd	r24, Y+4	; 0x04
    7944:	9d 81       	ldd	r25, Y+5	; 0x05
    7946:	9c 01       	movw	r18, r24
    7948:	2e 5f       	subi	r18, 0xFE	; 254
    794a:	3f 4f       	sbci	r19, 0xFF	; 255
    794c:	ca 01       	movw	r24, r20
    794e:	b9 01       	movw	r22, r18
    7950:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <vListInsertEnd>
    7954:	0a c0       	rjmp	.+20     	; 0x796a <xTaskGenericNotifyFromISR+0x1aa>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    7956:	8c 81       	ldd	r24, Y+4	; 0x04
    7958:	9d 81       	ldd	r25, Y+5	; 0x05
    795a:	9c 01       	movw	r18, r24
    795c:	24 5f       	subi	r18, 0xF4	; 244
    795e:	3f 4f       	sbci	r19, 0xFF	; 255
    7960:	8f ed       	ldi	r24, 0xDF	; 223
    7962:	95 e0       	ldi	r25, 0x05	; 5
    7964:	b9 01       	movw	r22, r18
    7966:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    796a:	ec 81       	ldd	r30, Y+4	; 0x04
    796c:	fd 81       	ldd	r31, Y+5	; 0x05
    796e:	96 89       	ldd	r25, Z+22	; 0x16
    7970:	e0 91 94 05 	lds	r30, 0x0594
    7974:	f0 91 95 05 	lds	r31, 0x0595
    7978:	86 89       	ldd	r24, Z+22	; 0x16
    797a:	89 17       	cp	r24, r25
    797c:	58 f4       	brcc	.+22     	; 0x7994 <xTaskGenericNotifyFromISR+0x1d4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    797e:	8f 85       	ldd	r24, Y+15	; 0x0f
    7980:	98 89       	ldd	r25, Y+16	; 0x10
    7982:	00 97       	sbiw	r24, 0x00	; 0
    7984:	21 f0       	breq	.+8      	; 0x798e <xTaskGenericNotifyFromISR+0x1ce>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    7986:	ef 85       	ldd	r30, Y+15	; 0x0f
    7988:	f8 89       	ldd	r31, Y+16	; 0x10
    798a:	81 e0       	ldi	r24, 0x01	; 1
    798c:	80 83       	st	Z, r24
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
    798e:	81 e0       	ldi	r24, 0x01	; 1
    7990:	80 93 9d 05 	sts	0x059D, r24
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    7994:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    7996:	62 96       	adiw	r28, 0x12	; 18
    7998:	0f b6       	in	r0, 0x3f	; 63
    799a:	f8 94       	cli
    799c:	de bf       	out	0x3e, r29	; 62
    799e:	0f be       	out	0x3f, r0	; 63
    79a0:	cd bf       	out	0x3d, r28	; 61
    79a2:	cf 91       	pop	r28
    79a4:	df 91       	pop	r29
    79a6:	1f 91       	pop	r17
    79a8:	0f 91       	pop	r16
    79aa:	ff 90       	pop	r15
    79ac:	ef 90       	pop	r14
    79ae:	08 95       	ret

000079b0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    79b0:	df 93       	push	r29
    79b2:	cf 93       	push	r28
    79b4:	cd b7       	in	r28, 0x3d	; 61
    79b6:	de b7       	in	r29, 0x3e	; 62
    79b8:	28 97       	sbiw	r28, 0x08	; 8
    79ba:	0f b6       	in	r0, 0x3f	; 63
    79bc:	f8 94       	cli
    79be:	de bf       	out	0x3e, r29	; 62
    79c0:	0f be       	out	0x3f, r0	; 63
    79c2:	cd bf       	out	0x3d, r28	; 61
    79c4:	9e 83       	std	Y+6, r25	; 0x06
    79c6:	8d 83       	std	Y+5, r24	; 0x05
    79c8:	78 87       	std	Y+8, r23	; 0x08
    79ca:	6f 83       	std	Y+7, r22	; 0x07
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
    79cc:	8d 81       	ldd	r24, Y+5	; 0x05
    79ce:	9e 81       	ldd	r25, Y+6	; 0x06
    79d0:	9c 83       	std	Y+4, r25	; 0x04
    79d2:	8b 83       	std	Y+3, r24	; 0x03

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    79d4:	19 82       	std	Y+1, r1	; 0x01
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    79d6:	eb 81       	ldd	r30, Y+3	; 0x03
    79d8:	fc 81       	ldd	r31, Y+4	; 0x04
    79da:	85 a1       	ldd	r24, Z+37	; 0x25
    79dc:	8a 83       	std	Y+2, r24	; 0x02
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    79de:	eb 81       	ldd	r30, Y+3	; 0x03
    79e0:	fc 81       	ldd	r31, Y+4	; 0x04
    79e2:	82 e0       	ldi	r24, 0x02	; 2
    79e4:	85 a3       	std	Z+37, r24	; 0x25

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    79e6:	eb 81       	ldd	r30, Y+3	; 0x03
    79e8:	fc 81       	ldd	r31, Y+4	; 0x04
    79ea:	81 a1       	ldd	r24, Z+33	; 0x21
    79ec:	92 a1       	ldd	r25, Z+34	; 0x22
    79ee:	a3 a1       	ldd	r26, Z+35	; 0x23
    79f0:	b4 a1       	ldd	r27, Z+36	; 0x24
    79f2:	01 96       	adiw	r24, 0x01	; 1
    79f4:	a1 1d       	adc	r26, r1
    79f6:	b1 1d       	adc	r27, r1
    79f8:	eb 81       	ldd	r30, Y+3	; 0x03
    79fa:	fc 81       	ldd	r31, Y+4	; 0x04
    79fc:	81 a3       	std	Z+33, r24	; 0x21
    79fe:	92 a3       	std	Z+34, r25	; 0x22
    7a00:	a3 a3       	std	Z+35, r26	; 0x23
    7a02:	b4 a3       	std	Z+36, r27	; 0x24

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    7a04:	8a 81       	ldd	r24, Y+2	; 0x02
    7a06:	81 30       	cpi	r24, 0x01	; 1
    7a08:	09 f0       	breq	.+2      	; 0x7a0c <vTaskNotifyGiveFromISR+0x5c>
    7a0a:	4f c0       	rjmp	.+158    	; 0x7aaa <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    7a0c:	80 91 a4 05 	lds	r24, 0x05A4
    7a10:	88 23       	and	r24, r24
    7a12:	61 f5       	brne	.+88     	; 0x7a6c <vTaskNotifyGiveFromISR+0xbc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    7a14:	8b 81       	ldd	r24, Y+3	; 0x03
    7a16:	9c 81       	ldd	r25, Y+4	; 0x04
    7a18:	02 96       	adiw	r24, 0x02	; 2
    7a1a:	0e 94 24 27 	call	0x4e48	; 0x4e48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    7a1e:	eb 81       	ldd	r30, Y+3	; 0x03
    7a20:	fc 81       	ldd	r31, Y+4	; 0x04
    7a22:	96 89       	ldd	r25, Z+22	; 0x16
    7a24:	80 91 9a 05 	lds	r24, 0x059A
    7a28:	89 17       	cp	r24, r25
    7a2a:	28 f4       	brcc	.+10     	; 0x7a36 <vTaskNotifyGiveFromISR+0x86>
    7a2c:	eb 81       	ldd	r30, Y+3	; 0x03
    7a2e:	fc 81       	ldd	r31, Y+4	; 0x04
    7a30:	86 89       	ldd	r24, Z+22	; 0x16
    7a32:	80 93 9a 05 	sts	0x059A, r24
    7a36:	eb 81       	ldd	r30, Y+3	; 0x03
    7a38:	fc 81       	ldd	r31, Y+4	; 0x04
    7a3a:	86 89       	ldd	r24, Z+22	; 0x16
    7a3c:	28 2f       	mov	r18, r24
    7a3e:	30 e0       	ldi	r19, 0x00	; 0
    7a40:	c9 01       	movw	r24, r18
    7a42:	88 0f       	add	r24, r24
    7a44:	99 1f       	adc	r25, r25
    7a46:	88 0f       	add	r24, r24
    7a48:	99 1f       	adc	r25, r25
    7a4a:	88 0f       	add	r24, r24
    7a4c:	99 1f       	adc	r25, r25
    7a4e:	82 0f       	add	r24, r18
    7a50:	93 1f       	adc	r25, r19
    7a52:	ac 01       	movw	r20, r24
    7a54:	4b 55       	subi	r20, 0x5B	; 91
    7a56:	5a 4f       	sbci	r21, 0xFA	; 250
    7a58:	8b 81       	ldd	r24, Y+3	; 0x03
    7a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    7a5c:	9c 01       	movw	r18, r24
    7a5e:	2e 5f       	subi	r18, 0xFE	; 254
    7a60:	3f 4f       	sbci	r19, 0xFF	; 255
    7a62:	ca 01       	movw	r24, r20
    7a64:	b9 01       	movw	r22, r18
    7a66:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <vListInsertEnd>
    7a6a:	0a c0       	rjmp	.+20     	; 0x7a80 <vTaskNotifyGiveFromISR+0xd0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    7a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    7a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    7a70:	9c 01       	movw	r18, r24
    7a72:	24 5f       	subi	r18, 0xF4	; 244
    7a74:	3f 4f       	sbci	r19, 0xFF	; 255
    7a76:	8f ed       	ldi	r24, 0xDF	; 223
    7a78:	95 e0       	ldi	r25, 0x05	; 5
    7a7a:	b9 01       	movw	r22, r18
    7a7c:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    7a80:	eb 81       	ldd	r30, Y+3	; 0x03
    7a82:	fc 81       	ldd	r31, Y+4	; 0x04
    7a84:	96 89       	ldd	r25, Z+22	; 0x16
    7a86:	e0 91 94 05 	lds	r30, 0x0594
    7a8a:	f0 91 95 05 	lds	r31, 0x0595
    7a8e:	86 89       	ldd	r24, Z+22	; 0x16
    7a90:	89 17       	cp	r24, r25
    7a92:	58 f4       	brcc	.+22     	; 0x7aaa <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    7a94:	8f 81       	ldd	r24, Y+7	; 0x07
    7a96:	98 85       	ldd	r25, Y+8	; 0x08
    7a98:	00 97       	sbiw	r24, 0x00	; 0
    7a9a:	21 f0       	breq	.+8      	; 0x7aa4 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    7a9c:	ef 81       	ldd	r30, Y+7	; 0x07
    7a9e:	f8 85       	ldd	r31, Y+8	; 0x08
    7aa0:	81 e0       	ldi	r24, 0x01	; 1
    7aa2:	80 83       	st	Z, r24
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
    7aa4:	81 e0       	ldi	r24, 0x01	; 1
    7aa6:	80 93 9d 05 	sts	0x059D, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    7aaa:	28 96       	adiw	r28, 0x08	; 8
    7aac:	0f b6       	in	r0, 0x3f	; 63
    7aae:	f8 94       	cli
    7ab0:	de bf       	out	0x3e, r29	; 62
    7ab2:	0f be       	out	0x3f, r0	; 63
    7ab4:	cd bf       	out	0x3d, r28	; 61
    7ab6:	cf 91       	pop	r28
    7ab8:	df 91       	pop	r29
    7aba:	08 95       	ret

00007abc <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
    7abc:	df 93       	push	r29
    7abe:	cf 93       	push	r28
    7ac0:	cd b7       	in	r28, 0x3d	; 61
    7ac2:	de b7       	in	r29, 0x3e	; 62
    7ac4:	27 97       	sbiw	r28, 0x07	; 7
    7ac6:	0f b6       	in	r0, 0x3f	; 63
    7ac8:	f8 94       	cli
    7aca:	de bf       	out	0x3e, r29	; 62
    7acc:	0f be       	out	0x3f, r0	; 63
    7ace:	cd bf       	out	0x3d, r28	; 61
    7ad0:	9d 83       	std	Y+5, r25	; 0x05
    7ad2:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    7ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    7ad6:	9d 81       	ldd	r25, Y+5	; 0x05
    7ad8:	00 97       	sbiw	r24, 0x00	; 0
    7ada:	39 f4       	brne	.+14     	; 0x7aea <xTaskNotifyStateClear+0x2e>
    7adc:	80 91 94 05 	lds	r24, 0x0594
    7ae0:	90 91 95 05 	lds	r25, 0x0595
    7ae4:	9f 83       	std	Y+7, r25	; 0x07
    7ae6:	8e 83       	std	Y+6, r24	; 0x06
    7ae8:	04 c0       	rjmp	.+8      	; 0x7af2 <xTaskNotifyStateClear+0x36>
    7aea:	8c 81       	ldd	r24, Y+4	; 0x04
    7aec:	9d 81       	ldd	r25, Y+5	; 0x05
    7aee:	9f 83       	std	Y+7, r25	; 0x07
    7af0:	8e 83       	std	Y+6, r24	; 0x06
    7af2:	8e 81       	ldd	r24, Y+6	; 0x06
    7af4:	9f 81       	ldd	r25, Y+7	; 0x07
    7af6:	9b 83       	std	Y+3, r25	; 0x03
    7af8:	8a 83       	std	Y+2, r24	; 0x02

		taskENTER_CRITICAL();
    7afa:	0f b6       	in	r0, 0x3f	; 63
    7afc:	f8 94       	cli
    7afe:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    7b00:	ea 81       	ldd	r30, Y+2	; 0x02
    7b02:	fb 81       	ldd	r31, Y+3	; 0x03
    7b04:	85 a1       	ldd	r24, Z+37	; 0x25
    7b06:	82 30       	cpi	r24, 0x02	; 2
    7b08:	31 f4       	brne	.+12     	; 0x7b16 <xTaskNotifyStateClear+0x5a>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    7b0a:	ea 81       	ldd	r30, Y+2	; 0x02
    7b0c:	fb 81       	ldd	r31, Y+3	; 0x03
    7b0e:	15 a2       	std	Z+37, r1	; 0x25
				xReturn = pdPASS;
    7b10:	81 e0       	ldi	r24, 0x01	; 1
    7b12:	89 83       	std	Y+1, r24	; 0x01
    7b14:	01 c0       	rjmp	.+2      	; 0x7b18 <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
    7b16:	19 82       	std	Y+1, r1	; 0x01
			}
		}
		taskEXIT_CRITICAL();
    7b18:	0f 90       	pop	r0
    7b1a:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    7b1c:	89 81       	ldd	r24, Y+1	; 0x01
	}
    7b1e:	27 96       	adiw	r28, 0x07	; 7
    7b20:	0f b6       	in	r0, 0x3f	; 63
    7b22:	f8 94       	cli
    7b24:	de bf       	out	0x3e, r29	; 62
    7b26:	0f be       	out	0x3f, r0	; 63
    7b28:	cd bf       	out	0x3d, r28	; 61
    7b2a:	cf 91       	pop	r28
    7b2c:	df 91       	pop	r29
    7b2e:	08 95       	ret

00007b30 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    7b30:	df 93       	push	r29
    7b32:	cf 93       	push	r28
    7b34:	cd b7       	in	r28, 0x3d	; 61
    7b36:	de b7       	in	r29, 0x3e	; 62
    7b38:	27 97       	sbiw	r28, 0x07	; 7
    7b3a:	0f b6       	in	r0, 0x3f	; 63
    7b3c:	f8 94       	cli
    7b3e:	de bf       	out	0x3e, r29	; 62
    7b40:	0f be       	out	0x3f, r0	; 63
    7b42:	cd bf       	out	0x3d, r28	; 61
    7b44:	9e 83       	std	Y+6, r25	; 0x06
    7b46:	8d 83       	std	Y+5, r24	; 0x05
    7b48:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    7b4a:	80 91 98 05 	lds	r24, 0x0598
    7b4e:	90 91 99 05 	lds	r25, 0x0599
    7b52:	9a 83       	std	Y+2, r25	; 0x02
    7b54:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    7b56:	80 91 94 05 	lds	r24, 0x0594
    7b5a:	90 91 95 05 	lds	r25, 0x0595
    7b5e:	02 96       	adiw	r24, 0x02	; 2
    7b60:	0e 94 24 27 	call	0x4e48	; 0x4e48 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    7b64:	29 81       	ldd	r18, Y+1	; 0x01
    7b66:	3a 81       	ldd	r19, Y+2	; 0x02
    7b68:	8d 81       	ldd	r24, Y+5	; 0x05
    7b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    7b6c:	82 0f       	add	r24, r18
    7b6e:	93 1f       	adc	r25, r19
    7b70:	9c 83       	std	Y+4, r25	; 0x04
    7b72:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    7b74:	e0 91 94 05 	lds	r30, 0x0594
    7b78:	f0 91 95 05 	lds	r31, 0x0595
    7b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    7b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    7b80:	93 83       	std	Z+3, r25	; 0x03
    7b82:	82 83       	std	Z+2, r24	; 0x02

		if( xTimeToWake < xConstTickCount )
    7b84:	2b 81       	ldd	r18, Y+3	; 0x03
    7b86:	3c 81       	ldd	r19, Y+4	; 0x04
    7b88:	89 81       	ldd	r24, Y+1	; 0x01
    7b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    7b8c:	28 17       	cp	r18, r24
    7b8e:	39 07       	cpc	r19, r25
    7b90:	70 f4       	brcc	.+28     	; 0x7bae <prvAddCurrentTaskToDelayedList+0x7e>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    7b92:	80 91 dd 05 	lds	r24, 0x05DD
    7b96:	90 91 de 05 	lds	r25, 0x05DE
    7b9a:	20 91 94 05 	lds	r18, 0x0594
    7b9e:	30 91 95 05 	lds	r19, 0x0595
    7ba2:	2e 5f       	subi	r18, 0xFE	; 254
    7ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    7ba6:	b9 01       	movw	r22, r18
    7ba8:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <vListInsert>
    7bac:	1e c0       	rjmp	.+60     	; 0x7bea <prvAddCurrentTaskToDelayedList+0xba>
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    7bae:	40 91 db 05 	lds	r20, 0x05DB
    7bb2:	50 91 dc 05 	lds	r21, 0x05DC
    7bb6:	80 91 94 05 	lds	r24, 0x0594
    7bba:	90 91 95 05 	lds	r25, 0x0595
    7bbe:	9c 01       	movw	r18, r24
    7bc0:	2e 5f       	subi	r18, 0xFE	; 254
    7bc2:	3f 4f       	sbci	r19, 0xFF	; 255
    7bc4:	ca 01       	movw	r24, r20
    7bc6:	b9 01       	movw	r22, r18
    7bc8:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    7bcc:	20 91 a0 05 	lds	r18, 0x05A0
    7bd0:	30 91 a1 05 	lds	r19, 0x05A1
    7bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    7bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    7bd8:	82 17       	cp	r24, r18
    7bda:	93 07       	cpc	r25, r19
    7bdc:	30 f4       	brcc	.+12     	; 0x7bea <prvAddCurrentTaskToDelayedList+0xba>
			{
				xNextTaskUnblockTime = xTimeToWake;
    7bde:	8b 81       	ldd	r24, Y+3	; 0x03
    7be0:	9c 81       	ldd	r25, Y+4	; 0x04
    7be2:	90 93 a1 05 	sts	0x05A1, r25
    7be6:	80 93 a0 05 	sts	0x05A0, r24

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    7bea:	27 96       	adiw	r28, 0x07	; 7
    7bec:	0f b6       	in	r0, 0x3f	; 63
    7bee:	f8 94       	cli
    7bf0:	de bf       	out	0x3e, r29	; 62
    7bf2:	0f be       	out	0x3f, r0	; 63
    7bf4:	cd bf       	out	0x3d, r28	; 61
    7bf6:	cf 91       	pop	r28
    7bf8:	df 91       	pop	r29
    7bfa:	08 95       	ret

00007bfc <__mulsi3>:
    7bfc:	62 9f       	mul	r22, r18
    7bfe:	d0 01       	movw	r26, r0
    7c00:	73 9f       	mul	r23, r19
    7c02:	f0 01       	movw	r30, r0
    7c04:	82 9f       	mul	r24, r18
    7c06:	e0 0d       	add	r30, r0
    7c08:	f1 1d       	adc	r31, r1
    7c0a:	64 9f       	mul	r22, r20
    7c0c:	e0 0d       	add	r30, r0
    7c0e:	f1 1d       	adc	r31, r1
    7c10:	92 9f       	mul	r25, r18
    7c12:	f0 0d       	add	r31, r0
    7c14:	83 9f       	mul	r24, r19
    7c16:	f0 0d       	add	r31, r0
    7c18:	74 9f       	mul	r23, r20
    7c1a:	f0 0d       	add	r31, r0
    7c1c:	65 9f       	mul	r22, r21
    7c1e:	f0 0d       	add	r31, r0
    7c20:	99 27       	eor	r25, r25
    7c22:	72 9f       	mul	r23, r18
    7c24:	b0 0d       	add	r27, r0
    7c26:	e1 1d       	adc	r30, r1
    7c28:	f9 1f       	adc	r31, r25
    7c2a:	63 9f       	mul	r22, r19
    7c2c:	b0 0d       	add	r27, r0
    7c2e:	e1 1d       	adc	r30, r1
    7c30:	f9 1f       	adc	r31, r25
    7c32:	bd 01       	movw	r22, r26
    7c34:	cf 01       	movw	r24, r30
    7c36:	11 24       	eor	r1, r1
    7c38:	08 95       	ret

00007c3a <__divmodsi4>:
    7c3a:	97 fb       	bst	r25, 7
    7c3c:	09 2e       	mov	r0, r25
    7c3e:	05 26       	eor	r0, r21
    7c40:	0e d0       	rcall	.+28     	; 0x7c5e <__divmodsi4_neg1>
    7c42:	57 fd       	sbrc	r21, 7
    7c44:	04 d0       	rcall	.+8      	; 0x7c4e <__divmodsi4_neg2>
    7c46:	14 d0       	rcall	.+40     	; 0x7c70 <__udivmodsi4>
    7c48:	0a d0       	rcall	.+20     	; 0x7c5e <__divmodsi4_neg1>
    7c4a:	00 1c       	adc	r0, r0
    7c4c:	38 f4       	brcc	.+14     	; 0x7c5c <__divmodsi4_exit>

00007c4e <__divmodsi4_neg2>:
    7c4e:	50 95       	com	r21
    7c50:	40 95       	com	r20
    7c52:	30 95       	com	r19
    7c54:	21 95       	neg	r18
    7c56:	3f 4f       	sbci	r19, 0xFF	; 255
    7c58:	4f 4f       	sbci	r20, 0xFF	; 255
    7c5a:	5f 4f       	sbci	r21, 0xFF	; 255

00007c5c <__divmodsi4_exit>:
    7c5c:	08 95       	ret

00007c5e <__divmodsi4_neg1>:
    7c5e:	f6 f7       	brtc	.-4      	; 0x7c5c <__divmodsi4_exit>
    7c60:	90 95       	com	r25
    7c62:	80 95       	com	r24
    7c64:	70 95       	com	r23
    7c66:	61 95       	neg	r22
    7c68:	7f 4f       	sbci	r23, 0xFF	; 255
    7c6a:	8f 4f       	sbci	r24, 0xFF	; 255
    7c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    7c6e:	08 95       	ret

00007c70 <__udivmodsi4>:
    7c70:	a1 e2       	ldi	r26, 0x21	; 33
    7c72:	1a 2e       	mov	r1, r26
    7c74:	aa 1b       	sub	r26, r26
    7c76:	bb 1b       	sub	r27, r27
    7c78:	fd 01       	movw	r30, r26
    7c7a:	0d c0       	rjmp	.+26     	; 0x7c96 <__udivmodsi4_ep>

00007c7c <__udivmodsi4_loop>:
    7c7c:	aa 1f       	adc	r26, r26
    7c7e:	bb 1f       	adc	r27, r27
    7c80:	ee 1f       	adc	r30, r30
    7c82:	ff 1f       	adc	r31, r31
    7c84:	a2 17       	cp	r26, r18
    7c86:	b3 07       	cpc	r27, r19
    7c88:	e4 07       	cpc	r30, r20
    7c8a:	f5 07       	cpc	r31, r21
    7c8c:	20 f0       	brcs	.+8      	; 0x7c96 <__udivmodsi4_ep>
    7c8e:	a2 1b       	sub	r26, r18
    7c90:	b3 0b       	sbc	r27, r19
    7c92:	e4 0b       	sbc	r30, r20
    7c94:	f5 0b       	sbc	r31, r21

00007c96 <__udivmodsi4_ep>:
    7c96:	66 1f       	adc	r22, r22
    7c98:	77 1f       	adc	r23, r23
    7c9a:	88 1f       	adc	r24, r24
    7c9c:	99 1f       	adc	r25, r25
    7c9e:	1a 94       	dec	r1
    7ca0:	69 f7       	brne	.-38     	; 0x7c7c <__udivmodsi4_loop>
    7ca2:	60 95       	com	r22
    7ca4:	70 95       	com	r23
    7ca6:	80 95       	com	r24
    7ca8:	90 95       	com	r25
    7caa:	9b 01       	movw	r18, r22
    7cac:	ac 01       	movw	r20, r24
    7cae:	bd 01       	movw	r22, r26
    7cb0:	cf 01       	movw	r24, r30
    7cb2:	08 95       	ret

00007cb4 <__prologue_saves__>:
    7cb4:	2f 92       	push	r2
    7cb6:	3f 92       	push	r3
    7cb8:	4f 92       	push	r4
    7cba:	5f 92       	push	r5
    7cbc:	6f 92       	push	r6
    7cbe:	7f 92       	push	r7
    7cc0:	8f 92       	push	r8
    7cc2:	9f 92       	push	r9
    7cc4:	af 92       	push	r10
    7cc6:	bf 92       	push	r11
    7cc8:	cf 92       	push	r12
    7cca:	df 92       	push	r13
    7ccc:	ef 92       	push	r14
    7cce:	ff 92       	push	r15
    7cd0:	0f 93       	push	r16
    7cd2:	1f 93       	push	r17
    7cd4:	cf 93       	push	r28
    7cd6:	df 93       	push	r29
    7cd8:	cd b7       	in	r28, 0x3d	; 61
    7cda:	de b7       	in	r29, 0x3e	; 62
    7cdc:	ca 1b       	sub	r28, r26
    7cde:	db 0b       	sbc	r29, r27
    7ce0:	0f b6       	in	r0, 0x3f	; 63
    7ce2:	f8 94       	cli
    7ce4:	de bf       	out	0x3e, r29	; 62
    7ce6:	0f be       	out	0x3f, r0	; 63
    7ce8:	cd bf       	out	0x3d, r28	; 61
    7cea:	09 94       	ijmp

00007cec <__epilogue_restores__>:
    7cec:	2a 88       	ldd	r2, Y+18	; 0x12
    7cee:	39 88       	ldd	r3, Y+17	; 0x11
    7cf0:	48 88       	ldd	r4, Y+16	; 0x10
    7cf2:	5f 84       	ldd	r5, Y+15	; 0x0f
    7cf4:	6e 84       	ldd	r6, Y+14	; 0x0e
    7cf6:	7d 84       	ldd	r7, Y+13	; 0x0d
    7cf8:	8c 84       	ldd	r8, Y+12	; 0x0c
    7cfa:	9b 84       	ldd	r9, Y+11	; 0x0b
    7cfc:	aa 84       	ldd	r10, Y+10	; 0x0a
    7cfe:	b9 84       	ldd	r11, Y+9	; 0x09
    7d00:	c8 84       	ldd	r12, Y+8	; 0x08
    7d02:	df 80       	ldd	r13, Y+7	; 0x07
    7d04:	ee 80       	ldd	r14, Y+6	; 0x06
    7d06:	fd 80       	ldd	r15, Y+5	; 0x05
    7d08:	0c 81       	ldd	r16, Y+4	; 0x04
    7d0a:	1b 81       	ldd	r17, Y+3	; 0x03
    7d0c:	aa 81       	ldd	r26, Y+2	; 0x02
    7d0e:	b9 81       	ldd	r27, Y+1	; 0x01
    7d10:	ce 0f       	add	r28, r30
    7d12:	d1 1d       	adc	r29, r1
    7d14:	0f b6       	in	r0, 0x3f	; 63
    7d16:	f8 94       	cli
    7d18:	de bf       	out	0x3e, r29	; 62
    7d1a:	0f be       	out	0x3f, r0	; 63
    7d1c:	cd bf       	out	0x3d, r28	; 61
    7d1e:	ed 01       	movw	r28, r26
    7d20:	08 95       	ret

00007d22 <memcpy>:
    7d22:	fb 01       	movw	r30, r22
    7d24:	dc 01       	movw	r26, r24
    7d26:	02 c0       	rjmp	.+4      	; 0x7d2c <memcpy+0xa>
    7d28:	01 90       	ld	r0, Z+
    7d2a:	0d 92       	st	X+, r0
    7d2c:	41 50       	subi	r20, 0x01	; 1
    7d2e:	50 40       	sbci	r21, 0x00	; 0
    7d30:	d8 f7       	brcc	.-10     	; 0x7d28 <memcpy+0x6>
    7d32:	08 95       	ret

00007d34 <_exit>:
    7d34:	f8 94       	cli

00007d36 <__stop_program>:
    7d36:	ff cf       	rjmp	.-2      	; 0x7d36 <__stop_program>
