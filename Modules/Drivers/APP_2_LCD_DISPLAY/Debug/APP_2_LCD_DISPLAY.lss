
APP_2_LCD_DISPLAY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004cda  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013a  00800060  00004cda  00004d4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000327c  00000000  00000000  00004e88  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dd9  00000000  00000000  00008104  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00008edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f0  00000000  00000000  0000907d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240c  00000000  00000000  0000926d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001377  00000000  00000000  0000b679  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d8  00000000  00000000  0000c9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000dbc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f3  00000000  00000000  0000dd88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  0000e07b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ea49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	fc e4       	ldi	r31, 0x4C	; 76
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <main>
      7a:	0c 94 6b 26 	jmp	0x4cd6	; 0x4cd6 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	aa e7       	ldi	r26, 0x7A	; 122
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 40 26 	jmp	0x4c80	; 0x4c80 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 5c 26 	jmp	0x4cb8	; 0x4cb8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 40 26 	jmp	0x4c80	; 0x4c80 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 5c 26 	jmp	0x4cb8	; 0x4cb8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8a e7       	ldi	r24, 0x7A	; 122
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 3c 26 	jmp	0x4c78	; 0x4c78 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6a e7       	ldi	r22, 0x7A	; 122
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 58 26 	jmp	0x4cb0	; 0x4cb0 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 40 26 	jmp	0x4c80	; 0x4c80 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 5c 26 	jmp	0x4cb8	; 0x4cb8 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 40 26 	jmp	0x4c80	; 0x4c80 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 5c 26 	jmp	0x4cb8	; 0x4cb8 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 40 26 	jmp	0x4c80	; 0x4c80 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 5c 26 	jmp	0x4cb8	; 0x4cb8 <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 3d 26 	jmp	0x4c7a	; 0x4c7a <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 59 26 	jmp	0x4cb2	; 0x4cb2 <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 44 26 	jmp	0x4c88	; 0x4c88 <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 60 26 	jmp	0x4cc0	; 0x4cc0 <__epilogue_restores__+0x20>

000009fe <__clzsi2>:
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	7b 01       	movw	r14, r22
     a08:	8c 01       	movw	r16, r24
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	e8 16       	cp	r14, r24
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	f8 06       	cpc	r15, r24
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 07       	cpc	r16, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	18 07       	cpc	r17, r24
     a1a:	88 f4       	brcc	.+34     	; 0xa3e <__clzsi2+0x40>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	e8 16       	cp	r14, r24
     a20:	f1 04       	cpc	r15, r1
     a22:	01 05       	cpc	r16, r1
     a24:	11 05       	cpc	r17, r1
     a26:	31 f0       	breq	.+12     	; 0xa34 <__clzsi2+0x36>
     a28:	28 f0       	brcs	.+10     	; 0xa34 <__clzsi2+0x36>
     a2a:	88 e0       	ldi	r24, 0x08	; 8
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a0 e0       	ldi	r26, 0x00	; 0
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	17 c0       	rjmp	.+46     	; 0xa62 <__clzsi2+0x64>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	12 c0       	rjmp	.+36     	; 0xa62 <__clzsi2+0x64>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	e8 16       	cp	r14, r24
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	f8 06       	cpc	r15, r24
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	08 07       	cpc	r16, r24
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	18 07       	cpc	r17, r24
     a4e:	28 f0       	brcs	.+10     	; 0xa5a <__clzsi2+0x5c>
     a50:	88 e1       	ldi	r24, 0x18	; 24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x64>
     a5a:	80 e1       	ldi	r24, 0x10	; 16
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	20 e2       	ldi	r18, 0x20	; 32
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	28 1b       	sub	r18, r24
     a6c:	39 0b       	sbc	r19, r25
     a6e:	4a 0b       	sbc	r20, r26
     a70:	5b 0b       	sbc	r21, r27
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <__clzsi2+0x7e>
     a74:	16 95       	lsr	r17
     a76:	07 95       	ror	r16
     a78:	f7 94       	ror	r15
     a7a:	e7 94       	ror	r14
     a7c:	8a 95       	dec	r24
     a7e:	d2 f7       	brpl	.-12     	; 0xa74 <__clzsi2+0x76>
     a80:	f7 01       	movw	r30, r14
     a82:	ee 57       	subi	r30, 0x7E	; 126
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	80 81       	ld	r24, Z
     a88:	28 1b       	sub	r18, r24
     a8a:	31 09       	sbc	r19, r1
     a8c:	41 09       	sbc	r20, r1
     a8e:	51 09       	sbc	r21, r1
     a90:	c9 01       	movw	r24, r18
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	08 95       	ret

00000a9c <__pack_f>:
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	fc 01       	movw	r30, r24
     aa8:	e4 80       	ldd	r14, Z+4	; 0x04
     aaa:	f5 80       	ldd	r15, Z+5	; 0x05
     aac:	06 81       	ldd	r16, Z+6	; 0x06
     aae:	17 81       	ldd	r17, Z+7	; 0x07
     ab0:	d1 80       	ldd	r13, Z+1	; 0x01
     ab2:	80 81       	ld	r24, Z
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	48 f4       	brcc	.+18     	; 0xaca <__pack_f+0x2e>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	a0 e1       	ldi	r26, 0x10	; 16
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e8 2a       	or	r14, r24
     ac2:	f9 2a       	or	r15, r25
     ac4:	0a 2b       	or	r16, r26
     ac6:	1b 2b       	or	r17, r27
     ac8:	a5 c0       	rjmp	.+330    	; 0xc14 <__pack_f+0x178>
     aca:	84 30       	cpi	r24, 0x04	; 4
     acc:	09 f4       	brne	.+2      	; 0xad0 <__pack_f+0x34>
     ace:	9f c0       	rjmp	.+318    	; 0xc0e <__pack_f+0x172>
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	21 f4       	brne	.+8      	; 0xadc <__pack_f+0x40>
     ad4:	ee 24       	eor	r14, r14
     ad6:	ff 24       	eor	r15, r15
     ad8:	87 01       	movw	r16, r14
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <__pack_f+0x4a>
     adc:	e1 14       	cp	r14, r1
     ade:	f1 04       	cpc	r15, r1
     ae0:	01 05       	cpc	r16, r1
     ae2:	11 05       	cpc	r17, r1
     ae4:	19 f4       	brne	.+6      	; 0xaec <__pack_f+0x50>
     ae6:	e0 e0       	ldi	r30, 0x00	; 0
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	96 c0       	rjmp	.+300    	; 0xc18 <__pack_f+0x17c>
     aec:	62 81       	ldd	r22, Z+2	; 0x02
     aee:	73 81       	ldd	r23, Z+3	; 0x03
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	62 38       	cpi	r22, 0x82	; 130
     af4:	79 07       	cpc	r23, r25
     af6:	0c f0       	brlt	.+2      	; 0xafa <__pack_f+0x5e>
     af8:	5b c0       	rjmp	.+182    	; 0xbb0 <__pack_f+0x114>
     afa:	22 e8       	ldi	r18, 0x82	; 130
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	26 1b       	sub	r18, r22
     b00:	37 0b       	sbc	r19, r23
     b02:	2a 31       	cpi	r18, 0x1A	; 26
     b04:	31 05       	cpc	r19, r1
     b06:	2c f0       	brlt	.+10     	; 0xb12 <__pack_f+0x76>
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	2a c0       	rjmp	.+84     	; 0xb66 <__pack_f+0xca>
     b12:	b8 01       	movw	r22, r16
     b14:	a7 01       	movw	r20, r14
     b16:	02 2e       	mov	r0, r18
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__pack_f+0x86>
     b1a:	76 95       	lsr	r23
     b1c:	67 95       	ror	r22
     b1e:	57 95       	ror	r21
     b20:	47 95       	ror	r20
     b22:	0a 94       	dec	r0
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__pack_f+0x7e>
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__pack_f+0x9c>
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	aa 1f       	adc	r26, r26
     b36:	bb 1f       	adc	r27, r27
     b38:	2a 95       	dec	r18
     b3a:	d2 f7       	brpl	.-12     	; 0xb30 <__pack_f+0x94>
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	a1 09       	sbc	r26, r1
     b40:	b1 09       	sbc	r27, r1
     b42:	8e 21       	and	r24, r14
     b44:	9f 21       	and	r25, r15
     b46:	a0 23       	and	r26, r16
     b48:	b1 23       	and	r27, r17
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	a1 05       	cpc	r26, r1
     b4e:	b1 05       	cpc	r27, r1
     b50:	21 f0       	breq	.+8      	; 0xb5a <__pack_f+0xbe>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	9a 01       	movw	r18, r20
     b5c:	ab 01       	movw	r20, r22
     b5e:	28 2b       	or	r18, r24
     b60:	39 2b       	or	r19, r25
     b62:	4a 2b       	or	r20, r26
     b64:	5b 2b       	or	r21, r27
     b66:	da 01       	movw	r26, r20
     b68:	c9 01       	movw	r24, r18
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0xee>
     b7c:	27 ff       	sbrs	r18, 7
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <__pack_f+0xf6>
     b80:	20 5c       	subi	r18, 0xC0	; 192
     b82:	3f 4f       	sbci	r19, 0xFF	; 255
     b84:	4f 4f       	sbci	r20, 0xFF	; 255
     b86:	5f 4f       	sbci	r21, 0xFF	; 255
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0xf6>
     b8a:	21 5c       	subi	r18, 0xC1	; 193
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	4f 4f       	sbci	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	e0 e0       	ldi	r30, 0x00	; 0
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	20 30       	cpi	r18, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	3a 07       	cpc	r19, r26
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	4a 07       	cpc	r20, r26
     ba0:	a0 e4       	ldi	r26, 0x40	; 64
     ba2:	5a 07       	cpc	r21, r26
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <__pack_f+0x10e>
     ba6:	e1 e0       	ldi	r30, 0x01	; 1
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	79 01       	movw	r14, r18
     bac:	8a 01       	movw	r16, r20
     bae:	27 c0       	rjmp	.+78     	; 0xbfe <__pack_f+0x162>
     bb0:	60 38       	cpi	r22, 0x80	; 128
     bb2:	71 05       	cpc	r23, r1
     bb4:	64 f5       	brge	.+88     	; 0xc0e <__pack_f+0x172>
     bb6:	fb 01       	movw	r30, r22
     bb8:	e1 58       	subi	r30, 0x81	; 129
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	d8 01       	movw	r26, r16
     bbe:	c7 01       	movw	r24, r14
     bc0:	8f 77       	andi	r24, 0x7F	; 127
     bc2:	90 70       	andi	r25, 0x00	; 0
     bc4:	a0 70       	andi	r26, 0x00	; 0
     bc6:	b0 70       	andi	r27, 0x00	; 0
     bc8:	80 34       	cpi	r24, 0x40	; 64
     bca:	91 05       	cpc	r25, r1
     bcc:	a1 05       	cpc	r26, r1
     bce:	b1 05       	cpc	r27, r1
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <__pack_f+0x144>
     bd2:	e7 fe       	sbrs	r14, 7
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <__pack_f+0x154>
     bd6:	80 e4       	ldi	r24, 0x40	; 64
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <__pack_f+0x14c>
     be0:	8f e3       	ldi	r24, 0x3F	; 63
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e8 0e       	add	r14, r24
     bea:	f9 1e       	adc	r15, r25
     bec:	0a 1f       	adc	r16, r26
     bee:	1b 1f       	adc	r17, r27
     bf0:	17 ff       	sbrs	r17, 7
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x162>
     bf4:	16 95       	lsr	r17
     bf6:	07 95       	ror	r16
     bf8:	f7 94       	ror	r15
     bfa:	e7 94       	ror	r14
     bfc:	31 96       	adiw	r30, 0x01	; 1
     bfe:	87 e0       	ldi	r24, 0x07	; 7
     c00:	16 95       	lsr	r17
     c02:	07 95       	ror	r16
     c04:	f7 94       	ror	r15
     c06:	e7 94       	ror	r14
     c08:	8a 95       	dec	r24
     c0a:	d1 f7       	brne	.-12     	; 0xc00 <__pack_f+0x164>
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <__pack_f+0x17c>
     c0e:	ee 24       	eor	r14, r14
     c10:	ff 24       	eor	r15, r15
     c12:	87 01       	movw	r16, r14
     c14:	ef ef       	ldi	r30, 0xFF	; 255
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	6e 2f       	mov	r22, r30
     c1a:	67 95       	ror	r22
     c1c:	66 27       	eor	r22, r22
     c1e:	67 95       	ror	r22
     c20:	90 2f       	mov	r25, r16
     c22:	9f 77       	andi	r25, 0x7F	; 127
     c24:	d7 94       	ror	r13
     c26:	dd 24       	eor	r13, r13
     c28:	d7 94       	ror	r13
     c2a:	8e 2f       	mov	r24, r30
     c2c:	86 95       	lsr	r24
     c2e:	49 2f       	mov	r20, r25
     c30:	46 2b       	or	r20, r22
     c32:	58 2f       	mov	r21, r24
     c34:	5d 29       	or	r21, r13
     c36:	b7 01       	movw	r22, r14
     c38:	ca 01       	movw	r24, r20
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	08 95       	ret

00000c46 <__unpack_f>:
     c46:	fc 01       	movw	r30, r24
     c48:	db 01       	movw	r26, r22
     c4a:	40 81       	ld	r20, Z
     c4c:	51 81       	ldd	r21, Z+1	; 0x01
     c4e:	22 81       	ldd	r18, Z+2	; 0x02
     c50:	62 2f       	mov	r22, r18
     c52:	6f 77       	andi	r22, 0x7F	; 127
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	22 1f       	adc	r18, r18
     c58:	22 27       	eor	r18, r18
     c5a:	22 1f       	adc	r18, r18
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	89 2f       	mov	r24, r25
     c60:	88 0f       	add	r24, r24
     c62:	82 2b       	or	r24, r18
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	99 1f       	adc	r25, r25
     c6a:	99 27       	eor	r25, r25
     c6c:	99 1f       	adc	r25, r25
     c6e:	11 96       	adiw	r26, 0x01	; 1
     c70:	9c 93       	st	X, r25
     c72:	11 97       	sbiw	r26, 0x01	; 1
     c74:	21 15       	cp	r18, r1
     c76:	31 05       	cpc	r19, r1
     c78:	a9 f5       	brne	.+106    	; 0xce4 <__unpack_f+0x9e>
     c7a:	41 15       	cp	r20, r1
     c7c:	51 05       	cpc	r21, r1
     c7e:	61 05       	cpc	r22, r1
     c80:	71 05       	cpc	r23, r1
     c82:	11 f4       	brne	.+4      	; 0xc88 <__unpack_f+0x42>
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	37 c0       	rjmp	.+110    	; 0xcf6 <__unpack_f+0xb0>
     c88:	82 e8       	ldi	r24, 0x82	; 130
     c8a:	9f ef       	ldi	r25, 0xFF	; 255
     c8c:	13 96       	adiw	r26, 0x03	; 3
     c8e:	9c 93       	st	X, r25
     c90:	8e 93       	st	-X, r24
     c92:	12 97       	sbiw	r26, 0x02	; 2
     c94:	9a 01       	movw	r18, r20
     c96:	ab 01       	movw	r20, r22
     c98:	67 e0       	ldi	r22, 0x07	; 7
     c9a:	22 0f       	add	r18, r18
     c9c:	33 1f       	adc	r19, r19
     c9e:	44 1f       	adc	r20, r20
     ca0:	55 1f       	adc	r21, r21
     ca2:	6a 95       	dec	r22
     ca4:	d1 f7       	brne	.-12     	; 0xc9a <__unpack_f+0x54>
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	8c 93       	st	X, r24
     caa:	0d c0       	rjmp	.+26     	; 0xcc6 <__unpack_f+0x80>
     cac:	22 0f       	add	r18, r18
     cae:	33 1f       	adc	r19, r19
     cb0:	44 1f       	adc	r20, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	12 96       	adiw	r26, 0x02	; 2
     cb6:	8d 91       	ld	r24, X+
     cb8:	9c 91       	ld	r25, X
     cba:	13 97       	sbiw	r26, 0x03	; 3
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	13 96       	adiw	r26, 0x03	; 3
     cc0:	9c 93       	st	X, r25
     cc2:	8e 93       	st	-X, r24
     cc4:	12 97       	sbiw	r26, 0x02	; 2
     cc6:	20 30       	cpi	r18, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	38 07       	cpc	r19, r24
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	48 07       	cpc	r20, r24
     cd0:	80 e4       	ldi	r24, 0x40	; 64
     cd2:	58 07       	cpc	r21, r24
     cd4:	58 f3       	brcs	.-42     	; 0xcac <__unpack_f+0x66>
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	2d 93       	st	X+, r18
     cda:	3d 93       	st	X+, r19
     cdc:	4d 93       	st	X+, r20
     cde:	5c 93       	st	X, r21
     ce0:	17 97       	sbiw	r26, 0x07	; 7
     ce2:	08 95       	ret
     ce4:	2f 3f       	cpi	r18, 0xFF	; 255
     ce6:	31 05       	cpc	r19, r1
     ce8:	79 f4       	brne	.+30     	; 0xd08 <__unpack_f+0xc2>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	19 f4       	brne	.+6      	; 0xcfa <__unpack_f+0xb4>
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	8c 93       	st	X, r24
     cf8:	08 95       	ret
     cfa:	64 ff       	sbrs	r22, 4
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <__unpack_f+0xbe>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	8c 93       	st	X, r24
     d02:	12 c0       	rjmp	.+36     	; 0xd28 <__unpack_f+0xe2>
     d04:	1c 92       	st	X, r1
     d06:	10 c0       	rjmp	.+32     	; 0xd28 <__unpack_f+0xe2>
     d08:	2f 57       	subi	r18, 0x7F	; 127
     d0a:	30 40       	sbci	r19, 0x00	; 0
     d0c:	13 96       	adiw	r26, 0x03	; 3
     d0e:	3c 93       	st	X, r19
     d10:	2e 93       	st	-X, r18
     d12:	12 97       	sbiw	r26, 0x02	; 2
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	8c 93       	st	X, r24
     d18:	87 e0       	ldi	r24, 0x07	; 7
     d1a:	44 0f       	add	r20, r20
     d1c:	55 1f       	adc	r21, r21
     d1e:	66 1f       	adc	r22, r22
     d20:	77 1f       	adc	r23, r23
     d22:	8a 95       	dec	r24
     d24:	d1 f7       	brne	.-12     	; 0xd1a <__unpack_f+0xd4>
     d26:	70 64       	ori	r23, 0x40	; 64
     d28:	14 96       	adiw	r26, 0x04	; 4
     d2a:	4d 93       	st	X+, r20
     d2c:	5d 93       	st	X+, r21
     d2e:	6d 93       	st	X+, r22
     d30:	7c 93       	st	X, r23
     d32:	17 97       	sbiw	r26, 0x07	; 7
     d34:	08 95       	ret

00000d36 <__fpcmp_parts_f>:
     d36:	1f 93       	push	r17
     d38:	dc 01       	movw	r26, r24
     d3a:	fb 01       	movw	r30, r22
     d3c:	9c 91       	ld	r25, X
     d3e:	92 30       	cpi	r25, 0x02	; 2
     d40:	08 f4       	brcc	.+2      	; 0xd44 <__fpcmp_parts_f+0xe>
     d42:	47 c0       	rjmp	.+142    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d44:	80 81       	ld	r24, Z
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	08 f4       	brcc	.+2      	; 0xd4c <__fpcmp_parts_f+0x16>
     d4a:	43 c0       	rjmp	.+134    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d4c:	94 30       	cpi	r25, 0x04	; 4
     d4e:	51 f4       	brne	.+20     	; 0xd64 <__fpcmp_parts_f+0x2e>
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	1c 91       	ld	r17, X
     d54:	84 30       	cpi	r24, 0x04	; 4
     d56:	99 f5       	brne	.+102    	; 0xdbe <__fpcmp_parts_f+0x88>
     d58:	81 81       	ldd	r24, Z+1	; 0x01
     d5a:	68 2f       	mov	r22, r24
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	61 1b       	sub	r22, r17
     d60:	71 09       	sbc	r23, r1
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <__fpcmp_parts_f+0xac>
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	21 f0       	breq	.+8      	; 0xd70 <__fpcmp_parts_f+0x3a>
     d68:	92 30       	cpi	r25, 0x02	; 2
     d6a:	31 f4       	brne	.+12     	; 0xd78 <__fpcmp_parts_f+0x42>
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	b9 f1       	breq	.+110    	; 0xdde <__fpcmp_parts_f+0xa8>
     d70:	81 81       	ldd	r24, Z+1	; 0x01
     d72:	88 23       	and	r24, r24
     d74:	89 f1       	breq	.+98     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     d76:	2d c0       	rjmp	.+90     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	1c 91       	ld	r17, X
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	f1 f0       	breq	.+60     	; 0xdbe <__fpcmp_parts_f+0x88>
     d82:	81 81       	ldd	r24, Z+1	; 0x01
     d84:	18 17       	cp	r17, r24
     d86:	d9 f4       	brne	.+54     	; 0xdbe <__fpcmp_parts_f+0x88>
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	2d 91       	ld	r18, X+
     d8c:	3c 91       	ld	r19, X
     d8e:	13 97       	sbiw	r26, 0x03	; 3
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	82 17       	cp	r24, r18
     d96:	93 07       	cpc	r25, r19
     d98:	94 f0       	brlt	.+36     	; 0xdbe <__fpcmp_parts_f+0x88>
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	bc f0       	brlt	.+46     	; 0xdce <__fpcmp_parts_f+0x98>
     da0:	14 96       	adiw	r26, 0x04	; 4
     da2:	8d 91       	ld	r24, X+
     da4:	9d 91       	ld	r25, X+
     da6:	0d 90       	ld	r0, X+
     da8:	bc 91       	ld	r27, X
     daa:	a0 2d       	mov	r26, r0
     dac:	24 81       	ldd	r18, Z+4	; 0x04
     dae:	35 81       	ldd	r19, Z+5	; 0x05
     db0:	46 81       	ldd	r20, Z+6	; 0x06
     db2:	57 81       	ldd	r21, Z+7	; 0x07
     db4:	28 17       	cp	r18, r24
     db6:	39 07       	cpc	r19, r25
     db8:	4a 07       	cpc	r20, r26
     dba:	5b 07       	cpc	r21, r27
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <__fpcmp_parts_f+0x8e>
     dbe:	11 23       	and	r17, r17
     dc0:	41 f0       	breq	.+16     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dc4:	82 17       	cp	r24, r18
     dc6:	93 07       	cpc	r25, r19
     dc8:	a4 07       	cpc	r26, r20
     dca:	b5 07       	cpc	r27, r21
     dcc:	40 f4       	brcc	.+16     	; 0xdde <__fpcmp_parts_f+0xa8>
     dce:	11 23       	and	r17, r17
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <__fpcmp_parts_f+0xac>
     dd8:	6f ef       	ldi	r22, 0xFF	; 255
     dda:	7f ef       	ldi	r23, 0xFF	; 255
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <__fpcmp_parts_f+0xac>
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	cb 01       	movw	r24, r22
     de4:	1f 91       	pop	r17
     de6:	08 95       	ret

00000de8 <DIO_void_set_port_dir>:


/* implementing the driver functions  */
/* set Portx Direction Function       */

void DIO_void_set_port_dir(u8 copy_u8_portID, u8 port_copy_dir){
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	00 d0       	rcall	.+0      	; 0xdee <DIO_void_set_port_dir+0x6>
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	89 83       	std	Y+1, r24	; 0x01
     df4:	6a 83       	std	Y+2, r22	; 0x02
	 *  Also general rule INPUT --> 0 // OUTPUT --> 1
	 *
	 *
	 */

	*(DIO_DDRx[copy_u8_portID]) = port_copy_dir;
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	88 2f       	mov	r24, r24
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	fc 01       	movw	r30, r24
     e02:	e6 57       	subi	r30, 0x76	; 118
     e04:	fe 4f       	sbci	r31, 0xFE	; 254
     e06:	01 90       	ld	r0, Z+
     e08:	f0 81       	ld	r31, Z
     e0a:	e0 2d       	mov	r30, r0
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	80 83       	st	Z, r24

}
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <DIO_void_set_pin_dir>:

void DIO_void_set_pin_dir(u8 copy_u8_portID, u8 copy_u8_pinID, u8 pin_copy_dir){
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	00 d0       	rcall	.+0      	; 0xe20 <DIO_void_set_pin_dir+0x6>
     e20:	0f 92       	push	r0
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	89 83       	std	Y+1, r24	; 0x01
     e28:	6a 83       	std	Y+2, r22	; 0x02
     e2a:	4b 83       	std	Y+3, r20	; 0x03
	 *  pin_copy_dir using the predefined macro INPUT //OUTPUT
	 *
	 *
	 */

	assign_Bit(*(DIO_DDRx[copy_u8_portID]),copy_u8_pinID,pin_copy_dir);
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	29 f5       	brne	.+74     	; 0xe7c <DIO_void_set_pin_dir+0x62>
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	88 2f       	mov	r24, r24
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	fc 01       	movw	r30, r24
     e3e:	e6 57       	subi	r30, 0x76	; 118
     e40:	fe 4f       	sbci	r31, 0xFE	; 254
     e42:	a0 81       	ld	r26, Z
     e44:	b1 81       	ldd	r27, Z+1	; 0x01
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	88 2f       	mov	r24, r24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	fc 01       	movw	r30, r24
     e52:	e6 57       	subi	r30, 0x76	; 118
     e54:	fe 4f       	sbci	r31, 0xFE	; 254
     e56:	01 90       	ld	r0, Z+
     e58:	f0 81       	ld	r31, Z
     e5a:	e0 2d       	mov	r30, r0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_void_set_pin_dir+0x58>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_void_set_pin_dir+0x54>
     e76:	84 2b       	or	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	25 c0       	rjmp	.+74     	; 0xec6 <DIO_void_set_pin_dir+0xac>
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	88 2f       	mov	r24, r24
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	fc 01       	movw	r30, r24
     e88:	e6 57       	subi	r30, 0x76	; 118
     e8a:	fe 4f       	sbci	r31, 0xFE	; 254
     e8c:	a0 81       	ld	r26, Z
     e8e:	b1 81       	ldd	r27, Z+1	; 0x01
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	88 2f       	mov	r24, r24
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	fc 01       	movw	r30, r24
     e9c:	e6 57       	subi	r30, 0x76	; 118
     e9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ea0:	01 90       	ld	r0, Z+
     ea2:	f0 81       	ld	r31, Z
     ea4:	e0 2d       	mov	r30, r0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DIO_void_set_pin_dir+0xa2>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <DIO_void_set_pin_dir+0x9e>
     ec0:	80 95       	com	r24
     ec2:	84 23       	and	r24, r20
     ec4:	8c 93       	st	X, r24

}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <DIO_void_port_pullup>:

void DIO_void_port_pullup(u8 copy_u8_portID){
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	0f 92       	push	r0
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	89 83       	std	Y+1, r24	; 0x01
	 *  so that is what the function does
	 *  using the pullup for any button prevents the floating effect
	 *
	 *
	 */
	*(DIO_DDRx[copy_u8_portID]) = INPUT;
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	fc 01       	movw	r30, r24
     eea:	e6 57       	subi	r30, 0x76	; 118
     eec:	fe 4f       	sbci	r31, 0xFE	; 254
     eee:	01 90       	ld	r0, Z+
     ef0:	f0 81       	ld	r31, Z
     ef2:	e0 2d       	mov	r30, r0
     ef4:	10 82       	st	Z, r1
	*(DIO_PORTx[copy_u8_portID]) = PORT_MAX;
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	88 2f       	mov	r24, r24
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	fc 01       	movw	r30, r24
     f02:	ee 56       	subi	r30, 0x6E	; 110
     f04:	fe 4f       	sbci	r31, 0xFE	; 254
     f06:	01 90       	ld	r0, Z+
     f08:	f0 81       	ld	r31, Z
     f0a:	e0 2d       	mov	r30, r0
     f0c:	8f ef       	ldi	r24, 0xFF	; 255
     f0e:	80 83       	st	Z, r24
}
     f10:	0f 90       	pop	r0
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <DIO_void_pin_pullup>:

void DIO_void_pin_pullup(u8 copy_u8_portID, u8 copy_u8_pinID){
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <DIO_void_pin_pullup+0x6>
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	6a 83       	std	Y+2, r22	; 0x02
	/*  the function works as the one that set pullup for the whole port
	 *
	 *
	 */

	clear_Bit(*(DIO_DDRx[copy_u8_portID]),copy_u8_pinID);
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	88 2f       	mov	r24, r24
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	fc 01       	movw	r30, r24
     f32:	e6 57       	subi	r30, 0x76	; 118
     f34:	fe 4f       	sbci	r31, 0xFE	; 254
     f36:	a0 81       	ld	r26, Z
     f38:	b1 81       	ldd	r27, Z+1	; 0x01
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	88 2f       	mov	r24, r24
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	fc 01       	movw	r30, r24
     f46:	e6 57       	subi	r30, 0x76	; 118
     f48:	fe 4f       	sbci	r31, 0xFE	; 254
     f4a:	01 90       	ld	r0, Z+
     f4c:	f0 81       	ld	r31, Z
     f4e:	e0 2d       	mov	r30, r0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_void_pin_pullup+0x4c>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	2a 95       	dec	r18
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_void_pin_pullup+0x48>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
	set_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	88 2f       	mov	r24, r24
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	fc 01       	movw	r30, r24
     f7a:	ee 56       	subi	r30, 0x6E	; 110
     f7c:	fe 4f       	sbci	r31, 0xFE	; 254
     f7e:	a0 81       	ld	r26, Z
     f80:	b1 81       	ldd	r27, Z+1	; 0x01
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	fc 01       	movw	r30, r24
     f8e:	ee 56       	subi	r30, 0x6E	; 110
     f90:	fe 4f       	sbci	r31, 0xFE	; 254
     f92:	01 90       	ld	r0, Z+
     f94:	f0 81       	ld	r31, Z
     f96:	e0 2d       	mov	r30, r0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 2e       	mov	r0, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DIO_void_pin_pullup+0x96>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DIO_void_pin_pullup+0x92>
     fb2:	84 2b       	or	r24, r20
     fb4:	8c 93       	st	X, r24

}
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <DIO_void_set_port>:

void DIO_void_set_port(u8 copy_u8_portID){
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	89 83       	std	Y+1, r24	; 0x01
	 *
	 */



	*(DIO_PORTx[copy_u8_portID]) = PORT_MAX;
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	fc 01       	movw	r30, r24
     fd8:	ee 56       	subi	r30, 0x6E	; 110
     fda:	fe 4f       	sbci	r31, 0xFE	; 254
     fdc:	01 90       	ld	r0, Z+
     fde:	f0 81       	ld	r31, Z
     fe0:	e0 2d       	mov	r30, r0
     fe2:	8f ef       	ldi	r24, 0xFF	; 255
     fe4:	80 83       	st	Z, r24

}
     fe6:	0f 90       	pop	r0
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <DIO_void_clear_port>:

void DIO_void_clear_port(u8 copy_u8_portID){
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	0f 92       	push	r0
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	89 83       	std	Y+1, r24	; 0x01
	 *
	 *
	 */


	*(DIO_PORTx[copy_u8_portID]) = LOW;
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	88 2f       	mov	r24, r24
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	fc 01       	movw	r30, r24
    1006:	ee 56       	subi	r30, 0x6E	; 110
    1008:	fe 4f       	sbci	r31, 0xFE	; 254
    100a:	01 90       	ld	r0, Z+
    100c:	f0 81       	ld	r31, Z
    100e:	e0 2d       	mov	r30, r0
    1010:	10 82       	st	Z, r1

}
    1012:	0f 90       	pop	r0
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <DIO_void_assign_port>:

void DIO_void_assign_port(u8 copy_u8_portID, u8 copy_value){
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	00 d0       	rcall	.+0      	; 0x1020 <DIO_void_assign_port+0x6>
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 */



	*(DIO_PORTx[copy_u8_portID]) = copy_value;
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	88 2f       	mov	r24, r24
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	fc 01       	movw	r30, r24
    1034:	ee 56       	subi	r30, 0x6E	; 110
    1036:	fe 4f       	sbci	r31, 0xFE	; 254
    1038:	01 90       	ld	r0, Z+
    103a:	f0 81       	ld	r31, Z
    103c:	e0 2d       	mov	r30, r0
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	80 83       	st	Z, r24

}
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <DIO_void_toggle_port>:

void DIO_void_toggle_port(u8 copy_u8_portID){
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	0f 92       	push	r0
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	89 83       	std	Y+1, r24	; 0x01
	 *
	 *
	 */


	*(DIO_PORTx[copy_u8_portID]) ^= PORT_MAX;
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	fc 01       	movw	r30, r24
    1064:	ee 56       	subi	r30, 0x6E	; 110
    1066:	fe 4f       	sbci	r31, 0xFE	; 254
    1068:	a0 81       	ld	r26, Z
    106a:	b1 81       	ldd	r27, Z+1	; 0x01
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	88 2f       	mov	r24, r24
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	fc 01       	movw	r30, r24
    1078:	ee 56       	subi	r30, 0x6E	; 110
    107a:	fe 4f       	sbci	r31, 0xFE	; 254
    107c:	01 90       	ld	r0, Z+
    107e:	f0 81       	ld	r31, Z
    1080:	e0 2d       	mov	r30, r0
    1082:	80 81       	ld	r24, Z
    1084:	80 95       	com	r24
    1086:	8c 93       	st	X, r24
}
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <DIO_void_set_pin>:

void DIO_void_set_pin(u8 copy_u8_portID , u8 copy_u8_pinID){
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <DIO_void_set_pin+0x6>
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	set_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	fc 01       	movw	r30, r24
    10aa:	ee 56       	subi	r30, 0x6E	; 110
    10ac:	fe 4f       	sbci	r31, 0xFE	; 254
    10ae:	a0 81       	ld	r26, Z
    10b0:	b1 81       	ldd	r27, Z+1	; 0x01
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	fc 01       	movw	r30, r24
    10be:	ee 56       	subi	r30, 0x6E	; 110
    10c0:	fe 4f       	sbci	r31, 0xFE	; 254
    10c2:	01 90       	ld	r0, Z+
    10c4:	f0 81       	ld	r31, Z
    10c6:	e0 2d       	mov	r30, r0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_void_set_pin+0x4e>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_void_set_pin+0x4a>
    10e2:	84 2b       	or	r24, r20
    10e4:	8c 93       	st	X, r24
}
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <DIO_void_clear_pin>:

void DIO_void_clear_pin(u8 copy_u8_portID , u8 copy_u8_pinID){
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <DIO_void_clear_pin+0x6>
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	89 83       	std	Y+1, r24	; 0x01
    10fc:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	clear_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	88 2f       	mov	r24, r24
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	fc 01       	movw	r30, r24
    110a:	ee 56       	subi	r30, 0x6E	; 110
    110c:	fe 4f       	sbci	r31, 0xFE	; 254
    110e:	a0 81       	ld	r26, Z
    1110:	b1 81       	ldd	r27, Z+1	; 0x01
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	fc 01       	movw	r30, r24
    111e:	ee 56       	subi	r30, 0x6E	; 110
    1120:	fe 4f       	sbci	r31, 0xFE	; 254
    1122:	01 90       	ld	r0, Z+
    1124:	f0 81       	ld	r31, Z
    1126:	e0 2d       	mov	r30, r0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_void_clear_pin+0x4e>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_void_clear_pin+0x4a>
    1142:	80 95       	com	r24
    1144:	84 23       	and	r24, r20
    1146:	8c 93       	st	X, r24
}
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <DIO_void_assign_pin>:

void DIO_void_assign_pin(u8 copy_u8_portID,u8 copy_u8_pinID ,u8 copy_value){
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	00 d0       	rcall	.+0      	; 0x1158 <DIO_void_assign_pin+0x6>
    1158:	0f 92       	push	r0
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	6a 83       	std	Y+2, r22	; 0x02
    1162:	4b 83       	std	Y+3, r20	; 0x03
	 *
	 */



	assign_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID,copy_value);
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	29 f5       	brne	.+74     	; 0x11b4 <DIO_void_assign_pin+0x62>
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	88 2f       	mov	r24, r24
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	fc 01       	movw	r30, r24
    1176:	ee 56       	subi	r30, 0x6E	; 110
    1178:	fe 4f       	sbci	r31, 0xFE	; 254
    117a:	a0 81       	ld	r26, Z
    117c:	b1 81       	ldd	r27, Z+1	; 0x01
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	88 2f       	mov	r24, r24
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	fc 01       	movw	r30, r24
    118a:	ee 56       	subi	r30, 0x6E	; 110
    118c:	fe 4f       	sbci	r31, 0xFE	; 254
    118e:	01 90       	ld	r0, Z+
    1190:	f0 81       	ld	r31, Z
    1192:	e0 2d       	mov	r30, r0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_void_assign_pin+0x58>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_void_assign_pin+0x54>
    11ae:	84 2b       	or	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	25 c0       	rjmp	.+74     	; 0x11fe <DIO_void_assign_pin+0xac>
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	88 2f       	mov	r24, r24
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	fc 01       	movw	r30, r24
    11c0:	ee 56       	subi	r30, 0x6E	; 110
    11c2:	fe 4f       	sbci	r31, 0xFE	; 254
    11c4:	a0 81       	ld	r26, Z
    11c6:	b1 81       	ldd	r27, Z+1	; 0x01
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	88 2f       	mov	r24, r24
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	fc 01       	movw	r30, r24
    11d4:	ee 56       	subi	r30, 0x6E	; 110
    11d6:	fe 4f       	sbci	r31, 0xFE	; 254
    11d8:	01 90       	ld	r0, Z+
    11da:	f0 81       	ld	r31, Z
    11dc:	e0 2d       	mov	r30, r0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_void_assign_pin+0xa2>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_void_assign_pin+0x9e>
    11f8:	80 95       	com	r24
    11fa:	84 23       	and	r24, r20
    11fc:	8c 93       	st	X, r24
}
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <DIO_void_toggle_pin>:

void DIO_void_toggle_pin(u8 copy_u8_portID , u8 copy_u8_pinID){
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	00 d0       	rcall	.+0      	; 0x1210 <DIO_void_toggle_pin+0x6>
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	toggle_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	fc 01       	movw	r30, r24
    1224:	ee 56       	subi	r30, 0x6E	; 110
    1226:	fe 4f       	sbci	r31, 0xFE	; 254
    1228:	a0 81       	ld	r26, Z
    122a:	b1 81       	ldd	r27, Z+1	; 0x01
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	fc 01       	movw	r30, r24
    1238:	ee 56       	subi	r30, 0x6E	; 110
    123a:	fe 4f       	sbci	r31, 0xFE	; 254
    123c:	01 90       	ld	r0, Z+
    123e:	f0 81       	ld	r31, Z
    1240:	e0 2d       	mov	r30, r0
    1242:	80 81       	ld	r24, Z
    1244:	48 2f       	mov	r20, r24
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 2e       	mov	r0, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <DIO_void_toggle_pin+0x4e>
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	0a 94       	dec	r0
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <DIO_void_toggle_pin+0x4a>
    125c:	84 27       	eor	r24, r20
    125e:	8c 93       	st	X, r24

}
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <DIO_u8_get_port>:

u8 DIO_u8_get_port(u8 copy_u8_portID){
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	0f 92       	push	r0
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	89 83       	std	Y+1, r24	; 0x01
	 *  1 byte data
	 */



	return *(DIO_PINx[copy_u8_portID]);
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	88 2f       	mov	r24, r24
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	fc 01       	movw	r30, r24
    1282:	ee 57       	subi	r30, 0x7E	; 126
    1284:	fe 4f       	sbci	r31, 0xFE	; 254
    1286:	01 90       	ld	r0, Z+
    1288:	f0 81       	ld	r31, Z
    128a:	e0 2d       	mov	r30, r0
    128c:	80 81       	ld	r24, Z
}
    128e:	0f 90       	pop	r0
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <DIO_u8_get_pin>:

u8 DIO_u8_get_pin(u8 copy_u8_portID, u8 copy_u8_pinID){
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	00 d0       	rcall	.+0      	; 0x129c <DIO_u8_get_pin+0x6>
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	return get_Bit(*(DIO_PINx[copy_u8_portID]),copy_u8_pinID);
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	88 2f       	mov	r24, r24
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	fc 01       	movw	r30, r24
    12b0:	ee 57       	subi	r30, 0x7E	; 126
    12b2:	fe 4f       	sbci	r31, 0xFE	; 254
    12b4:	01 90       	ld	r0, Z+
    12b6:	f0 81       	ld	r31, Z
    12b8:	e0 2d       	mov	r30, r0
    12ba:	80 81       	ld	r24, Z
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	88 2f       	mov	r24, r24
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	a9 01       	movw	r20, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_u8_get_pin+0x38>
    12ca:	55 95       	asr	r21
    12cc:	47 95       	ror	r20
    12ce:	8a 95       	dec	r24
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <DIO_u8_get_pin+0x34>
    12d2:	ca 01       	movw	r24, r20
    12d4:	81 70       	andi	r24, 0x01	; 1
}
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <array_Swap>:
#include "../Drivers/HAL/LCD/LCD_Config.h"
#include "LCD_Interface.h"
#include "../Drivers/HAL/LCD/LCD_Private.h"


static void array_Swap(u8* copy_pu8_arr, u8 copy_length){
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <array_Swap+0x6>
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <array_Swap+0x8>
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <array_Swap+0xa>
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	9d 83       	std	Y+5, r25	; 0x05
    12f0:	8c 83       	std	Y+4, r24	; 0x04
    12f2:	6e 83       	std	Y+6, r22	; 0x06
	 *
	 *
	 */


	u8 start = 0;
    12f4:	1b 82       	std	Y+3, r1	; 0x03
	u8 end = copy_length - 1;
    12f6:	8e 81       	ldd	r24, Y+6	; 0x06
    12f8:	81 50       	subi	r24, 0x01	; 1
    12fa:	8a 83       	std	Y+2, r24	; 0x02
    12fc:	2c c0       	rjmp	.+88     	; 0x1356 <array_Swap+0x76>

	while(start < end){

		u8 temp = copy_pu8_arr[start];
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	9d 81       	ldd	r25, Y+5	; 0x05
    1308:	fc 01       	movw	r30, r24
    130a:	e2 0f       	add	r30, r18
    130c:	f3 1f       	adc	r31, r19
    130e:	80 81       	ld	r24, Z
    1310:	89 83       	std	Y+1, r24	; 0x01
		copy_pu8_arr[start] = copy_pu8_arr[end];
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
    131a:	9d 81       	ldd	r25, Y+5	; 0x05
    131c:	dc 01       	movw	r26, r24
    131e:	a2 0f       	add	r26, r18
    1320:	b3 1f       	adc	r27, r19
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	9d 81       	ldd	r25, Y+5	; 0x05
    132c:	fc 01       	movw	r30, r24
    132e:	e2 0f       	add	r30, r18
    1330:	f3 1f       	adc	r31, r19
    1332:	80 81       	ld	r24, Z
    1334:	8c 93       	st	X, r24
		copy_pu8_arr[end] = temp;
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	8c 81       	ldd	r24, Y+4	; 0x04
    133e:	9d 81       	ldd	r25, Y+5	; 0x05
    1340:	fc 01       	movw	r30, r24
    1342:	e2 0f       	add	r30, r18
    1344:	f3 1f       	adc	r31, r19
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	80 83       	st	Z, r24

		start++;
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	8f 5f       	subi	r24, 0xFF	; 255
    134e:	8b 83       	std	Y+3, r24	; 0x03
		end--;
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	81 50       	subi	r24, 0x01	; 1
    1354:	8a 83       	std	Y+2, r24	; 0x02


	u8 start = 0;
	u8 end = copy_length - 1;

	while(start < end){
    1356:	9b 81       	ldd	r25, Y+3	; 0x03
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	98 17       	cp	r25, r24
    135c:	80 f2       	brcs	.-96     	; 0x12fe <array_Swap+0x1e>
	}




}
    135e:	26 96       	adiw	r28, 0x06	; 6
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <power_10>:

s32 power_10(u8 power){
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	00 d0       	rcall	.+0      	; 0x1376 <power_10+0x6>
    1376:	00 d0       	rcall	.+0      	; 0x1378 <power_10+0x8>
    1378:	0f 92       	push	r0
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	8d 83       	std	Y+5, r24	; 0x05
	 *
	 * do you not use this function outside this driver
	 *
	 */

	s32 result = 1;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	a0 e0       	ldi	r26, 0x00	; 0
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	89 83       	std	Y+1, r24	; 0x01
    138a:	9a 83       	std	Y+2, r25	; 0x02
    138c:	ab 83       	std	Y+3, r26	; 0x03
    138e:	bc 83       	std	Y+4, r27	; 0x04
    1390:	15 c0       	rjmp	.+42     	; 0x13bc <power_10+0x4c>

	while(power > 0){

		result *= 10;
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	9a 81       	ldd	r25, Y+2	; 0x02
    1396:	ab 81       	ldd	r26, Y+3	; 0x03
    1398:	bc 81       	ldd	r27, Y+4	; 0x04
    139a:	2a e0       	ldi	r18, 0x0A	; 10
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	bc 01       	movw	r22, r24
    13a4:	cd 01       	movw	r24, r26
    13a6:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__mulsi3>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	ab 83       	std	Y+3, r26	; 0x03
    13b4:	bc 83       	std	Y+4, r27	; 0x04
		power--;
    13b6:	8d 81       	ldd	r24, Y+5	; 0x05
    13b8:	81 50       	subi	r24, 0x01	; 1
    13ba:	8d 83       	std	Y+5, r24	; 0x05
	 *
	 */

	s32 result = 1;

	while(power > 0){
    13bc:	8d 81       	ldd	r24, Y+5	; 0x05
    13be:	88 23       	and	r24, r24
    13c0:	41 f7       	brne	.-48     	; 0x1392 <power_10+0x22>

		result *= 10;
		power--;
	}

	return result;
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	9a 81       	ldd	r25, Y+2	; 0x02
    13c6:	ab 81       	ldd	r26, Y+3	; 0x03
    13c8:	bc 81       	ldd	r27, Y+4	; 0x04
}
    13ca:	bc 01       	movw	r22, r24
    13cc:	cd 01       	movw	r24, r26
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <LCD_write_data_8bit>:

/* 8bit mode functions */


static void LCD_write_data_8bit(u8 copy_data_8bit){
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	e1 97       	sbiw	r28, 0x31	; 49
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
    13f2:	89 ab       	std	Y+49, r24	; 0x31
	 *  function will only be used inside this source file
	 *  do you not use it in your code!
	 *
	 */

	DIO_void_set_pin(lcd_control_port, lcd_RS); // set RS pin high select data register
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	62 e0       	ldi	r22, 0x02	; 2
    13f8:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_control_port, lcd_RW); // clear RW pin  0 for writing operation
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	61 e0       	ldi	r22, 0x01	; 1
    1400:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_void_clear_pin>
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a8 e4       	ldi	r26, 0x48	; 72
    140a:	b2 e4       	ldi	r27, 0x42	; 66
    140c:	8d a7       	std	Y+45, r24	; 0x2d
    140e:	9e a7       	std	Y+46, r25	; 0x2e
    1410:	af a7       	std	Y+47, r26	; 0x2f
    1412:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1414:	6d a5       	ldd	r22, Y+45	; 0x2d
    1416:	7e a5       	ldd	r23, Y+46	; 0x2e
    1418:	8f a5       	ldd	r24, Y+47	; 0x2f
    141a:	98 a9       	ldd	r25, Y+48	; 0x30
    141c:	2b ea       	ldi	r18, 0xAB	; 171
    141e:	3a ea       	ldi	r19, 0xAA	; 170
    1420:	4a e2       	ldi	r20, 0x2A	; 42
    1422:	50 e4       	ldi	r21, 0x40	; 64
    1424:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	89 a7       	std	Y+41, r24	; 0x29
    142e:	9a a7       	std	Y+42, r25	; 0x2a
    1430:	ab a7       	std	Y+43, r26	; 0x2b
    1432:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1434:	69 a5       	ldd	r22, Y+41	; 0x29
    1436:	7a a5       	ldd	r23, Y+42	; 0x2a
    1438:	8b a5       	ldd	r24, Y+43	; 0x2b
    143a:	9c a5       	ldd	r25, Y+44	; 0x2c
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 e8       	ldi	r20, 0x80	; 128
    1442:	5f e3       	ldi	r21, 0x3F	; 63
    1444:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1448:	88 23       	and	r24, r24
    144a:	1c f4       	brge	.+6      	; 0x1452 <LCD_write_data_8bit+0x74>
		__ticks = 1;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	88 a7       	std	Y+40, r24	; 0x28
    1450:	91 c0       	rjmp	.+290    	; 0x1574 <LCD_write_data_8bit+0x196>
	else if (__tmp > 255)
    1452:	69 a5       	ldd	r22, Y+41	; 0x29
    1454:	7a a5       	ldd	r23, Y+42	; 0x2a
    1456:	8b a5       	ldd	r24, Y+43	; 0x2b
    1458:	9c a5       	ldd	r25, Y+44	; 0x2c
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	4f e7       	ldi	r20, 0x7F	; 127
    1460:	53 e4       	ldi	r21, 0x43	; 67
    1462:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1466:	18 16       	cp	r1, r24
    1468:	0c f0       	brlt	.+2      	; 0x146c <LCD_write_data_8bit+0x8e>
    146a:	7b c0       	rjmp	.+246    	; 0x1562 <LCD_write_data_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    146c:	6d a5       	ldd	r22, Y+45	; 0x2d
    146e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1470:	8f a5       	ldd	r24, Y+47	; 0x2f
    1472:	98 a9       	ldd	r25, Y+48	; 0x30
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	4a e7       	ldi	r20, 0x7A	; 122
    147a:	54 e4       	ldi	r21, 0x44	; 68
    147c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	8c a3       	std	Y+36, r24	; 0x24
    1486:	9d a3       	std	Y+37, r25	; 0x25
    1488:	ae a3       	std	Y+38, r26	; 0x26
    148a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    148c:	6c a1       	ldd	r22, Y+36	; 0x24
    148e:	7d a1       	ldd	r23, Y+37	; 0x25
    1490:	8e a1       	ldd	r24, Y+38	; 0x26
    1492:	9f a1       	ldd	r25, Y+39	; 0x27
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	4a ef       	ldi	r20, 0xFA	; 250
    149a:	54 e4       	ldi	r21, 0x44	; 68
    149c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	88 a3       	std	Y+32, r24	; 0x20
    14a6:	99 a3       	std	Y+33, r25	; 0x21
    14a8:	aa a3       	std	Y+34, r26	; 0x22
    14aa:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    14ac:	68 a1       	ldd	r22, Y+32	; 0x20
    14ae:	79 a1       	ldd	r23, Y+33	; 0x21
    14b0:	8a a1       	ldd	r24, Y+34	; 0x22
    14b2:	9b a1       	ldd	r25, Y+35	; 0x23
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e8       	ldi	r20, 0x80	; 128
    14ba:	5f e3       	ldi	r21, 0x3F	; 63
    14bc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14c0:	88 23       	and	r24, r24
    14c2:	2c f4       	brge	.+10     	; 0x14ce <LCD_write_data_8bit+0xf0>
		__ticks = 1;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	9f 8f       	std	Y+31, r25	; 0x1f
    14ca:	8e 8f       	std	Y+30, r24	; 0x1e
    14cc:	3f c0       	rjmp	.+126    	; 0x154c <LCD_write_data_8bit+0x16e>
	else if (__tmp > 65535)
    14ce:	68 a1       	ldd	r22, Y+32	; 0x20
    14d0:	79 a1       	ldd	r23, Y+33	; 0x21
    14d2:	8a a1       	ldd	r24, Y+34	; 0x22
    14d4:	9b a1       	ldd	r25, Y+35	; 0x23
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	3f ef       	ldi	r19, 0xFF	; 255
    14da:	4f e7       	ldi	r20, 0x7F	; 127
    14dc:	57 e4       	ldi	r21, 0x47	; 71
    14de:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14e2:	18 16       	cp	r1, r24
    14e4:	4c f5       	brge	.+82     	; 0x1538 <LCD_write_data_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e6:	6c a1       	ldd	r22, Y+36	; 0x24
    14e8:	7d a1       	ldd	r23, Y+37	; 0x25
    14ea:	8e a1       	ldd	r24, Y+38	; 0x26
    14ec:	9f a1       	ldd	r25, Y+39	; 0x27
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e2       	ldi	r20, 0x20	; 32
    14f4:	51 e4       	ldi	r21, 0x41	; 65
    14f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	9f 8f       	std	Y+31, r25	; 0x1f
    150c:	8e 8f       	std	Y+30, r24	; 0x1e
    150e:	0f c0       	rjmp	.+30     	; 0x152e <LCD_write_data_8bit+0x150>
    1510:	88 ec       	ldi	r24, 0xC8	; 200
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	9d 8f       	std	Y+29, r25	; 0x1d
    1516:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1518:	8c 8d       	ldd	r24, Y+28	; 0x1c
    151a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	f1 f7       	brne	.-4      	; 0x151c <LCD_write_data_8bit+0x13e>
    1520:	9d 8f       	std	Y+29, r25	; 0x1d
    1522:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1524:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1526:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	9f 8f       	std	Y+31, r25	; 0x1f
    152c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1530:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	69 f7       	brne	.-38     	; 0x1510 <LCD_write_data_8bit+0x132>
    1536:	24 c0       	rjmp	.+72     	; 0x1580 <LCD_write_data_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1538:	68 a1       	ldd	r22, Y+32	; 0x20
    153a:	79 a1       	ldd	r23, Y+33	; 0x21
    153c:	8a a1       	ldd	r24, Y+34	; 0x22
    153e:	9b a1       	ldd	r25, Y+35	; 0x23
    1540:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	9f 8f       	std	Y+31, r25	; 0x1f
    154a:	8e 8f       	std	Y+30, r24	; 0x1e
    154c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    154e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1550:	9b 8f       	std	Y+27, r25	; 0x1b
    1552:	8a 8f       	std	Y+26, r24	; 0x1a
    1554:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1556:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <LCD_write_data_8bit+0x17a>
    155c:	9b 8f       	std	Y+27, r25	; 0x1b
    155e:	8a 8f       	std	Y+26, r24	; 0x1a
    1560:	0f c0       	rjmp	.+30     	; 0x1580 <LCD_write_data_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1562:	69 a5       	ldd	r22, Y+41	; 0x29
    1564:	7a a5       	ldd	r23, Y+42	; 0x2a
    1566:	8b a5       	ldd	r24, Y+43	; 0x2b
    1568:	9c a5       	ldd	r25, Y+44	; 0x2c
    156a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	88 a7       	std	Y+40, r24	; 0x28
    1574:	88 a5       	ldd	r24, Y+40	; 0x28
    1576:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1578:	89 8d       	ldd	r24, Y+25	; 0x19
    157a:	8a 95       	dec	r24
    157c:	f1 f7       	brne	.-4      	; 0x157a <LCD_write_data_8bit+0x19c>
    157e:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(50);
	//enable pin high
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	60 e0       	ldi	r22, 0x00	; 0
    1584:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_void_set_pin>
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	a8 e4       	ldi	r26, 0x48	; 72
    158e:	b2 e4       	ldi	r27, 0x42	; 66
    1590:	8d 8b       	std	Y+21, r24	; 0x15
    1592:	9e 8b       	std	Y+22, r25	; 0x16
    1594:	af 8b       	std	Y+23, r26	; 0x17
    1596:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1598:	6d 89       	ldd	r22, Y+21	; 0x15
    159a:	7e 89       	ldd	r23, Y+22	; 0x16
    159c:	8f 89       	ldd	r24, Y+23	; 0x17
    159e:	98 8d       	ldd	r25, Y+24	; 0x18
    15a0:	2b ea       	ldi	r18, 0xAB	; 171
    15a2:	3a ea       	ldi	r19, 0xAA	; 170
    15a4:	4a e2       	ldi	r20, 0x2A	; 42
    15a6:	50 e4       	ldi	r21, 0x40	; 64
    15a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	89 8b       	std	Y+17, r24	; 0x11
    15b2:	9a 8b       	std	Y+18, r25	; 0x12
    15b4:	ab 8b       	std	Y+19, r26	; 0x13
    15b6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    15b8:	69 89       	ldd	r22, Y+17	; 0x11
    15ba:	7a 89       	ldd	r23, Y+18	; 0x12
    15bc:	8b 89       	ldd	r24, Y+19	; 0x13
    15be:	9c 89       	ldd	r25, Y+20	; 0x14
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e8       	ldi	r20, 0x80	; 128
    15c6:	5f e3       	ldi	r21, 0x3F	; 63
    15c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15cc:	88 23       	and	r24, r24
    15ce:	1c f4       	brge	.+6      	; 0x15d6 <LCD_write_data_8bit+0x1f8>
		__ticks = 1;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	88 8b       	std	Y+16, r24	; 0x10
    15d4:	91 c0       	rjmp	.+290    	; 0x16f8 <LCD_write_data_8bit+0x31a>
	else if (__tmp > 255)
    15d6:	69 89       	ldd	r22, Y+17	; 0x11
    15d8:	7a 89       	ldd	r23, Y+18	; 0x12
    15da:	8b 89       	ldd	r24, Y+19	; 0x13
    15dc:	9c 89       	ldd	r25, Y+20	; 0x14
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	4f e7       	ldi	r20, 0x7F	; 127
    15e4:	53 e4       	ldi	r21, 0x43	; 67
    15e6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15ea:	18 16       	cp	r1, r24
    15ec:	0c f0       	brlt	.+2      	; 0x15f0 <LCD_write_data_8bit+0x212>
    15ee:	7b c0       	rjmp	.+246    	; 0x16e6 <LCD_write_data_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    15f0:	6d 89       	ldd	r22, Y+21	; 0x15
    15f2:	7e 89       	ldd	r23, Y+22	; 0x16
    15f4:	8f 89       	ldd	r24, Y+23	; 0x17
    15f6:	98 8d       	ldd	r25, Y+24	; 0x18
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	4a e7       	ldi	r20, 0x7A	; 122
    15fe:	54 e4       	ldi	r21, 0x44	; 68
    1600:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	8c 87       	std	Y+12, r24	; 0x0c
    160a:	9d 87       	std	Y+13, r25	; 0x0d
    160c:	ae 87       	std	Y+14, r26	; 0x0e
    160e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1610:	6c 85       	ldd	r22, Y+12	; 0x0c
    1612:	7d 85       	ldd	r23, Y+13	; 0x0d
    1614:	8e 85       	ldd	r24, Y+14	; 0x0e
    1616:	9f 85       	ldd	r25, Y+15	; 0x0f
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	4a ef       	ldi	r20, 0xFA	; 250
    161e:	54 e4       	ldi	r21, 0x44	; 68
    1620:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	88 87       	std	Y+8, r24	; 0x08
    162a:	99 87       	std	Y+9, r25	; 0x09
    162c:	aa 87       	std	Y+10, r26	; 0x0a
    162e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1630:	68 85       	ldd	r22, Y+8	; 0x08
    1632:	79 85       	ldd	r23, Y+9	; 0x09
    1634:	8a 85       	ldd	r24, Y+10	; 0x0a
    1636:	9b 85       	ldd	r25, Y+11	; 0x0b
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e8       	ldi	r20, 0x80	; 128
    163e:	5f e3       	ldi	r21, 0x3F	; 63
    1640:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1644:	88 23       	and	r24, r24
    1646:	2c f4       	brge	.+10     	; 0x1652 <LCD_write_data_8bit+0x274>
		__ticks = 1;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	9f 83       	std	Y+7, r25	; 0x07
    164e:	8e 83       	std	Y+6, r24	; 0x06
    1650:	3f c0       	rjmp	.+126    	; 0x16d0 <LCD_write_data_8bit+0x2f2>
	else if (__tmp > 65535)
    1652:	68 85       	ldd	r22, Y+8	; 0x08
    1654:	79 85       	ldd	r23, Y+9	; 0x09
    1656:	8a 85       	ldd	r24, Y+10	; 0x0a
    1658:	9b 85       	ldd	r25, Y+11	; 0x0b
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	3f ef       	ldi	r19, 0xFF	; 255
    165e:	4f e7       	ldi	r20, 0x7F	; 127
    1660:	57 e4       	ldi	r21, 0x47	; 71
    1662:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1666:	18 16       	cp	r1, r24
    1668:	4c f5       	brge	.+82     	; 0x16bc <LCD_write_data_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166a:	6c 85       	ldd	r22, Y+12	; 0x0c
    166c:	7d 85       	ldd	r23, Y+13	; 0x0d
    166e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1670:	9f 85       	ldd	r25, Y+15	; 0x0f
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e2       	ldi	r20, 0x20	; 32
    1678:	51 e4       	ldi	r21, 0x41	; 65
    167a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	bc 01       	movw	r22, r24
    1684:	cd 01       	movw	r24, r26
    1686:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	9f 83       	std	Y+7, r25	; 0x07
    1690:	8e 83       	std	Y+6, r24	; 0x06
    1692:	0f c0       	rjmp	.+30     	; 0x16b2 <LCD_write_data_8bit+0x2d4>
    1694:	88 ec       	ldi	r24, 0xC8	; 200
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	9d 83       	std	Y+5, r25	; 0x05
    169a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    169c:	8c 81       	ldd	r24, Y+4	; 0x04
    169e:	9d 81       	ldd	r25, Y+5	; 0x05
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <LCD_write_data_8bit+0x2c2>
    16a4:	9d 83       	std	Y+5, r25	; 0x05
    16a6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a8:	8e 81       	ldd	r24, Y+6	; 0x06
    16aa:	9f 81       	ldd	r25, Y+7	; 0x07
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	9f 83       	std	Y+7, r25	; 0x07
    16b0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b2:	8e 81       	ldd	r24, Y+6	; 0x06
    16b4:	9f 81       	ldd	r25, Y+7	; 0x07
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	69 f7       	brne	.-38     	; 0x1694 <LCD_write_data_8bit+0x2b6>
    16ba:	24 c0       	rjmp	.+72     	; 0x1704 <LCD_write_data_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16bc:	68 85       	ldd	r22, Y+8	; 0x08
    16be:	79 85       	ldd	r23, Y+9	; 0x09
    16c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	9f 83       	std	Y+7, r25	; 0x07
    16ce:	8e 83       	std	Y+6, r24	; 0x06
    16d0:	8e 81       	ldd	r24, Y+6	; 0x06
    16d2:	9f 81       	ldd	r25, Y+7	; 0x07
    16d4:	9b 83       	std	Y+3, r25	; 0x03
    16d6:	8a 83       	std	Y+2, r24	; 0x02
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	9b 81       	ldd	r25, Y+3	; 0x03
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	f1 f7       	brne	.-4      	; 0x16dc <LCD_write_data_8bit+0x2fe>
    16e0:	9b 83       	std	Y+3, r25	; 0x03
    16e2:	8a 83       	std	Y+2, r24	; 0x02
    16e4:	0f c0       	rjmp	.+30     	; 0x1704 <LCD_write_data_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16e6:	69 89       	ldd	r22, Y+17	; 0x11
    16e8:	7a 89       	ldd	r23, Y+18	; 0x12
    16ea:	8b 89       	ldd	r24, Y+19	; 0x13
    16ec:	9c 89       	ldd	r25, Y+20	; 0x14
    16ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	88 8b       	std	Y+16, r24	; 0x10
    16f8:	88 89       	ldd	r24, Y+16	; 0x10
    16fa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	8a 95       	dec	r24
    1700:	f1 f7       	brne	.-4      	; 0x16fe <LCD_write_data_8bit+0x320>
    1702:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	//send data to the entire port


	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_void_clear_pin>


}
    170c:	e1 96       	adiw	r28, 0x31	; 49
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <LCD_write_command_8bit>:

static void LCD_write_command_8bit(u8 copy_command_8bit){
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	e1 97       	sbiw	r28, 0x31	; 49
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	89 ab       	std	Y+49, r24	; 0x31
		 *
		 *  function will only be used inside this source file
		 *  do you not use it in your code!
		 *
		 */
	DIO_void_clear_pin(lcd_control_port, lcd_RS); // clear the RS pin to select instruction register
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	62 e0       	ldi	r22, 0x02	; 2
    1738:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_control_port, lcd_RW); // clear RW pin  0 for writing operation
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	61 e0       	ldi	r22, 0x01	; 1
    1740:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_void_clear_pin>
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	a0 e8       	ldi	r26, 0x80	; 128
    174a:	bf e3       	ldi	r27, 0x3F	; 63
    174c:	8d a7       	std	Y+45, r24	; 0x2d
    174e:	9e a7       	std	Y+46, r25	; 0x2e
    1750:	af a7       	std	Y+47, r26	; 0x2f
    1752:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1754:	6d a5       	ldd	r22, Y+45	; 0x2d
    1756:	7e a5       	ldd	r23, Y+46	; 0x2e
    1758:	8f a5       	ldd	r24, Y+47	; 0x2f
    175a:	98 a9       	ldd	r25, Y+48	; 0x30
    175c:	2b ea       	ldi	r18, 0xAB	; 171
    175e:	3a ea       	ldi	r19, 0xAA	; 170
    1760:	4a e2       	ldi	r20, 0x2A	; 42
    1762:	50 e4       	ldi	r21, 0x40	; 64
    1764:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	89 a7       	std	Y+41, r24	; 0x29
    176e:	9a a7       	std	Y+42, r25	; 0x2a
    1770:	ab a7       	std	Y+43, r26	; 0x2b
    1772:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1774:	69 a5       	ldd	r22, Y+41	; 0x29
    1776:	7a a5       	ldd	r23, Y+42	; 0x2a
    1778:	8b a5       	ldd	r24, Y+43	; 0x2b
    177a:	9c a5       	ldd	r25, Y+44	; 0x2c
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	40 e8       	ldi	r20, 0x80	; 128
    1782:	5f e3       	ldi	r21, 0x3F	; 63
    1784:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1788:	88 23       	and	r24, r24
    178a:	1c f4       	brge	.+6      	; 0x1792 <LCD_write_command_8bit+0x74>
		__ticks = 1;
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	88 a7       	std	Y+40, r24	; 0x28
    1790:	91 c0       	rjmp	.+290    	; 0x18b4 <LCD_write_command_8bit+0x196>
	else if (__tmp > 255)
    1792:	69 a5       	ldd	r22, Y+41	; 0x29
    1794:	7a a5       	ldd	r23, Y+42	; 0x2a
    1796:	8b a5       	ldd	r24, Y+43	; 0x2b
    1798:	9c a5       	ldd	r25, Y+44	; 0x2c
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	4f e7       	ldi	r20, 0x7F	; 127
    17a0:	53 e4       	ldi	r21, 0x43	; 67
    17a2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17a6:	18 16       	cp	r1, r24
    17a8:	0c f0       	brlt	.+2      	; 0x17ac <LCD_write_command_8bit+0x8e>
    17aa:	7b c0       	rjmp	.+246    	; 0x18a2 <LCD_write_command_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    17ac:	6d a5       	ldd	r22, Y+45	; 0x2d
    17ae:	7e a5       	ldd	r23, Y+46	; 0x2e
    17b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17b2:	98 a9       	ldd	r25, Y+48	; 0x30
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	4a e7       	ldi	r20, 0x7A	; 122
    17ba:	54 e4       	ldi	r21, 0x44	; 68
    17bc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	8c a3       	std	Y+36, r24	; 0x24
    17c6:	9d a3       	std	Y+37, r25	; 0x25
    17c8:	ae a3       	std	Y+38, r26	; 0x26
    17ca:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17cc:	6c a1       	ldd	r22, Y+36	; 0x24
    17ce:	7d a1       	ldd	r23, Y+37	; 0x25
    17d0:	8e a1       	ldd	r24, Y+38	; 0x26
    17d2:	9f a1       	ldd	r25, Y+39	; 0x27
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	4a ef       	ldi	r20, 0xFA	; 250
    17da:	54 e4       	ldi	r21, 0x44	; 68
    17dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	88 a3       	std	Y+32, r24	; 0x20
    17e6:	99 a3       	std	Y+33, r25	; 0x21
    17e8:	aa a3       	std	Y+34, r26	; 0x22
    17ea:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    17ec:	68 a1       	ldd	r22, Y+32	; 0x20
    17ee:	79 a1       	ldd	r23, Y+33	; 0x21
    17f0:	8a a1       	ldd	r24, Y+34	; 0x22
    17f2:	9b a1       	ldd	r25, Y+35	; 0x23
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e8       	ldi	r20, 0x80	; 128
    17fa:	5f e3       	ldi	r21, 0x3F	; 63
    17fc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1800:	88 23       	and	r24, r24
    1802:	2c f4       	brge	.+10     	; 0x180e <LCD_write_command_8bit+0xf0>
		__ticks = 1;
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	9f 8f       	std	Y+31, r25	; 0x1f
    180a:	8e 8f       	std	Y+30, r24	; 0x1e
    180c:	3f c0       	rjmp	.+126    	; 0x188c <LCD_write_command_8bit+0x16e>
	else if (__tmp > 65535)
    180e:	68 a1       	ldd	r22, Y+32	; 0x20
    1810:	79 a1       	ldd	r23, Y+33	; 0x21
    1812:	8a a1       	ldd	r24, Y+34	; 0x22
    1814:	9b a1       	ldd	r25, Y+35	; 0x23
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	3f ef       	ldi	r19, 0xFF	; 255
    181a:	4f e7       	ldi	r20, 0x7F	; 127
    181c:	57 e4       	ldi	r21, 0x47	; 71
    181e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1822:	18 16       	cp	r1, r24
    1824:	4c f5       	brge	.+82     	; 0x1878 <LCD_write_command_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1826:	6c a1       	ldd	r22, Y+36	; 0x24
    1828:	7d a1       	ldd	r23, Y+37	; 0x25
    182a:	8e a1       	ldd	r24, Y+38	; 0x26
    182c:	9f a1       	ldd	r25, Y+39	; 0x27
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e2       	ldi	r20, 0x20	; 32
    1834:	51 e4       	ldi	r21, 0x41	; 65
    1836:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	bc 01       	movw	r22, r24
    1840:	cd 01       	movw	r24, r26
    1842:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	9f 8f       	std	Y+31, r25	; 0x1f
    184c:	8e 8f       	std	Y+30, r24	; 0x1e
    184e:	0f c0       	rjmp	.+30     	; 0x186e <LCD_write_command_8bit+0x150>
    1850:	88 ec       	ldi	r24, 0xC8	; 200
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	9d 8f       	std	Y+29, r25	; 0x1d
    1856:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1858:	8c 8d       	ldd	r24, Y+28	; 0x1c
    185a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	f1 f7       	brne	.-4      	; 0x185c <LCD_write_command_8bit+0x13e>
    1860:	9d 8f       	std	Y+29, r25	; 0x1d
    1862:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1864:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1866:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	9f 8f       	std	Y+31, r25	; 0x1f
    186c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1870:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	69 f7       	brne	.-38     	; 0x1850 <LCD_write_command_8bit+0x132>
    1876:	24 c0       	rjmp	.+72     	; 0x18c0 <LCD_write_command_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1878:	68 a1       	ldd	r22, Y+32	; 0x20
    187a:	79 a1       	ldd	r23, Y+33	; 0x21
    187c:	8a a1       	ldd	r24, Y+34	; 0x22
    187e:	9b a1       	ldd	r25, Y+35	; 0x23
    1880:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	9f 8f       	std	Y+31, r25	; 0x1f
    188a:	8e 8f       	std	Y+30, r24	; 0x1e
    188c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    188e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1890:	9b 8f       	std	Y+27, r25	; 0x1b
    1892:	8a 8f       	std	Y+26, r24	; 0x1a
    1894:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1896:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <LCD_write_command_8bit+0x17a>
    189c:	9b 8f       	std	Y+27, r25	; 0x1b
    189e:	8a 8f       	std	Y+26, r24	; 0x1a
    18a0:	0f c0       	rjmp	.+30     	; 0x18c0 <LCD_write_command_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18a2:	69 a5       	ldd	r22, Y+41	; 0x29
    18a4:	7a a5       	ldd	r23, Y+42	; 0x2a
    18a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    18a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    18aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	88 a7       	std	Y+40, r24	; 0x28
    18b4:	88 a5       	ldd	r24, Y+40	; 0x28
    18b6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18b8:	89 8d       	ldd	r24, Y+25	; 0x19
    18ba:	8a 95       	dec	r24
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <LCD_write_command_8bit+0x19c>
    18be:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(1);
	//enable pin high
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	60 e0       	ldi	r22, 0x00	; 0
    18c4:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_void_set_pin>
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	a0 e8       	ldi	r26, 0x80	; 128
    18ce:	bf e3       	ldi	r27, 0x3F	; 63
    18d0:	8d 8b       	std	Y+21, r24	; 0x15
    18d2:	9e 8b       	std	Y+22, r25	; 0x16
    18d4:	af 8b       	std	Y+23, r26	; 0x17
    18d6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18d8:	6d 89       	ldd	r22, Y+21	; 0x15
    18da:	7e 89       	ldd	r23, Y+22	; 0x16
    18dc:	8f 89       	ldd	r24, Y+23	; 0x17
    18de:	98 8d       	ldd	r25, Y+24	; 0x18
    18e0:	2b ea       	ldi	r18, 0xAB	; 171
    18e2:	3a ea       	ldi	r19, 0xAA	; 170
    18e4:	4a e2       	ldi	r20, 0x2A	; 42
    18e6:	50 e4       	ldi	r21, 0x40	; 64
    18e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ec:	dc 01       	movw	r26, r24
    18ee:	cb 01       	movw	r24, r22
    18f0:	89 8b       	std	Y+17, r24	; 0x11
    18f2:	9a 8b       	std	Y+18, r25	; 0x12
    18f4:	ab 8b       	std	Y+19, r26	; 0x13
    18f6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    18f8:	69 89       	ldd	r22, Y+17	; 0x11
    18fa:	7a 89       	ldd	r23, Y+18	; 0x12
    18fc:	8b 89       	ldd	r24, Y+19	; 0x13
    18fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e8       	ldi	r20, 0x80	; 128
    1906:	5f e3       	ldi	r21, 0x3F	; 63
    1908:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    190c:	88 23       	and	r24, r24
    190e:	1c f4       	brge	.+6      	; 0x1916 <LCD_write_command_8bit+0x1f8>
		__ticks = 1;
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	88 8b       	std	Y+16, r24	; 0x10
    1914:	91 c0       	rjmp	.+290    	; 0x1a38 <LCD_write_command_8bit+0x31a>
	else if (__tmp > 255)
    1916:	69 89       	ldd	r22, Y+17	; 0x11
    1918:	7a 89       	ldd	r23, Y+18	; 0x12
    191a:	8b 89       	ldd	r24, Y+19	; 0x13
    191c:	9c 89       	ldd	r25, Y+20	; 0x14
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	4f e7       	ldi	r20, 0x7F	; 127
    1924:	53 e4       	ldi	r21, 0x43	; 67
    1926:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    192a:	18 16       	cp	r1, r24
    192c:	0c f0       	brlt	.+2      	; 0x1930 <LCD_write_command_8bit+0x212>
    192e:	7b c0       	rjmp	.+246    	; 0x1a26 <LCD_write_command_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    1930:	6d 89       	ldd	r22, Y+21	; 0x15
    1932:	7e 89       	ldd	r23, Y+22	; 0x16
    1934:	8f 89       	ldd	r24, Y+23	; 0x17
    1936:	98 8d       	ldd	r25, Y+24	; 0x18
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	4a e7       	ldi	r20, 0x7A	; 122
    193e:	54 e4       	ldi	r21, 0x44	; 68
    1940:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	8c 87       	std	Y+12, r24	; 0x0c
    194a:	9d 87       	std	Y+13, r25	; 0x0d
    194c:	ae 87       	std	Y+14, r26	; 0x0e
    194e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1950:	6c 85       	ldd	r22, Y+12	; 0x0c
    1952:	7d 85       	ldd	r23, Y+13	; 0x0d
    1954:	8e 85       	ldd	r24, Y+14	; 0x0e
    1956:	9f 85       	ldd	r25, Y+15	; 0x0f
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	4a ef       	ldi	r20, 0xFA	; 250
    195e:	54 e4       	ldi	r21, 0x44	; 68
    1960:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	88 87       	std	Y+8, r24	; 0x08
    196a:	99 87       	std	Y+9, r25	; 0x09
    196c:	aa 87       	std	Y+10, r26	; 0x0a
    196e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1970:	68 85       	ldd	r22, Y+8	; 0x08
    1972:	79 85       	ldd	r23, Y+9	; 0x09
    1974:	8a 85       	ldd	r24, Y+10	; 0x0a
    1976:	9b 85       	ldd	r25, Y+11	; 0x0b
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e8       	ldi	r20, 0x80	; 128
    197e:	5f e3       	ldi	r21, 0x3F	; 63
    1980:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1984:	88 23       	and	r24, r24
    1986:	2c f4       	brge	.+10     	; 0x1992 <LCD_write_command_8bit+0x274>
		__ticks = 1;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	9f 83       	std	Y+7, r25	; 0x07
    198e:	8e 83       	std	Y+6, r24	; 0x06
    1990:	3f c0       	rjmp	.+126    	; 0x1a10 <LCD_write_command_8bit+0x2f2>
	else if (__tmp > 65535)
    1992:	68 85       	ldd	r22, Y+8	; 0x08
    1994:	79 85       	ldd	r23, Y+9	; 0x09
    1996:	8a 85       	ldd	r24, Y+10	; 0x0a
    1998:	9b 85       	ldd	r25, Y+11	; 0x0b
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	3f ef       	ldi	r19, 0xFF	; 255
    199e:	4f e7       	ldi	r20, 0x7F	; 127
    19a0:	57 e4       	ldi	r21, 0x47	; 71
    19a2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19a6:	18 16       	cp	r1, r24
    19a8:	4c f5       	brge	.+82     	; 0x19fc <LCD_write_command_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    19ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    19ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    19b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e2       	ldi	r20, 0x20	; 32
    19b8:	51 e4       	ldi	r21, 0x41	; 65
    19ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	bc 01       	movw	r22, r24
    19c4:	cd 01       	movw	r24, r26
    19c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	9f 83       	std	Y+7, r25	; 0x07
    19d0:	8e 83       	std	Y+6, r24	; 0x06
    19d2:	0f c0       	rjmp	.+30     	; 0x19f2 <LCD_write_command_8bit+0x2d4>
    19d4:	88 ec       	ldi	r24, 0xC8	; 200
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	9d 83       	std	Y+5, r25	; 0x05
    19da:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19dc:	8c 81       	ldd	r24, Y+4	; 0x04
    19de:	9d 81       	ldd	r25, Y+5	; 0x05
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <LCD_write_command_8bit+0x2c2>
    19e4:	9d 83       	std	Y+5, r25	; 0x05
    19e6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e8:	8e 81       	ldd	r24, Y+6	; 0x06
    19ea:	9f 81       	ldd	r25, Y+7	; 0x07
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	9f 83       	std	Y+7, r25	; 0x07
    19f0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f2:	8e 81       	ldd	r24, Y+6	; 0x06
    19f4:	9f 81       	ldd	r25, Y+7	; 0x07
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	69 f7       	brne	.-38     	; 0x19d4 <LCD_write_command_8bit+0x2b6>
    19fa:	24 c0       	rjmp	.+72     	; 0x1a44 <LCD_write_command_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fc:	68 85       	ldd	r22, Y+8	; 0x08
    19fe:	79 85       	ldd	r23, Y+9	; 0x09
    1a00:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a02:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9f 83       	std	Y+7, r25	; 0x07
    1a0e:	8e 83       	std	Y+6, r24	; 0x06
    1a10:	8e 81       	ldd	r24, Y+6	; 0x06
    1a12:	9f 81       	ldd	r25, Y+7	; 0x07
    1a14:	9b 83       	std	Y+3, r25	; 0x03
    1a16:	8a 83       	std	Y+2, r24	; 0x02
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <LCD_write_command_8bit+0x2fe>
    1a20:	9b 83       	std	Y+3, r25	; 0x03
    1a22:	8a 83       	std	Y+2, r24	; 0x02
    1a24:	0f c0       	rjmp	.+30     	; 0x1a44 <LCD_write_command_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a26:	69 89       	ldd	r22, Y+17	; 0x11
    1a28:	7a 89       	ldd	r23, Y+18	; 0x12
    1a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	88 8b       	std	Y+16, r24	; 0x10
    1a38:	88 89       	ldd	r24, Y+16	; 0x10
    1a3a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	8a 95       	dec	r24
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <LCD_write_command_8bit+0x320>
    1a42:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	//send command to the entire port
	DIO_void_assign_port(lcd_data_port, copy_command_8bit);
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	69 a9       	ldd	r22, Y+49	; 0x31
    1a48:	0e 94 0d 08 	call	0x101a	; 0x101a <DIO_void_assign_port>
	//enable pin low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_void_clear_pin>

}
    1a54:	e1 96       	adiw	r28, 0x31	; 49
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	de bf       	out	0x3e, r29	; 62
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <LCD_write_data_4bit>:


/* 4bit mode functions */

static void LCD_write_data_4bit(u8 copy_data_4bit){
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	c3 56       	subi	r28, 0x63	; 99
    1a74:	d0 40       	sbci	r29, 0x00	; 0
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	fe 01       	movw	r30, r28
    1a82:	ed 59       	subi	r30, 0x9D	; 157
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	80 83       	st	Z, r24
		 *  function will only be used inside this source file
		 *  do you not use it in your code!
		 *
		 */

	DIO_void_set_pin(lcd_control_port, lcd_RS); // set RS pin high select data register
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	62 e0       	ldi	r22, 0x02	; 2
    1a8c:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_control_port, lcd_RW); // clear RW pin  0 for writing operation
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	61 e0       	ldi	r22, 0x01	; 1
    1a94:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_void_clear_pin>
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e3 5a       	subi	r30, 0xA3	; 163
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	a0 e8       	ldi	r26, 0x80	; 128
    1aa4:	bf e3       	ldi	r27, 0x3F	; 63
    1aa6:	80 83       	st	Z, r24
    1aa8:	91 83       	std	Z+1, r25	; 0x01
    1aaa:	a2 83       	std	Z+2, r26	; 0x02
    1aac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1aae:	8e 01       	movw	r16, r28
    1ab0:	07 5a       	subi	r16, 0xA7	; 167
    1ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e3 5a       	subi	r30, 0xA3	; 163
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	60 81       	ld	r22, Z
    1abc:	71 81       	ldd	r23, Z+1	; 0x01
    1abe:	82 81       	ldd	r24, Z+2	; 0x02
    1ac0:	93 81       	ldd	r25, Z+3	; 0x03
    1ac2:	2b ea       	ldi	r18, 0xAB	; 171
    1ac4:	3a ea       	ldi	r19, 0xAA	; 170
    1ac6:	4a e2       	ldi	r20, 0x2A	; 42
    1ac8:	50 e4       	ldi	r21, 0x40	; 64
    1aca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	f8 01       	movw	r30, r16
    1ad4:	80 83       	st	Z, r24
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	a2 83       	std	Z+2, r26	; 0x02
    1ada:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1adc:	fe 01       	movw	r30, r28
    1ade:	e7 5a       	subi	r30, 0xA7	; 167
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	60 81       	ld	r22, Z
    1ae4:	71 81       	ldd	r23, Z+1	; 0x01
    1ae6:	82 81       	ldd	r24, Z+2	; 0x02
    1ae8:	93 81       	ldd	r25, Z+3	; 0x03
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e8       	ldi	r20, 0x80	; 128
    1af0:	5f e3       	ldi	r21, 0x3F	; 63
    1af2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1af6:	88 23       	and	r24, r24
    1af8:	34 f4       	brge	.+12     	; 0x1b06 <LCD_write_data_4bit+0xa0>
		__ticks = 1;
    1afa:	fe 01       	movw	r30, r28
    1afc:	e8 5a       	subi	r30, 0xA8	; 168
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	80 83       	st	Z, r24
    1b04:	e0 c0       	rjmp	.+448    	; 0x1cc6 <LCD_write_data_4bit+0x260>
	else if (__tmp > 255)
    1b06:	fe 01       	movw	r30, r28
    1b08:	e7 5a       	subi	r30, 0xA7	; 167
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	60 81       	ld	r22, Z
    1b0e:	71 81       	ldd	r23, Z+1	; 0x01
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	93 81       	ldd	r25, Z+3	; 0x03
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	4f e7       	ldi	r20, 0x7F	; 127
    1b1a:	53 e4       	ldi	r21, 0x43	; 67
    1b1c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b20:	18 16       	cp	r1, r24
    1b22:	0c f0       	brlt	.+2      	; 0x1b26 <LCD_write_data_4bit+0xc0>
    1b24:	c0 c0       	rjmp	.+384    	; 0x1ca6 <LCD_write_data_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    1b26:	fe 01       	movw	r30, r28
    1b28:	e3 5a       	subi	r30, 0xA3	; 163
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	60 81       	ld	r22, Z
    1b2e:	71 81       	ldd	r23, Z+1	; 0x01
    1b30:	82 81       	ldd	r24, Z+2	; 0x02
    1b32:	93 81       	ldd	r25, Z+3	; 0x03
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	4a e7       	ldi	r20, 0x7A	; 122
    1b3a:	54 e4       	ldi	r21, 0x44	; 68
    1b3c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	fe 01       	movw	r30, r28
    1b46:	ec 5a       	subi	r30, 0xAC	; 172
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	80 83       	st	Z, r24
    1b4c:	91 83       	std	Z+1, r25	; 0x01
    1b4e:	a2 83       	std	Z+2, r26	; 0x02
    1b50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b52:	8e 01       	movw	r16, r28
    1b54:	00 5b       	subi	r16, 0xB0	; 176
    1b56:	1f 4f       	sbci	r17, 0xFF	; 255
    1b58:	fe 01       	movw	r30, r28
    1b5a:	ec 5a       	subi	r30, 0xAC	; 172
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	60 81       	ld	r22, Z
    1b60:	71 81       	ldd	r23, Z+1	; 0x01
    1b62:	82 81       	ldd	r24, Z+2	; 0x02
    1b64:	93 81       	ldd	r25, Z+3	; 0x03
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	4a ef       	ldi	r20, 0xFA	; 250
    1b6c:	54 e4       	ldi	r21, 0x44	; 68
    1b6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	f8 01       	movw	r30, r16
    1b78:	80 83       	st	Z, r24
    1b7a:	91 83       	std	Z+1, r25	; 0x01
    1b7c:	a2 83       	std	Z+2, r26	; 0x02
    1b7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b80:	fe 01       	movw	r30, r28
    1b82:	e0 5b       	subi	r30, 0xB0	; 176
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	60 81       	ld	r22, Z
    1b88:	71 81       	ldd	r23, Z+1	; 0x01
    1b8a:	82 81       	ldd	r24, Z+2	; 0x02
    1b8c:	93 81       	ldd	r25, Z+3	; 0x03
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	40 e8       	ldi	r20, 0x80	; 128
    1b94:	5f e3       	ldi	r21, 0x3F	; 63
    1b96:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b9a:	88 23       	and	r24, r24
    1b9c:	44 f4       	brge	.+16     	; 0x1bae <LCD_write_data_4bit+0x148>
		__ticks = 1;
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	e2 5b       	subi	r30, 0xB2	; 178
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	91 83       	std	Z+1, r25	; 0x01
    1baa:	80 83       	st	Z, r24
    1bac:	64 c0       	rjmp	.+200    	; 0x1c76 <LCD_write_data_4bit+0x210>
	else if (__tmp > 65535)
    1bae:	fe 01       	movw	r30, r28
    1bb0:	e0 5b       	subi	r30, 0xB0	; 176
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	60 81       	ld	r22, Z
    1bb6:	71 81       	ldd	r23, Z+1	; 0x01
    1bb8:	82 81       	ldd	r24, Z+2	; 0x02
    1bba:	93 81       	ldd	r25, Z+3	; 0x03
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	3f ef       	ldi	r19, 0xFF	; 255
    1bc0:	4f e7       	ldi	r20, 0x7F	; 127
    1bc2:	57 e4       	ldi	r21, 0x47	; 71
    1bc4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bc8:	18 16       	cp	r1, r24
    1bca:	0c f0       	brlt	.+2      	; 0x1bce <LCD_write_data_4bit+0x168>
    1bcc:	43 c0       	rjmp	.+134    	; 0x1c54 <LCD_write_data_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bce:	fe 01       	movw	r30, r28
    1bd0:	ec 5a       	subi	r30, 0xAC	; 172
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	60 81       	ld	r22, Z
    1bd6:	71 81       	ldd	r23, Z+1	; 0x01
    1bd8:	82 81       	ldd	r24, Z+2	; 0x02
    1bda:	93 81       	ldd	r25, Z+3	; 0x03
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	40 e2       	ldi	r20, 0x20	; 32
    1be2:	51 e4       	ldi	r21, 0x41	; 65
    1be4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	8e 01       	movw	r16, r28
    1bee:	02 5b       	subi	r16, 0xB2	; 178
    1bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf2:	bc 01       	movw	r22, r24
    1bf4:	cd 01       	movw	r24, r26
    1bf6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	f8 01       	movw	r30, r16
    1c00:	91 83       	std	Z+1, r25	; 0x01
    1c02:	80 83       	st	Z, r24
    1c04:	1f c0       	rjmp	.+62     	; 0x1c44 <LCD_write_data_4bit+0x1de>
    1c06:	fe 01       	movw	r30, r28
    1c08:	e4 5b       	subi	r30, 0xB4	; 180
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	88 ec       	ldi	r24, 0xC8	; 200
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	91 83       	std	Z+1, r25	; 0x01
    1c12:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c14:	fe 01       	movw	r30, r28
    1c16:	e4 5b       	subi	r30, 0xB4	; 180
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	80 81       	ld	r24, Z
    1c1c:	91 81       	ldd	r25, Z+1	; 0x01
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LCD_write_data_4bit+0x1b8>
    1c22:	fe 01       	movw	r30, r28
    1c24:	e4 5b       	subi	r30, 0xB4	; 180
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	91 83       	std	Z+1, r25	; 0x01
    1c2a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2c:	de 01       	movw	r26, r28
    1c2e:	a2 5b       	subi	r26, 0xB2	; 178
    1c30:	bf 4f       	sbci	r27, 0xFF	; 255
    1c32:	fe 01       	movw	r30, r28
    1c34:	e2 5b       	subi	r30, 0xB2	; 178
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	80 81       	ld	r24, Z
    1c3a:	91 81       	ldd	r25, Z+1	; 0x01
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	11 96       	adiw	r26, 0x01	; 1
    1c40:	9c 93       	st	X, r25
    1c42:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c44:	fe 01       	movw	r30, r28
    1c46:	e2 5b       	subi	r30, 0xB2	; 178
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	80 81       	ld	r24, Z
    1c4c:	91 81       	ldd	r25, Z+1	; 0x01
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	d1 f6       	brne	.-76     	; 0x1c06 <LCD_write_data_4bit+0x1a0>
    1c52:	4b c0       	rjmp	.+150    	; 0x1cea <LCD_write_data_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c54:	8e 01       	movw	r16, r28
    1c56:	02 5b       	subi	r16, 0xB2	; 178
    1c58:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	e0 5b       	subi	r30, 0xB0	; 176
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	60 81       	ld	r22, Z
    1c62:	71 81       	ldd	r23, Z+1	; 0x01
    1c64:	82 81       	ldd	r24, Z+2	; 0x02
    1c66:	93 81       	ldd	r25, Z+3	; 0x03
    1c68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	f8 01       	movw	r30, r16
    1c72:	91 83       	std	Z+1, r25	; 0x01
    1c74:	80 83       	st	Z, r24
    1c76:	de 01       	movw	r26, r28
    1c78:	a6 5b       	subi	r26, 0xB6	; 182
    1c7a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	e2 5b       	subi	r30, 0xB2	; 178
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	80 81       	ld	r24, Z
    1c84:	91 81       	ldd	r25, Z+1	; 0x01
    1c86:	11 96       	adiw	r26, 0x01	; 1
    1c88:	9c 93       	st	X, r25
    1c8a:	8e 93       	st	-X, r24
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	e6 5b       	subi	r30, 0xB6	; 182
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	80 81       	ld	r24, Z
    1c94:	91 81       	ldd	r25, Z+1	; 0x01
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LCD_write_data_4bit+0x230>
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	e6 5b       	subi	r30, 0xB6	; 182
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	91 83       	std	Z+1, r25	; 0x01
    1ca2:	80 83       	st	Z, r24
    1ca4:	22 c0       	rjmp	.+68     	; 0x1cea <LCD_write_data_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ca6:	8e 01       	movw	r16, r28
    1ca8:	08 5a       	subi	r16, 0xA8	; 168
    1caa:	1f 4f       	sbci	r17, 0xFF	; 255
    1cac:	fe 01       	movw	r30, r28
    1cae:	e7 5a       	subi	r30, 0xA7	; 167
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	60 81       	ld	r22, Z
    1cb4:	71 81       	ldd	r23, Z+1	; 0x01
    1cb6:	82 81       	ldd	r24, Z+2	; 0x02
    1cb8:	93 81       	ldd	r25, Z+3	; 0x03
    1cba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	f8 01       	movw	r30, r16
    1cc4:	80 83       	st	Z, r24
    1cc6:	de 01       	movw	r26, r28
    1cc8:	a7 5b       	subi	r26, 0xB7	; 183
    1cca:	bf 4f       	sbci	r27, 0xFF	; 255
    1ccc:	fe 01       	movw	r30, r28
    1cce:	e8 5a       	subi	r30, 0xA8	; 168
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	80 81       	ld	r24, Z
    1cd4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	e7 5b       	subi	r30, 0xB7	; 183
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	80 81       	ld	r24, Z
    1cde:	8a 95       	dec	r24
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <LCD_write_data_4bit+0x278>
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	e7 5b       	subi	r30, 0xB7	; 183
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	80 83       	st	Z, r24

	_delay_us(1);
	//enable pin high
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	60 e0       	ldi	r22, 0x00	; 0
    1cee:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_void_set_pin>
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	eb 5b       	subi	r30, 0xBB	; 187
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	a0 e8       	ldi	r26, 0x80	; 128
    1cfe:	bf e3       	ldi	r27, 0x3F	; 63
    1d00:	80 83       	st	Z, r24
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	a2 83       	std	Z+2, r26	; 0x02
    1d06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d08:	8e 01       	movw	r16, r28
    1d0a:	0f 5b       	subi	r16, 0xBF	; 191
    1d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0e:	fe 01       	movw	r30, r28
    1d10:	eb 5b       	subi	r30, 0xBB	; 187
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	60 81       	ld	r22, Z
    1d16:	71 81       	ldd	r23, Z+1	; 0x01
    1d18:	82 81       	ldd	r24, Z+2	; 0x02
    1d1a:	93 81       	ldd	r25, Z+3	; 0x03
    1d1c:	2b ea       	ldi	r18, 0xAB	; 171
    1d1e:	3a ea       	ldi	r19, 0xAA	; 170
    1d20:	4a e2       	ldi	r20, 0x2A	; 42
    1d22:	50 e4       	ldi	r21, 0x40	; 64
    1d24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	f8 01       	movw	r30, r16
    1d2e:	80 83       	st	Z, r24
    1d30:	91 83       	std	Z+1, r25	; 0x01
    1d32:	a2 83       	std	Z+2, r26	; 0x02
    1d34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d36:	fe 01       	movw	r30, r28
    1d38:	ef 5b       	subi	r30, 0xBF	; 191
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	60 81       	ld	r22, Z
    1d3e:	71 81       	ldd	r23, Z+1	; 0x01
    1d40:	82 81       	ldd	r24, Z+2	; 0x02
    1d42:	93 81       	ldd	r25, Z+3	; 0x03
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e8       	ldi	r20, 0x80	; 128
    1d4a:	5f e3       	ldi	r21, 0x3F	; 63
    1d4c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d50:	88 23       	and	r24, r24
    1d52:	34 f4       	brge	.+12     	; 0x1d60 <LCD_write_data_4bit+0x2fa>
		__ticks = 1;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	fe 01       	movw	r30, r28
    1d58:	e0 5c       	subi	r30, 0xC0	; 192
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	80 83       	st	Z, r24
    1d5e:	9d c0       	rjmp	.+314    	; 0x1e9a <LCD_write_data_4bit+0x434>
	else if (__tmp > 255)
    1d60:	fe 01       	movw	r30, r28
    1d62:	ef 5b       	subi	r30, 0xBF	; 191
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	60 81       	ld	r22, Z
    1d68:	71 81       	ldd	r23, Z+1	; 0x01
    1d6a:	82 81       	ldd	r24, Z+2	; 0x02
    1d6c:	93 81       	ldd	r25, Z+3	; 0x03
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	4f e7       	ldi	r20, 0x7F	; 127
    1d74:	53 e4       	ldi	r21, 0x43	; 67
    1d76:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d7a:	18 16       	cp	r1, r24
    1d7c:	0c f0       	brlt	.+2      	; 0x1d80 <LCD_write_data_4bit+0x31a>
    1d7e:	7e c0       	rjmp	.+252    	; 0x1e7c <LCD_write_data_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    1d80:	fe 01       	movw	r30, r28
    1d82:	eb 5b       	subi	r30, 0xBB	; 187
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	60 81       	ld	r22, Z
    1d88:	71 81       	ldd	r23, Z+1	; 0x01
    1d8a:	82 81       	ldd	r24, Z+2	; 0x02
    1d8c:	93 81       	ldd	r25, Z+3	; 0x03
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	4a e7       	ldi	r20, 0x7A	; 122
    1d94:	54 e4       	ldi	r21, 0x44	; 68
    1d96:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	8c af       	std	Y+60, r24	; 0x3c
    1da0:	9d af       	std	Y+61, r25	; 0x3d
    1da2:	ae af       	std	Y+62, r26	; 0x3e
    1da4:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da6:	6c ad       	ldd	r22, Y+60	; 0x3c
    1da8:	7d ad       	ldd	r23, Y+61	; 0x3d
    1daa:	8e ad       	ldd	r24, Y+62	; 0x3e
    1dac:	9f ad       	ldd	r25, Y+63	; 0x3f
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	4a ef       	ldi	r20, 0xFA	; 250
    1db4:	54 e4       	ldi	r21, 0x44	; 68
    1db6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	88 af       	std	Y+56, r24	; 0x38
    1dc0:	99 af       	std	Y+57, r25	; 0x39
    1dc2:	aa af       	std	Y+58, r26	; 0x3a
    1dc4:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1dc6:	68 ad       	ldd	r22, Y+56	; 0x38
    1dc8:	79 ad       	ldd	r23, Y+57	; 0x39
    1dca:	8a ad       	ldd	r24, Y+58	; 0x3a
    1dcc:	9b ad       	ldd	r25, Y+59	; 0x3b
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e8       	ldi	r20, 0x80	; 128
    1dd4:	5f e3       	ldi	r21, 0x3F	; 63
    1dd6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1dda:	88 23       	and	r24, r24
    1ddc:	2c f4       	brge	.+10     	; 0x1de8 <LCD_write_data_4bit+0x382>
		__ticks = 1;
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	9f ab       	std	Y+55, r25	; 0x37
    1de4:	8e ab       	std	Y+54, r24	; 0x36
    1de6:	3f c0       	rjmp	.+126    	; 0x1e66 <LCD_write_data_4bit+0x400>
	else if (__tmp > 65535)
    1de8:	68 ad       	ldd	r22, Y+56	; 0x38
    1dea:	79 ad       	ldd	r23, Y+57	; 0x39
    1dec:	8a ad       	ldd	r24, Y+58	; 0x3a
    1dee:	9b ad       	ldd	r25, Y+59	; 0x3b
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	3f ef       	ldi	r19, 0xFF	; 255
    1df4:	4f e7       	ldi	r20, 0x7F	; 127
    1df6:	57 e4       	ldi	r21, 0x47	; 71
    1df8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dfc:	18 16       	cp	r1, r24
    1dfe:	4c f5       	brge	.+82     	; 0x1e52 <LCD_write_data_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e00:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e02:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e04:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e06:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e2       	ldi	r20, 0x20	; 32
    1e0e:	51 e4       	ldi	r21, 0x41	; 65
    1e10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	bc 01       	movw	r22, r24
    1e1a:	cd 01       	movw	r24, r26
    1e1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	9f ab       	std	Y+55, r25	; 0x37
    1e26:	8e ab       	std	Y+54, r24	; 0x36
    1e28:	0f c0       	rjmp	.+30     	; 0x1e48 <LCD_write_data_4bit+0x3e2>
    1e2a:	88 ec       	ldi	r24, 0xC8	; 200
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	9d ab       	std	Y+53, r25	; 0x35
    1e30:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e32:	8c a9       	ldd	r24, Y+52	; 0x34
    1e34:	9d a9       	ldd	r25, Y+53	; 0x35
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <LCD_write_data_4bit+0x3d0>
    1e3a:	9d ab       	std	Y+53, r25	; 0x35
    1e3c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3e:	8e a9       	ldd	r24, Y+54	; 0x36
    1e40:	9f a9       	ldd	r25, Y+55	; 0x37
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	9f ab       	std	Y+55, r25	; 0x37
    1e46:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e48:	8e a9       	ldd	r24, Y+54	; 0x36
    1e4a:	9f a9       	ldd	r25, Y+55	; 0x37
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	69 f7       	brne	.-38     	; 0x1e2a <LCD_write_data_4bit+0x3c4>
    1e50:	2d c0       	rjmp	.+90     	; 0x1eac <LCD_write_data_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e52:	68 ad       	ldd	r22, Y+56	; 0x38
    1e54:	79 ad       	ldd	r23, Y+57	; 0x39
    1e56:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e58:	9b ad       	ldd	r25, Y+59	; 0x3b
    1e5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	9f ab       	std	Y+55, r25	; 0x37
    1e64:	8e ab       	std	Y+54, r24	; 0x36
    1e66:	8e a9       	ldd	r24, Y+54	; 0x36
    1e68:	9f a9       	ldd	r25, Y+55	; 0x37
    1e6a:	9b ab       	std	Y+51, r25	; 0x33
    1e6c:	8a ab       	std	Y+50, r24	; 0x32
    1e6e:	8a a9       	ldd	r24, Y+50	; 0x32
    1e70:	9b a9       	ldd	r25, Y+51	; 0x33
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <LCD_write_data_4bit+0x40c>
    1e76:	9b ab       	std	Y+51, r25	; 0x33
    1e78:	8a ab       	std	Y+50, r24	; 0x32
    1e7a:	18 c0       	rjmp	.+48     	; 0x1eac <LCD_write_data_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	ef 5b       	subi	r30, 0xBF	; 191
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	60 81       	ld	r22, Z
    1e84:	71 81       	ldd	r23, Z+1	; 0x01
    1e86:	82 81       	ldd	r24, Z+2	; 0x02
    1e88:	93 81       	ldd	r25, Z+3	; 0x03
    1e8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	fe 01       	movw	r30, r28
    1e94:	e0 5c       	subi	r30, 0xC0	; 192
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	80 83       	st	Z, r24
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	e0 5c       	subi	r30, 0xC0	; 192
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	80 81       	ld	r24, Z
    1ea2:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ea4:	89 a9       	ldd	r24, Y+49	; 0x31
    1ea6:	8a 95       	dec	r24
    1ea8:	f1 f7       	brne	.-4      	; 0x1ea6 <LCD_write_data_4bit+0x440>
    1eaa:	89 ab       	std	Y+49, r24	; 0x31
	 *  any change in this sequence will result in a wrong behavior
	 *  i will try to make it more generic in the next versions
	 *
	 */

	for(u8 i = 4; i < 8; i++){
    1eac:	fe 01       	movw	r30, r28
    1eae:	ee 59       	subi	r30, 0x9E	; 158
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	84 e0       	ldi	r24, 0x04	; 4
    1eb4:	80 83       	st	Z, r24
    1eb6:	26 c0       	rjmp	.+76     	; 0x1f04 <LCD_write_data_4bit+0x49e>

		DIO_void_assign_pin(lcd_data_port, i, get_Bit(copy_data_4bit,i));
    1eb8:	fe 01       	movw	r30, r28
    1eba:	ed 59       	subi	r30, 0x9D	; 157
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	80 81       	ld	r24, Z
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	ee 59       	subi	r30, 0x9E	; 158
    1ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eca:	80 81       	ld	r24, Z
    1ecc:	88 2f       	mov	r24, r24
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	a9 01       	movw	r20, r18
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <LCD_write_data_4bit+0x472>
    1ed4:	55 95       	asr	r21
    1ed6:	47 95       	ror	r20
    1ed8:	8a 95       	dec	r24
    1eda:	e2 f7       	brpl	.-8      	; 0x1ed4 <LCD_write_data_4bit+0x46e>
    1edc:	ca 01       	movw	r24, r20
    1ede:	98 2f       	mov	r25, r24
    1ee0:	91 70       	andi	r25, 0x01	; 1
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	ee 59       	subi	r30, 0x9E	; 158
    1ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	60 81       	ld	r22, Z
    1eec:	49 2f       	mov	r20, r25
    1eee:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_void_assign_pin>
	 *  any change in this sequence will result in a wrong behavior
	 *  i will try to make it more generic in the next versions
	 *
	 */

	for(u8 i = 4; i < 8; i++){
    1ef2:	de 01       	movw	r26, r28
    1ef4:	ae 59       	subi	r26, 0x9E	; 158
    1ef6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ef8:	fe 01       	movw	r30, r28
    1efa:	ee 59       	subi	r30, 0x9E	; 158
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	80 81       	ld	r24, Z
    1f00:	8f 5f       	subi	r24, 0xFF	; 255
    1f02:	8c 93       	st	X, r24
    1f04:	fe 01       	movw	r30, r28
    1f06:	ee 59       	subi	r30, 0x9E	; 158
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	80 81       	ld	r24, Z
    1f0c:	88 30       	cpi	r24, 0x08	; 8
    1f0e:	a0 f2       	brcs	.-88     	; 0x1eb8 <LCD_write_data_4bit+0x452>
		// the for loop assigns the data value in the function input
		// by starting by the most significant 4 bits b4-b7

	}
	// set enable to low to send the lower nibble
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	60 e0       	ldi	r22, 0x00	; 0
    1f14:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_void_clear_pin>
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	a0 e2       	ldi	r26, 0x20	; 32
    1f1e:	b1 e4       	ldi	r27, 0x41	; 65
    1f20:	8d a7       	std	Y+45, r24	; 0x2d
    1f22:	9e a7       	std	Y+46, r25	; 0x2e
    1f24:	af a7       	std	Y+47, r26	; 0x2f
    1f26:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f28:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f2a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f2e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f30:	2b ea       	ldi	r18, 0xAB	; 171
    1f32:	3a ea       	ldi	r19, 0xAA	; 170
    1f34:	4a e2       	ldi	r20, 0x2A	; 42
    1f36:	50 e4       	ldi	r21, 0x40	; 64
    1f38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	89 a7       	std	Y+41, r24	; 0x29
    1f42:	9a a7       	std	Y+42, r25	; 0x2a
    1f44:	ab a7       	std	Y+43, r26	; 0x2b
    1f46:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1f48:	69 a5       	ldd	r22, Y+41	; 0x29
    1f4a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f4e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e8       	ldi	r20, 0x80	; 128
    1f56:	5f e3       	ldi	r21, 0x3F	; 63
    1f58:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f5c:	88 23       	and	r24, r24
    1f5e:	1c f4       	brge	.+6      	; 0x1f66 <LCD_write_data_4bit+0x500>
		__ticks = 1;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	88 a7       	std	Y+40, r24	; 0x28
    1f64:	91 c0       	rjmp	.+290    	; 0x2088 <LCD_write_data_4bit+0x622>
	else if (__tmp > 255)
    1f66:	69 a5       	ldd	r22, Y+41	; 0x29
    1f68:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f6c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	4f e7       	ldi	r20, 0x7F	; 127
    1f74:	53 e4       	ldi	r21, 0x43	; 67
    1f76:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f7a:	18 16       	cp	r1, r24
    1f7c:	0c f0       	brlt	.+2      	; 0x1f80 <LCD_write_data_4bit+0x51a>
    1f7e:	7b c0       	rjmp	.+246    	; 0x2076 <LCD_write_data_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    1f80:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f82:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f86:	98 a9       	ldd	r25, Y+48	; 0x30
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	4a e7       	ldi	r20, 0x7A	; 122
    1f8e:	54 e4       	ldi	r21, 0x44	; 68
    1f90:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	8c a3       	std	Y+36, r24	; 0x24
    1f9a:	9d a3       	std	Y+37, r25	; 0x25
    1f9c:	ae a3       	std	Y+38, r26	; 0x26
    1f9e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa0:	6c a1       	ldd	r22, Y+36	; 0x24
    1fa2:	7d a1       	ldd	r23, Y+37	; 0x25
    1fa4:	8e a1       	ldd	r24, Y+38	; 0x26
    1fa6:	9f a1       	ldd	r25, Y+39	; 0x27
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	4a ef       	ldi	r20, 0xFA	; 250
    1fae:	54 e4       	ldi	r21, 0x44	; 68
    1fb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	88 a3       	std	Y+32, r24	; 0x20
    1fba:	99 a3       	std	Y+33, r25	; 0x21
    1fbc:	aa a3       	std	Y+34, r26	; 0x22
    1fbe:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1fc0:	68 a1       	ldd	r22, Y+32	; 0x20
    1fc2:	79 a1       	ldd	r23, Y+33	; 0x21
    1fc4:	8a a1       	ldd	r24, Y+34	; 0x22
    1fc6:	9b a1       	ldd	r25, Y+35	; 0x23
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	40 e8       	ldi	r20, 0x80	; 128
    1fce:	5f e3       	ldi	r21, 0x3F	; 63
    1fd0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fd4:	88 23       	and	r24, r24
    1fd6:	2c f4       	brge	.+10     	; 0x1fe2 <LCD_write_data_4bit+0x57c>
		__ticks = 1;
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	9f 8f       	std	Y+31, r25	; 0x1f
    1fde:	8e 8f       	std	Y+30, r24	; 0x1e
    1fe0:	3f c0       	rjmp	.+126    	; 0x2060 <LCD_write_data_4bit+0x5fa>
	else if (__tmp > 65535)
    1fe2:	68 a1       	ldd	r22, Y+32	; 0x20
    1fe4:	79 a1       	ldd	r23, Y+33	; 0x21
    1fe6:	8a a1       	ldd	r24, Y+34	; 0x22
    1fe8:	9b a1       	ldd	r25, Y+35	; 0x23
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	3f ef       	ldi	r19, 0xFF	; 255
    1fee:	4f e7       	ldi	r20, 0x7F	; 127
    1ff0:	57 e4       	ldi	r21, 0x47	; 71
    1ff2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ff6:	18 16       	cp	r1, r24
    1ff8:	4c f5       	brge	.+82     	; 0x204c <LCD_write_data_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ffa:	6c a1       	ldd	r22, Y+36	; 0x24
    1ffc:	7d a1       	ldd	r23, Y+37	; 0x25
    1ffe:	8e a1       	ldd	r24, Y+38	; 0x26
    2000:	9f a1       	ldd	r25, Y+39	; 0x27
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e2       	ldi	r20, 0x20	; 32
    2008:	51 e4       	ldi	r21, 0x41	; 65
    200a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	bc 01       	movw	r22, r24
    2014:	cd 01       	movw	r24, r26
    2016:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	9f 8f       	std	Y+31, r25	; 0x1f
    2020:	8e 8f       	std	Y+30, r24	; 0x1e
    2022:	0f c0       	rjmp	.+30     	; 0x2042 <LCD_write_data_4bit+0x5dc>
    2024:	88 ec       	ldi	r24, 0xC8	; 200
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	9d 8f       	std	Y+29, r25	; 0x1d
    202a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    202c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    202e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	f1 f7       	brne	.-4      	; 0x2030 <LCD_write_data_4bit+0x5ca>
    2034:	9d 8f       	std	Y+29, r25	; 0x1d
    2036:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2038:	8e 8d       	ldd	r24, Y+30	; 0x1e
    203a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	9f 8f       	std	Y+31, r25	; 0x1f
    2040:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2042:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2044:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2046:	00 97       	sbiw	r24, 0x00	; 0
    2048:	69 f7       	brne	.-38     	; 0x2024 <LCD_write_data_4bit+0x5be>
    204a:	24 c0       	rjmp	.+72     	; 0x2094 <LCD_write_data_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204c:	68 a1       	ldd	r22, Y+32	; 0x20
    204e:	79 a1       	ldd	r23, Y+33	; 0x21
    2050:	8a a1       	ldd	r24, Y+34	; 0x22
    2052:	9b a1       	ldd	r25, Y+35	; 0x23
    2054:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	9f 8f       	std	Y+31, r25	; 0x1f
    205e:	8e 8f       	std	Y+30, r24	; 0x1e
    2060:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2062:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2064:	9b 8f       	std	Y+27, r25	; 0x1b
    2066:	8a 8f       	std	Y+26, r24	; 0x1a
    2068:	8a 8d       	ldd	r24, Y+26	; 0x1a
    206a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <LCD_write_data_4bit+0x606>
    2070:	9b 8f       	std	Y+27, r25	; 0x1b
    2072:	8a 8f       	std	Y+26, r24	; 0x1a
    2074:	0f c0       	rjmp	.+30     	; 0x2094 <LCD_write_data_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2076:	69 a5       	ldd	r22, Y+41	; 0x29
    2078:	7a a5       	ldd	r23, Y+42	; 0x2a
    207a:	8b a5       	ldd	r24, Y+43	; 0x2b
    207c:	9c a5       	ldd	r25, Y+44	; 0x2c
    207e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	88 a7       	std	Y+40, r24	; 0x28
    2088:	88 a5       	ldd	r24, Y+40	; 0x28
    208a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    208c:	89 8d       	ldd	r24, Y+25	; 0x19
    208e:	8a 95       	dec	r24
    2090:	f1 f7       	brne	.-4      	; 0x208e <LCD_write_data_4bit+0x628>
    2092:	89 8f       	std	Y+25, r24	; 0x19
	//delay to smooth things out
	_delay_us(10);
	//enable HIGH
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	60 e0       	ldi	r22, 0x00	; 0
    2098:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_void_set_pin>
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	a0 e8       	ldi	r26, 0x80	; 128
    20a2:	bf e3       	ldi	r27, 0x3F	; 63
    20a4:	8d 8b       	std	Y+21, r24	; 0x15
    20a6:	9e 8b       	std	Y+22, r25	; 0x16
    20a8:	af 8b       	std	Y+23, r26	; 0x17
    20aa:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20ac:	6d 89       	ldd	r22, Y+21	; 0x15
    20ae:	7e 89       	ldd	r23, Y+22	; 0x16
    20b0:	8f 89       	ldd	r24, Y+23	; 0x17
    20b2:	98 8d       	ldd	r25, Y+24	; 0x18
    20b4:	2b ea       	ldi	r18, 0xAB	; 171
    20b6:	3a ea       	ldi	r19, 0xAA	; 170
    20b8:	4a e2       	ldi	r20, 0x2A	; 42
    20ba:	50 e4       	ldi	r21, 0x40	; 64
    20bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	89 8b       	std	Y+17, r24	; 0x11
    20c6:	9a 8b       	std	Y+18, r25	; 0x12
    20c8:	ab 8b       	std	Y+19, r26	; 0x13
    20ca:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    20cc:	69 89       	ldd	r22, Y+17	; 0x11
    20ce:	7a 89       	ldd	r23, Y+18	; 0x12
    20d0:	8b 89       	ldd	r24, Y+19	; 0x13
    20d2:	9c 89       	ldd	r25, Y+20	; 0x14
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e8       	ldi	r20, 0x80	; 128
    20da:	5f e3       	ldi	r21, 0x3F	; 63
    20dc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20e0:	88 23       	and	r24, r24
    20e2:	1c f4       	brge	.+6      	; 0x20ea <LCD_write_data_4bit+0x684>
		__ticks = 1;
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	88 8b       	std	Y+16, r24	; 0x10
    20e8:	91 c0       	rjmp	.+290    	; 0x220c <LCD_write_data_4bit+0x7a6>
	else if (__tmp > 255)
    20ea:	69 89       	ldd	r22, Y+17	; 0x11
    20ec:	7a 89       	ldd	r23, Y+18	; 0x12
    20ee:	8b 89       	ldd	r24, Y+19	; 0x13
    20f0:	9c 89       	ldd	r25, Y+20	; 0x14
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	4f e7       	ldi	r20, 0x7F	; 127
    20f8:	53 e4       	ldi	r21, 0x43	; 67
    20fa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20fe:	18 16       	cp	r1, r24
    2100:	0c f0       	brlt	.+2      	; 0x2104 <LCD_write_data_4bit+0x69e>
    2102:	7b c0       	rjmp	.+246    	; 0x21fa <LCD_write_data_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    2104:	6d 89       	ldd	r22, Y+21	; 0x15
    2106:	7e 89       	ldd	r23, Y+22	; 0x16
    2108:	8f 89       	ldd	r24, Y+23	; 0x17
    210a:	98 8d       	ldd	r25, Y+24	; 0x18
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	4a e7       	ldi	r20, 0x7A	; 122
    2112:	54 e4       	ldi	r21, 0x44	; 68
    2114:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	8c 87       	std	Y+12, r24	; 0x0c
    211e:	9d 87       	std	Y+13, r25	; 0x0d
    2120:	ae 87       	std	Y+14, r26	; 0x0e
    2122:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2124:	6c 85       	ldd	r22, Y+12	; 0x0c
    2126:	7d 85       	ldd	r23, Y+13	; 0x0d
    2128:	8e 85       	ldd	r24, Y+14	; 0x0e
    212a:	9f 85       	ldd	r25, Y+15	; 0x0f
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	4a ef       	ldi	r20, 0xFA	; 250
    2132:	54 e4       	ldi	r21, 0x44	; 68
    2134:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	88 87       	std	Y+8, r24	; 0x08
    213e:	99 87       	std	Y+9, r25	; 0x09
    2140:	aa 87       	std	Y+10, r26	; 0x0a
    2142:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2144:	68 85       	ldd	r22, Y+8	; 0x08
    2146:	79 85       	ldd	r23, Y+9	; 0x09
    2148:	8a 85       	ldd	r24, Y+10	; 0x0a
    214a:	9b 85       	ldd	r25, Y+11	; 0x0b
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e8       	ldi	r20, 0x80	; 128
    2152:	5f e3       	ldi	r21, 0x3F	; 63
    2154:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2158:	88 23       	and	r24, r24
    215a:	2c f4       	brge	.+10     	; 0x2166 <LCD_write_data_4bit+0x700>
		__ticks = 1;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	9f 83       	std	Y+7, r25	; 0x07
    2162:	8e 83       	std	Y+6, r24	; 0x06
    2164:	3f c0       	rjmp	.+126    	; 0x21e4 <LCD_write_data_4bit+0x77e>
	else if (__tmp > 65535)
    2166:	68 85       	ldd	r22, Y+8	; 0x08
    2168:	79 85       	ldd	r23, Y+9	; 0x09
    216a:	8a 85       	ldd	r24, Y+10	; 0x0a
    216c:	9b 85       	ldd	r25, Y+11	; 0x0b
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	3f ef       	ldi	r19, 0xFF	; 255
    2172:	4f e7       	ldi	r20, 0x7F	; 127
    2174:	57 e4       	ldi	r21, 0x47	; 71
    2176:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    217a:	18 16       	cp	r1, r24
    217c:	4c f5       	brge	.+82     	; 0x21d0 <LCD_write_data_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2180:	7d 85       	ldd	r23, Y+13	; 0x0d
    2182:	8e 85       	ldd	r24, Y+14	; 0x0e
    2184:	9f 85       	ldd	r25, Y+15	; 0x0f
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e2       	ldi	r20, 0x20	; 32
    218c:	51 e4       	ldi	r21, 0x41	; 65
    218e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	bc 01       	movw	r22, r24
    2198:	cd 01       	movw	r24, r26
    219a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	9f 83       	std	Y+7, r25	; 0x07
    21a4:	8e 83       	std	Y+6, r24	; 0x06
    21a6:	0f c0       	rjmp	.+30     	; 0x21c6 <LCD_write_data_4bit+0x760>
    21a8:	88 ec       	ldi	r24, 0xC8	; 200
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	9d 83       	std	Y+5, r25	; 0x05
    21ae:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21b0:	8c 81       	ldd	r24, Y+4	; 0x04
    21b2:	9d 81       	ldd	r25, Y+5	; 0x05
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <LCD_write_data_4bit+0x74e>
    21b8:	9d 83       	std	Y+5, r25	; 0x05
    21ba:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21bc:	8e 81       	ldd	r24, Y+6	; 0x06
    21be:	9f 81       	ldd	r25, Y+7	; 0x07
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	9f 83       	std	Y+7, r25	; 0x07
    21c4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c6:	8e 81       	ldd	r24, Y+6	; 0x06
    21c8:	9f 81       	ldd	r25, Y+7	; 0x07
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	69 f7       	brne	.-38     	; 0x21a8 <LCD_write_data_4bit+0x742>
    21ce:	24 c0       	rjmp	.+72     	; 0x2218 <LCD_write_data_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d0:	68 85       	ldd	r22, Y+8	; 0x08
    21d2:	79 85       	ldd	r23, Y+9	; 0x09
    21d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    21d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    21d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	9f 83       	std	Y+7, r25	; 0x07
    21e2:	8e 83       	std	Y+6, r24	; 0x06
    21e4:	8e 81       	ldd	r24, Y+6	; 0x06
    21e6:	9f 81       	ldd	r25, Y+7	; 0x07
    21e8:	9b 83       	std	Y+3, r25	; 0x03
    21ea:	8a 83       	std	Y+2, r24	; 0x02
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	9b 81       	ldd	r25, Y+3	; 0x03
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <LCD_write_data_4bit+0x78a>
    21f4:	9b 83       	std	Y+3, r25	; 0x03
    21f6:	8a 83       	std	Y+2, r24	; 0x02
    21f8:	0f c0       	rjmp	.+30     	; 0x2218 <LCD_write_data_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21fa:	69 89       	ldd	r22, Y+17	; 0x11
    21fc:	7a 89       	ldd	r23, Y+18	; 0x12
    21fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2200:	9c 89       	ldd	r25, Y+20	; 0x14
    2202:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	88 8b       	std	Y+16, r24	; 0x10
    220c:	88 89       	ldd	r24, Y+16	; 0x10
    220e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	8a 95       	dec	r24
    2214:	f1 f7       	brne	.-4      	; 0x2212 <LCD_write_data_4bit+0x7ac>
    2216:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	//send lower nibble
	for(u8 i = 4; i < 8; i++){
    2218:	fe 01       	movw	r30, r28
    221a:	ef 59       	subi	r30, 0x9F	; 159
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	84 e0       	ldi	r24, 0x04	; 4
    2220:	80 83       	st	Z, r24
    2222:	27 c0       	rjmp	.+78     	; 0x2272 <LCD_write_data_4bit+0x80c>

			DIO_void_assign_pin(lcd_data_port, i, get_Bit(copy_data_4bit,i-4));
    2224:	fe 01       	movw	r30, r28
    2226:	ed 59       	subi	r30, 0x9D	; 157
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	80 81       	ld	r24, Z
    222c:	28 2f       	mov	r18, r24
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	fe 01       	movw	r30, r28
    2232:	ef 59       	subi	r30, 0x9F	; 159
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	80 81       	ld	r24, Z
    2238:	88 2f       	mov	r24, r24
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	04 97       	sbiw	r24, 0x04	; 4
    223e:	f9 01       	movw	r30, r18
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <LCD_write_data_4bit+0x7e0>
    2242:	f5 95       	asr	r31
    2244:	e7 95       	ror	r30
    2246:	8a 95       	dec	r24
    2248:	e2 f7       	brpl	.-8      	; 0x2242 <LCD_write_data_4bit+0x7dc>
    224a:	cf 01       	movw	r24, r30
    224c:	98 2f       	mov	r25, r24
    224e:	91 70       	andi	r25, 0x01	; 1
    2250:	fe 01       	movw	r30, r28
    2252:	ef 59       	subi	r30, 0x9F	; 159
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	60 81       	ld	r22, Z
    225a:	49 2f       	mov	r20, r25
    225c:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_void_assign_pin>
	_delay_us(10);
	//enable HIGH
	DIO_void_set_pin(lcd_control_port, lcd_enable);
	_delay_us(1);
	//send lower nibble
	for(u8 i = 4; i < 8; i++){
    2260:	de 01       	movw	r26, r28
    2262:	af 59       	subi	r26, 0x9F	; 159
    2264:	bf 4f       	sbci	r27, 0xFF	; 255
    2266:	fe 01       	movw	r30, r28
    2268:	ef 59       	subi	r30, 0x9F	; 159
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	80 81       	ld	r24, Z
    226e:	8f 5f       	subi	r24, 0xFF	; 255
    2270:	8c 93       	st	X, r24
    2272:	fe 01       	movw	r30, r28
    2274:	ef 59       	subi	r30, 0x9F	; 159
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 81       	ld	r24, Z
    227a:	88 30       	cpi	r24, 0x08	; 8
    227c:	98 f2       	brcs	.-90     	; 0x2224 <LCD_write_data_4bit+0x7be>
			// the for loop assigns the data value in the function input
			// by starting by the least significant 4 bits b0-b3

		}
	//enable low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_void_clear_pin>


}
    2286:	cd 59       	subi	r28, 0x9D	; 157
    2288:	df 4f       	sbci	r29, 0xFF	; 255
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	de bf       	out	0x3e, r29	; 62
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	cd bf       	out	0x3d, r28	; 61
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	1f 91       	pop	r17
    229a:	0f 91       	pop	r16
    229c:	08 95       	ret

0000229e <LCD_write_command_4bit>:

static void LCD_write_command_4bit(u8 copy_command_4bit){
    229e:	0f 93       	push	r16
    22a0:	1f 93       	push	r17
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    22aa:	c3 56       	subi	r28, 0x63	; 99
    22ac:	d0 40       	sbci	r29, 0x00	; 0
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61
    22b8:	fe 01       	movw	r30, r28
    22ba:	ed 59       	subi	r30, 0x9D	; 157
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	80 83       	st	Z, r24
		 *  function will only be used inside this source file
		 *  do you not use it in your code!
		 *
		 */

	DIO_void_clear_pin(lcd_control_port, lcd_RS); // set RS pin high select data register
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	62 e0       	ldi	r22, 0x02	; 2
    22c4:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_control_port, lcd_RW); // clear RW pin  0 for writing operation
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	61 e0       	ldi	r22, 0x01	; 1
    22cc:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_void_clear_pin>
    22d0:	fe 01       	movw	r30, r28
    22d2:	e3 5a       	subi	r30, 0xA3	; 163
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	a0 e8       	ldi	r26, 0x80	; 128
    22dc:	bf e3       	ldi	r27, 0x3F	; 63
    22de:	80 83       	st	Z, r24
    22e0:	91 83       	std	Z+1, r25	; 0x01
    22e2:	a2 83       	std	Z+2, r26	; 0x02
    22e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22e6:	8e 01       	movw	r16, r28
    22e8:	07 5a       	subi	r16, 0xA7	; 167
    22ea:	1f 4f       	sbci	r17, 0xFF	; 255
    22ec:	fe 01       	movw	r30, r28
    22ee:	e3 5a       	subi	r30, 0xA3	; 163
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	60 81       	ld	r22, Z
    22f4:	71 81       	ldd	r23, Z+1	; 0x01
    22f6:	82 81       	ldd	r24, Z+2	; 0x02
    22f8:	93 81       	ldd	r25, Z+3	; 0x03
    22fa:	2b ea       	ldi	r18, 0xAB	; 171
    22fc:	3a ea       	ldi	r19, 0xAA	; 170
    22fe:	4a e2       	ldi	r20, 0x2A	; 42
    2300:	50 e4       	ldi	r21, 0x40	; 64
    2302:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	f8 01       	movw	r30, r16
    230c:	80 83       	st	Z, r24
    230e:	91 83       	std	Z+1, r25	; 0x01
    2310:	a2 83       	std	Z+2, r26	; 0x02
    2312:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2314:	fe 01       	movw	r30, r28
    2316:	e7 5a       	subi	r30, 0xA7	; 167
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	60 81       	ld	r22, Z
    231c:	71 81       	ldd	r23, Z+1	; 0x01
    231e:	82 81       	ldd	r24, Z+2	; 0x02
    2320:	93 81       	ldd	r25, Z+3	; 0x03
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e8       	ldi	r20, 0x80	; 128
    2328:	5f e3       	ldi	r21, 0x3F	; 63
    232a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    232e:	88 23       	and	r24, r24
    2330:	34 f4       	brge	.+12     	; 0x233e <LCD_write_command_4bit+0xa0>
		__ticks = 1;
    2332:	fe 01       	movw	r30, r28
    2334:	e8 5a       	subi	r30, 0xA8	; 168
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	80 83       	st	Z, r24
    233c:	e0 c0       	rjmp	.+448    	; 0x24fe <LCD_write_command_4bit+0x260>
	else if (__tmp > 255)
    233e:	fe 01       	movw	r30, r28
    2340:	e7 5a       	subi	r30, 0xA7	; 167
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	60 81       	ld	r22, Z
    2346:	71 81       	ldd	r23, Z+1	; 0x01
    2348:	82 81       	ldd	r24, Z+2	; 0x02
    234a:	93 81       	ldd	r25, Z+3	; 0x03
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	4f e7       	ldi	r20, 0x7F	; 127
    2352:	53 e4       	ldi	r21, 0x43	; 67
    2354:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2358:	18 16       	cp	r1, r24
    235a:	0c f0       	brlt	.+2      	; 0x235e <LCD_write_command_4bit+0xc0>
    235c:	c0 c0       	rjmp	.+384    	; 0x24de <LCD_write_command_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    235e:	fe 01       	movw	r30, r28
    2360:	e3 5a       	subi	r30, 0xA3	; 163
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	60 81       	ld	r22, Z
    2366:	71 81       	ldd	r23, Z+1	; 0x01
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	4a e7       	ldi	r20, 0x7A	; 122
    2372:	54 e4       	ldi	r21, 0x44	; 68
    2374:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	fe 01       	movw	r30, r28
    237e:	ec 5a       	subi	r30, 0xAC	; 172
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	80 83       	st	Z, r24
    2384:	91 83       	std	Z+1, r25	; 0x01
    2386:	a2 83       	std	Z+2, r26	; 0x02
    2388:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238a:	8e 01       	movw	r16, r28
    238c:	00 5b       	subi	r16, 0xB0	; 176
    238e:	1f 4f       	sbci	r17, 0xFF	; 255
    2390:	fe 01       	movw	r30, r28
    2392:	ec 5a       	subi	r30, 0xAC	; 172
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	60 81       	ld	r22, Z
    2398:	71 81       	ldd	r23, Z+1	; 0x01
    239a:	82 81       	ldd	r24, Z+2	; 0x02
    239c:	93 81       	ldd	r25, Z+3	; 0x03
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	4a ef       	ldi	r20, 0xFA	; 250
    23a4:	54 e4       	ldi	r21, 0x44	; 68
    23a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	f8 01       	movw	r30, r16
    23b0:	80 83       	st	Z, r24
    23b2:	91 83       	std	Z+1, r25	; 0x01
    23b4:	a2 83       	std	Z+2, r26	; 0x02
    23b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23b8:	fe 01       	movw	r30, r28
    23ba:	e0 5b       	subi	r30, 0xB0	; 176
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	60 81       	ld	r22, Z
    23c0:	71 81       	ldd	r23, Z+1	; 0x01
    23c2:	82 81       	ldd	r24, Z+2	; 0x02
    23c4:	93 81       	ldd	r25, Z+3	; 0x03
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e8       	ldi	r20, 0x80	; 128
    23cc:	5f e3       	ldi	r21, 0x3F	; 63
    23ce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23d2:	88 23       	and	r24, r24
    23d4:	44 f4       	brge	.+16     	; 0x23e6 <LCD_write_command_4bit+0x148>
		__ticks = 1;
    23d6:	fe 01       	movw	r30, r28
    23d8:	e2 5b       	subi	r30, 0xB2	; 178
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	91 83       	std	Z+1, r25	; 0x01
    23e2:	80 83       	st	Z, r24
    23e4:	64 c0       	rjmp	.+200    	; 0x24ae <LCD_write_command_4bit+0x210>
	else if (__tmp > 65535)
    23e6:	fe 01       	movw	r30, r28
    23e8:	e0 5b       	subi	r30, 0xB0	; 176
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	60 81       	ld	r22, Z
    23ee:	71 81       	ldd	r23, Z+1	; 0x01
    23f0:	82 81       	ldd	r24, Z+2	; 0x02
    23f2:	93 81       	ldd	r25, Z+3	; 0x03
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	3f ef       	ldi	r19, 0xFF	; 255
    23f8:	4f e7       	ldi	r20, 0x7F	; 127
    23fa:	57 e4       	ldi	r21, 0x47	; 71
    23fc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2400:	18 16       	cp	r1, r24
    2402:	0c f0       	brlt	.+2      	; 0x2406 <LCD_write_command_4bit+0x168>
    2404:	43 c0       	rjmp	.+134    	; 0x248c <LCD_write_command_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2406:	fe 01       	movw	r30, r28
    2408:	ec 5a       	subi	r30, 0xAC	; 172
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	60 81       	ld	r22, Z
    240e:	71 81       	ldd	r23, Z+1	; 0x01
    2410:	82 81       	ldd	r24, Z+2	; 0x02
    2412:	93 81       	ldd	r25, Z+3	; 0x03
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	40 e2       	ldi	r20, 0x20	; 32
    241a:	51 e4       	ldi	r21, 0x41	; 65
    241c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	8e 01       	movw	r16, r28
    2426:	02 5b       	subi	r16, 0xB2	; 178
    2428:	1f 4f       	sbci	r17, 0xFF	; 255
    242a:	bc 01       	movw	r22, r24
    242c:	cd 01       	movw	r24, r26
    242e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	f8 01       	movw	r30, r16
    2438:	91 83       	std	Z+1, r25	; 0x01
    243a:	80 83       	st	Z, r24
    243c:	1f c0       	rjmp	.+62     	; 0x247c <LCD_write_command_4bit+0x1de>
    243e:	fe 01       	movw	r30, r28
    2440:	e4 5b       	subi	r30, 0xB4	; 180
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	88 ec       	ldi	r24, 0xC8	; 200
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	91 83       	std	Z+1, r25	; 0x01
    244a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    244c:	fe 01       	movw	r30, r28
    244e:	e4 5b       	subi	r30, 0xB4	; 180
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	80 81       	ld	r24, Z
    2454:	91 81       	ldd	r25, Z+1	; 0x01
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	f1 f7       	brne	.-4      	; 0x2456 <LCD_write_command_4bit+0x1b8>
    245a:	fe 01       	movw	r30, r28
    245c:	e4 5b       	subi	r30, 0xB4	; 180
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	91 83       	std	Z+1, r25	; 0x01
    2462:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2464:	de 01       	movw	r26, r28
    2466:	a2 5b       	subi	r26, 0xB2	; 178
    2468:	bf 4f       	sbci	r27, 0xFF	; 255
    246a:	fe 01       	movw	r30, r28
    246c:	e2 5b       	subi	r30, 0xB2	; 178
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	80 81       	ld	r24, Z
    2472:	91 81       	ldd	r25, Z+1	; 0x01
    2474:	01 97       	sbiw	r24, 0x01	; 1
    2476:	11 96       	adiw	r26, 0x01	; 1
    2478:	9c 93       	st	X, r25
    247a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247c:	fe 01       	movw	r30, r28
    247e:	e2 5b       	subi	r30, 0xB2	; 178
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	80 81       	ld	r24, Z
    2484:	91 81       	ldd	r25, Z+1	; 0x01
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	d1 f6       	brne	.-76     	; 0x243e <LCD_write_command_4bit+0x1a0>
    248a:	4b c0       	rjmp	.+150    	; 0x2522 <LCD_write_command_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248c:	8e 01       	movw	r16, r28
    248e:	02 5b       	subi	r16, 0xB2	; 178
    2490:	1f 4f       	sbci	r17, 0xFF	; 255
    2492:	fe 01       	movw	r30, r28
    2494:	e0 5b       	subi	r30, 0xB0	; 176
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	60 81       	ld	r22, Z
    249a:	71 81       	ldd	r23, Z+1	; 0x01
    249c:	82 81       	ldd	r24, Z+2	; 0x02
    249e:	93 81       	ldd	r25, Z+3	; 0x03
    24a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	f8 01       	movw	r30, r16
    24aa:	91 83       	std	Z+1, r25	; 0x01
    24ac:	80 83       	st	Z, r24
    24ae:	de 01       	movw	r26, r28
    24b0:	a6 5b       	subi	r26, 0xB6	; 182
    24b2:	bf 4f       	sbci	r27, 0xFF	; 255
    24b4:	fe 01       	movw	r30, r28
    24b6:	e2 5b       	subi	r30, 0xB2	; 178
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	80 81       	ld	r24, Z
    24bc:	91 81       	ldd	r25, Z+1	; 0x01
    24be:	11 96       	adiw	r26, 0x01	; 1
    24c0:	9c 93       	st	X, r25
    24c2:	8e 93       	st	-X, r24
    24c4:	fe 01       	movw	r30, r28
    24c6:	e6 5b       	subi	r30, 0xB6	; 182
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	80 81       	ld	r24, Z
    24cc:	91 81       	ldd	r25, Z+1	; 0x01
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <LCD_write_command_4bit+0x230>
    24d2:	fe 01       	movw	r30, r28
    24d4:	e6 5b       	subi	r30, 0xB6	; 182
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	91 83       	std	Z+1, r25	; 0x01
    24da:	80 83       	st	Z, r24
    24dc:	22 c0       	rjmp	.+68     	; 0x2522 <LCD_write_command_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24de:	8e 01       	movw	r16, r28
    24e0:	08 5a       	subi	r16, 0xA8	; 168
    24e2:	1f 4f       	sbci	r17, 0xFF	; 255
    24e4:	fe 01       	movw	r30, r28
    24e6:	e7 5a       	subi	r30, 0xA7	; 167
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	60 81       	ld	r22, Z
    24ec:	71 81       	ldd	r23, Z+1	; 0x01
    24ee:	82 81       	ldd	r24, Z+2	; 0x02
    24f0:	93 81       	ldd	r25, Z+3	; 0x03
    24f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	f8 01       	movw	r30, r16
    24fc:	80 83       	st	Z, r24
    24fe:	de 01       	movw	r26, r28
    2500:	a7 5b       	subi	r26, 0xB7	; 183
    2502:	bf 4f       	sbci	r27, 0xFF	; 255
    2504:	fe 01       	movw	r30, r28
    2506:	e8 5a       	subi	r30, 0xA8	; 168
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	80 81       	ld	r24, Z
    250c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    250e:	fe 01       	movw	r30, r28
    2510:	e7 5b       	subi	r30, 0xB7	; 183
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	80 81       	ld	r24, Z
    2516:	8a 95       	dec	r24
    2518:	f1 f7       	brne	.-4      	; 0x2516 <LCD_write_command_4bit+0x278>
    251a:	fe 01       	movw	r30, r28
    251c:	e7 5b       	subi	r30, 0xB7	; 183
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	80 83       	st	Z, r24

	_delay_us(1);
	//enable pin high
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	60 e0       	ldi	r22, 0x00	; 0
    2526:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_void_set_pin>
    252a:	fe 01       	movw	r30, r28
    252c:	eb 5b       	subi	r30, 0xBB	; 187
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	a0 e8       	ldi	r26, 0x80	; 128
    2536:	bf e3       	ldi	r27, 0x3F	; 63
    2538:	80 83       	st	Z, r24
    253a:	91 83       	std	Z+1, r25	; 0x01
    253c:	a2 83       	std	Z+2, r26	; 0x02
    253e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2540:	8e 01       	movw	r16, r28
    2542:	0f 5b       	subi	r16, 0xBF	; 191
    2544:	1f 4f       	sbci	r17, 0xFF	; 255
    2546:	fe 01       	movw	r30, r28
    2548:	eb 5b       	subi	r30, 0xBB	; 187
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	60 81       	ld	r22, Z
    254e:	71 81       	ldd	r23, Z+1	; 0x01
    2550:	82 81       	ldd	r24, Z+2	; 0x02
    2552:	93 81       	ldd	r25, Z+3	; 0x03
    2554:	2b ea       	ldi	r18, 0xAB	; 171
    2556:	3a ea       	ldi	r19, 0xAA	; 170
    2558:	4a e2       	ldi	r20, 0x2A	; 42
    255a:	50 e4       	ldi	r21, 0x40	; 64
    255c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	f8 01       	movw	r30, r16
    2566:	80 83       	st	Z, r24
    2568:	91 83       	std	Z+1, r25	; 0x01
    256a:	a2 83       	std	Z+2, r26	; 0x02
    256c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    256e:	fe 01       	movw	r30, r28
    2570:	ef 5b       	subi	r30, 0xBF	; 191
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	60 81       	ld	r22, Z
    2576:	71 81       	ldd	r23, Z+1	; 0x01
    2578:	82 81       	ldd	r24, Z+2	; 0x02
    257a:	93 81       	ldd	r25, Z+3	; 0x03
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	40 e8       	ldi	r20, 0x80	; 128
    2582:	5f e3       	ldi	r21, 0x3F	; 63
    2584:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2588:	88 23       	and	r24, r24
    258a:	34 f4       	brge	.+12     	; 0x2598 <LCD_write_command_4bit+0x2fa>
		__ticks = 1;
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	fe 01       	movw	r30, r28
    2590:	e0 5c       	subi	r30, 0xC0	; 192
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	80 83       	st	Z, r24
    2596:	9d c0       	rjmp	.+314    	; 0x26d2 <LCD_write_command_4bit+0x434>
	else if (__tmp > 255)
    2598:	fe 01       	movw	r30, r28
    259a:	ef 5b       	subi	r30, 0xBF	; 191
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	60 81       	ld	r22, Z
    25a0:	71 81       	ldd	r23, Z+1	; 0x01
    25a2:	82 81       	ldd	r24, Z+2	; 0x02
    25a4:	93 81       	ldd	r25, Z+3	; 0x03
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	4f e7       	ldi	r20, 0x7F	; 127
    25ac:	53 e4       	ldi	r21, 0x43	; 67
    25ae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25b2:	18 16       	cp	r1, r24
    25b4:	0c f0       	brlt	.+2      	; 0x25b8 <LCD_write_command_4bit+0x31a>
    25b6:	7e c0       	rjmp	.+252    	; 0x26b4 <LCD_write_command_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    25b8:	fe 01       	movw	r30, r28
    25ba:	eb 5b       	subi	r30, 0xBB	; 187
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	60 81       	ld	r22, Z
    25c0:	71 81       	ldd	r23, Z+1	; 0x01
    25c2:	82 81       	ldd	r24, Z+2	; 0x02
    25c4:	93 81       	ldd	r25, Z+3	; 0x03
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	4a e7       	ldi	r20, 0x7A	; 122
    25cc:	54 e4       	ldi	r21, 0x44	; 68
    25ce:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	8c af       	std	Y+60, r24	; 0x3c
    25d8:	9d af       	std	Y+61, r25	; 0x3d
    25da:	ae af       	std	Y+62, r26	; 0x3e
    25dc:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25de:	6c ad       	ldd	r22, Y+60	; 0x3c
    25e0:	7d ad       	ldd	r23, Y+61	; 0x3d
    25e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    25e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	4a ef       	ldi	r20, 0xFA	; 250
    25ec:	54 e4       	ldi	r21, 0x44	; 68
    25ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	88 af       	std	Y+56, r24	; 0x38
    25f8:	99 af       	std	Y+57, r25	; 0x39
    25fa:	aa af       	std	Y+58, r26	; 0x3a
    25fc:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    25fe:	68 ad       	ldd	r22, Y+56	; 0x38
    2600:	79 ad       	ldd	r23, Y+57	; 0x39
    2602:	8a ad       	ldd	r24, Y+58	; 0x3a
    2604:	9b ad       	ldd	r25, Y+59	; 0x3b
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	40 e8       	ldi	r20, 0x80	; 128
    260c:	5f e3       	ldi	r21, 0x3F	; 63
    260e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2612:	88 23       	and	r24, r24
    2614:	2c f4       	brge	.+10     	; 0x2620 <LCD_write_command_4bit+0x382>
		__ticks = 1;
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	9f ab       	std	Y+55, r25	; 0x37
    261c:	8e ab       	std	Y+54, r24	; 0x36
    261e:	3f c0       	rjmp	.+126    	; 0x269e <LCD_write_command_4bit+0x400>
	else if (__tmp > 65535)
    2620:	68 ad       	ldd	r22, Y+56	; 0x38
    2622:	79 ad       	ldd	r23, Y+57	; 0x39
    2624:	8a ad       	ldd	r24, Y+58	; 0x3a
    2626:	9b ad       	ldd	r25, Y+59	; 0x3b
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	3f ef       	ldi	r19, 0xFF	; 255
    262c:	4f e7       	ldi	r20, 0x7F	; 127
    262e:	57 e4       	ldi	r21, 0x47	; 71
    2630:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2634:	18 16       	cp	r1, r24
    2636:	4c f5       	brge	.+82     	; 0x268a <LCD_write_command_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2638:	6c ad       	ldd	r22, Y+60	; 0x3c
    263a:	7d ad       	ldd	r23, Y+61	; 0x3d
    263c:	8e ad       	ldd	r24, Y+62	; 0x3e
    263e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	40 e2       	ldi	r20, 0x20	; 32
    2646:	51 e4       	ldi	r21, 0x41	; 65
    2648:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	bc 01       	movw	r22, r24
    2652:	cd 01       	movw	r24, r26
    2654:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	9f ab       	std	Y+55, r25	; 0x37
    265e:	8e ab       	std	Y+54, r24	; 0x36
    2660:	0f c0       	rjmp	.+30     	; 0x2680 <LCD_write_command_4bit+0x3e2>
    2662:	88 ec       	ldi	r24, 0xC8	; 200
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	9d ab       	std	Y+53, r25	; 0x35
    2668:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    266a:	8c a9       	ldd	r24, Y+52	; 0x34
    266c:	9d a9       	ldd	r25, Y+53	; 0x35
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	f1 f7       	brne	.-4      	; 0x266e <LCD_write_command_4bit+0x3d0>
    2672:	9d ab       	std	Y+53, r25	; 0x35
    2674:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2676:	8e a9       	ldd	r24, Y+54	; 0x36
    2678:	9f a9       	ldd	r25, Y+55	; 0x37
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	9f ab       	std	Y+55, r25	; 0x37
    267e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2680:	8e a9       	ldd	r24, Y+54	; 0x36
    2682:	9f a9       	ldd	r25, Y+55	; 0x37
    2684:	00 97       	sbiw	r24, 0x00	; 0
    2686:	69 f7       	brne	.-38     	; 0x2662 <LCD_write_command_4bit+0x3c4>
    2688:	2d c0       	rjmp	.+90     	; 0x26e4 <LCD_write_command_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268a:	68 ad       	ldd	r22, Y+56	; 0x38
    268c:	79 ad       	ldd	r23, Y+57	; 0x39
    268e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2690:	9b ad       	ldd	r25, Y+59	; 0x3b
    2692:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	9f ab       	std	Y+55, r25	; 0x37
    269c:	8e ab       	std	Y+54, r24	; 0x36
    269e:	8e a9       	ldd	r24, Y+54	; 0x36
    26a0:	9f a9       	ldd	r25, Y+55	; 0x37
    26a2:	9b ab       	std	Y+51, r25	; 0x33
    26a4:	8a ab       	std	Y+50, r24	; 0x32
    26a6:	8a a9       	ldd	r24, Y+50	; 0x32
    26a8:	9b a9       	ldd	r25, Y+51	; 0x33
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	f1 f7       	brne	.-4      	; 0x26aa <LCD_write_command_4bit+0x40c>
    26ae:	9b ab       	std	Y+51, r25	; 0x33
    26b0:	8a ab       	std	Y+50, r24	; 0x32
    26b2:	18 c0       	rjmp	.+48     	; 0x26e4 <LCD_write_command_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26b4:	fe 01       	movw	r30, r28
    26b6:	ef 5b       	subi	r30, 0xBF	; 191
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	60 81       	ld	r22, Z
    26bc:	71 81       	ldd	r23, Z+1	; 0x01
    26be:	82 81       	ldd	r24, Z+2	; 0x02
    26c0:	93 81       	ldd	r25, Z+3	; 0x03
    26c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	fe 01       	movw	r30, r28
    26cc:	e0 5c       	subi	r30, 0xC0	; 192
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	80 83       	st	Z, r24
    26d2:	fe 01       	movw	r30, r28
    26d4:	e0 5c       	subi	r30, 0xC0	; 192
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	80 81       	ld	r24, Z
    26da:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26dc:	89 a9       	ldd	r24, Y+49	; 0x31
    26de:	8a 95       	dec	r24
    26e0:	f1 f7       	brne	.-4      	; 0x26de <LCD_write_command_4bit+0x440>
    26e2:	89 ab       	std	Y+49, r24	; 0x31
	 *  any change in this sequence will result in a wrong behavior
	 *  i will try to make it more generic in the next versions
	 *
	 */

	for(u8 i = 4; i < 8; i++){
    26e4:	fe 01       	movw	r30, r28
    26e6:	ee 59       	subi	r30, 0x9E	; 158
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	84 e0       	ldi	r24, 0x04	; 4
    26ec:	80 83       	st	Z, r24
    26ee:	26 c0       	rjmp	.+76     	; 0x273c <LCD_write_command_4bit+0x49e>

		DIO_void_assign_pin(lcd_data_port, i, get_Bit(copy_command_4bit,i));
    26f0:	fe 01       	movw	r30, r28
    26f2:	ed 59       	subi	r30, 0x9D	; 157
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	80 81       	ld	r24, Z
    26f8:	28 2f       	mov	r18, r24
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	fe 01       	movw	r30, r28
    26fe:	ee 59       	subi	r30, 0x9E	; 158
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	80 81       	ld	r24, Z
    2704:	88 2f       	mov	r24, r24
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	a9 01       	movw	r20, r18
    270a:	02 c0       	rjmp	.+4      	; 0x2710 <LCD_write_command_4bit+0x472>
    270c:	55 95       	asr	r21
    270e:	47 95       	ror	r20
    2710:	8a 95       	dec	r24
    2712:	e2 f7       	brpl	.-8      	; 0x270c <LCD_write_command_4bit+0x46e>
    2714:	ca 01       	movw	r24, r20
    2716:	98 2f       	mov	r25, r24
    2718:	91 70       	andi	r25, 0x01	; 1
    271a:	fe 01       	movw	r30, r28
    271c:	ee 59       	subi	r30, 0x9E	; 158
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	60 81       	ld	r22, Z
    2724:	49 2f       	mov	r20, r25
    2726:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_void_assign_pin>
	 *  any change in this sequence will result in a wrong behavior
	 *  i will try to make it more generic in the next versions
	 *
	 */

	for(u8 i = 4; i < 8; i++){
    272a:	de 01       	movw	r26, r28
    272c:	ae 59       	subi	r26, 0x9E	; 158
    272e:	bf 4f       	sbci	r27, 0xFF	; 255
    2730:	fe 01       	movw	r30, r28
    2732:	ee 59       	subi	r30, 0x9E	; 158
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	80 81       	ld	r24, Z
    2738:	8f 5f       	subi	r24, 0xFF	; 255
    273a:	8c 93       	st	X, r24
    273c:	fe 01       	movw	r30, r28
    273e:	ee 59       	subi	r30, 0x9E	; 158
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	80 81       	ld	r24, Z
    2744:	88 30       	cpi	r24, 0x08	; 8
    2746:	a0 f2       	brcs	.-88     	; 0x26f0 <LCD_write_command_4bit+0x452>
		// the for loop assigns the data value in the function input
		// by starting by the most significant 4 bits b4-b7

	}
	// set enable to low to send the lower nibble
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	60 e0       	ldi	r22, 0x00	; 0
    274c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_void_clear_pin>
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	a0 e2       	ldi	r26, 0x20	; 32
    2756:	b1 e4       	ldi	r27, 0x41	; 65
    2758:	8d a7       	std	Y+45, r24	; 0x2d
    275a:	9e a7       	std	Y+46, r25	; 0x2e
    275c:	af a7       	std	Y+47, r26	; 0x2f
    275e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2760:	6d a5       	ldd	r22, Y+45	; 0x2d
    2762:	7e a5       	ldd	r23, Y+46	; 0x2e
    2764:	8f a5       	ldd	r24, Y+47	; 0x2f
    2766:	98 a9       	ldd	r25, Y+48	; 0x30
    2768:	2b ea       	ldi	r18, 0xAB	; 171
    276a:	3a ea       	ldi	r19, 0xAA	; 170
    276c:	4a e2       	ldi	r20, 0x2A	; 42
    276e:	50 e4       	ldi	r21, 0x40	; 64
    2770:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	89 a7       	std	Y+41, r24	; 0x29
    277a:	9a a7       	std	Y+42, r25	; 0x2a
    277c:	ab a7       	std	Y+43, r26	; 0x2b
    277e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2780:	69 a5       	ldd	r22, Y+41	; 0x29
    2782:	7a a5       	ldd	r23, Y+42	; 0x2a
    2784:	8b a5       	ldd	r24, Y+43	; 0x2b
    2786:	9c a5       	ldd	r25, Y+44	; 0x2c
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e8       	ldi	r20, 0x80	; 128
    278e:	5f e3       	ldi	r21, 0x3F	; 63
    2790:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2794:	88 23       	and	r24, r24
    2796:	1c f4       	brge	.+6      	; 0x279e <LCD_write_command_4bit+0x500>
		__ticks = 1;
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	88 a7       	std	Y+40, r24	; 0x28
    279c:	91 c0       	rjmp	.+290    	; 0x28c0 <LCD_write_command_4bit+0x622>
	else if (__tmp > 255)
    279e:	69 a5       	ldd	r22, Y+41	; 0x29
    27a0:	7a a5       	ldd	r23, Y+42	; 0x2a
    27a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    27a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	4f e7       	ldi	r20, 0x7F	; 127
    27ac:	53 e4       	ldi	r21, 0x43	; 67
    27ae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27b2:	18 16       	cp	r1, r24
    27b4:	0c f0       	brlt	.+2      	; 0x27b8 <LCD_write_command_4bit+0x51a>
    27b6:	7b c0       	rjmp	.+246    	; 0x28ae <LCD_write_command_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    27b8:	6d a5       	ldd	r22, Y+45	; 0x2d
    27ba:	7e a5       	ldd	r23, Y+46	; 0x2e
    27bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    27be:	98 a9       	ldd	r25, Y+48	; 0x30
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	4a e7       	ldi	r20, 0x7A	; 122
    27c6:	54 e4       	ldi	r21, 0x44	; 68
    27c8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	8c a3       	std	Y+36, r24	; 0x24
    27d2:	9d a3       	std	Y+37, r25	; 0x25
    27d4:	ae a3       	std	Y+38, r26	; 0x26
    27d6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d8:	6c a1       	ldd	r22, Y+36	; 0x24
    27da:	7d a1       	ldd	r23, Y+37	; 0x25
    27dc:	8e a1       	ldd	r24, Y+38	; 0x26
    27de:	9f a1       	ldd	r25, Y+39	; 0x27
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	4a ef       	ldi	r20, 0xFA	; 250
    27e6:	54 e4       	ldi	r21, 0x44	; 68
    27e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	88 a3       	std	Y+32, r24	; 0x20
    27f2:	99 a3       	std	Y+33, r25	; 0x21
    27f4:	aa a3       	std	Y+34, r26	; 0x22
    27f6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    27f8:	68 a1       	ldd	r22, Y+32	; 0x20
    27fa:	79 a1       	ldd	r23, Y+33	; 0x21
    27fc:	8a a1       	ldd	r24, Y+34	; 0x22
    27fe:	9b a1       	ldd	r25, Y+35	; 0x23
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e8       	ldi	r20, 0x80	; 128
    2806:	5f e3       	ldi	r21, 0x3F	; 63
    2808:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    280c:	88 23       	and	r24, r24
    280e:	2c f4       	brge	.+10     	; 0x281a <LCD_write_command_4bit+0x57c>
		__ticks = 1;
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	9f 8f       	std	Y+31, r25	; 0x1f
    2816:	8e 8f       	std	Y+30, r24	; 0x1e
    2818:	3f c0       	rjmp	.+126    	; 0x2898 <LCD_write_command_4bit+0x5fa>
	else if (__tmp > 65535)
    281a:	68 a1       	ldd	r22, Y+32	; 0x20
    281c:	79 a1       	ldd	r23, Y+33	; 0x21
    281e:	8a a1       	ldd	r24, Y+34	; 0x22
    2820:	9b a1       	ldd	r25, Y+35	; 0x23
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	3f ef       	ldi	r19, 0xFF	; 255
    2826:	4f e7       	ldi	r20, 0x7F	; 127
    2828:	57 e4       	ldi	r21, 0x47	; 71
    282a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    282e:	18 16       	cp	r1, r24
    2830:	4c f5       	brge	.+82     	; 0x2884 <LCD_write_command_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2832:	6c a1       	ldd	r22, Y+36	; 0x24
    2834:	7d a1       	ldd	r23, Y+37	; 0x25
    2836:	8e a1       	ldd	r24, Y+38	; 0x26
    2838:	9f a1       	ldd	r25, Y+39	; 0x27
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	40 e2       	ldi	r20, 0x20	; 32
    2840:	51 e4       	ldi	r21, 0x41	; 65
    2842:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	bc 01       	movw	r22, r24
    284c:	cd 01       	movw	r24, r26
    284e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	9f 8f       	std	Y+31, r25	; 0x1f
    2858:	8e 8f       	std	Y+30, r24	; 0x1e
    285a:	0f c0       	rjmp	.+30     	; 0x287a <LCD_write_command_4bit+0x5dc>
    285c:	88 ec       	ldi	r24, 0xC8	; 200
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	9d 8f       	std	Y+29, r25	; 0x1d
    2862:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2864:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2866:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	f1 f7       	brne	.-4      	; 0x2868 <LCD_write_command_4bit+0x5ca>
    286c:	9d 8f       	std	Y+29, r25	; 0x1d
    286e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2870:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2872:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2874:	01 97       	sbiw	r24, 0x01	; 1
    2876:	9f 8f       	std	Y+31, r25	; 0x1f
    2878:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    287a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    287c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    287e:	00 97       	sbiw	r24, 0x00	; 0
    2880:	69 f7       	brne	.-38     	; 0x285c <LCD_write_command_4bit+0x5be>
    2882:	24 c0       	rjmp	.+72     	; 0x28cc <LCD_write_command_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2884:	68 a1       	ldd	r22, Y+32	; 0x20
    2886:	79 a1       	ldd	r23, Y+33	; 0x21
    2888:	8a a1       	ldd	r24, Y+34	; 0x22
    288a:	9b a1       	ldd	r25, Y+35	; 0x23
    288c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	9f 8f       	std	Y+31, r25	; 0x1f
    2896:	8e 8f       	std	Y+30, r24	; 0x1e
    2898:	8e 8d       	ldd	r24, Y+30	; 0x1e
    289a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    289c:	9b 8f       	std	Y+27, r25	; 0x1b
    289e:	8a 8f       	std	Y+26, r24	; 0x1a
    28a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28a2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	f1 f7       	brne	.-4      	; 0x28a4 <LCD_write_command_4bit+0x606>
    28a8:	9b 8f       	std	Y+27, r25	; 0x1b
    28aa:	8a 8f       	std	Y+26, r24	; 0x1a
    28ac:	0f c0       	rjmp	.+30     	; 0x28cc <LCD_write_command_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28ae:	69 a5       	ldd	r22, Y+41	; 0x29
    28b0:	7a a5       	ldd	r23, Y+42	; 0x2a
    28b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    28b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    28b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	88 a7       	std	Y+40, r24	; 0x28
    28c0:	88 a5       	ldd	r24, Y+40	; 0x28
    28c2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28c4:	89 8d       	ldd	r24, Y+25	; 0x19
    28c6:	8a 95       	dec	r24
    28c8:	f1 f7       	brne	.-4      	; 0x28c6 <LCD_write_command_4bit+0x628>
    28ca:	89 8f       	std	Y+25, r24	; 0x19
	//delay to smooth things out
	_delay_us(10);
	//enable HIGH
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	60 e0       	ldi	r22, 0x00	; 0
    28d0:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_void_set_pin>
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	a0 e8       	ldi	r26, 0x80	; 128
    28da:	bf e3       	ldi	r27, 0x3F	; 63
    28dc:	8d 8b       	std	Y+21, r24	; 0x15
    28de:	9e 8b       	std	Y+22, r25	; 0x16
    28e0:	af 8b       	std	Y+23, r26	; 0x17
    28e2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28e4:	6d 89       	ldd	r22, Y+21	; 0x15
    28e6:	7e 89       	ldd	r23, Y+22	; 0x16
    28e8:	8f 89       	ldd	r24, Y+23	; 0x17
    28ea:	98 8d       	ldd	r25, Y+24	; 0x18
    28ec:	2b ea       	ldi	r18, 0xAB	; 171
    28ee:	3a ea       	ldi	r19, 0xAA	; 170
    28f0:	4a e2       	ldi	r20, 0x2A	; 42
    28f2:	50 e4       	ldi	r21, 0x40	; 64
    28f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	89 8b       	std	Y+17, r24	; 0x11
    28fe:	9a 8b       	std	Y+18, r25	; 0x12
    2900:	ab 8b       	std	Y+19, r26	; 0x13
    2902:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2904:	69 89       	ldd	r22, Y+17	; 0x11
    2906:	7a 89       	ldd	r23, Y+18	; 0x12
    2908:	8b 89       	ldd	r24, Y+19	; 0x13
    290a:	9c 89       	ldd	r25, Y+20	; 0x14
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e8       	ldi	r20, 0x80	; 128
    2912:	5f e3       	ldi	r21, 0x3F	; 63
    2914:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2918:	88 23       	and	r24, r24
    291a:	1c f4       	brge	.+6      	; 0x2922 <LCD_write_command_4bit+0x684>
		__ticks = 1;
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	88 8b       	std	Y+16, r24	; 0x10
    2920:	91 c0       	rjmp	.+290    	; 0x2a44 <LCD_write_command_4bit+0x7a6>
	else if (__tmp > 255)
    2922:	69 89       	ldd	r22, Y+17	; 0x11
    2924:	7a 89       	ldd	r23, Y+18	; 0x12
    2926:	8b 89       	ldd	r24, Y+19	; 0x13
    2928:	9c 89       	ldd	r25, Y+20	; 0x14
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	4f e7       	ldi	r20, 0x7F	; 127
    2930:	53 e4       	ldi	r21, 0x43	; 67
    2932:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2936:	18 16       	cp	r1, r24
    2938:	0c f0       	brlt	.+2      	; 0x293c <LCD_write_command_4bit+0x69e>
    293a:	7b c0       	rjmp	.+246    	; 0x2a32 <LCD_write_command_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    293c:	6d 89       	ldd	r22, Y+21	; 0x15
    293e:	7e 89       	ldd	r23, Y+22	; 0x16
    2940:	8f 89       	ldd	r24, Y+23	; 0x17
    2942:	98 8d       	ldd	r25, Y+24	; 0x18
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	4a e7       	ldi	r20, 0x7A	; 122
    294a:	54 e4       	ldi	r21, 0x44	; 68
    294c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	8c 87       	std	Y+12, r24	; 0x0c
    2956:	9d 87       	std	Y+13, r25	; 0x0d
    2958:	ae 87       	std	Y+14, r26	; 0x0e
    295a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295c:	6c 85       	ldd	r22, Y+12	; 0x0c
    295e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2960:	8e 85       	ldd	r24, Y+14	; 0x0e
    2962:	9f 85       	ldd	r25, Y+15	; 0x0f
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	4a ef       	ldi	r20, 0xFA	; 250
    296a:	54 e4       	ldi	r21, 0x44	; 68
    296c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	88 87       	std	Y+8, r24	; 0x08
    2976:	99 87       	std	Y+9, r25	; 0x09
    2978:	aa 87       	std	Y+10, r26	; 0x0a
    297a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    297c:	68 85       	ldd	r22, Y+8	; 0x08
    297e:	79 85       	ldd	r23, Y+9	; 0x09
    2980:	8a 85       	ldd	r24, Y+10	; 0x0a
    2982:	9b 85       	ldd	r25, Y+11	; 0x0b
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	40 e8       	ldi	r20, 0x80	; 128
    298a:	5f e3       	ldi	r21, 0x3F	; 63
    298c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2990:	88 23       	and	r24, r24
    2992:	2c f4       	brge	.+10     	; 0x299e <LCD_write_command_4bit+0x700>
		__ticks = 1;
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	9f 83       	std	Y+7, r25	; 0x07
    299a:	8e 83       	std	Y+6, r24	; 0x06
    299c:	3f c0       	rjmp	.+126    	; 0x2a1c <LCD_write_command_4bit+0x77e>
	else if (__tmp > 65535)
    299e:	68 85       	ldd	r22, Y+8	; 0x08
    29a0:	79 85       	ldd	r23, Y+9	; 0x09
    29a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    29a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	3f ef       	ldi	r19, 0xFF	; 255
    29aa:	4f e7       	ldi	r20, 0x7F	; 127
    29ac:	57 e4       	ldi	r21, 0x47	; 71
    29ae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    29b2:	18 16       	cp	r1, r24
    29b4:	4c f5       	brge	.+82     	; 0x2a08 <LCD_write_command_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b6:	6c 85       	ldd	r22, Y+12	; 0x0c
    29b8:	7d 85       	ldd	r23, Y+13	; 0x0d
    29ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    29bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	40 e2       	ldi	r20, 0x20	; 32
    29c4:	51 e4       	ldi	r21, 0x41	; 65
    29c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	bc 01       	movw	r22, r24
    29d0:	cd 01       	movw	r24, r26
    29d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	9f 83       	std	Y+7, r25	; 0x07
    29dc:	8e 83       	std	Y+6, r24	; 0x06
    29de:	0f c0       	rjmp	.+30     	; 0x29fe <LCD_write_command_4bit+0x760>
    29e0:	88 ec       	ldi	r24, 0xC8	; 200
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	9d 83       	std	Y+5, r25	; 0x05
    29e6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29e8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ea:	9d 81       	ldd	r25, Y+5	; 0x05
    29ec:	01 97       	sbiw	r24, 0x01	; 1
    29ee:	f1 f7       	brne	.-4      	; 0x29ec <LCD_write_command_4bit+0x74e>
    29f0:	9d 83       	std	Y+5, r25	; 0x05
    29f2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f4:	8e 81       	ldd	r24, Y+6	; 0x06
    29f6:	9f 81       	ldd	r25, Y+7	; 0x07
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	9f 83       	std	Y+7, r25	; 0x07
    29fc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2a00:	9f 81       	ldd	r25, Y+7	; 0x07
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	69 f7       	brne	.-38     	; 0x29e0 <LCD_write_command_4bit+0x742>
    2a06:	24 c0       	rjmp	.+72     	; 0x2a50 <LCD_write_command_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a08:	68 85       	ldd	r22, Y+8	; 0x08
    2a0a:	79 85       	ldd	r23, Y+9	; 0x09
    2a0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	9f 83       	std	Y+7, r25	; 0x07
    2a1a:	8e 83       	std	Y+6, r24	; 0x06
    2a1c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a1e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a20:	9b 83       	std	Y+3, r25	; 0x03
    2a22:	8a 83       	std	Y+2, r24	; 0x02
    2a24:	8a 81       	ldd	r24, Y+2	; 0x02
    2a26:	9b 81       	ldd	r25, Y+3	; 0x03
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	f1 f7       	brne	.-4      	; 0x2a28 <LCD_write_command_4bit+0x78a>
    2a2c:	9b 83       	std	Y+3, r25	; 0x03
    2a2e:	8a 83       	std	Y+2, r24	; 0x02
    2a30:	0f c0       	rjmp	.+30     	; 0x2a50 <LCD_write_command_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a32:	69 89       	ldd	r22, Y+17	; 0x11
    2a34:	7a 89       	ldd	r23, Y+18	; 0x12
    2a36:	8b 89       	ldd	r24, Y+19	; 0x13
    2a38:	9c 89       	ldd	r25, Y+20	; 0x14
    2a3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	88 8b       	std	Y+16, r24	; 0x10
    2a44:	88 89       	ldd	r24, Y+16	; 0x10
    2a46:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	8a 95       	dec	r24
    2a4c:	f1 f7       	brne	.-4      	; 0x2a4a <LCD_write_command_4bit+0x7ac>
    2a4e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	//send lower nibble
	for(u8 i = 4; i < 8; i++){
    2a50:	fe 01       	movw	r30, r28
    2a52:	ef 59       	subi	r30, 0x9F	; 159
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	84 e0       	ldi	r24, 0x04	; 4
    2a58:	80 83       	st	Z, r24
    2a5a:	27 c0       	rjmp	.+78     	; 0x2aaa <LCD_write_command_4bit+0x80c>

			DIO_void_assign_pin(lcd_data_port, i, get_Bit(copy_command_4bit,i-4));
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	ed 59       	subi	r30, 0x9D	; 157
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	80 81       	ld	r24, Z
    2a64:	28 2f       	mov	r18, r24
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	fe 01       	movw	r30, r28
    2a6a:	ef 59       	subi	r30, 0x9F	; 159
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	80 81       	ld	r24, Z
    2a70:	88 2f       	mov	r24, r24
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	04 97       	sbiw	r24, 0x04	; 4
    2a76:	f9 01       	movw	r30, r18
    2a78:	02 c0       	rjmp	.+4      	; 0x2a7e <LCD_write_command_4bit+0x7e0>
    2a7a:	f5 95       	asr	r31
    2a7c:	e7 95       	ror	r30
    2a7e:	8a 95       	dec	r24
    2a80:	e2 f7       	brpl	.-8      	; 0x2a7a <LCD_write_command_4bit+0x7dc>
    2a82:	cf 01       	movw	r24, r30
    2a84:	98 2f       	mov	r25, r24
    2a86:	91 70       	andi	r25, 0x01	; 1
    2a88:	fe 01       	movw	r30, r28
    2a8a:	ef 59       	subi	r30, 0x9F	; 159
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	60 81       	ld	r22, Z
    2a92:	49 2f       	mov	r20, r25
    2a94:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_void_assign_pin>
	_delay_us(10);
	//enable HIGH
	DIO_void_set_pin(lcd_control_port, lcd_enable);
	_delay_us(1);
	//send lower nibble
	for(u8 i = 4; i < 8; i++){
    2a98:	de 01       	movw	r26, r28
    2a9a:	af 59       	subi	r26, 0x9F	; 159
    2a9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	ef 59       	subi	r30, 0x9F	; 159
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	80 81       	ld	r24, Z
    2aa6:	8f 5f       	subi	r24, 0xFF	; 255
    2aa8:	8c 93       	st	X, r24
    2aaa:	fe 01       	movw	r30, r28
    2aac:	ef 59       	subi	r30, 0x9F	; 159
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	80 81       	ld	r24, Z
    2ab2:	88 30       	cpi	r24, 0x08	; 8
    2ab4:	98 f2       	brcs	.-90     	; 0x2a5c <LCD_write_command_4bit+0x7be>
			// the for loop assigns the data value in the function input
			// by starting by the least significant 4 bits b0-b3

		}
	//enable low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	60 e0       	ldi	r22, 0x00	; 0
    2aba:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_void_clear_pin>


}
    2abe:	cd 59       	subi	r28, 0x9D	; 157
    2ac0:	df 4f       	sbci	r29, 0xFF	; 255
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	f8 94       	cli
    2ac6:	de bf       	out	0x3e, r29	; 62
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	cd bf       	out	0x3d, r28	; 61
    2acc:	cf 91       	pop	r28
    2ace:	df 91       	pop	r29
    2ad0:	1f 91       	pop	r17
    2ad2:	0f 91       	pop	r16
    2ad4:	08 95       	ret

00002ad6 <LCD_function_Set_4bit>:

static void LCD_function_Set_4bit(){
    2ad6:	0f 93       	push	r16
    2ad8:	1f 93       	push	r17
    2ada:	df 93       	push	r29
    2adc:	cf 93       	push	r28
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
    2ae2:	cb 5a       	subi	r28, 0xAB	; 171
    2ae4:	d0 40       	sbci	r29, 0x00	; 0
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	f8 94       	cli
    2aea:	de bf       	out	0x3e, r29	; 62
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	cd bf       	out	0x3d, r28	; 61
			 *
			 */



	DIO_void_clear_pin(lcd_control_port, lcd_RS);// RS:0 to select instruction register
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	62 e0       	ldi	r22, 0x02	; 2
    2af4:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_control_port, lcd_RW);// RW:0 write operation
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	61 e0       	ldi	r22, 0x01	; 1
    2afc:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_void_clear_pin>
    2b00:	fe 01       	movw	r30, r28
    2b02:	eb 55       	subi	r30, 0x5B	; 91
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	a0 e8       	ldi	r26, 0x80	; 128
    2b0c:	bf e3       	ldi	r27, 0x3F	; 63
    2b0e:	80 83       	st	Z, r24
    2b10:	91 83       	std	Z+1, r25	; 0x01
    2b12:	a2 83       	std	Z+2, r26	; 0x02
    2b14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b16:	8e 01       	movw	r16, r28
    2b18:	0f 55       	subi	r16, 0x5F	; 95
    2b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	eb 55       	subi	r30, 0x5B	; 91
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	60 81       	ld	r22, Z
    2b24:	71 81       	ldd	r23, Z+1	; 0x01
    2b26:	82 81       	ldd	r24, Z+2	; 0x02
    2b28:	93 81       	ldd	r25, Z+3	; 0x03
    2b2a:	2b ea       	ldi	r18, 0xAB	; 171
    2b2c:	3a ea       	ldi	r19, 0xAA	; 170
    2b2e:	4a e2       	ldi	r20, 0x2A	; 42
    2b30:	50 e4       	ldi	r21, 0x40	; 64
    2b32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	f8 01       	movw	r30, r16
    2b3c:	80 83       	st	Z, r24
    2b3e:	91 83       	std	Z+1, r25	; 0x01
    2b40:	a2 83       	std	Z+2, r26	; 0x02
    2b42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b44:	fe 01       	movw	r30, r28
    2b46:	ef 55       	subi	r30, 0x5F	; 95
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	60 81       	ld	r22, Z
    2b4c:	71 81       	ldd	r23, Z+1	; 0x01
    2b4e:	82 81       	ldd	r24, Z+2	; 0x02
    2b50:	93 81       	ldd	r25, Z+3	; 0x03
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e8       	ldi	r20, 0x80	; 128
    2b58:	5f e3       	ldi	r21, 0x3F	; 63
    2b5a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b5e:	88 23       	and	r24, r24
    2b60:	34 f4       	brge	.+12     	; 0x2b6e <LCD_function_Set_4bit+0x98>
		__ticks = 1;
    2b62:	fe 01       	movw	r30, r28
    2b64:	e0 56       	subi	r30, 0x60	; 96
    2b66:	ff 4f       	sbci	r31, 0xFF	; 255
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	80 83       	st	Z, r24
    2b6c:	e0 c0       	rjmp	.+448    	; 0x2d2e <LCD_function_Set_4bit+0x258>
	else if (__tmp > 255)
    2b6e:	fe 01       	movw	r30, r28
    2b70:	ef 55       	subi	r30, 0x5F	; 95
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	60 81       	ld	r22, Z
    2b76:	71 81       	ldd	r23, Z+1	; 0x01
    2b78:	82 81       	ldd	r24, Z+2	; 0x02
    2b7a:	93 81       	ldd	r25, Z+3	; 0x03
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	4f e7       	ldi	r20, 0x7F	; 127
    2b82:	53 e4       	ldi	r21, 0x43	; 67
    2b84:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b88:	18 16       	cp	r1, r24
    2b8a:	0c f0       	brlt	.+2      	; 0x2b8e <LCD_function_Set_4bit+0xb8>
    2b8c:	c0 c0       	rjmp	.+384    	; 0x2d0e <LCD_function_Set_4bit+0x238>
	{
		_delay_ms(__us / 1000.0);
    2b8e:	fe 01       	movw	r30, r28
    2b90:	eb 55       	subi	r30, 0x5B	; 91
    2b92:	ff 4f       	sbci	r31, 0xFF	; 255
    2b94:	60 81       	ld	r22, Z
    2b96:	71 81       	ldd	r23, Z+1	; 0x01
    2b98:	82 81       	ldd	r24, Z+2	; 0x02
    2b9a:	93 81       	ldd	r25, Z+3	; 0x03
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	4a e7       	ldi	r20, 0x7A	; 122
    2ba2:	54 e4       	ldi	r21, 0x44	; 68
    2ba4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	fe 01       	movw	r30, r28
    2bae:	e4 56       	subi	r30, 0x64	; 100
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	80 83       	st	Z, r24
    2bb4:	91 83       	std	Z+1, r25	; 0x01
    2bb6:	a2 83       	std	Z+2, r26	; 0x02
    2bb8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bba:	8e 01       	movw	r16, r28
    2bbc:	08 56       	subi	r16, 0x68	; 104
    2bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	e4 56       	subi	r30, 0x64	; 100
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	60 81       	ld	r22, Z
    2bc8:	71 81       	ldd	r23, Z+1	; 0x01
    2bca:	82 81       	ldd	r24, Z+2	; 0x02
    2bcc:	93 81       	ldd	r25, Z+3	; 0x03
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	4a ef       	ldi	r20, 0xFA	; 250
    2bd4:	54 e4       	ldi	r21, 0x44	; 68
    2bd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	f8 01       	movw	r30, r16
    2be0:	80 83       	st	Z, r24
    2be2:	91 83       	std	Z+1, r25	; 0x01
    2be4:	a2 83       	std	Z+2, r26	; 0x02
    2be6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2be8:	fe 01       	movw	r30, r28
    2bea:	e8 56       	subi	r30, 0x68	; 104
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	60 81       	ld	r22, Z
    2bf0:	71 81       	ldd	r23, Z+1	; 0x01
    2bf2:	82 81       	ldd	r24, Z+2	; 0x02
    2bf4:	93 81       	ldd	r25, Z+3	; 0x03
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	40 e8       	ldi	r20, 0x80	; 128
    2bfc:	5f e3       	ldi	r21, 0x3F	; 63
    2bfe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c02:	88 23       	and	r24, r24
    2c04:	44 f4       	brge	.+16     	; 0x2c16 <LCD_function_Set_4bit+0x140>
		__ticks = 1;
    2c06:	fe 01       	movw	r30, r28
    2c08:	ea 56       	subi	r30, 0x6A	; 106
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	91 83       	std	Z+1, r25	; 0x01
    2c12:	80 83       	st	Z, r24
    2c14:	64 c0       	rjmp	.+200    	; 0x2cde <LCD_function_Set_4bit+0x208>
	else if (__tmp > 65535)
    2c16:	fe 01       	movw	r30, r28
    2c18:	e8 56       	subi	r30, 0x68	; 104
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	60 81       	ld	r22, Z
    2c1e:	71 81       	ldd	r23, Z+1	; 0x01
    2c20:	82 81       	ldd	r24, Z+2	; 0x02
    2c22:	93 81       	ldd	r25, Z+3	; 0x03
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	3f ef       	ldi	r19, 0xFF	; 255
    2c28:	4f e7       	ldi	r20, 0x7F	; 127
    2c2a:	57 e4       	ldi	r21, 0x47	; 71
    2c2c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c30:	18 16       	cp	r1, r24
    2c32:	0c f0       	brlt	.+2      	; 0x2c36 <LCD_function_Set_4bit+0x160>
    2c34:	43 c0       	rjmp	.+134    	; 0x2cbc <LCD_function_Set_4bit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c36:	fe 01       	movw	r30, r28
    2c38:	e4 56       	subi	r30, 0x64	; 100
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	60 81       	ld	r22, Z
    2c3e:	71 81       	ldd	r23, Z+1	; 0x01
    2c40:	82 81       	ldd	r24, Z+2	; 0x02
    2c42:	93 81       	ldd	r25, Z+3	; 0x03
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 e2       	ldi	r20, 0x20	; 32
    2c4a:	51 e4       	ldi	r21, 0x41	; 65
    2c4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	8e 01       	movw	r16, r28
    2c56:	0a 56       	subi	r16, 0x6A	; 106
    2c58:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5a:	bc 01       	movw	r22, r24
    2c5c:	cd 01       	movw	r24, r26
    2c5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	f8 01       	movw	r30, r16
    2c68:	91 83       	std	Z+1, r25	; 0x01
    2c6a:	80 83       	st	Z, r24
    2c6c:	1f c0       	rjmp	.+62     	; 0x2cac <LCD_function_Set_4bit+0x1d6>
    2c6e:	fe 01       	movw	r30, r28
    2c70:	ec 56       	subi	r30, 0x6C	; 108
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	88 ec       	ldi	r24, 0xC8	; 200
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	91 83       	std	Z+1, r25	; 0x01
    2c7a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	ec 56       	subi	r30, 0x6C	; 108
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	80 81       	ld	r24, Z
    2c84:	91 81       	ldd	r25, Z+1	; 0x01
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	f1 f7       	brne	.-4      	; 0x2c86 <LCD_function_Set_4bit+0x1b0>
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	ec 56       	subi	r30, 0x6C	; 108
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	91 83       	std	Z+1, r25	; 0x01
    2c92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c94:	de 01       	movw	r26, r28
    2c96:	aa 56       	subi	r26, 0x6A	; 106
    2c98:	bf 4f       	sbci	r27, 0xFF	; 255
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	ea 56       	subi	r30, 0x6A	; 106
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	80 81       	ld	r24, Z
    2ca2:	91 81       	ldd	r25, Z+1	; 0x01
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	11 96       	adiw	r26, 0x01	; 1
    2ca8:	9c 93       	st	X, r25
    2caa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cac:	fe 01       	movw	r30, r28
    2cae:	ea 56       	subi	r30, 0x6A	; 106
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	80 81       	ld	r24, Z
    2cb4:	91 81       	ldd	r25, Z+1	; 0x01
    2cb6:	00 97       	sbiw	r24, 0x00	; 0
    2cb8:	d1 f6       	brne	.-76     	; 0x2c6e <LCD_function_Set_4bit+0x198>
    2cba:	4b c0       	rjmp	.+150    	; 0x2d52 <LCD_function_Set_4bit+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cbc:	8e 01       	movw	r16, r28
    2cbe:	0a 56       	subi	r16, 0x6A	; 106
    2cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e8 56       	subi	r30, 0x68	; 104
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	60 81       	ld	r22, Z
    2cca:	71 81       	ldd	r23, Z+1	; 0x01
    2ccc:	82 81       	ldd	r24, Z+2	; 0x02
    2cce:	93 81       	ldd	r25, Z+3	; 0x03
    2cd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	f8 01       	movw	r30, r16
    2cda:	91 83       	std	Z+1, r25	; 0x01
    2cdc:	80 83       	st	Z, r24
    2cde:	de 01       	movw	r26, r28
    2ce0:	ae 56       	subi	r26, 0x6E	; 110
    2ce2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	ea 56       	subi	r30, 0x6A	; 106
    2ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cea:	80 81       	ld	r24, Z
    2cec:	91 81       	ldd	r25, Z+1	; 0x01
    2cee:	11 96       	adiw	r26, 0x01	; 1
    2cf0:	9c 93       	st	X, r25
    2cf2:	8e 93       	st	-X, r24
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	ee 56       	subi	r30, 0x6E	; 110
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	80 81       	ld	r24, Z
    2cfc:	91 81       	ldd	r25, Z+1	; 0x01
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	f1 f7       	brne	.-4      	; 0x2cfe <LCD_function_Set_4bit+0x228>
    2d02:	fe 01       	movw	r30, r28
    2d04:	ee 56       	subi	r30, 0x6E	; 110
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	91 83       	std	Z+1, r25	; 0x01
    2d0a:	80 83       	st	Z, r24
    2d0c:	22 c0       	rjmp	.+68     	; 0x2d52 <LCD_function_Set_4bit+0x27c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d0e:	8e 01       	movw	r16, r28
    2d10:	00 56       	subi	r16, 0x60	; 96
    2d12:	1f 4f       	sbci	r17, 0xFF	; 255
    2d14:	fe 01       	movw	r30, r28
    2d16:	ef 55       	subi	r30, 0x5F	; 95
    2d18:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1a:	60 81       	ld	r22, Z
    2d1c:	71 81       	ldd	r23, Z+1	; 0x01
    2d1e:	82 81       	ldd	r24, Z+2	; 0x02
    2d20:	93 81       	ldd	r25, Z+3	; 0x03
    2d22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	f8 01       	movw	r30, r16
    2d2c:	80 83       	st	Z, r24
    2d2e:	de 01       	movw	r26, r28
    2d30:	af 56       	subi	r26, 0x6F	; 111
    2d32:	bf 4f       	sbci	r27, 0xFF	; 255
    2d34:	fe 01       	movw	r30, r28
    2d36:	e0 56       	subi	r30, 0x60	; 96
    2d38:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3a:	80 81       	ld	r24, Z
    2d3c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d3e:	fe 01       	movw	r30, r28
    2d40:	ef 56       	subi	r30, 0x6F	; 111
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	80 81       	ld	r24, Z
    2d46:	8a 95       	dec	r24
    2d48:	f1 f7       	brne	.-4      	; 0x2d46 <LCD_function_Set_4bit+0x270>
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	ef 56       	subi	r30, 0x6F	; 111
    2d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d50:	80 83       	st	Z, r24
	_delay_us(1);
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	60 e0       	ldi	r22, 0x00	; 0
    2d56:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_void_set_pin>
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	e3 57       	subi	r30, 0x73	; 115
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	a0 e8       	ldi	r26, 0x80	; 128
    2d66:	bf e3       	ldi	r27, 0x3F	; 63
    2d68:	80 83       	st	Z, r24
    2d6a:	91 83       	std	Z+1, r25	; 0x01
    2d6c:	a2 83       	std	Z+2, r26	; 0x02
    2d6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d70:	8e 01       	movw	r16, r28
    2d72:	07 57       	subi	r16, 0x77	; 119
    2d74:	1f 4f       	sbci	r17, 0xFF	; 255
    2d76:	fe 01       	movw	r30, r28
    2d78:	e3 57       	subi	r30, 0x73	; 115
    2d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7c:	60 81       	ld	r22, Z
    2d7e:	71 81       	ldd	r23, Z+1	; 0x01
    2d80:	82 81       	ldd	r24, Z+2	; 0x02
    2d82:	93 81       	ldd	r25, Z+3	; 0x03
    2d84:	2b ea       	ldi	r18, 0xAB	; 171
    2d86:	3a ea       	ldi	r19, 0xAA	; 170
    2d88:	4a e2       	ldi	r20, 0x2A	; 42
    2d8a:	50 e4       	ldi	r21, 0x40	; 64
    2d8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	f8 01       	movw	r30, r16
    2d96:	80 83       	st	Z, r24
    2d98:	91 83       	std	Z+1, r25	; 0x01
    2d9a:	a2 83       	std	Z+2, r26	; 0x02
    2d9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d9e:	fe 01       	movw	r30, r28
    2da0:	e7 57       	subi	r30, 0x77	; 119
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	60 81       	ld	r22, Z
    2da6:	71 81       	ldd	r23, Z+1	; 0x01
    2da8:	82 81       	ldd	r24, Z+2	; 0x02
    2daa:	93 81       	ldd	r25, Z+3	; 0x03
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	40 e8       	ldi	r20, 0x80	; 128
    2db2:	5f e3       	ldi	r21, 0x3F	; 63
    2db4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2db8:	88 23       	and	r24, r24
    2dba:	34 f4       	brge	.+12     	; 0x2dc8 <LCD_function_Set_4bit+0x2f2>
		__ticks = 1;
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	e8 57       	subi	r30, 0x78	; 120
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	80 83       	st	Z, r24
    2dc6:	e0 c0       	rjmp	.+448    	; 0x2f88 <LCD_function_Set_4bit+0x4b2>
	else if (__tmp > 255)
    2dc8:	fe 01       	movw	r30, r28
    2dca:	e7 57       	subi	r30, 0x77	; 119
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	60 81       	ld	r22, Z
    2dd0:	71 81       	ldd	r23, Z+1	; 0x01
    2dd2:	82 81       	ldd	r24, Z+2	; 0x02
    2dd4:	93 81       	ldd	r25, Z+3	; 0x03
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	4f e7       	ldi	r20, 0x7F	; 127
    2ddc:	53 e4       	ldi	r21, 0x43	; 67
    2dde:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2de2:	18 16       	cp	r1, r24
    2de4:	0c f0       	brlt	.+2      	; 0x2de8 <LCD_function_Set_4bit+0x312>
    2de6:	c0 c0       	rjmp	.+384    	; 0x2f68 <LCD_function_Set_4bit+0x492>
	{
		_delay_ms(__us / 1000.0);
    2de8:	fe 01       	movw	r30, r28
    2dea:	e3 57       	subi	r30, 0x73	; 115
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	60 81       	ld	r22, Z
    2df0:	71 81       	ldd	r23, Z+1	; 0x01
    2df2:	82 81       	ldd	r24, Z+2	; 0x02
    2df4:	93 81       	ldd	r25, Z+3	; 0x03
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	4a e7       	ldi	r20, 0x7A	; 122
    2dfc:	54 e4       	ldi	r21, 0x44	; 68
    2dfe:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	fe 01       	movw	r30, r28
    2e08:	ec 57       	subi	r30, 0x7C	; 124
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	80 83       	st	Z, r24
    2e0e:	91 83       	std	Z+1, r25	; 0x01
    2e10:	a2 83       	std	Z+2, r26	; 0x02
    2e12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e14:	8e 01       	movw	r16, r28
    2e16:	00 58       	subi	r16, 0x80	; 128
    2e18:	1f 4f       	sbci	r17, 0xFF	; 255
    2e1a:	fe 01       	movw	r30, r28
    2e1c:	ec 57       	subi	r30, 0x7C	; 124
    2e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e20:	60 81       	ld	r22, Z
    2e22:	71 81       	ldd	r23, Z+1	; 0x01
    2e24:	82 81       	ldd	r24, Z+2	; 0x02
    2e26:	93 81       	ldd	r25, Z+3	; 0x03
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	4a ef       	ldi	r20, 0xFA	; 250
    2e2e:	54 e4       	ldi	r21, 0x44	; 68
    2e30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	f8 01       	movw	r30, r16
    2e3a:	80 83       	st	Z, r24
    2e3c:	91 83       	std	Z+1, r25	; 0x01
    2e3e:	a2 83       	std	Z+2, r26	; 0x02
    2e40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e42:	fe 01       	movw	r30, r28
    2e44:	e0 58       	subi	r30, 0x80	; 128
    2e46:	ff 4f       	sbci	r31, 0xFF	; 255
    2e48:	60 81       	ld	r22, Z
    2e4a:	71 81       	ldd	r23, Z+1	; 0x01
    2e4c:	82 81       	ldd	r24, Z+2	; 0x02
    2e4e:	93 81       	ldd	r25, Z+3	; 0x03
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	40 e8       	ldi	r20, 0x80	; 128
    2e56:	5f e3       	ldi	r21, 0x3F	; 63
    2e58:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e5c:	88 23       	and	r24, r24
    2e5e:	44 f4       	brge	.+16     	; 0x2e70 <LCD_function_Set_4bit+0x39a>
		__ticks = 1;
    2e60:	fe 01       	movw	r30, r28
    2e62:	e2 58       	subi	r30, 0x82	; 130
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	91 83       	std	Z+1, r25	; 0x01
    2e6c:	80 83       	st	Z, r24
    2e6e:	64 c0       	rjmp	.+200    	; 0x2f38 <LCD_function_Set_4bit+0x462>
	else if (__tmp > 65535)
    2e70:	fe 01       	movw	r30, r28
    2e72:	e0 58       	subi	r30, 0x80	; 128
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	60 81       	ld	r22, Z
    2e78:	71 81       	ldd	r23, Z+1	; 0x01
    2e7a:	82 81       	ldd	r24, Z+2	; 0x02
    2e7c:	93 81       	ldd	r25, Z+3	; 0x03
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	3f ef       	ldi	r19, 0xFF	; 255
    2e82:	4f e7       	ldi	r20, 0x7F	; 127
    2e84:	57 e4       	ldi	r21, 0x47	; 71
    2e86:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2e8a:	18 16       	cp	r1, r24
    2e8c:	0c f0       	brlt	.+2      	; 0x2e90 <LCD_function_Set_4bit+0x3ba>
    2e8e:	43 c0       	rjmp	.+134    	; 0x2f16 <LCD_function_Set_4bit+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e90:	fe 01       	movw	r30, r28
    2e92:	ec 57       	subi	r30, 0x7C	; 124
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	60 81       	ld	r22, Z
    2e98:	71 81       	ldd	r23, Z+1	; 0x01
    2e9a:	82 81       	ldd	r24, Z+2	; 0x02
    2e9c:	93 81       	ldd	r25, Z+3	; 0x03
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e2       	ldi	r20, 0x20	; 32
    2ea4:	51 e4       	ldi	r21, 0x41	; 65
    2ea6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	8e 01       	movw	r16, r28
    2eb0:	02 58       	subi	r16, 0x82	; 130
    2eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb4:	bc 01       	movw	r22, r24
    2eb6:	cd 01       	movw	r24, r26
    2eb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	f8 01       	movw	r30, r16
    2ec2:	91 83       	std	Z+1, r25	; 0x01
    2ec4:	80 83       	st	Z, r24
    2ec6:	1f c0       	rjmp	.+62     	; 0x2f06 <LCD_function_Set_4bit+0x430>
    2ec8:	fe 01       	movw	r30, r28
    2eca:	e4 58       	subi	r30, 0x84	; 132
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	88 ec       	ldi	r24, 0xC8	; 200
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	91 83       	std	Z+1, r25	; 0x01
    2ed4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	e4 58       	subi	r30, 0x84	; 132
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	80 81       	ld	r24, Z
    2ede:	91 81       	ldd	r25, Z+1	; 0x01
    2ee0:	01 97       	sbiw	r24, 0x01	; 1
    2ee2:	f1 f7       	brne	.-4      	; 0x2ee0 <LCD_function_Set_4bit+0x40a>
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	e4 58       	subi	r30, 0x84	; 132
    2ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eea:	91 83       	std	Z+1, r25	; 0x01
    2eec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eee:	de 01       	movw	r26, r28
    2ef0:	a2 58       	subi	r26, 0x82	; 130
    2ef2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	e2 58       	subi	r30, 0x82	; 130
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	80 81       	ld	r24, Z
    2efc:	91 81       	ldd	r25, Z+1	; 0x01
    2efe:	01 97       	sbiw	r24, 0x01	; 1
    2f00:	11 96       	adiw	r26, 0x01	; 1
    2f02:	9c 93       	st	X, r25
    2f04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f06:	fe 01       	movw	r30, r28
    2f08:	e2 58       	subi	r30, 0x82	; 130
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	80 81       	ld	r24, Z
    2f0e:	91 81       	ldd	r25, Z+1	; 0x01
    2f10:	00 97       	sbiw	r24, 0x00	; 0
    2f12:	d1 f6       	brne	.-76     	; 0x2ec8 <LCD_function_Set_4bit+0x3f2>
    2f14:	4b c0       	rjmp	.+150    	; 0x2fac <LCD_function_Set_4bit+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f16:	8e 01       	movw	r16, r28
    2f18:	02 58       	subi	r16, 0x82	; 130
    2f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	e0 58       	subi	r30, 0x80	; 128
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	60 81       	ld	r22, Z
    2f24:	71 81       	ldd	r23, Z+1	; 0x01
    2f26:	82 81       	ldd	r24, Z+2	; 0x02
    2f28:	93 81       	ldd	r25, Z+3	; 0x03
    2f2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	f8 01       	movw	r30, r16
    2f34:	91 83       	std	Z+1, r25	; 0x01
    2f36:	80 83       	st	Z, r24
    2f38:	de 01       	movw	r26, r28
    2f3a:	a6 58       	subi	r26, 0x86	; 134
    2f3c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f3e:	fe 01       	movw	r30, r28
    2f40:	e2 58       	subi	r30, 0x82	; 130
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	80 81       	ld	r24, Z
    2f46:	91 81       	ldd	r25, Z+1	; 0x01
    2f48:	11 96       	adiw	r26, 0x01	; 1
    2f4a:	9c 93       	st	X, r25
    2f4c:	8e 93       	st	-X, r24
    2f4e:	fe 01       	movw	r30, r28
    2f50:	e6 58       	subi	r30, 0x86	; 134
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	80 81       	ld	r24, Z
    2f56:	91 81       	ldd	r25, Z+1	; 0x01
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	f1 f7       	brne	.-4      	; 0x2f58 <LCD_function_Set_4bit+0x482>
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	e6 58       	subi	r30, 0x86	; 134
    2f60:	ff 4f       	sbci	r31, 0xFF	; 255
    2f62:	91 83       	std	Z+1, r25	; 0x01
    2f64:	80 83       	st	Z, r24
    2f66:	22 c0       	rjmp	.+68     	; 0x2fac <LCD_function_Set_4bit+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f68:	8e 01       	movw	r16, r28
    2f6a:	08 57       	subi	r16, 0x78	; 120
    2f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f6e:	fe 01       	movw	r30, r28
    2f70:	e7 57       	subi	r30, 0x77	; 119
    2f72:	ff 4f       	sbci	r31, 0xFF	; 255
    2f74:	60 81       	ld	r22, Z
    2f76:	71 81       	ldd	r23, Z+1	; 0x01
    2f78:	82 81       	ldd	r24, Z+2	; 0x02
    2f7a:	93 81       	ldd	r25, Z+3	; 0x03
    2f7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f80:	dc 01       	movw	r26, r24
    2f82:	cb 01       	movw	r24, r22
    2f84:	f8 01       	movw	r30, r16
    2f86:	80 83       	st	Z, r24
    2f88:	de 01       	movw	r26, r28
    2f8a:	a7 58       	subi	r26, 0x87	; 135
    2f8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f8e:	fe 01       	movw	r30, r28
    2f90:	e8 57       	subi	r30, 0x78	; 120
    2f92:	ff 4f       	sbci	r31, 0xFF	; 255
    2f94:	80 81       	ld	r24, Z
    2f96:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f98:	fe 01       	movw	r30, r28
    2f9a:	e7 58       	subi	r30, 0x87	; 135
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	80 81       	ld	r24, Z
    2fa0:	8a 95       	dec	r24
    2fa2:	f1 f7       	brne	.-4      	; 0x2fa0 <LCD_function_Set_4bit+0x4ca>
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	e7 58       	subi	r30, 0x87	; 135
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	80 83       	st	Z, r24
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    2fac:	fe 01       	movw	r30, r28
    2fae:	e5 55       	subi	r30, 0x55	; 85
    2fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb2:	10 82       	st	Z, r1
    2fb4:	23 c0       	rjmp	.+70     	; 0x2ffc <LCD_function_Set_4bit+0x526>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b0010,i));
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	e5 55       	subi	r30, 0x55	; 85
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	80 81       	ld	r24, Z
    2fbe:	48 2f       	mov	r20, r24
    2fc0:	4c 5f       	subi	r20, 0xFC	; 252
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	e5 55       	subi	r30, 0x55	; 85
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	80 81       	ld	r24, Z
    2fca:	28 2f       	mov	r18, r24
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	82 e0       	ldi	r24, 0x02	; 2
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	02 c0       	rjmp	.+4      	; 0x2fd8 <LCD_function_Set_4bit+0x502>
    2fd4:	95 95       	asr	r25
    2fd6:	87 95       	ror	r24
    2fd8:	2a 95       	dec	r18
    2fda:	e2 f7       	brpl	.-8      	; 0x2fd4 <LCD_function_Set_4bit+0x4fe>
    2fdc:	98 2f       	mov	r25, r24
    2fde:	91 70       	andi	r25, 0x01	; 1
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	64 2f       	mov	r22, r20
    2fe4:	49 2f       	mov	r20, r25
    2fe6:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_void_assign_pin>
	_delay_us(1);
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    2fea:	de 01       	movw	r26, r28
    2fec:	a5 55       	subi	r26, 0x55	; 85
    2fee:	bf 4f       	sbci	r27, 0xFF	; 255
    2ff0:	fe 01       	movw	r30, r28
    2ff2:	e5 55       	subi	r30, 0x55	; 85
    2ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff6:	80 81       	ld	r24, Z
    2ff8:	8f 5f       	subi	r24, 0xFF	; 255
    2ffa:	8c 93       	st	X, r24
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	e5 55       	subi	r30, 0x55	; 85
    3000:	ff 4f       	sbci	r31, 0xFF	; 255
    3002:	80 81       	ld	r24, Z
    3004:	84 30       	cpi	r24, 0x04	; 4
    3006:	b8 f2       	brcs	.-82     	; 0x2fb6 <LCD_function_Set_4bit+0x4e0>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b0010,i));
	}
	//enable pin low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	60 e0       	ldi	r22, 0x00	; 0
    300c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_void_clear_pin>
    3010:	fe 01       	movw	r30, r28
    3012:	eb 58       	subi	r30, 0x8B	; 139
    3014:	ff 4f       	sbci	r31, 0xFF	; 255
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	a0 e2       	ldi	r26, 0x20	; 32
    301c:	b1 e4       	ldi	r27, 0x41	; 65
    301e:	80 83       	st	Z, r24
    3020:	91 83       	std	Z+1, r25	; 0x01
    3022:	a2 83       	std	Z+2, r26	; 0x02
    3024:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3026:	8e 01       	movw	r16, r28
    3028:	0f 58       	subi	r16, 0x8F	; 143
    302a:	1f 4f       	sbci	r17, 0xFF	; 255
    302c:	fe 01       	movw	r30, r28
    302e:	eb 58       	subi	r30, 0x8B	; 139
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	60 81       	ld	r22, Z
    3034:	71 81       	ldd	r23, Z+1	; 0x01
    3036:	82 81       	ldd	r24, Z+2	; 0x02
    3038:	93 81       	ldd	r25, Z+3	; 0x03
    303a:	2b ea       	ldi	r18, 0xAB	; 171
    303c:	3a ea       	ldi	r19, 0xAA	; 170
    303e:	4a e2       	ldi	r20, 0x2A	; 42
    3040:	50 e4       	ldi	r21, 0x40	; 64
    3042:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	f8 01       	movw	r30, r16
    304c:	80 83       	st	Z, r24
    304e:	91 83       	std	Z+1, r25	; 0x01
    3050:	a2 83       	std	Z+2, r26	; 0x02
    3052:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3054:	fe 01       	movw	r30, r28
    3056:	ef 58       	subi	r30, 0x8F	; 143
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	60 81       	ld	r22, Z
    305c:	71 81       	ldd	r23, Z+1	; 0x01
    305e:	82 81       	ldd	r24, Z+2	; 0x02
    3060:	93 81       	ldd	r25, Z+3	; 0x03
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	40 e8       	ldi	r20, 0x80	; 128
    3068:	5f e3       	ldi	r21, 0x3F	; 63
    306a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    306e:	88 23       	and	r24, r24
    3070:	34 f4       	brge	.+12     	; 0x307e <LCD_function_Set_4bit+0x5a8>
		__ticks = 1;
    3072:	fe 01       	movw	r30, r28
    3074:	e0 59       	subi	r30, 0x90	; 144
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	81 e0       	ldi	r24, 0x01	; 1
    307a:	80 83       	st	Z, r24
    307c:	e0 c0       	rjmp	.+448    	; 0x323e <LCD_function_Set_4bit+0x768>
	else if (__tmp > 255)
    307e:	fe 01       	movw	r30, r28
    3080:	ef 58       	subi	r30, 0x8F	; 143
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	60 81       	ld	r22, Z
    3086:	71 81       	ldd	r23, Z+1	; 0x01
    3088:	82 81       	ldd	r24, Z+2	; 0x02
    308a:	93 81       	ldd	r25, Z+3	; 0x03
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	4f e7       	ldi	r20, 0x7F	; 127
    3092:	53 e4       	ldi	r21, 0x43	; 67
    3094:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3098:	18 16       	cp	r1, r24
    309a:	0c f0       	brlt	.+2      	; 0x309e <LCD_function_Set_4bit+0x5c8>
    309c:	c0 c0       	rjmp	.+384    	; 0x321e <LCD_function_Set_4bit+0x748>
	{
		_delay_ms(__us / 1000.0);
    309e:	fe 01       	movw	r30, r28
    30a0:	eb 58       	subi	r30, 0x8B	; 139
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	60 81       	ld	r22, Z
    30a6:	71 81       	ldd	r23, Z+1	; 0x01
    30a8:	82 81       	ldd	r24, Z+2	; 0x02
    30aa:	93 81       	ldd	r25, Z+3	; 0x03
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	4a e7       	ldi	r20, 0x7A	; 122
    30b2:	54 e4       	ldi	r21, 0x44	; 68
    30b4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	fe 01       	movw	r30, r28
    30be:	e4 59       	subi	r30, 0x94	; 148
    30c0:	ff 4f       	sbci	r31, 0xFF	; 255
    30c2:	80 83       	st	Z, r24
    30c4:	91 83       	std	Z+1, r25	; 0x01
    30c6:	a2 83       	std	Z+2, r26	; 0x02
    30c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ca:	8e 01       	movw	r16, r28
    30cc:	08 59       	subi	r16, 0x98	; 152
    30ce:	1f 4f       	sbci	r17, 0xFF	; 255
    30d0:	fe 01       	movw	r30, r28
    30d2:	e4 59       	subi	r30, 0x94	; 148
    30d4:	ff 4f       	sbci	r31, 0xFF	; 255
    30d6:	60 81       	ld	r22, Z
    30d8:	71 81       	ldd	r23, Z+1	; 0x01
    30da:	82 81       	ldd	r24, Z+2	; 0x02
    30dc:	93 81       	ldd	r25, Z+3	; 0x03
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	4a ef       	ldi	r20, 0xFA	; 250
    30e4:	54 e4       	ldi	r21, 0x44	; 68
    30e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	f8 01       	movw	r30, r16
    30f0:	80 83       	st	Z, r24
    30f2:	91 83       	std	Z+1, r25	; 0x01
    30f4:	a2 83       	std	Z+2, r26	; 0x02
    30f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30f8:	fe 01       	movw	r30, r28
    30fa:	e8 59       	subi	r30, 0x98	; 152
    30fc:	ff 4f       	sbci	r31, 0xFF	; 255
    30fe:	60 81       	ld	r22, Z
    3100:	71 81       	ldd	r23, Z+1	; 0x01
    3102:	82 81       	ldd	r24, Z+2	; 0x02
    3104:	93 81       	ldd	r25, Z+3	; 0x03
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	40 e8       	ldi	r20, 0x80	; 128
    310c:	5f e3       	ldi	r21, 0x3F	; 63
    310e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3112:	88 23       	and	r24, r24
    3114:	44 f4       	brge	.+16     	; 0x3126 <LCD_function_Set_4bit+0x650>
		__ticks = 1;
    3116:	fe 01       	movw	r30, r28
    3118:	ea 59       	subi	r30, 0x9A	; 154
    311a:	ff 4f       	sbci	r31, 0xFF	; 255
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	91 83       	std	Z+1, r25	; 0x01
    3122:	80 83       	st	Z, r24
    3124:	64 c0       	rjmp	.+200    	; 0x31ee <LCD_function_Set_4bit+0x718>
	else if (__tmp > 65535)
    3126:	fe 01       	movw	r30, r28
    3128:	e8 59       	subi	r30, 0x98	; 152
    312a:	ff 4f       	sbci	r31, 0xFF	; 255
    312c:	60 81       	ld	r22, Z
    312e:	71 81       	ldd	r23, Z+1	; 0x01
    3130:	82 81       	ldd	r24, Z+2	; 0x02
    3132:	93 81       	ldd	r25, Z+3	; 0x03
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	3f ef       	ldi	r19, 0xFF	; 255
    3138:	4f e7       	ldi	r20, 0x7F	; 127
    313a:	57 e4       	ldi	r21, 0x47	; 71
    313c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3140:	18 16       	cp	r1, r24
    3142:	0c f0       	brlt	.+2      	; 0x3146 <LCD_function_Set_4bit+0x670>
    3144:	43 c0       	rjmp	.+134    	; 0x31cc <LCD_function_Set_4bit+0x6f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3146:	fe 01       	movw	r30, r28
    3148:	e4 59       	subi	r30, 0x94	; 148
    314a:	ff 4f       	sbci	r31, 0xFF	; 255
    314c:	60 81       	ld	r22, Z
    314e:	71 81       	ldd	r23, Z+1	; 0x01
    3150:	82 81       	ldd	r24, Z+2	; 0x02
    3152:	93 81       	ldd	r25, Z+3	; 0x03
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	40 e2       	ldi	r20, 0x20	; 32
    315a:	51 e4       	ldi	r21, 0x41	; 65
    315c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	8e 01       	movw	r16, r28
    3166:	0a 59       	subi	r16, 0x9A	; 154
    3168:	1f 4f       	sbci	r17, 0xFF	; 255
    316a:	bc 01       	movw	r22, r24
    316c:	cd 01       	movw	r24, r26
    316e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	f8 01       	movw	r30, r16
    3178:	91 83       	std	Z+1, r25	; 0x01
    317a:	80 83       	st	Z, r24
    317c:	1f c0       	rjmp	.+62     	; 0x31bc <LCD_function_Set_4bit+0x6e6>
    317e:	fe 01       	movw	r30, r28
    3180:	ec 59       	subi	r30, 0x9C	; 156
    3182:	ff 4f       	sbci	r31, 0xFF	; 255
    3184:	88 ec       	ldi	r24, 0xC8	; 200
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	91 83       	std	Z+1, r25	; 0x01
    318a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    318c:	fe 01       	movw	r30, r28
    318e:	ec 59       	subi	r30, 0x9C	; 156
    3190:	ff 4f       	sbci	r31, 0xFF	; 255
    3192:	80 81       	ld	r24, Z
    3194:	91 81       	ldd	r25, Z+1	; 0x01
    3196:	01 97       	sbiw	r24, 0x01	; 1
    3198:	f1 f7       	brne	.-4      	; 0x3196 <LCD_function_Set_4bit+0x6c0>
    319a:	fe 01       	movw	r30, r28
    319c:	ec 59       	subi	r30, 0x9C	; 156
    319e:	ff 4f       	sbci	r31, 0xFF	; 255
    31a0:	91 83       	std	Z+1, r25	; 0x01
    31a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a4:	de 01       	movw	r26, r28
    31a6:	aa 59       	subi	r26, 0x9A	; 154
    31a8:	bf 4f       	sbci	r27, 0xFF	; 255
    31aa:	fe 01       	movw	r30, r28
    31ac:	ea 59       	subi	r30, 0x9A	; 154
    31ae:	ff 4f       	sbci	r31, 0xFF	; 255
    31b0:	80 81       	ld	r24, Z
    31b2:	91 81       	ldd	r25, Z+1	; 0x01
    31b4:	01 97       	sbiw	r24, 0x01	; 1
    31b6:	11 96       	adiw	r26, 0x01	; 1
    31b8:	9c 93       	st	X, r25
    31ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31bc:	fe 01       	movw	r30, r28
    31be:	ea 59       	subi	r30, 0x9A	; 154
    31c0:	ff 4f       	sbci	r31, 0xFF	; 255
    31c2:	80 81       	ld	r24, Z
    31c4:	91 81       	ldd	r25, Z+1	; 0x01
    31c6:	00 97       	sbiw	r24, 0x00	; 0
    31c8:	d1 f6       	brne	.-76     	; 0x317e <LCD_function_Set_4bit+0x6a8>
    31ca:	4b c0       	rjmp	.+150    	; 0x3262 <LCD_function_Set_4bit+0x78c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31cc:	8e 01       	movw	r16, r28
    31ce:	0a 59       	subi	r16, 0x9A	; 154
    31d0:	1f 4f       	sbci	r17, 0xFF	; 255
    31d2:	fe 01       	movw	r30, r28
    31d4:	e8 59       	subi	r30, 0x98	; 152
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	60 81       	ld	r22, Z
    31da:	71 81       	ldd	r23, Z+1	; 0x01
    31dc:	82 81       	ldd	r24, Z+2	; 0x02
    31de:	93 81       	ldd	r25, Z+3	; 0x03
    31e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31e4:	dc 01       	movw	r26, r24
    31e6:	cb 01       	movw	r24, r22
    31e8:	f8 01       	movw	r30, r16
    31ea:	91 83       	std	Z+1, r25	; 0x01
    31ec:	80 83       	st	Z, r24
    31ee:	de 01       	movw	r26, r28
    31f0:	ae 59       	subi	r26, 0x9E	; 158
    31f2:	bf 4f       	sbci	r27, 0xFF	; 255
    31f4:	fe 01       	movw	r30, r28
    31f6:	ea 59       	subi	r30, 0x9A	; 154
    31f8:	ff 4f       	sbci	r31, 0xFF	; 255
    31fa:	80 81       	ld	r24, Z
    31fc:	91 81       	ldd	r25, Z+1	; 0x01
    31fe:	11 96       	adiw	r26, 0x01	; 1
    3200:	9c 93       	st	X, r25
    3202:	8e 93       	st	-X, r24
    3204:	fe 01       	movw	r30, r28
    3206:	ee 59       	subi	r30, 0x9E	; 158
    3208:	ff 4f       	sbci	r31, 0xFF	; 255
    320a:	80 81       	ld	r24, Z
    320c:	91 81       	ldd	r25, Z+1	; 0x01
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	f1 f7       	brne	.-4      	; 0x320e <LCD_function_Set_4bit+0x738>
    3212:	fe 01       	movw	r30, r28
    3214:	ee 59       	subi	r30, 0x9E	; 158
    3216:	ff 4f       	sbci	r31, 0xFF	; 255
    3218:	91 83       	std	Z+1, r25	; 0x01
    321a:	80 83       	st	Z, r24
    321c:	22 c0       	rjmp	.+68     	; 0x3262 <LCD_function_Set_4bit+0x78c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    321e:	8e 01       	movw	r16, r28
    3220:	00 59       	subi	r16, 0x90	; 144
    3222:	1f 4f       	sbci	r17, 0xFF	; 255
    3224:	fe 01       	movw	r30, r28
    3226:	ef 58       	subi	r30, 0x8F	; 143
    3228:	ff 4f       	sbci	r31, 0xFF	; 255
    322a:	60 81       	ld	r22, Z
    322c:	71 81       	ldd	r23, Z+1	; 0x01
    322e:	82 81       	ldd	r24, Z+2	; 0x02
    3230:	93 81       	ldd	r25, Z+3	; 0x03
    3232:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	f8 01       	movw	r30, r16
    323c:	80 83       	st	Z, r24
    323e:	de 01       	movw	r26, r28
    3240:	af 59       	subi	r26, 0x9F	; 159
    3242:	bf 4f       	sbci	r27, 0xFF	; 255
    3244:	fe 01       	movw	r30, r28
    3246:	e0 59       	subi	r30, 0x90	; 144
    3248:	ff 4f       	sbci	r31, 0xFF	; 255
    324a:	80 81       	ld	r24, Z
    324c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    324e:	fe 01       	movw	r30, r28
    3250:	ef 59       	subi	r30, 0x9F	; 159
    3252:	ff 4f       	sbci	r31, 0xFF	; 255
    3254:	80 81       	ld	r24, Z
    3256:	8a 95       	dec	r24
    3258:	f1 f7       	brne	.-4      	; 0x3256 <LCD_function_Set_4bit+0x780>
    325a:	fe 01       	movw	r30, r28
    325c:	ef 59       	subi	r30, 0x9F	; 159
    325e:	ff 4f       	sbci	r31, 0xFF	; 255
    3260:	80 83       	st	Z, r24
	_delay_us(10);
	//send again high nibble to make sure
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	60 e0       	ldi	r22, 0x00	; 0
    3266:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_void_set_pin>
    326a:	fe 01       	movw	r30, r28
    326c:	e3 5a       	subi	r30, 0xA3	; 163
    326e:	ff 4f       	sbci	r31, 0xFF	; 255
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	a0 e8       	ldi	r26, 0x80	; 128
    3276:	bf e3       	ldi	r27, 0x3F	; 63
    3278:	80 83       	st	Z, r24
    327a:	91 83       	std	Z+1, r25	; 0x01
    327c:	a2 83       	std	Z+2, r26	; 0x02
    327e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3280:	8e 01       	movw	r16, r28
    3282:	07 5a       	subi	r16, 0xA7	; 167
    3284:	1f 4f       	sbci	r17, 0xFF	; 255
    3286:	fe 01       	movw	r30, r28
    3288:	e3 5a       	subi	r30, 0xA3	; 163
    328a:	ff 4f       	sbci	r31, 0xFF	; 255
    328c:	60 81       	ld	r22, Z
    328e:	71 81       	ldd	r23, Z+1	; 0x01
    3290:	82 81       	ldd	r24, Z+2	; 0x02
    3292:	93 81       	ldd	r25, Z+3	; 0x03
    3294:	2b ea       	ldi	r18, 0xAB	; 171
    3296:	3a ea       	ldi	r19, 0xAA	; 170
    3298:	4a e2       	ldi	r20, 0x2A	; 42
    329a:	50 e4       	ldi	r21, 0x40	; 64
    329c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	f8 01       	movw	r30, r16
    32a6:	80 83       	st	Z, r24
    32a8:	91 83       	std	Z+1, r25	; 0x01
    32aa:	a2 83       	std	Z+2, r26	; 0x02
    32ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32ae:	fe 01       	movw	r30, r28
    32b0:	e7 5a       	subi	r30, 0xA7	; 167
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	60 81       	ld	r22, Z
    32b6:	71 81       	ldd	r23, Z+1	; 0x01
    32b8:	82 81       	ldd	r24, Z+2	; 0x02
    32ba:	93 81       	ldd	r25, Z+3	; 0x03
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	40 e8       	ldi	r20, 0x80	; 128
    32c2:	5f e3       	ldi	r21, 0x3F	; 63
    32c4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    32c8:	88 23       	and	r24, r24
    32ca:	34 f4       	brge	.+12     	; 0x32d8 <LCD_function_Set_4bit+0x802>
		__ticks = 1;
    32cc:	fe 01       	movw	r30, r28
    32ce:	e8 5a       	subi	r30, 0xA8	; 168
    32d0:	ff 4f       	sbci	r31, 0xFF	; 255
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	80 83       	st	Z, r24
    32d6:	e0 c0       	rjmp	.+448    	; 0x3498 <LCD_function_Set_4bit+0x9c2>
	else if (__tmp > 255)
    32d8:	fe 01       	movw	r30, r28
    32da:	e7 5a       	subi	r30, 0xA7	; 167
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	60 81       	ld	r22, Z
    32e0:	71 81       	ldd	r23, Z+1	; 0x01
    32e2:	82 81       	ldd	r24, Z+2	; 0x02
    32e4:	93 81       	ldd	r25, Z+3	; 0x03
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	4f e7       	ldi	r20, 0x7F	; 127
    32ec:	53 e4       	ldi	r21, 0x43	; 67
    32ee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    32f2:	18 16       	cp	r1, r24
    32f4:	0c f0       	brlt	.+2      	; 0x32f8 <LCD_function_Set_4bit+0x822>
    32f6:	c0 c0       	rjmp	.+384    	; 0x3478 <LCD_function_Set_4bit+0x9a2>
	{
		_delay_ms(__us / 1000.0);
    32f8:	fe 01       	movw	r30, r28
    32fa:	e3 5a       	subi	r30, 0xA3	; 163
    32fc:	ff 4f       	sbci	r31, 0xFF	; 255
    32fe:	60 81       	ld	r22, Z
    3300:	71 81       	ldd	r23, Z+1	; 0x01
    3302:	82 81       	ldd	r24, Z+2	; 0x02
    3304:	93 81       	ldd	r25, Z+3	; 0x03
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	4a e7       	ldi	r20, 0x7A	; 122
    330c:	54 e4       	ldi	r21, 0x44	; 68
    330e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	fe 01       	movw	r30, r28
    3318:	ec 5a       	subi	r30, 0xAC	; 172
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	80 83       	st	Z, r24
    331e:	91 83       	std	Z+1, r25	; 0x01
    3320:	a2 83       	std	Z+2, r26	; 0x02
    3322:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3324:	8e 01       	movw	r16, r28
    3326:	00 5b       	subi	r16, 0xB0	; 176
    3328:	1f 4f       	sbci	r17, 0xFF	; 255
    332a:	fe 01       	movw	r30, r28
    332c:	ec 5a       	subi	r30, 0xAC	; 172
    332e:	ff 4f       	sbci	r31, 0xFF	; 255
    3330:	60 81       	ld	r22, Z
    3332:	71 81       	ldd	r23, Z+1	; 0x01
    3334:	82 81       	ldd	r24, Z+2	; 0x02
    3336:	93 81       	ldd	r25, Z+3	; 0x03
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	4a ef       	ldi	r20, 0xFA	; 250
    333e:	54 e4       	ldi	r21, 0x44	; 68
    3340:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3344:	dc 01       	movw	r26, r24
    3346:	cb 01       	movw	r24, r22
    3348:	f8 01       	movw	r30, r16
    334a:	80 83       	st	Z, r24
    334c:	91 83       	std	Z+1, r25	; 0x01
    334e:	a2 83       	std	Z+2, r26	; 0x02
    3350:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3352:	fe 01       	movw	r30, r28
    3354:	e0 5b       	subi	r30, 0xB0	; 176
    3356:	ff 4f       	sbci	r31, 0xFF	; 255
    3358:	60 81       	ld	r22, Z
    335a:	71 81       	ldd	r23, Z+1	; 0x01
    335c:	82 81       	ldd	r24, Z+2	; 0x02
    335e:	93 81       	ldd	r25, Z+3	; 0x03
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	40 e8       	ldi	r20, 0x80	; 128
    3366:	5f e3       	ldi	r21, 0x3F	; 63
    3368:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    336c:	88 23       	and	r24, r24
    336e:	44 f4       	brge	.+16     	; 0x3380 <LCD_function_Set_4bit+0x8aa>
		__ticks = 1;
    3370:	fe 01       	movw	r30, r28
    3372:	e2 5b       	subi	r30, 0xB2	; 178
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	91 83       	std	Z+1, r25	; 0x01
    337c:	80 83       	st	Z, r24
    337e:	64 c0       	rjmp	.+200    	; 0x3448 <LCD_function_Set_4bit+0x972>
	else if (__tmp > 65535)
    3380:	fe 01       	movw	r30, r28
    3382:	e0 5b       	subi	r30, 0xB0	; 176
    3384:	ff 4f       	sbci	r31, 0xFF	; 255
    3386:	60 81       	ld	r22, Z
    3388:	71 81       	ldd	r23, Z+1	; 0x01
    338a:	82 81       	ldd	r24, Z+2	; 0x02
    338c:	93 81       	ldd	r25, Z+3	; 0x03
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	3f ef       	ldi	r19, 0xFF	; 255
    3392:	4f e7       	ldi	r20, 0x7F	; 127
    3394:	57 e4       	ldi	r21, 0x47	; 71
    3396:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    339a:	18 16       	cp	r1, r24
    339c:	0c f0       	brlt	.+2      	; 0x33a0 <LCD_function_Set_4bit+0x8ca>
    339e:	43 c0       	rjmp	.+134    	; 0x3426 <LCD_function_Set_4bit+0x950>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a0:	fe 01       	movw	r30, r28
    33a2:	ec 5a       	subi	r30, 0xAC	; 172
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	60 81       	ld	r22, Z
    33a8:	71 81       	ldd	r23, Z+1	; 0x01
    33aa:	82 81       	ldd	r24, Z+2	; 0x02
    33ac:	93 81       	ldd	r25, Z+3	; 0x03
    33ae:	20 e0       	ldi	r18, 0x00	; 0
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	40 e2       	ldi	r20, 0x20	; 32
    33b4:	51 e4       	ldi	r21, 0x41	; 65
    33b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33ba:	dc 01       	movw	r26, r24
    33bc:	cb 01       	movw	r24, r22
    33be:	8e 01       	movw	r16, r28
    33c0:	02 5b       	subi	r16, 0xB2	; 178
    33c2:	1f 4f       	sbci	r17, 0xFF	; 255
    33c4:	bc 01       	movw	r22, r24
    33c6:	cd 01       	movw	r24, r26
    33c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33cc:	dc 01       	movw	r26, r24
    33ce:	cb 01       	movw	r24, r22
    33d0:	f8 01       	movw	r30, r16
    33d2:	91 83       	std	Z+1, r25	; 0x01
    33d4:	80 83       	st	Z, r24
    33d6:	1f c0       	rjmp	.+62     	; 0x3416 <LCD_function_Set_4bit+0x940>
    33d8:	fe 01       	movw	r30, r28
    33da:	e4 5b       	subi	r30, 0xB4	; 180
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	88 ec       	ldi	r24, 0xC8	; 200
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	91 83       	std	Z+1, r25	; 0x01
    33e4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33e6:	fe 01       	movw	r30, r28
    33e8:	e4 5b       	subi	r30, 0xB4	; 180
    33ea:	ff 4f       	sbci	r31, 0xFF	; 255
    33ec:	80 81       	ld	r24, Z
    33ee:	91 81       	ldd	r25, Z+1	; 0x01
    33f0:	01 97       	sbiw	r24, 0x01	; 1
    33f2:	f1 f7       	brne	.-4      	; 0x33f0 <LCD_function_Set_4bit+0x91a>
    33f4:	fe 01       	movw	r30, r28
    33f6:	e4 5b       	subi	r30, 0xB4	; 180
    33f8:	ff 4f       	sbci	r31, 0xFF	; 255
    33fa:	91 83       	std	Z+1, r25	; 0x01
    33fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33fe:	de 01       	movw	r26, r28
    3400:	a2 5b       	subi	r26, 0xB2	; 178
    3402:	bf 4f       	sbci	r27, 0xFF	; 255
    3404:	fe 01       	movw	r30, r28
    3406:	e2 5b       	subi	r30, 0xB2	; 178
    3408:	ff 4f       	sbci	r31, 0xFF	; 255
    340a:	80 81       	ld	r24, Z
    340c:	91 81       	ldd	r25, Z+1	; 0x01
    340e:	01 97       	sbiw	r24, 0x01	; 1
    3410:	11 96       	adiw	r26, 0x01	; 1
    3412:	9c 93       	st	X, r25
    3414:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3416:	fe 01       	movw	r30, r28
    3418:	e2 5b       	subi	r30, 0xB2	; 178
    341a:	ff 4f       	sbci	r31, 0xFF	; 255
    341c:	80 81       	ld	r24, Z
    341e:	91 81       	ldd	r25, Z+1	; 0x01
    3420:	00 97       	sbiw	r24, 0x00	; 0
    3422:	d1 f6       	brne	.-76     	; 0x33d8 <LCD_function_Set_4bit+0x902>
    3424:	4b c0       	rjmp	.+150    	; 0x34bc <LCD_function_Set_4bit+0x9e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3426:	8e 01       	movw	r16, r28
    3428:	02 5b       	subi	r16, 0xB2	; 178
    342a:	1f 4f       	sbci	r17, 0xFF	; 255
    342c:	fe 01       	movw	r30, r28
    342e:	e0 5b       	subi	r30, 0xB0	; 176
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	60 81       	ld	r22, Z
    3434:	71 81       	ldd	r23, Z+1	; 0x01
    3436:	82 81       	ldd	r24, Z+2	; 0x02
    3438:	93 81       	ldd	r25, Z+3	; 0x03
    343a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	f8 01       	movw	r30, r16
    3444:	91 83       	std	Z+1, r25	; 0x01
    3446:	80 83       	st	Z, r24
    3448:	de 01       	movw	r26, r28
    344a:	a6 5b       	subi	r26, 0xB6	; 182
    344c:	bf 4f       	sbci	r27, 0xFF	; 255
    344e:	fe 01       	movw	r30, r28
    3450:	e2 5b       	subi	r30, 0xB2	; 178
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	80 81       	ld	r24, Z
    3456:	91 81       	ldd	r25, Z+1	; 0x01
    3458:	11 96       	adiw	r26, 0x01	; 1
    345a:	9c 93       	st	X, r25
    345c:	8e 93       	st	-X, r24
    345e:	fe 01       	movw	r30, r28
    3460:	e6 5b       	subi	r30, 0xB6	; 182
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	80 81       	ld	r24, Z
    3466:	91 81       	ldd	r25, Z+1	; 0x01
    3468:	01 97       	sbiw	r24, 0x01	; 1
    346a:	f1 f7       	brne	.-4      	; 0x3468 <LCD_function_Set_4bit+0x992>
    346c:	fe 01       	movw	r30, r28
    346e:	e6 5b       	subi	r30, 0xB6	; 182
    3470:	ff 4f       	sbci	r31, 0xFF	; 255
    3472:	91 83       	std	Z+1, r25	; 0x01
    3474:	80 83       	st	Z, r24
    3476:	22 c0       	rjmp	.+68     	; 0x34bc <LCD_function_Set_4bit+0x9e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3478:	8e 01       	movw	r16, r28
    347a:	08 5a       	subi	r16, 0xA8	; 168
    347c:	1f 4f       	sbci	r17, 0xFF	; 255
    347e:	fe 01       	movw	r30, r28
    3480:	e7 5a       	subi	r30, 0xA7	; 167
    3482:	ff 4f       	sbci	r31, 0xFF	; 255
    3484:	60 81       	ld	r22, Z
    3486:	71 81       	ldd	r23, Z+1	; 0x01
    3488:	82 81       	ldd	r24, Z+2	; 0x02
    348a:	93 81       	ldd	r25, Z+3	; 0x03
    348c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	f8 01       	movw	r30, r16
    3496:	80 83       	st	Z, r24
    3498:	de 01       	movw	r26, r28
    349a:	a7 5b       	subi	r26, 0xB7	; 183
    349c:	bf 4f       	sbci	r27, 0xFF	; 255
    349e:	fe 01       	movw	r30, r28
    34a0:	e8 5a       	subi	r30, 0xA8	; 168
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	80 81       	ld	r24, Z
    34a6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34a8:	fe 01       	movw	r30, r28
    34aa:	e7 5b       	subi	r30, 0xB7	; 183
    34ac:	ff 4f       	sbci	r31, 0xFF	; 255
    34ae:	80 81       	ld	r24, Z
    34b0:	8a 95       	dec	r24
    34b2:	f1 f7       	brne	.-4      	; 0x34b0 <LCD_function_Set_4bit+0x9da>
    34b4:	fe 01       	movw	r30, r28
    34b6:	e7 5b       	subi	r30, 0xB7	; 183
    34b8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ba:	80 83       	st	Z, r24
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    34bc:	fe 01       	movw	r30, r28
    34be:	e6 55       	subi	r30, 0x56	; 86
    34c0:	ff 4f       	sbci	r31, 0xFF	; 255
    34c2:	10 82       	st	Z, r1
    34c4:	23 c0       	rjmp	.+70     	; 0x350c <LCD_function_Set_4bit+0xa36>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b0010,i));
    34c6:	fe 01       	movw	r30, r28
    34c8:	e6 55       	subi	r30, 0x56	; 86
    34ca:	ff 4f       	sbci	r31, 0xFF	; 255
    34cc:	80 81       	ld	r24, Z
    34ce:	48 2f       	mov	r20, r24
    34d0:	4c 5f       	subi	r20, 0xFC	; 252
    34d2:	fe 01       	movw	r30, r28
    34d4:	e6 55       	subi	r30, 0x56	; 86
    34d6:	ff 4f       	sbci	r31, 0xFF	; 255
    34d8:	80 81       	ld	r24, Z
    34da:	28 2f       	mov	r18, r24
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	82 e0       	ldi	r24, 0x02	; 2
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	02 c0       	rjmp	.+4      	; 0x34e8 <LCD_function_Set_4bit+0xa12>
    34e4:	95 95       	asr	r25
    34e6:	87 95       	ror	r24
    34e8:	2a 95       	dec	r18
    34ea:	e2 f7       	brpl	.-8      	; 0x34e4 <LCD_function_Set_4bit+0xa0e>
    34ec:	98 2f       	mov	r25, r24
    34ee:	91 70       	andi	r25, 0x01	; 1
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	64 2f       	mov	r22, r20
    34f4:	49 2f       	mov	r20, r25
    34f6:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_void_assign_pin>
	//send again high nibble to make sure
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    34fa:	de 01       	movw	r26, r28
    34fc:	a6 55       	subi	r26, 0x56	; 86
    34fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3500:	fe 01       	movw	r30, r28
    3502:	e6 55       	subi	r30, 0x56	; 86
    3504:	ff 4f       	sbci	r31, 0xFF	; 255
    3506:	80 81       	ld	r24, Z
    3508:	8f 5f       	subi	r24, 0xFF	; 255
    350a:	8c 93       	st	X, r24
    350c:	fe 01       	movw	r30, r28
    350e:	e6 55       	subi	r30, 0x56	; 86
    3510:	ff 4f       	sbci	r31, 0xFF	; 255
    3512:	80 81       	ld	r24, Z
    3514:	84 30       	cpi	r24, 0x04	; 4
    3516:	b8 f2       	brcs	.-82     	; 0x34c6 <LCD_function_Set_4bit+0x9f0>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b0010,i));
	}
	//enable pin low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	60 e0       	ldi	r22, 0x00	; 0
    351c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_void_clear_pin>
    3520:	fe 01       	movw	r30, r28
    3522:	eb 5b       	subi	r30, 0xBB	; 187
    3524:	ff 4f       	sbci	r31, 0xFF	; 255
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	a0 e2       	ldi	r26, 0x20	; 32
    352c:	b1 e4       	ldi	r27, 0x41	; 65
    352e:	80 83       	st	Z, r24
    3530:	91 83       	std	Z+1, r25	; 0x01
    3532:	a2 83       	std	Z+2, r26	; 0x02
    3534:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3536:	8e 01       	movw	r16, r28
    3538:	0f 5b       	subi	r16, 0xBF	; 191
    353a:	1f 4f       	sbci	r17, 0xFF	; 255
    353c:	fe 01       	movw	r30, r28
    353e:	eb 5b       	subi	r30, 0xBB	; 187
    3540:	ff 4f       	sbci	r31, 0xFF	; 255
    3542:	60 81       	ld	r22, Z
    3544:	71 81       	ldd	r23, Z+1	; 0x01
    3546:	82 81       	ldd	r24, Z+2	; 0x02
    3548:	93 81       	ldd	r25, Z+3	; 0x03
    354a:	2b ea       	ldi	r18, 0xAB	; 171
    354c:	3a ea       	ldi	r19, 0xAA	; 170
    354e:	4a e2       	ldi	r20, 0x2A	; 42
    3550:	50 e4       	ldi	r21, 0x40	; 64
    3552:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3556:	dc 01       	movw	r26, r24
    3558:	cb 01       	movw	r24, r22
    355a:	f8 01       	movw	r30, r16
    355c:	80 83       	st	Z, r24
    355e:	91 83       	std	Z+1, r25	; 0x01
    3560:	a2 83       	std	Z+2, r26	; 0x02
    3562:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3564:	fe 01       	movw	r30, r28
    3566:	ef 5b       	subi	r30, 0xBF	; 191
    3568:	ff 4f       	sbci	r31, 0xFF	; 255
    356a:	60 81       	ld	r22, Z
    356c:	71 81       	ldd	r23, Z+1	; 0x01
    356e:	82 81       	ldd	r24, Z+2	; 0x02
    3570:	93 81       	ldd	r25, Z+3	; 0x03
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	40 e8       	ldi	r20, 0x80	; 128
    3578:	5f e3       	ldi	r21, 0x3F	; 63
    357a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    357e:	88 23       	and	r24, r24
    3580:	34 f4       	brge	.+12     	; 0x358e <LCD_function_Set_4bit+0xab8>
		__ticks = 1;
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	fe 01       	movw	r30, r28
    3586:	e0 5c       	subi	r30, 0xC0	; 192
    3588:	ff 4f       	sbci	r31, 0xFF	; 255
    358a:	80 83       	st	Z, r24
    358c:	9d c0       	rjmp	.+314    	; 0x36c8 <LCD_function_Set_4bit+0xbf2>
	else if (__tmp > 255)
    358e:	fe 01       	movw	r30, r28
    3590:	ef 5b       	subi	r30, 0xBF	; 191
    3592:	ff 4f       	sbci	r31, 0xFF	; 255
    3594:	60 81       	ld	r22, Z
    3596:	71 81       	ldd	r23, Z+1	; 0x01
    3598:	82 81       	ldd	r24, Z+2	; 0x02
    359a:	93 81       	ldd	r25, Z+3	; 0x03
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	4f e7       	ldi	r20, 0x7F	; 127
    35a2:	53 e4       	ldi	r21, 0x43	; 67
    35a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    35a8:	18 16       	cp	r1, r24
    35aa:	0c f0       	brlt	.+2      	; 0x35ae <LCD_function_Set_4bit+0xad8>
    35ac:	7e c0       	rjmp	.+252    	; 0x36aa <LCD_function_Set_4bit+0xbd4>
	{
		_delay_ms(__us / 1000.0);
    35ae:	fe 01       	movw	r30, r28
    35b0:	eb 5b       	subi	r30, 0xBB	; 187
    35b2:	ff 4f       	sbci	r31, 0xFF	; 255
    35b4:	60 81       	ld	r22, Z
    35b6:	71 81       	ldd	r23, Z+1	; 0x01
    35b8:	82 81       	ldd	r24, Z+2	; 0x02
    35ba:	93 81       	ldd	r25, Z+3	; 0x03
    35bc:	20 e0       	ldi	r18, 0x00	; 0
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	4a e7       	ldi	r20, 0x7A	; 122
    35c2:	54 e4       	ldi	r21, 0x44	; 68
    35c4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    35c8:	dc 01       	movw	r26, r24
    35ca:	cb 01       	movw	r24, r22
    35cc:	8c af       	std	Y+60, r24	; 0x3c
    35ce:	9d af       	std	Y+61, r25	; 0x3d
    35d0:	ae af       	std	Y+62, r26	; 0x3e
    35d2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d4:	6c ad       	ldd	r22, Y+60	; 0x3c
    35d6:	7d ad       	ldd	r23, Y+61	; 0x3d
    35d8:	8e ad       	ldd	r24, Y+62	; 0x3e
    35da:	9f ad       	ldd	r25, Y+63	; 0x3f
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	4a ef       	ldi	r20, 0xFA	; 250
    35e2:	54 e4       	ldi	r21, 0x44	; 68
    35e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35e8:	dc 01       	movw	r26, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	88 af       	std	Y+56, r24	; 0x38
    35ee:	99 af       	std	Y+57, r25	; 0x39
    35f0:	aa af       	std	Y+58, r26	; 0x3a
    35f2:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    35f4:	68 ad       	ldd	r22, Y+56	; 0x38
    35f6:	79 ad       	ldd	r23, Y+57	; 0x39
    35f8:	8a ad       	ldd	r24, Y+58	; 0x3a
    35fa:	9b ad       	ldd	r25, Y+59	; 0x3b
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	40 e8       	ldi	r20, 0x80	; 128
    3602:	5f e3       	ldi	r21, 0x3F	; 63
    3604:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3608:	88 23       	and	r24, r24
    360a:	2c f4       	brge	.+10     	; 0x3616 <LCD_function_Set_4bit+0xb40>
		__ticks = 1;
    360c:	81 e0       	ldi	r24, 0x01	; 1
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	9f ab       	std	Y+55, r25	; 0x37
    3612:	8e ab       	std	Y+54, r24	; 0x36
    3614:	3f c0       	rjmp	.+126    	; 0x3694 <LCD_function_Set_4bit+0xbbe>
	else if (__tmp > 65535)
    3616:	68 ad       	ldd	r22, Y+56	; 0x38
    3618:	79 ad       	ldd	r23, Y+57	; 0x39
    361a:	8a ad       	ldd	r24, Y+58	; 0x3a
    361c:	9b ad       	ldd	r25, Y+59	; 0x3b
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	3f ef       	ldi	r19, 0xFF	; 255
    3622:	4f e7       	ldi	r20, 0x7F	; 127
    3624:	57 e4       	ldi	r21, 0x47	; 71
    3626:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    362a:	18 16       	cp	r1, r24
    362c:	4c f5       	brge	.+82     	; 0x3680 <LCD_function_Set_4bit+0xbaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    362e:	6c ad       	ldd	r22, Y+60	; 0x3c
    3630:	7d ad       	ldd	r23, Y+61	; 0x3d
    3632:	8e ad       	ldd	r24, Y+62	; 0x3e
    3634:	9f ad       	ldd	r25, Y+63	; 0x3f
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	40 e2       	ldi	r20, 0x20	; 32
    363c:	51 e4       	ldi	r21, 0x41	; 65
    363e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3642:	dc 01       	movw	r26, r24
    3644:	cb 01       	movw	r24, r22
    3646:	bc 01       	movw	r22, r24
    3648:	cd 01       	movw	r24, r26
    364a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    364e:	dc 01       	movw	r26, r24
    3650:	cb 01       	movw	r24, r22
    3652:	9f ab       	std	Y+55, r25	; 0x37
    3654:	8e ab       	std	Y+54, r24	; 0x36
    3656:	0f c0       	rjmp	.+30     	; 0x3676 <LCD_function_Set_4bit+0xba0>
    3658:	88 ec       	ldi	r24, 0xC8	; 200
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	9d ab       	std	Y+53, r25	; 0x35
    365e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3660:	8c a9       	ldd	r24, Y+52	; 0x34
    3662:	9d a9       	ldd	r25, Y+53	; 0x35
    3664:	01 97       	sbiw	r24, 0x01	; 1
    3666:	f1 f7       	brne	.-4      	; 0x3664 <LCD_function_Set_4bit+0xb8e>
    3668:	9d ab       	std	Y+53, r25	; 0x35
    366a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    366c:	8e a9       	ldd	r24, Y+54	; 0x36
    366e:	9f a9       	ldd	r25, Y+55	; 0x37
    3670:	01 97       	sbiw	r24, 0x01	; 1
    3672:	9f ab       	std	Y+55, r25	; 0x37
    3674:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3676:	8e a9       	ldd	r24, Y+54	; 0x36
    3678:	9f a9       	ldd	r25, Y+55	; 0x37
    367a:	00 97       	sbiw	r24, 0x00	; 0
    367c:	69 f7       	brne	.-38     	; 0x3658 <LCD_function_Set_4bit+0xb82>
    367e:	2d c0       	rjmp	.+90     	; 0x36da <LCD_function_Set_4bit+0xc04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3680:	68 ad       	ldd	r22, Y+56	; 0x38
    3682:	79 ad       	ldd	r23, Y+57	; 0x39
    3684:	8a ad       	ldd	r24, Y+58	; 0x3a
    3686:	9b ad       	ldd	r25, Y+59	; 0x3b
    3688:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    368c:	dc 01       	movw	r26, r24
    368e:	cb 01       	movw	r24, r22
    3690:	9f ab       	std	Y+55, r25	; 0x37
    3692:	8e ab       	std	Y+54, r24	; 0x36
    3694:	8e a9       	ldd	r24, Y+54	; 0x36
    3696:	9f a9       	ldd	r25, Y+55	; 0x37
    3698:	9b ab       	std	Y+51, r25	; 0x33
    369a:	8a ab       	std	Y+50, r24	; 0x32
    369c:	8a a9       	ldd	r24, Y+50	; 0x32
    369e:	9b a9       	ldd	r25, Y+51	; 0x33
    36a0:	01 97       	sbiw	r24, 0x01	; 1
    36a2:	f1 f7       	brne	.-4      	; 0x36a0 <LCD_function_Set_4bit+0xbca>
    36a4:	9b ab       	std	Y+51, r25	; 0x33
    36a6:	8a ab       	std	Y+50, r24	; 0x32
    36a8:	18 c0       	rjmp	.+48     	; 0x36da <LCD_function_Set_4bit+0xc04>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    36aa:	fe 01       	movw	r30, r28
    36ac:	ef 5b       	subi	r30, 0xBF	; 191
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	60 81       	ld	r22, Z
    36b2:	71 81       	ldd	r23, Z+1	; 0x01
    36b4:	82 81       	ldd	r24, Z+2	; 0x02
    36b6:	93 81       	ldd	r25, Z+3	; 0x03
    36b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36bc:	dc 01       	movw	r26, r24
    36be:	cb 01       	movw	r24, r22
    36c0:	fe 01       	movw	r30, r28
    36c2:	e0 5c       	subi	r30, 0xC0	; 192
    36c4:	ff 4f       	sbci	r31, 0xFF	; 255
    36c6:	80 83       	st	Z, r24
    36c8:	fe 01       	movw	r30, r28
    36ca:	e0 5c       	subi	r30, 0xC0	; 192
    36cc:	ff 4f       	sbci	r31, 0xFF	; 255
    36ce:	80 81       	ld	r24, Z
    36d0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    36d2:	89 a9       	ldd	r24, Y+49	; 0x31
    36d4:	8a 95       	dec	r24
    36d6:	f1 f7       	brne	.-4      	; 0x36d4 <LCD_function_Set_4bit+0xbfe>
    36d8:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(10);
	//send the low nibble
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
    36da:	81 e0       	ldi	r24, 0x01	; 1
    36dc:	60 e0       	ldi	r22, 0x00	; 0
    36de:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_void_set_pin>
    36e2:	80 e0       	ldi	r24, 0x00	; 0
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	a0 e8       	ldi	r26, 0x80	; 128
    36e8:	bf e3       	ldi	r27, 0x3F	; 63
    36ea:	8d a7       	std	Y+45, r24	; 0x2d
    36ec:	9e a7       	std	Y+46, r25	; 0x2e
    36ee:	af a7       	std	Y+47, r26	; 0x2f
    36f0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    36f2:	6d a5       	ldd	r22, Y+45	; 0x2d
    36f4:	7e a5       	ldd	r23, Y+46	; 0x2e
    36f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    36f8:	98 a9       	ldd	r25, Y+48	; 0x30
    36fa:	2b ea       	ldi	r18, 0xAB	; 171
    36fc:	3a ea       	ldi	r19, 0xAA	; 170
    36fe:	4a e2       	ldi	r20, 0x2A	; 42
    3700:	50 e4       	ldi	r21, 0x40	; 64
    3702:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3706:	dc 01       	movw	r26, r24
    3708:	cb 01       	movw	r24, r22
    370a:	89 a7       	std	Y+41, r24	; 0x29
    370c:	9a a7       	std	Y+42, r25	; 0x2a
    370e:	ab a7       	std	Y+43, r26	; 0x2b
    3710:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3712:	69 a5       	ldd	r22, Y+41	; 0x29
    3714:	7a a5       	ldd	r23, Y+42	; 0x2a
    3716:	8b a5       	ldd	r24, Y+43	; 0x2b
    3718:	9c a5       	ldd	r25, Y+44	; 0x2c
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	40 e8       	ldi	r20, 0x80	; 128
    3720:	5f e3       	ldi	r21, 0x3F	; 63
    3722:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3726:	88 23       	and	r24, r24
    3728:	1c f4       	brge	.+6      	; 0x3730 <LCD_function_Set_4bit+0xc5a>
		__ticks = 1;
    372a:	81 e0       	ldi	r24, 0x01	; 1
    372c:	88 a7       	std	Y+40, r24	; 0x28
    372e:	91 c0       	rjmp	.+290    	; 0x3852 <LCD_function_Set_4bit+0xd7c>
	else if (__tmp > 255)
    3730:	69 a5       	ldd	r22, Y+41	; 0x29
    3732:	7a a5       	ldd	r23, Y+42	; 0x2a
    3734:	8b a5       	ldd	r24, Y+43	; 0x2b
    3736:	9c a5       	ldd	r25, Y+44	; 0x2c
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	4f e7       	ldi	r20, 0x7F	; 127
    373e:	53 e4       	ldi	r21, 0x43	; 67
    3740:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3744:	18 16       	cp	r1, r24
    3746:	0c f0       	brlt	.+2      	; 0x374a <LCD_function_Set_4bit+0xc74>
    3748:	7b c0       	rjmp	.+246    	; 0x3840 <LCD_function_Set_4bit+0xd6a>
	{
		_delay_ms(__us / 1000.0);
    374a:	6d a5       	ldd	r22, Y+45	; 0x2d
    374c:	7e a5       	ldd	r23, Y+46	; 0x2e
    374e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3750:	98 a9       	ldd	r25, Y+48	; 0x30
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	4a e7       	ldi	r20, 0x7A	; 122
    3758:	54 e4       	ldi	r21, 0x44	; 68
    375a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    375e:	dc 01       	movw	r26, r24
    3760:	cb 01       	movw	r24, r22
    3762:	8c a3       	std	Y+36, r24	; 0x24
    3764:	9d a3       	std	Y+37, r25	; 0x25
    3766:	ae a3       	std	Y+38, r26	; 0x26
    3768:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    376a:	6c a1       	ldd	r22, Y+36	; 0x24
    376c:	7d a1       	ldd	r23, Y+37	; 0x25
    376e:	8e a1       	ldd	r24, Y+38	; 0x26
    3770:	9f a1       	ldd	r25, Y+39	; 0x27
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	4a ef       	ldi	r20, 0xFA	; 250
    3778:	54 e4       	ldi	r21, 0x44	; 68
    377a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    377e:	dc 01       	movw	r26, r24
    3780:	cb 01       	movw	r24, r22
    3782:	88 a3       	std	Y+32, r24	; 0x20
    3784:	99 a3       	std	Y+33, r25	; 0x21
    3786:	aa a3       	std	Y+34, r26	; 0x22
    3788:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    378a:	68 a1       	ldd	r22, Y+32	; 0x20
    378c:	79 a1       	ldd	r23, Y+33	; 0x21
    378e:	8a a1       	ldd	r24, Y+34	; 0x22
    3790:	9b a1       	ldd	r25, Y+35	; 0x23
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	40 e8       	ldi	r20, 0x80	; 128
    3798:	5f e3       	ldi	r21, 0x3F	; 63
    379a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    379e:	88 23       	and	r24, r24
    37a0:	2c f4       	brge	.+10     	; 0x37ac <LCD_function_Set_4bit+0xcd6>
		__ticks = 1;
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	9f 8f       	std	Y+31, r25	; 0x1f
    37a8:	8e 8f       	std	Y+30, r24	; 0x1e
    37aa:	3f c0       	rjmp	.+126    	; 0x382a <LCD_function_Set_4bit+0xd54>
	else if (__tmp > 65535)
    37ac:	68 a1       	ldd	r22, Y+32	; 0x20
    37ae:	79 a1       	ldd	r23, Y+33	; 0x21
    37b0:	8a a1       	ldd	r24, Y+34	; 0x22
    37b2:	9b a1       	ldd	r25, Y+35	; 0x23
    37b4:	20 e0       	ldi	r18, 0x00	; 0
    37b6:	3f ef       	ldi	r19, 0xFF	; 255
    37b8:	4f e7       	ldi	r20, 0x7F	; 127
    37ba:	57 e4       	ldi	r21, 0x47	; 71
    37bc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    37c0:	18 16       	cp	r1, r24
    37c2:	4c f5       	brge	.+82     	; 0x3816 <LCD_function_Set_4bit+0xd40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37c4:	6c a1       	ldd	r22, Y+36	; 0x24
    37c6:	7d a1       	ldd	r23, Y+37	; 0x25
    37c8:	8e a1       	ldd	r24, Y+38	; 0x26
    37ca:	9f a1       	ldd	r25, Y+39	; 0x27
    37cc:	20 e0       	ldi	r18, 0x00	; 0
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    37d0:	40 e2       	ldi	r20, 0x20	; 32
    37d2:	51 e4       	ldi	r21, 0x41	; 65
    37d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37d8:	dc 01       	movw	r26, r24
    37da:	cb 01       	movw	r24, r22
    37dc:	bc 01       	movw	r22, r24
    37de:	cd 01       	movw	r24, r26
    37e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	9f 8f       	std	Y+31, r25	; 0x1f
    37ea:	8e 8f       	std	Y+30, r24	; 0x1e
    37ec:	0f c0       	rjmp	.+30     	; 0x380c <LCD_function_Set_4bit+0xd36>
    37ee:	88 ec       	ldi	r24, 0xC8	; 200
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	9d 8f       	std	Y+29, r25	; 0x1d
    37f4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    37f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    37f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    37fa:	01 97       	sbiw	r24, 0x01	; 1
    37fc:	f1 f7       	brne	.-4      	; 0x37fa <LCD_function_Set_4bit+0xd24>
    37fe:	9d 8f       	std	Y+29, r25	; 0x1d
    3800:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3802:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3804:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3806:	01 97       	sbiw	r24, 0x01	; 1
    3808:	9f 8f       	std	Y+31, r25	; 0x1f
    380a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    380c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    380e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3810:	00 97       	sbiw	r24, 0x00	; 0
    3812:	69 f7       	brne	.-38     	; 0x37ee <LCD_function_Set_4bit+0xd18>
    3814:	24 c0       	rjmp	.+72     	; 0x385e <LCD_function_Set_4bit+0xd88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3816:	68 a1       	ldd	r22, Y+32	; 0x20
    3818:	79 a1       	ldd	r23, Y+33	; 0x21
    381a:	8a a1       	ldd	r24, Y+34	; 0x22
    381c:	9b a1       	ldd	r25, Y+35	; 0x23
    381e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	9f 8f       	std	Y+31, r25	; 0x1f
    3828:	8e 8f       	std	Y+30, r24	; 0x1e
    382a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    382c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    382e:	9b 8f       	std	Y+27, r25	; 0x1b
    3830:	8a 8f       	std	Y+26, r24	; 0x1a
    3832:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3834:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3836:	01 97       	sbiw	r24, 0x01	; 1
    3838:	f1 f7       	brne	.-4      	; 0x3836 <LCD_function_Set_4bit+0xd60>
    383a:	9b 8f       	std	Y+27, r25	; 0x1b
    383c:	8a 8f       	std	Y+26, r24	; 0x1a
    383e:	0f c0       	rjmp	.+30     	; 0x385e <LCD_function_Set_4bit+0xd88>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3840:	69 a5       	ldd	r22, Y+41	; 0x29
    3842:	7a a5       	ldd	r23, Y+42	; 0x2a
    3844:	8b a5       	ldd	r24, Y+43	; 0x2b
    3846:	9c a5       	ldd	r25, Y+44	; 0x2c
    3848:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    384c:	dc 01       	movw	r26, r24
    384e:	cb 01       	movw	r24, r22
    3850:	88 a7       	std	Y+40, r24	; 0x28
    3852:	88 a5       	ldd	r24, Y+40	; 0x28
    3854:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3856:	89 8d       	ldd	r24, Y+25	; 0x19
    3858:	8a 95       	dec	r24
    385a:	f1 f7       	brne	.-4      	; 0x3858 <LCD_function_Set_4bit+0xd82>
    385c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    385e:	fe 01       	movw	r30, r28
    3860:	e7 55       	subi	r30, 0x57	; 87
    3862:	ff 4f       	sbci	r31, 0xFF	; 255
    3864:	10 82       	st	Z, r1
    3866:	23 c0       	rjmp	.+70     	; 0x38ae <LCD_function_Set_4bit+0xdd8>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b1000,i));
    3868:	fe 01       	movw	r30, r28
    386a:	e7 55       	subi	r30, 0x57	; 87
    386c:	ff 4f       	sbci	r31, 0xFF	; 255
    386e:	80 81       	ld	r24, Z
    3870:	48 2f       	mov	r20, r24
    3872:	4c 5f       	subi	r20, 0xFC	; 252
    3874:	fe 01       	movw	r30, r28
    3876:	e7 55       	subi	r30, 0x57	; 87
    3878:	ff 4f       	sbci	r31, 0xFF	; 255
    387a:	80 81       	ld	r24, Z
    387c:	28 2f       	mov	r18, r24
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	88 e0       	ldi	r24, 0x08	; 8
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	02 c0       	rjmp	.+4      	; 0x388a <LCD_function_Set_4bit+0xdb4>
    3886:	95 95       	asr	r25
    3888:	87 95       	ror	r24
    388a:	2a 95       	dec	r18
    388c:	e2 f7       	brpl	.-8      	; 0x3886 <LCD_function_Set_4bit+0xdb0>
    388e:	98 2f       	mov	r25, r24
    3890:	91 70       	andi	r25, 0x01	; 1
    3892:	80 e0       	ldi	r24, 0x00	; 0
    3894:	64 2f       	mov	r22, r20
    3896:	49 2f       	mov	r20, r25
    3898:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_void_assign_pin>
	//send the low nibble
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    389c:	de 01       	movw	r26, r28
    389e:	a7 55       	subi	r26, 0x57	; 87
    38a0:	bf 4f       	sbci	r27, 0xFF	; 255
    38a2:	fe 01       	movw	r30, r28
    38a4:	e7 55       	subi	r30, 0x57	; 87
    38a6:	ff 4f       	sbci	r31, 0xFF	; 255
    38a8:	80 81       	ld	r24, Z
    38aa:	8f 5f       	subi	r24, 0xFF	; 255
    38ac:	8c 93       	st	X, r24
    38ae:	fe 01       	movw	r30, r28
    38b0:	e7 55       	subi	r30, 0x57	; 87
    38b2:	ff 4f       	sbci	r31, 0xFF	; 255
    38b4:	80 81       	ld	r24, Z
    38b6:	84 30       	cpi	r24, 0x04	; 4
    38b8:	b8 f2       	brcs	.-82     	; 0x3868 <LCD_function_Set_4bit+0xd92>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b1000,i));
	}
	//enable pin low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    38ba:	81 e0       	ldi	r24, 0x01	; 1
    38bc:	60 e0       	ldi	r22, 0x00	; 0
    38be:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_void_clear_pin>
    38c2:	80 e0       	ldi	r24, 0x00	; 0
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	a0 e2       	ldi	r26, 0x20	; 32
    38c8:	b1 e4       	ldi	r27, 0x41	; 65
    38ca:	8d 8b       	std	Y+21, r24	; 0x15
    38cc:	9e 8b       	std	Y+22, r25	; 0x16
    38ce:	af 8b       	std	Y+23, r26	; 0x17
    38d0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    38d2:	6d 89       	ldd	r22, Y+21	; 0x15
    38d4:	7e 89       	ldd	r23, Y+22	; 0x16
    38d6:	8f 89       	ldd	r24, Y+23	; 0x17
    38d8:	98 8d       	ldd	r25, Y+24	; 0x18
    38da:	2b ea       	ldi	r18, 0xAB	; 171
    38dc:	3a ea       	ldi	r19, 0xAA	; 170
    38de:	4a e2       	ldi	r20, 0x2A	; 42
    38e0:	50 e4       	ldi	r21, 0x40	; 64
    38e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
    38ea:	89 8b       	std	Y+17, r24	; 0x11
    38ec:	9a 8b       	std	Y+18, r25	; 0x12
    38ee:	ab 8b       	std	Y+19, r26	; 0x13
    38f0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    38f2:	69 89       	ldd	r22, Y+17	; 0x11
    38f4:	7a 89       	ldd	r23, Y+18	; 0x12
    38f6:	8b 89       	ldd	r24, Y+19	; 0x13
    38f8:	9c 89       	ldd	r25, Y+20	; 0x14
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	40 e8       	ldi	r20, 0x80	; 128
    3900:	5f e3       	ldi	r21, 0x3F	; 63
    3902:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3906:	88 23       	and	r24, r24
    3908:	1c f4       	brge	.+6      	; 0x3910 <LCD_function_Set_4bit+0xe3a>
		__ticks = 1;
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	88 8b       	std	Y+16, r24	; 0x10
    390e:	91 c0       	rjmp	.+290    	; 0x3a32 <LCD_function_Set_4bit+0xf5c>
	else if (__tmp > 255)
    3910:	69 89       	ldd	r22, Y+17	; 0x11
    3912:	7a 89       	ldd	r23, Y+18	; 0x12
    3914:	8b 89       	ldd	r24, Y+19	; 0x13
    3916:	9c 89       	ldd	r25, Y+20	; 0x14
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	4f e7       	ldi	r20, 0x7F	; 127
    391e:	53 e4       	ldi	r21, 0x43	; 67
    3920:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3924:	18 16       	cp	r1, r24
    3926:	0c f0       	brlt	.+2      	; 0x392a <LCD_function_Set_4bit+0xe54>
    3928:	7b c0       	rjmp	.+246    	; 0x3a20 <LCD_function_Set_4bit+0xf4a>
	{
		_delay_ms(__us / 1000.0);
    392a:	6d 89       	ldd	r22, Y+21	; 0x15
    392c:	7e 89       	ldd	r23, Y+22	; 0x16
    392e:	8f 89       	ldd	r24, Y+23	; 0x17
    3930:	98 8d       	ldd	r25, Y+24	; 0x18
    3932:	20 e0       	ldi	r18, 0x00	; 0
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	4a e7       	ldi	r20, 0x7A	; 122
    3938:	54 e4       	ldi	r21, 0x44	; 68
    393a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	8c 87       	std	Y+12, r24	; 0x0c
    3944:	9d 87       	std	Y+13, r25	; 0x0d
    3946:	ae 87       	std	Y+14, r26	; 0x0e
    3948:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    394a:	6c 85       	ldd	r22, Y+12	; 0x0c
    394c:	7d 85       	ldd	r23, Y+13	; 0x0d
    394e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3950:	9f 85       	ldd	r25, Y+15	; 0x0f
    3952:	20 e0       	ldi	r18, 0x00	; 0
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	4a ef       	ldi	r20, 0xFA	; 250
    3958:	54 e4       	ldi	r21, 0x44	; 68
    395a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    395e:	dc 01       	movw	r26, r24
    3960:	cb 01       	movw	r24, r22
    3962:	88 87       	std	Y+8, r24	; 0x08
    3964:	99 87       	std	Y+9, r25	; 0x09
    3966:	aa 87       	std	Y+10, r26	; 0x0a
    3968:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    396a:	68 85       	ldd	r22, Y+8	; 0x08
    396c:	79 85       	ldd	r23, Y+9	; 0x09
    396e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3970:	9b 85       	ldd	r25, Y+11	; 0x0b
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	40 e8       	ldi	r20, 0x80	; 128
    3978:	5f e3       	ldi	r21, 0x3F	; 63
    397a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    397e:	88 23       	and	r24, r24
    3980:	2c f4       	brge	.+10     	; 0x398c <LCD_function_Set_4bit+0xeb6>
		__ticks = 1;
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	9f 83       	std	Y+7, r25	; 0x07
    3988:	8e 83       	std	Y+6, r24	; 0x06
    398a:	3f c0       	rjmp	.+126    	; 0x3a0a <LCD_function_Set_4bit+0xf34>
	else if (__tmp > 65535)
    398c:	68 85       	ldd	r22, Y+8	; 0x08
    398e:	79 85       	ldd	r23, Y+9	; 0x09
    3990:	8a 85       	ldd	r24, Y+10	; 0x0a
    3992:	9b 85       	ldd	r25, Y+11	; 0x0b
    3994:	20 e0       	ldi	r18, 0x00	; 0
    3996:	3f ef       	ldi	r19, 0xFF	; 255
    3998:	4f e7       	ldi	r20, 0x7F	; 127
    399a:	57 e4       	ldi	r21, 0x47	; 71
    399c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    39a0:	18 16       	cp	r1, r24
    39a2:	4c f5       	brge	.+82     	; 0x39f6 <LCD_function_Set_4bit+0xf20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    39a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    39a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    39aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    39ac:	20 e0       	ldi	r18, 0x00	; 0
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	40 e2       	ldi	r20, 0x20	; 32
    39b2:	51 e4       	ldi	r21, 0x41	; 65
    39b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    39b8:	dc 01       	movw	r26, r24
    39ba:	cb 01       	movw	r24, r22
    39bc:	bc 01       	movw	r22, r24
    39be:	cd 01       	movw	r24, r26
    39c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	9f 83       	std	Y+7, r25	; 0x07
    39ca:	8e 83       	std	Y+6, r24	; 0x06
    39cc:	0f c0       	rjmp	.+30     	; 0x39ec <LCD_function_Set_4bit+0xf16>
    39ce:	88 ec       	ldi	r24, 0xC8	; 200
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	9d 83       	std	Y+5, r25	; 0x05
    39d4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39d6:	8c 81       	ldd	r24, Y+4	; 0x04
    39d8:	9d 81       	ldd	r25, Y+5	; 0x05
    39da:	01 97       	sbiw	r24, 0x01	; 1
    39dc:	f1 f7       	brne	.-4      	; 0x39da <LCD_function_Set_4bit+0xf04>
    39de:	9d 83       	std	Y+5, r25	; 0x05
    39e0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39e2:	8e 81       	ldd	r24, Y+6	; 0x06
    39e4:	9f 81       	ldd	r25, Y+7	; 0x07
    39e6:	01 97       	sbiw	r24, 0x01	; 1
    39e8:	9f 83       	std	Y+7, r25	; 0x07
    39ea:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ec:	8e 81       	ldd	r24, Y+6	; 0x06
    39ee:	9f 81       	ldd	r25, Y+7	; 0x07
    39f0:	00 97       	sbiw	r24, 0x00	; 0
    39f2:	69 f7       	brne	.-38     	; 0x39ce <LCD_function_Set_4bit+0xef8>
    39f4:	24 c0       	rjmp	.+72     	; 0x3a3e <LCD_function_Set_4bit+0xf68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39f6:	68 85       	ldd	r22, Y+8	; 0x08
    39f8:	79 85       	ldd	r23, Y+9	; 0x09
    39fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    39fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    39fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	9f 83       	std	Y+7, r25	; 0x07
    3a08:	8e 83       	std	Y+6, r24	; 0x06
    3a0a:	8e 81       	ldd	r24, Y+6	; 0x06
    3a0c:	9f 81       	ldd	r25, Y+7	; 0x07
    3a0e:	9b 83       	std	Y+3, r25	; 0x03
    3a10:	8a 83       	std	Y+2, r24	; 0x02
    3a12:	8a 81       	ldd	r24, Y+2	; 0x02
    3a14:	9b 81       	ldd	r25, Y+3	; 0x03
    3a16:	01 97       	sbiw	r24, 0x01	; 1
    3a18:	f1 f7       	brne	.-4      	; 0x3a16 <LCD_function_Set_4bit+0xf40>
    3a1a:	9b 83       	std	Y+3, r25	; 0x03
    3a1c:	8a 83       	std	Y+2, r24	; 0x02
    3a1e:	0f c0       	rjmp	.+30     	; 0x3a3e <LCD_function_Set_4bit+0xf68>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a20:	69 89       	ldd	r22, Y+17	; 0x11
    3a22:	7a 89       	ldd	r23, Y+18	; 0x12
    3a24:	8b 89       	ldd	r24, Y+19	; 0x13
    3a26:	9c 89       	ldd	r25, Y+20	; 0x14
    3a28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a2c:	dc 01       	movw	r26, r24
    3a2e:	cb 01       	movw	r24, r22
    3a30:	88 8b       	std	Y+16, r24	; 0x10
    3a32:	88 89       	ldd	r24, Y+16	; 0x10
    3a34:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a36:	89 81       	ldd	r24, Y+1	; 0x01
    3a38:	8a 95       	dec	r24
    3a3a:	f1 f7       	brne	.-4      	; 0x3a38 <LCD_function_Set_4bit+0xf62>
    3a3c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);

}
    3a3e:	c5 55       	subi	r28, 0x55	; 85
    3a40:	df 4f       	sbci	r29, 0xFF	; 255
    3a42:	0f b6       	in	r0, 0x3f	; 63
    3a44:	f8 94       	cli
    3a46:	de bf       	out	0x3e, r29	; 62
    3a48:	0f be       	out	0x3f, r0	; 63
    3a4a:	cd bf       	out	0x3d, r28	; 61
    3a4c:	cf 91       	pop	r28
    3a4e:	df 91       	pop	r29
    3a50:	1f 91       	pop	r17
    3a52:	0f 91       	pop	r16
    3a54:	08 95       	ret

00003a56 <LCD_init>:



/* Driver features functions for the user */

void LCD_init(){
    3a56:	0f 93       	push	r16
    3a58:	1f 93       	push	r17
    3a5a:	df 93       	push	r29
    3a5c:	cf 93       	push	r28
    3a5e:	cd b7       	in	r28, 0x3d	; 61
    3a60:	de b7       	in	r29, 0x3e	; 62
    3a62:	cc 54       	subi	r28, 0x4C	; 76
    3a64:	d0 40       	sbci	r29, 0x00	; 0
    3a66:	0f b6       	in	r0, 0x3f	; 63
    3a68:	f8 94       	cli
    3a6a:	de bf       	out	0x3e, r29	; 62
    3a6c:	0f be       	out	0x3f, r0	; 63
    3a6e:	cd bf       	out	0x3d, r28	; 61

#elif LCD_interface_mode == interface_4bit


	// configure data pins direction
	DIO_void_set_pin_dir(lcd_data_port, B7, OUTPUT);
    3a70:	80 e0       	ldi	r24, 0x00	; 0
    3a72:	67 e0       	ldi	r22, 0x07	; 7
    3a74:	41 e0       	ldi	r20, 0x01	; 1
    3a76:	0e 94 0d 07 	call	0xe1a	; 0xe1a <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, OUTPUT);
    3a7a:	80 e0       	ldi	r24, 0x00	; 0
    3a7c:	66 e0       	ldi	r22, 0x06	; 6
    3a7e:	41 e0       	ldi	r20, 0x01	; 1
    3a80:	0e 94 0d 07 	call	0xe1a	; 0xe1a <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, OUTPUT);
    3a84:	80 e0       	ldi	r24, 0x00	; 0
    3a86:	65 e0       	ldi	r22, 0x05	; 5
    3a88:	41 e0       	ldi	r20, 0x01	; 1
    3a8a:	0e 94 0d 07 	call	0xe1a	; 0xe1a <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, OUTPUT);
    3a8e:	80 e0       	ldi	r24, 0x00	; 0
    3a90:	64 e0       	ldi	r22, 0x04	; 4
    3a92:	41 e0       	ldi	r20, 0x01	; 1
    3a94:	0e 94 0d 07 	call	0xe1a	; 0xe1a <DIO_void_set_pin_dir>
	// RS,RW,E as  output
	DIO_void_set_pin_dir(lcd_control_port, lcd_RS, OUTPUT);
    3a98:	81 e0       	ldi	r24, 0x01	; 1
    3a9a:	62 e0       	ldi	r22, 0x02	; 2
    3a9c:	41 e0       	ldi	r20, 0x01	; 1
    3a9e:	0e 94 0d 07 	call	0xe1a	; 0xe1a <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_control_port, lcd_RW, OUTPUT);
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	61 e0       	ldi	r22, 0x01	; 1
    3aa6:	41 e0       	ldi	r20, 0x01	; 1
    3aa8:	0e 94 0d 07 	call	0xe1a	; 0xe1a <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_control_port, lcd_enable, OUTPUT);
    3aac:	81 e0       	ldi	r24, 0x01	; 1
    3aae:	60 e0       	ldi	r22, 0x00	; 0
    3ab0:	41 e0       	ldi	r20, 0x01	; 1
    3ab2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <DIO_void_set_pin_dir>
    3ab6:	fe 01       	movw	r30, r28
    3ab8:	e7 5b       	subi	r30, 0xB7	; 183
    3aba:	ff 4f       	sbci	r31, 0xFF	; 255
    3abc:	80 e0       	ldi	r24, 0x00	; 0
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	a8 e4       	ldi	r26, 0x48	; 72
    3ac2:	b2 e4       	ldi	r27, 0x42	; 66
    3ac4:	80 83       	st	Z, r24
    3ac6:	91 83       	std	Z+1, r25	; 0x01
    3ac8:	a2 83       	std	Z+2, r26	; 0x02
    3aca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3acc:	8e 01       	movw	r16, r28
    3ace:	0b 5b       	subi	r16, 0xBB	; 187
    3ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad2:	fe 01       	movw	r30, r28
    3ad4:	e7 5b       	subi	r30, 0xB7	; 183
    3ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad8:	60 81       	ld	r22, Z
    3ada:	71 81       	ldd	r23, Z+1	; 0x01
    3adc:	82 81       	ldd	r24, Z+2	; 0x02
    3ade:	93 81       	ldd	r25, Z+3	; 0x03
    3ae0:	20 e0       	ldi	r18, 0x00	; 0
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	4a ef       	ldi	r20, 0xFA	; 250
    3ae6:	54 e4       	ldi	r21, 0x44	; 68
    3ae8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3aec:	dc 01       	movw	r26, r24
    3aee:	cb 01       	movw	r24, r22
    3af0:	f8 01       	movw	r30, r16
    3af2:	80 83       	st	Z, r24
    3af4:	91 83       	std	Z+1, r25	; 0x01
    3af6:	a2 83       	std	Z+2, r26	; 0x02
    3af8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3afa:	fe 01       	movw	r30, r28
    3afc:	eb 5b       	subi	r30, 0xBB	; 187
    3afe:	ff 4f       	sbci	r31, 0xFF	; 255
    3b00:	60 81       	ld	r22, Z
    3b02:	71 81       	ldd	r23, Z+1	; 0x01
    3b04:	82 81       	ldd	r24, Z+2	; 0x02
    3b06:	93 81       	ldd	r25, Z+3	; 0x03
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	40 e8       	ldi	r20, 0x80	; 128
    3b0e:	5f e3       	ldi	r21, 0x3F	; 63
    3b10:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3b14:	88 23       	and	r24, r24
    3b16:	44 f4       	brge	.+16     	; 0x3b28 <LCD_init+0xd2>
		__ticks = 1;
    3b18:	fe 01       	movw	r30, r28
    3b1a:	ed 5b       	subi	r30, 0xBD	; 189
    3b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1e:	81 e0       	ldi	r24, 0x01	; 1
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	91 83       	std	Z+1, r25	; 0x01
    3b24:	80 83       	st	Z, r24
    3b26:	64 c0       	rjmp	.+200    	; 0x3bf0 <LCD_init+0x19a>
	else if (__tmp > 65535)
    3b28:	fe 01       	movw	r30, r28
    3b2a:	eb 5b       	subi	r30, 0xBB	; 187
    3b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2e:	60 81       	ld	r22, Z
    3b30:	71 81       	ldd	r23, Z+1	; 0x01
    3b32:	82 81       	ldd	r24, Z+2	; 0x02
    3b34:	93 81       	ldd	r25, Z+3	; 0x03
    3b36:	20 e0       	ldi	r18, 0x00	; 0
    3b38:	3f ef       	ldi	r19, 0xFF	; 255
    3b3a:	4f e7       	ldi	r20, 0x7F	; 127
    3b3c:	57 e4       	ldi	r21, 0x47	; 71
    3b3e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3b42:	18 16       	cp	r1, r24
    3b44:	0c f0       	brlt	.+2      	; 0x3b48 <LCD_init+0xf2>
    3b46:	43 c0       	rjmp	.+134    	; 0x3bce <LCD_init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b48:	fe 01       	movw	r30, r28
    3b4a:	e7 5b       	subi	r30, 0xB7	; 183
    3b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4e:	60 81       	ld	r22, Z
    3b50:	71 81       	ldd	r23, Z+1	; 0x01
    3b52:	82 81       	ldd	r24, Z+2	; 0x02
    3b54:	93 81       	ldd	r25, Z+3	; 0x03
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	30 e0       	ldi	r19, 0x00	; 0
    3b5a:	40 e2       	ldi	r20, 0x20	; 32
    3b5c:	51 e4       	ldi	r21, 0x41	; 65
    3b5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b62:	dc 01       	movw	r26, r24
    3b64:	cb 01       	movw	r24, r22
    3b66:	8e 01       	movw	r16, r28
    3b68:	0d 5b       	subi	r16, 0xBD	; 189
    3b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b6c:	bc 01       	movw	r22, r24
    3b6e:	cd 01       	movw	r24, r26
    3b70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b74:	dc 01       	movw	r26, r24
    3b76:	cb 01       	movw	r24, r22
    3b78:	f8 01       	movw	r30, r16
    3b7a:	91 83       	std	Z+1, r25	; 0x01
    3b7c:	80 83       	st	Z, r24
    3b7e:	1f c0       	rjmp	.+62     	; 0x3bbe <LCD_init+0x168>
    3b80:	fe 01       	movw	r30, r28
    3b82:	ef 5b       	subi	r30, 0xBF	; 191
    3b84:	ff 4f       	sbci	r31, 0xFF	; 255
    3b86:	88 ec       	ldi	r24, 0xC8	; 200
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	91 83       	std	Z+1, r25	; 0x01
    3b8c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b8e:	fe 01       	movw	r30, r28
    3b90:	ef 5b       	subi	r30, 0xBF	; 191
    3b92:	ff 4f       	sbci	r31, 0xFF	; 255
    3b94:	80 81       	ld	r24, Z
    3b96:	91 81       	ldd	r25, Z+1	; 0x01
    3b98:	01 97       	sbiw	r24, 0x01	; 1
    3b9a:	f1 f7       	brne	.-4      	; 0x3b98 <LCD_init+0x142>
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	ef 5b       	subi	r30, 0xBF	; 191
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	91 83       	std	Z+1, r25	; 0x01
    3ba4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba6:	de 01       	movw	r26, r28
    3ba8:	ad 5b       	subi	r26, 0xBD	; 189
    3baa:	bf 4f       	sbci	r27, 0xFF	; 255
    3bac:	fe 01       	movw	r30, r28
    3bae:	ed 5b       	subi	r30, 0xBD	; 189
    3bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb2:	80 81       	ld	r24, Z
    3bb4:	91 81       	ldd	r25, Z+1	; 0x01
    3bb6:	01 97       	sbiw	r24, 0x01	; 1
    3bb8:	11 96       	adiw	r26, 0x01	; 1
    3bba:	9c 93       	st	X, r25
    3bbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	ed 5b       	subi	r30, 0xBD	; 189
    3bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc4:	80 81       	ld	r24, Z
    3bc6:	91 81       	ldd	r25, Z+1	; 0x01
    3bc8:	00 97       	sbiw	r24, 0x00	; 0
    3bca:	d1 f6       	brne	.-76     	; 0x3b80 <LCD_init+0x12a>
    3bcc:	24 c0       	rjmp	.+72     	; 0x3c16 <LCD_init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bce:	8e 01       	movw	r16, r28
    3bd0:	0d 5b       	subi	r16, 0xBD	; 189
    3bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bd4:	fe 01       	movw	r30, r28
    3bd6:	eb 5b       	subi	r30, 0xBB	; 187
    3bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bda:	60 81       	ld	r22, Z
    3bdc:	71 81       	ldd	r23, Z+1	; 0x01
    3bde:	82 81       	ldd	r24, Z+2	; 0x02
    3be0:	93 81       	ldd	r25, Z+3	; 0x03
    3be2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3be6:	dc 01       	movw	r26, r24
    3be8:	cb 01       	movw	r24, r22
    3bea:	f8 01       	movw	r30, r16
    3bec:	91 83       	std	Z+1, r25	; 0x01
    3bee:	80 83       	st	Z, r24
    3bf0:	fe 01       	movw	r30, r28
    3bf2:	ed 5b       	subi	r30, 0xBD	; 189
    3bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf6:	80 81       	ld	r24, Z
    3bf8:	91 81       	ldd	r25, Z+1	; 0x01
    3bfa:	fe 01       	movw	r30, r28
    3bfc:	ff 96       	adiw	r30, 0x3f	; 63
    3bfe:	91 83       	std	Z+1, r25	; 0x01
    3c00:	80 83       	st	Z, r24
    3c02:	fe 01       	movw	r30, r28
    3c04:	ff 96       	adiw	r30, 0x3f	; 63
    3c06:	80 81       	ld	r24, Z
    3c08:	91 81       	ldd	r25, Z+1	; 0x01
    3c0a:	01 97       	sbiw	r24, 0x01	; 1
    3c0c:	f1 f7       	brne	.-4      	; 0x3c0a <LCD_init+0x1b4>
    3c0e:	fe 01       	movw	r30, r28
    3c10:	ff 96       	adiw	r30, 0x3f	; 63
    3c12:	91 83       	std	Z+1, r25	; 0x01
    3c14:	80 83       	st	Z, r24
	//wait for
	_delay_ms(50);
	// init 4bit
	LCD_function_Set_4bit();
    3c16:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LCD_function_Set_4bit>
    3c1a:	80 e0       	ldi	r24, 0x00	; 0
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	a8 e4       	ldi	r26, 0x48	; 72
    3c20:	b2 e4       	ldi	r27, 0x42	; 66
    3c22:	8b af       	std	Y+59, r24	; 0x3b
    3c24:	9c af       	std	Y+60, r25	; 0x3c
    3c26:	ad af       	std	Y+61, r26	; 0x3d
    3c28:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c2a:	6b ad       	ldd	r22, Y+59	; 0x3b
    3c2c:	7c ad       	ldd	r23, Y+60	; 0x3c
    3c2e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c30:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c32:	2b ea       	ldi	r18, 0xAB	; 171
    3c34:	3a ea       	ldi	r19, 0xAA	; 170
    3c36:	4a e2       	ldi	r20, 0x2A	; 42
    3c38:	50 e4       	ldi	r21, 0x40	; 64
    3c3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c3e:	dc 01       	movw	r26, r24
    3c40:	cb 01       	movw	r24, r22
    3c42:	8f ab       	std	Y+55, r24	; 0x37
    3c44:	98 af       	std	Y+56, r25	; 0x38
    3c46:	a9 af       	std	Y+57, r26	; 0x39
    3c48:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    3c4a:	6f a9       	ldd	r22, Y+55	; 0x37
    3c4c:	78 ad       	ldd	r23, Y+56	; 0x38
    3c4e:	89 ad       	ldd	r24, Y+57	; 0x39
    3c50:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c52:	20 e0       	ldi	r18, 0x00	; 0
    3c54:	30 e0       	ldi	r19, 0x00	; 0
    3c56:	40 e8       	ldi	r20, 0x80	; 128
    3c58:	5f e3       	ldi	r21, 0x3F	; 63
    3c5a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3c5e:	88 23       	and	r24, r24
    3c60:	1c f4       	brge	.+6      	; 0x3c68 <LCD_init+0x212>
		__ticks = 1;
    3c62:	81 e0       	ldi	r24, 0x01	; 1
    3c64:	8e ab       	std	Y+54, r24	; 0x36
    3c66:	91 c0       	rjmp	.+290    	; 0x3d8a <LCD_init+0x334>
	else if (__tmp > 255)
    3c68:	6f a9       	ldd	r22, Y+55	; 0x37
    3c6a:	78 ad       	ldd	r23, Y+56	; 0x38
    3c6c:	89 ad       	ldd	r24, Y+57	; 0x39
    3c6e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c70:	20 e0       	ldi	r18, 0x00	; 0
    3c72:	30 e0       	ldi	r19, 0x00	; 0
    3c74:	4f e7       	ldi	r20, 0x7F	; 127
    3c76:	53 e4       	ldi	r21, 0x43	; 67
    3c78:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3c7c:	18 16       	cp	r1, r24
    3c7e:	0c f0       	brlt	.+2      	; 0x3c82 <LCD_init+0x22c>
    3c80:	7b c0       	rjmp	.+246    	; 0x3d78 <LCD_init+0x322>
	{
		_delay_ms(__us / 1000.0);
    3c82:	6b ad       	ldd	r22, Y+59	; 0x3b
    3c84:	7c ad       	ldd	r23, Y+60	; 0x3c
    3c86:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c88:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c8a:	20 e0       	ldi	r18, 0x00	; 0
    3c8c:	30 e0       	ldi	r19, 0x00	; 0
    3c8e:	4a e7       	ldi	r20, 0x7A	; 122
    3c90:	54 e4       	ldi	r21, 0x44	; 68
    3c92:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3c96:	dc 01       	movw	r26, r24
    3c98:	cb 01       	movw	r24, r22
    3c9a:	8a ab       	std	Y+50, r24	; 0x32
    3c9c:	9b ab       	std	Y+51, r25	; 0x33
    3c9e:	ac ab       	std	Y+52, r26	; 0x34
    3ca0:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ca2:	6a a9       	ldd	r22, Y+50	; 0x32
    3ca4:	7b a9       	ldd	r23, Y+51	; 0x33
    3ca6:	8c a9       	ldd	r24, Y+52	; 0x34
    3ca8:	9d a9       	ldd	r25, Y+53	; 0x35
    3caa:	20 e0       	ldi	r18, 0x00	; 0
    3cac:	30 e0       	ldi	r19, 0x00	; 0
    3cae:	4a ef       	ldi	r20, 0xFA	; 250
    3cb0:	54 e4       	ldi	r21, 0x44	; 68
    3cb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3cb6:	dc 01       	movw	r26, r24
    3cb8:	cb 01       	movw	r24, r22
    3cba:	8e a7       	std	Y+46, r24	; 0x2e
    3cbc:	9f a7       	std	Y+47, r25	; 0x2f
    3cbe:	a8 ab       	std	Y+48, r26	; 0x30
    3cc0:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    3cc2:	6e a5       	ldd	r22, Y+46	; 0x2e
    3cc4:	7f a5       	ldd	r23, Y+47	; 0x2f
    3cc6:	88 a9       	ldd	r24, Y+48	; 0x30
    3cc8:	99 a9       	ldd	r25, Y+49	; 0x31
    3cca:	20 e0       	ldi	r18, 0x00	; 0
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	40 e8       	ldi	r20, 0x80	; 128
    3cd0:	5f e3       	ldi	r21, 0x3F	; 63
    3cd2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3cd6:	88 23       	and	r24, r24
    3cd8:	2c f4       	brge	.+10     	; 0x3ce4 <LCD_init+0x28e>
		__ticks = 1;
    3cda:	81 e0       	ldi	r24, 0x01	; 1
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	9d a7       	std	Y+45, r25	; 0x2d
    3ce0:	8c a7       	std	Y+44, r24	; 0x2c
    3ce2:	3f c0       	rjmp	.+126    	; 0x3d62 <LCD_init+0x30c>
	else if (__tmp > 65535)
    3ce4:	6e a5       	ldd	r22, Y+46	; 0x2e
    3ce6:	7f a5       	ldd	r23, Y+47	; 0x2f
    3ce8:	88 a9       	ldd	r24, Y+48	; 0x30
    3cea:	99 a9       	ldd	r25, Y+49	; 0x31
    3cec:	20 e0       	ldi	r18, 0x00	; 0
    3cee:	3f ef       	ldi	r19, 0xFF	; 255
    3cf0:	4f e7       	ldi	r20, 0x7F	; 127
    3cf2:	57 e4       	ldi	r21, 0x47	; 71
    3cf4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3cf8:	18 16       	cp	r1, r24
    3cfa:	4c f5       	brge	.+82     	; 0x3d4e <LCD_init+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cfc:	6a a9       	ldd	r22, Y+50	; 0x32
    3cfe:	7b a9       	ldd	r23, Y+51	; 0x33
    3d00:	8c a9       	ldd	r24, Y+52	; 0x34
    3d02:	9d a9       	ldd	r25, Y+53	; 0x35
    3d04:	20 e0       	ldi	r18, 0x00	; 0
    3d06:	30 e0       	ldi	r19, 0x00	; 0
    3d08:	40 e2       	ldi	r20, 0x20	; 32
    3d0a:	51 e4       	ldi	r21, 0x41	; 65
    3d0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d10:	dc 01       	movw	r26, r24
    3d12:	cb 01       	movw	r24, r22
    3d14:	bc 01       	movw	r22, r24
    3d16:	cd 01       	movw	r24, r26
    3d18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d1c:	dc 01       	movw	r26, r24
    3d1e:	cb 01       	movw	r24, r22
    3d20:	9d a7       	std	Y+45, r25	; 0x2d
    3d22:	8c a7       	std	Y+44, r24	; 0x2c
    3d24:	0f c0       	rjmp	.+30     	; 0x3d44 <LCD_init+0x2ee>
    3d26:	88 ec       	ldi	r24, 0xC8	; 200
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	9b a7       	std	Y+43, r25	; 0x2b
    3d2c:	8a a7       	std	Y+42, r24	; 0x2a
    3d2e:	8a a5       	ldd	r24, Y+42	; 0x2a
    3d30:	9b a5       	ldd	r25, Y+43	; 0x2b
    3d32:	01 97       	sbiw	r24, 0x01	; 1
    3d34:	f1 f7       	brne	.-4      	; 0x3d32 <LCD_init+0x2dc>
    3d36:	9b a7       	std	Y+43, r25	; 0x2b
    3d38:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d3a:	8c a5       	ldd	r24, Y+44	; 0x2c
    3d3c:	9d a5       	ldd	r25, Y+45	; 0x2d
    3d3e:	01 97       	sbiw	r24, 0x01	; 1
    3d40:	9d a7       	std	Y+45, r25	; 0x2d
    3d42:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d44:	8c a5       	ldd	r24, Y+44	; 0x2c
    3d46:	9d a5       	ldd	r25, Y+45	; 0x2d
    3d48:	00 97       	sbiw	r24, 0x00	; 0
    3d4a:	69 f7       	brne	.-38     	; 0x3d26 <LCD_init+0x2d0>
    3d4c:	24 c0       	rjmp	.+72     	; 0x3d96 <LCD_init+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d4e:	6e a5       	ldd	r22, Y+46	; 0x2e
    3d50:	7f a5       	ldd	r23, Y+47	; 0x2f
    3d52:	88 a9       	ldd	r24, Y+48	; 0x30
    3d54:	99 a9       	ldd	r25, Y+49	; 0x31
    3d56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	cb 01       	movw	r24, r22
    3d5e:	9d a7       	std	Y+45, r25	; 0x2d
    3d60:	8c a7       	std	Y+44, r24	; 0x2c
    3d62:	8c a5       	ldd	r24, Y+44	; 0x2c
    3d64:	9d a5       	ldd	r25, Y+45	; 0x2d
    3d66:	99 a7       	std	Y+41, r25	; 0x29
    3d68:	88 a7       	std	Y+40, r24	; 0x28
    3d6a:	88 a5       	ldd	r24, Y+40	; 0x28
    3d6c:	99 a5       	ldd	r25, Y+41	; 0x29
    3d6e:	01 97       	sbiw	r24, 0x01	; 1
    3d70:	f1 f7       	brne	.-4      	; 0x3d6e <LCD_init+0x318>
    3d72:	99 a7       	std	Y+41, r25	; 0x29
    3d74:	88 a7       	std	Y+40, r24	; 0x28
    3d76:	0f c0       	rjmp	.+30     	; 0x3d96 <LCD_init+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3d78:	6f a9       	ldd	r22, Y+55	; 0x37
    3d7a:	78 ad       	ldd	r23, Y+56	; 0x38
    3d7c:	89 ad       	ldd	r24, Y+57	; 0x39
    3d7e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3d80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d84:	dc 01       	movw	r26, r24
    3d86:	cb 01       	movw	r24, r22
    3d88:	8e ab       	std	Y+54, r24	; 0x36
    3d8a:	8e a9       	ldd	r24, Y+54	; 0x36
    3d8c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3d8e:	8f a1       	ldd	r24, Y+39	; 0x27
    3d90:	8a 95       	dec	r24
    3d92:	f1 f7       	brne	.-4      	; 0x3d90 <LCD_init+0x33a>
    3d94:	8f a3       	std	Y+39, r24	; 0x27
	// wait > 30 us
	_delay_us(50);
	LCD_write_command_4bit(display_On);
    3d96:	8c e0       	ldi	r24, 0x0C	; 12
    3d98:	0e 94 4f 11 	call	0x229e	; 0x229e <LCD_write_command_4bit>
    3d9c:	80 e0       	ldi	r24, 0x00	; 0
    3d9e:	90 e0       	ldi	r25, 0x00	; 0
    3da0:	a8 e4       	ldi	r26, 0x48	; 72
    3da2:	b2 e4       	ldi	r27, 0x42	; 66
    3da4:	8b a3       	std	Y+35, r24	; 0x23
    3da6:	9c a3       	std	Y+36, r25	; 0x24
    3da8:	ad a3       	std	Y+37, r26	; 0x25
    3daa:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3dac:	6b a1       	ldd	r22, Y+35	; 0x23
    3dae:	7c a1       	ldd	r23, Y+36	; 0x24
    3db0:	8d a1       	ldd	r24, Y+37	; 0x25
    3db2:	9e a1       	ldd	r25, Y+38	; 0x26
    3db4:	2b ea       	ldi	r18, 0xAB	; 171
    3db6:	3a ea       	ldi	r19, 0xAA	; 170
    3db8:	4a e2       	ldi	r20, 0x2A	; 42
    3dba:	50 e4       	ldi	r21, 0x40	; 64
    3dbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3dc0:	dc 01       	movw	r26, r24
    3dc2:	cb 01       	movw	r24, r22
    3dc4:	8f 8f       	std	Y+31, r24	; 0x1f
    3dc6:	98 a3       	std	Y+32, r25	; 0x20
    3dc8:	a9 a3       	std	Y+33, r26	; 0x21
    3dca:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3dcc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3dce:	78 a1       	ldd	r23, Y+32	; 0x20
    3dd0:	89 a1       	ldd	r24, Y+33	; 0x21
    3dd2:	9a a1       	ldd	r25, Y+34	; 0x22
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	40 e8       	ldi	r20, 0x80	; 128
    3dda:	5f e3       	ldi	r21, 0x3F	; 63
    3ddc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3de0:	88 23       	and	r24, r24
    3de2:	1c f4       	brge	.+6      	; 0x3dea <LCD_init+0x394>
		__ticks = 1;
    3de4:	81 e0       	ldi	r24, 0x01	; 1
    3de6:	8e 8f       	std	Y+30, r24	; 0x1e
    3de8:	91 c0       	rjmp	.+290    	; 0x3f0c <LCD_init+0x4b6>
	else if (__tmp > 255)
    3dea:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3dec:	78 a1       	ldd	r23, Y+32	; 0x20
    3dee:	89 a1       	ldd	r24, Y+33	; 0x21
    3df0:	9a a1       	ldd	r25, Y+34	; 0x22
    3df2:	20 e0       	ldi	r18, 0x00	; 0
    3df4:	30 e0       	ldi	r19, 0x00	; 0
    3df6:	4f e7       	ldi	r20, 0x7F	; 127
    3df8:	53 e4       	ldi	r21, 0x43	; 67
    3dfa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3dfe:	18 16       	cp	r1, r24
    3e00:	0c f0       	brlt	.+2      	; 0x3e04 <LCD_init+0x3ae>
    3e02:	7b c0       	rjmp	.+246    	; 0x3efa <LCD_init+0x4a4>
	{
		_delay_ms(__us / 1000.0);
    3e04:	6b a1       	ldd	r22, Y+35	; 0x23
    3e06:	7c a1       	ldd	r23, Y+36	; 0x24
    3e08:	8d a1       	ldd	r24, Y+37	; 0x25
    3e0a:	9e a1       	ldd	r25, Y+38	; 0x26
    3e0c:	20 e0       	ldi	r18, 0x00	; 0
    3e0e:	30 e0       	ldi	r19, 0x00	; 0
    3e10:	4a e7       	ldi	r20, 0x7A	; 122
    3e12:	54 e4       	ldi	r21, 0x44	; 68
    3e14:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3e18:	dc 01       	movw	r26, r24
    3e1a:	cb 01       	movw	r24, r22
    3e1c:	8a 8f       	std	Y+26, r24	; 0x1a
    3e1e:	9b 8f       	std	Y+27, r25	; 0x1b
    3e20:	ac 8f       	std	Y+28, r26	; 0x1c
    3e22:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e24:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3e26:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3e28:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3e2a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3e2c:	20 e0       	ldi	r18, 0x00	; 0
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	4a ef       	ldi	r20, 0xFA	; 250
    3e32:	54 e4       	ldi	r21, 0x44	; 68
    3e34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e38:	dc 01       	movw	r26, r24
    3e3a:	cb 01       	movw	r24, r22
    3e3c:	8e 8b       	std	Y+22, r24	; 0x16
    3e3e:	9f 8b       	std	Y+23, r25	; 0x17
    3e40:	a8 8f       	std	Y+24, r26	; 0x18
    3e42:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    3e44:	6e 89       	ldd	r22, Y+22	; 0x16
    3e46:	7f 89       	ldd	r23, Y+23	; 0x17
    3e48:	88 8d       	ldd	r24, Y+24	; 0x18
    3e4a:	99 8d       	ldd	r25, Y+25	; 0x19
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	40 e8       	ldi	r20, 0x80	; 128
    3e52:	5f e3       	ldi	r21, 0x3F	; 63
    3e54:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3e58:	88 23       	and	r24, r24
    3e5a:	2c f4       	brge	.+10     	; 0x3e66 <LCD_init+0x410>
		__ticks = 1;
    3e5c:	81 e0       	ldi	r24, 0x01	; 1
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	9d 8b       	std	Y+21, r25	; 0x15
    3e62:	8c 8b       	std	Y+20, r24	; 0x14
    3e64:	3f c0       	rjmp	.+126    	; 0x3ee4 <LCD_init+0x48e>
	else if (__tmp > 65535)
    3e66:	6e 89       	ldd	r22, Y+22	; 0x16
    3e68:	7f 89       	ldd	r23, Y+23	; 0x17
    3e6a:	88 8d       	ldd	r24, Y+24	; 0x18
    3e6c:	99 8d       	ldd	r25, Y+25	; 0x19
    3e6e:	20 e0       	ldi	r18, 0x00	; 0
    3e70:	3f ef       	ldi	r19, 0xFF	; 255
    3e72:	4f e7       	ldi	r20, 0x7F	; 127
    3e74:	57 e4       	ldi	r21, 0x47	; 71
    3e76:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3e7a:	18 16       	cp	r1, r24
    3e7c:	4c f5       	brge	.+82     	; 0x3ed0 <LCD_init+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e7e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3e80:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3e82:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3e84:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3e86:	20 e0       	ldi	r18, 0x00	; 0
    3e88:	30 e0       	ldi	r19, 0x00	; 0
    3e8a:	40 e2       	ldi	r20, 0x20	; 32
    3e8c:	51 e4       	ldi	r21, 0x41	; 65
    3e8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e92:	dc 01       	movw	r26, r24
    3e94:	cb 01       	movw	r24, r22
    3e96:	bc 01       	movw	r22, r24
    3e98:	cd 01       	movw	r24, r26
    3e9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e9e:	dc 01       	movw	r26, r24
    3ea0:	cb 01       	movw	r24, r22
    3ea2:	9d 8b       	std	Y+21, r25	; 0x15
    3ea4:	8c 8b       	std	Y+20, r24	; 0x14
    3ea6:	0f c0       	rjmp	.+30     	; 0x3ec6 <LCD_init+0x470>
    3ea8:	88 ec       	ldi	r24, 0xC8	; 200
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	9b 8b       	std	Y+19, r25	; 0x13
    3eae:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3eb0:	8a 89       	ldd	r24, Y+18	; 0x12
    3eb2:	9b 89       	ldd	r25, Y+19	; 0x13
    3eb4:	01 97       	sbiw	r24, 0x01	; 1
    3eb6:	f1 f7       	brne	.-4      	; 0x3eb4 <LCD_init+0x45e>
    3eb8:	9b 8b       	std	Y+19, r25	; 0x13
    3eba:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ebc:	8c 89       	ldd	r24, Y+20	; 0x14
    3ebe:	9d 89       	ldd	r25, Y+21	; 0x15
    3ec0:	01 97       	sbiw	r24, 0x01	; 1
    3ec2:	9d 8b       	std	Y+21, r25	; 0x15
    3ec4:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ec6:	8c 89       	ldd	r24, Y+20	; 0x14
    3ec8:	9d 89       	ldd	r25, Y+21	; 0x15
    3eca:	00 97       	sbiw	r24, 0x00	; 0
    3ecc:	69 f7       	brne	.-38     	; 0x3ea8 <LCD_init+0x452>
    3ece:	24 c0       	rjmp	.+72     	; 0x3f18 <LCD_init+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ed0:	6e 89       	ldd	r22, Y+22	; 0x16
    3ed2:	7f 89       	ldd	r23, Y+23	; 0x17
    3ed4:	88 8d       	ldd	r24, Y+24	; 0x18
    3ed6:	99 8d       	ldd	r25, Y+25	; 0x19
    3ed8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3edc:	dc 01       	movw	r26, r24
    3ede:	cb 01       	movw	r24, r22
    3ee0:	9d 8b       	std	Y+21, r25	; 0x15
    3ee2:	8c 8b       	std	Y+20, r24	; 0x14
    3ee4:	8c 89       	ldd	r24, Y+20	; 0x14
    3ee6:	9d 89       	ldd	r25, Y+21	; 0x15
    3ee8:	99 8b       	std	Y+17, r25	; 0x11
    3eea:	88 8b       	std	Y+16, r24	; 0x10
    3eec:	88 89       	ldd	r24, Y+16	; 0x10
    3eee:	99 89       	ldd	r25, Y+17	; 0x11
    3ef0:	01 97       	sbiw	r24, 0x01	; 1
    3ef2:	f1 f7       	brne	.-4      	; 0x3ef0 <LCD_init+0x49a>
    3ef4:	99 8b       	std	Y+17, r25	; 0x11
    3ef6:	88 8b       	std	Y+16, r24	; 0x10
    3ef8:	0f c0       	rjmp	.+30     	; 0x3f18 <LCD_init+0x4c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3efa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3efc:	78 a1       	ldd	r23, Y+32	; 0x20
    3efe:	89 a1       	ldd	r24, Y+33	; 0x21
    3f00:	9a a1       	ldd	r25, Y+34	; 0x22
    3f02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f06:	dc 01       	movw	r26, r24
    3f08:	cb 01       	movw	r24, r22
    3f0a:	8e 8f       	std	Y+30, r24	; 0x1e
    3f0c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f0e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3f10:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f12:	8a 95       	dec	r24
    3f14:	f1 f7       	brne	.-4      	; 0x3f12 <LCD_init+0x4bc>
    3f16:	8f 87       	std	Y+15, r24	; 0x0f
	// wait > 30 us
	_delay_us(50);
	LCD_write_command_4bit(clear_Display);
    3f18:	81 e0       	ldi	r24, 0x01	; 1
    3f1a:	0e 94 4f 11 	call	0x229e	; 0x229e <LCD_write_command_4bit>
    3f1e:	80 e0       	ldi	r24, 0x00	; 0
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	a0 e0       	ldi	r26, 0x00	; 0
    3f24:	b0 e4       	ldi	r27, 0x40	; 64
    3f26:	8b 87       	std	Y+11, r24	; 0x0b
    3f28:	9c 87       	std	Y+12, r25	; 0x0c
    3f2a:	ad 87       	std	Y+13, r26	; 0x0d
    3f2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f30:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f32:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f34:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f36:	20 e0       	ldi	r18, 0x00	; 0
    3f38:	30 e0       	ldi	r19, 0x00	; 0
    3f3a:	4a ef       	ldi	r20, 0xFA	; 250
    3f3c:	54 e4       	ldi	r21, 0x44	; 68
    3f3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f42:	dc 01       	movw	r26, r24
    3f44:	cb 01       	movw	r24, r22
    3f46:	8f 83       	std	Y+7, r24	; 0x07
    3f48:	98 87       	std	Y+8, r25	; 0x08
    3f4a:	a9 87       	std	Y+9, r26	; 0x09
    3f4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f50:	78 85       	ldd	r23, Y+8	; 0x08
    3f52:	89 85       	ldd	r24, Y+9	; 0x09
    3f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f56:	20 e0       	ldi	r18, 0x00	; 0
    3f58:	30 e0       	ldi	r19, 0x00	; 0
    3f5a:	40 e8       	ldi	r20, 0x80	; 128
    3f5c:	5f e3       	ldi	r21, 0x3F	; 63
    3f5e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3f62:	88 23       	and	r24, r24
    3f64:	2c f4       	brge	.+10     	; 0x3f70 <LCD_init+0x51a>
		__ticks = 1;
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	9e 83       	std	Y+6, r25	; 0x06
    3f6c:	8d 83       	std	Y+5, r24	; 0x05
    3f6e:	3f c0       	rjmp	.+126    	; 0x3fee <LCD_init+0x598>
	else if (__tmp > 65535)
    3f70:	6f 81       	ldd	r22, Y+7	; 0x07
    3f72:	78 85       	ldd	r23, Y+8	; 0x08
    3f74:	89 85       	ldd	r24, Y+9	; 0x09
    3f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f78:	20 e0       	ldi	r18, 0x00	; 0
    3f7a:	3f ef       	ldi	r19, 0xFF	; 255
    3f7c:	4f e7       	ldi	r20, 0x7F	; 127
    3f7e:	57 e4       	ldi	r21, 0x47	; 71
    3f80:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3f84:	18 16       	cp	r1, r24
    3f86:	4c f5       	brge	.+82     	; 0x3fda <LCD_init+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	40 e2       	ldi	r20, 0x20	; 32
    3f96:	51 e4       	ldi	r21, 0x41	; 65
    3f98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	bc 01       	movw	r22, r24
    3fa2:	cd 01       	movw	r24, r26
    3fa4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3fa8:	dc 01       	movw	r26, r24
    3faa:	cb 01       	movw	r24, r22
    3fac:	9e 83       	std	Y+6, r25	; 0x06
    3fae:	8d 83       	std	Y+5, r24	; 0x05
    3fb0:	0f c0       	rjmp	.+30     	; 0x3fd0 <LCD_init+0x57a>
    3fb2:	88 ec       	ldi	r24, 0xC8	; 200
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	9c 83       	std	Y+4, r25	; 0x04
    3fb8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3fba:	8b 81       	ldd	r24, Y+3	; 0x03
    3fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    3fbe:	01 97       	sbiw	r24, 0x01	; 1
    3fc0:	f1 f7       	brne	.-4      	; 0x3fbe <LCD_init+0x568>
    3fc2:	9c 83       	std	Y+4, r25	; 0x04
    3fc4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    3fca:	01 97       	sbiw	r24, 0x01	; 1
    3fcc:	9e 83       	std	Y+6, r25	; 0x06
    3fce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd4:	00 97       	sbiw	r24, 0x00	; 0
    3fd6:	69 f7       	brne	.-38     	; 0x3fb2 <LCD_init+0x55c>
    3fd8:	14 c0       	rjmp	.+40     	; 0x4002 <LCD_init+0x5ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fda:	6f 81       	ldd	r22, Y+7	; 0x07
    3fdc:	78 85       	ldd	r23, Y+8	; 0x08
    3fde:	89 85       	ldd	r24, Y+9	; 0x09
    3fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fe2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3fe6:	dc 01       	movw	r26, r24
    3fe8:	cb 01       	movw	r24, r22
    3fea:	9e 83       	std	Y+6, r25	; 0x06
    3fec:	8d 83       	std	Y+5, r24	; 0x05
    3fee:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ff2:	9a 83       	std	Y+2, r25	; 0x02
    3ff4:	89 83       	std	Y+1, r24	; 0x01
    3ff6:	89 81       	ldd	r24, Y+1	; 0x01
    3ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    3ffa:	01 97       	sbiw	r24, 0x01	; 1
    3ffc:	f1 f7       	brne	.-4      	; 0x3ffa <LCD_init+0x5a4>
    3ffe:	9a 83       	std	Y+2, r25	; 0x02
    4000:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
//	LCD_write_data_4bit(entry_Mode);

#endif

}
    4002:	c4 5b       	subi	r28, 0xB4	; 180
    4004:	df 4f       	sbci	r29, 0xFF	; 255
    4006:	0f b6       	in	r0, 0x3f	; 63
    4008:	f8 94       	cli
    400a:	de bf       	out	0x3e, r29	; 62
    400c:	0f be       	out	0x3f, r0	; 63
    400e:	cd bf       	out	0x3d, r28	; 61
    4010:	cf 91       	pop	r28
    4012:	df 91       	pop	r29
    4014:	1f 91       	pop	r17
    4016:	0f 91       	pop	r16
    4018:	08 95       	ret

0000401a <LCD_set_cursor>:

void LCD_set_cursor(u8 copy_u8_row , u8 copy_u8_Column){
    401a:	df 93       	push	r29
    401c:	cf 93       	push	r28
    401e:	cd b7       	in	r28, 0x3d	; 61
    4020:	de b7       	in	r29, 0x3e	; 62
    4022:	6b 97       	sbiw	r28, 0x1b	; 27
    4024:	0f b6       	in	r0, 0x3f	; 63
    4026:	f8 94       	cli
    4028:	de bf       	out	0x3e, r29	; 62
    402a:	0f be       	out	0x3f, r0	; 63
    402c:	cd bf       	out	0x3d, r28	; 61
    402e:	8a 8f       	std	Y+26, r24	; 0x1a
    4030:	6b 8f       	std	Y+27, r22	; 0x1b
	//delay to smooth things out
	_delay_us(50);

#elif LCD_interface_mode == interface_4bit

	u8 loc_Address = 128+(copy_u8_row*line2_Start)+(copy_u8_Column);
    4032:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4034:	88 2f       	mov	r24, r24
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	02 96       	adiw	r24, 0x02	; 2
    403a:	00 24       	eor	r0, r0
    403c:	96 95       	lsr	r25
    403e:	87 95       	ror	r24
    4040:	07 94       	ror	r0
    4042:	96 95       	lsr	r25
    4044:	87 95       	ror	r24
    4046:	07 94       	ror	r0
    4048:	98 2f       	mov	r25, r24
    404a:	80 2d       	mov	r24, r0
    404c:	98 2f       	mov	r25, r24
    404e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4050:	89 0f       	add	r24, r25
    4052:	89 8f       	std	Y+25, r24	; 0x19
		LCD_write_command_4bit(loc_Address);
    4054:	89 8d       	ldd	r24, Y+25	; 0x19
    4056:	0e 94 4f 11 	call	0x229e	; 0x229e <LCD_write_command_4bit>
    405a:	80 e0       	ldi	r24, 0x00	; 0
    405c:	90 e0       	ldi	r25, 0x00	; 0
    405e:	a8 e4       	ldi	r26, 0x48	; 72
    4060:	b2 e4       	ldi	r27, 0x42	; 66
    4062:	8d 8b       	std	Y+21, r24	; 0x15
    4064:	9e 8b       	std	Y+22, r25	; 0x16
    4066:	af 8b       	std	Y+23, r26	; 0x17
    4068:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    406a:	6d 89       	ldd	r22, Y+21	; 0x15
    406c:	7e 89       	ldd	r23, Y+22	; 0x16
    406e:	8f 89       	ldd	r24, Y+23	; 0x17
    4070:	98 8d       	ldd	r25, Y+24	; 0x18
    4072:	2b ea       	ldi	r18, 0xAB	; 171
    4074:	3a ea       	ldi	r19, 0xAA	; 170
    4076:	4a e2       	ldi	r20, 0x2A	; 42
    4078:	50 e4       	ldi	r21, 0x40	; 64
    407a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    407e:	dc 01       	movw	r26, r24
    4080:	cb 01       	movw	r24, r22
    4082:	89 8b       	std	Y+17, r24	; 0x11
    4084:	9a 8b       	std	Y+18, r25	; 0x12
    4086:	ab 8b       	std	Y+19, r26	; 0x13
    4088:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    408a:	69 89       	ldd	r22, Y+17	; 0x11
    408c:	7a 89       	ldd	r23, Y+18	; 0x12
    408e:	8b 89       	ldd	r24, Y+19	; 0x13
    4090:	9c 89       	ldd	r25, Y+20	; 0x14
    4092:	20 e0       	ldi	r18, 0x00	; 0
    4094:	30 e0       	ldi	r19, 0x00	; 0
    4096:	40 e8       	ldi	r20, 0x80	; 128
    4098:	5f e3       	ldi	r21, 0x3F	; 63
    409a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    409e:	88 23       	and	r24, r24
    40a0:	1c f4       	brge	.+6      	; 0x40a8 <LCD_set_cursor+0x8e>
		__ticks = 1;
    40a2:	81 e0       	ldi	r24, 0x01	; 1
    40a4:	88 8b       	std	Y+16, r24	; 0x10
    40a6:	91 c0       	rjmp	.+290    	; 0x41ca <LCD_set_cursor+0x1b0>
	else if (__tmp > 255)
    40a8:	69 89       	ldd	r22, Y+17	; 0x11
    40aa:	7a 89       	ldd	r23, Y+18	; 0x12
    40ac:	8b 89       	ldd	r24, Y+19	; 0x13
    40ae:	9c 89       	ldd	r25, Y+20	; 0x14
    40b0:	20 e0       	ldi	r18, 0x00	; 0
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	4f e7       	ldi	r20, 0x7F	; 127
    40b6:	53 e4       	ldi	r21, 0x43	; 67
    40b8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    40bc:	18 16       	cp	r1, r24
    40be:	0c f0       	brlt	.+2      	; 0x40c2 <LCD_set_cursor+0xa8>
    40c0:	7b c0       	rjmp	.+246    	; 0x41b8 <LCD_set_cursor+0x19e>
	{
		_delay_ms(__us / 1000.0);
    40c2:	6d 89       	ldd	r22, Y+21	; 0x15
    40c4:	7e 89       	ldd	r23, Y+22	; 0x16
    40c6:	8f 89       	ldd	r24, Y+23	; 0x17
    40c8:	98 8d       	ldd	r25, Y+24	; 0x18
    40ca:	20 e0       	ldi	r18, 0x00	; 0
    40cc:	30 e0       	ldi	r19, 0x00	; 0
    40ce:	4a e7       	ldi	r20, 0x7A	; 122
    40d0:	54 e4       	ldi	r21, 0x44	; 68
    40d2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    40d6:	dc 01       	movw	r26, r24
    40d8:	cb 01       	movw	r24, r22
    40da:	8c 87       	std	Y+12, r24	; 0x0c
    40dc:	9d 87       	std	Y+13, r25	; 0x0d
    40de:	ae 87       	std	Y+14, r26	; 0x0e
    40e0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40e2:	6c 85       	ldd	r22, Y+12	; 0x0c
    40e4:	7d 85       	ldd	r23, Y+13	; 0x0d
    40e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    40e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    40ea:	20 e0       	ldi	r18, 0x00	; 0
    40ec:	30 e0       	ldi	r19, 0x00	; 0
    40ee:	4a ef       	ldi	r20, 0xFA	; 250
    40f0:	54 e4       	ldi	r21, 0x44	; 68
    40f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    40f6:	dc 01       	movw	r26, r24
    40f8:	cb 01       	movw	r24, r22
    40fa:	88 87       	std	Y+8, r24	; 0x08
    40fc:	99 87       	std	Y+9, r25	; 0x09
    40fe:	aa 87       	std	Y+10, r26	; 0x0a
    4100:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4102:	68 85       	ldd	r22, Y+8	; 0x08
    4104:	79 85       	ldd	r23, Y+9	; 0x09
    4106:	8a 85       	ldd	r24, Y+10	; 0x0a
    4108:	9b 85       	ldd	r25, Y+11	; 0x0b
    410a:	20 e0       	ldi	r18, 0x00	; 0
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	40 e8       	ldi	r20, 0x80	; 128
    4110:	5f e3       	ldi	r21, 0x3F	; 63
    4112:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4116:	88 23       	and	r24, r24
    4118:	2c f4       	brge	.+10     	; 0x4124 <LCD_set_cursor+0x10a>
		__ticks = 1;
    411a:	81 e0       	ldi	r24, 0x01	; 1
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	9f 83       	std	Y+7, r25	; 0x07
    4120:	8e 83       	std	Y+6, r24	; 0x06
    4122:	3f c0       	rjmp	.+126    	; 0x41a2 <LCD_set_cursor+0x188>
	else if (__tmp > 65535)
    4124:	68 85       	ldd	r22, Y+8	; 0x08
    4126:	79 85       	ldd	r23, Y+9	; 0x09
    4128:	8a 85       	ldd	r24, Y+10	; 0x0a
    412a:	9b 85       	ldd	r25, Y+11	; 0x0b
    412c:	20 e0       	ldi	r18, 0x00	; 0
    412e:	3f ef       	ldi	r19, 0xFF	; 255
    4130:	4f e7       	ldi	r20, 0x7F	; 127
    4132:	57 e4       	ldi	r21, 0x47	; 71
    4134:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4138:	18 16       	cp	r1, r24
    413a:	4c f5       	brge	.+82     	; 0x418e <LCD_set_cursor+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    413c:	6c 85       	ldd	r22, Y+12	; 0x0c
    413e:	7d 85       	ldd	r23, Y+13	; 0x0d
    4140:	8e 85       	ldd	r24, Y+14	; 0x0e
    4142:	9f 85       	ldd	r25, Y+15	; 0x0f
    4144:	20 e0       	ldi	r18, 0x00	; 0
    4146:	30 e0       	ldi	r19, 0x00	; 0
    4148:	40 e2       	ldi	r20, 0x20	; 32
    414a:	51 e4       	ldi	r21, 0x41	; 65
    414c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	bc 01       	movw	r22, r24
    4156:	cd 01       	movw	r24, r26
    4158:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    415c:	dc 01       	movw	r26, r24
    415e:	cb 01       	movw	r24, r22
    4160:	9f 83       	std	Y+7, r25	; 0x07
    4162:	8e 83       	std	Y+6, r24	; 0x06
    4164:	0f c0       	rjmp	.+30     	; 0x4184 <LCD_set_cursor+0x16a>
    4166:	88 ec       	ldi	r24, 0xC8	; 200
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	9d 83       	std	Y+5, r25	; 0x05
    416c:	8c 83       	std	Y+4, r24	; 0x04
    416e:	8c 81       	ldd	r24, Y+4	; 0x04
    4170:	9d 81       	ldd	r25, Y+5	; 0x05
    4172:	01 97       	sbiw	r24, 0x01	; 1
    4174:	f1 f7       	brne	.-4      	; 0x4172 <LCD_set_cursor+0x158>
    4176:	9d 83       	std	Y+5, r25	; 0x05
    4178:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    417a:	8e 81       	ldd	r24, Y+6	; 0x06
    417c:	9f 81       	ldd	r25, Y+7	; 0x07
    417e:	01 97       	sbiw	r24, 0x01	; 1
    4180:	9f 83       	std	Y+7, r25	; 0x07
    4182:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4184:	8e 81       	ldd	r24, Y+6	; 0x06
    4186:	9f 81       	ldd	r25, Y+7	; 0x07
    4188:	00 97       	sbiw	r24, 0x00	; 0
    418a:	69 f7       	brne	.-38     	; 0x4166 <LCD_set_cursor+0x14c>
    418c:	24 c0       	rjmp	.+72     	; 0x41d6 <LCD_set_cursor+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    418e:	68 85       	ldd	r22, Y+8	; 0x08
    4190:	79 85       	ldd	r23, Y+9	; 0x09
    4192:	8a 85       	ldd	r24, Y+10	; 0x0a
    4194:	9b 85       	ldd	r25, Y+11	; 0x0b
    4196:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    419a:	dc 01       	movw	r26, r24
    419c:	cb 01       	movw	r24, r22
    419e:	9f 83       	std	Y+7, r25	; 0x07
    41a0:	8e 83       	std	Y+6, r24	; 0x06
    41a2:	8e 81       	ldd	r24, Y+6	; 0x06
    41a4:	9f 81       	ldd	r25, Y+7	; 0x07
    41a6:	9b 83       	std	Y+3, r25	; 0x03
    41a8:	8a 83       	std	Y+2, r24	; 0x02
    41aa:	8a 81       	ldd	r24, Y+2	; 0x02
    41ac:	9b 81       	ldd	r25, Y+3	; 0x03
    41ae:	01 97       	sbiw	r24, 0x01	; 1
    41b0:	f1 f7       	brne	.-4      	; 0x41ae <LCD_set_cursor+0x194>
    41b2:	9b 83       	std	Y+3, r25	; 0x03
    41b4:	8a 83       	std	Y+2, r24	; 0x02
    41b6:	0f c0       	rjmp	.+30     	; 0x41d6 <LCD_set_cursor+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    41b8:	69 89       	ldd	r22, Y+17	; 0x11
    41ba:	7a 89       	ldd	r23, Y+18	; 0x12
    41bc:	8b 89       	ldd	r24, Y+19	; 0x13
    41be:	9c 89       	ldd	r25, Y+20	; 0x14
    41c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    41c4:	dc 01       	movw	r26, r24
    41c6:	cb 01       	movw	r24, r22
    41c8:	88 8b       	std	Y+16, r24	; 0x10
    41ca:	88 89       	ldd	r24, Y+16	; 0x10
    41cc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    41ce:	89 81       	ldd	r24, Y+1	; 0x01
    41d0:	8a 95       	dec	r24
    41d2:	f1 f7       	brne	.-4      	; 0x41d0 <LCD_set_cursor+0x1b6>
    41d4:	89 83       	std	Y+1, r24	; 0x01

#endif



}
    41d6:	6b 96       	adiw	r28, 0x1b	; 27
    41d8:	0f b6       	in	r0, 0x3f	; 63
    41da:	f8 94       	cli
    41dc:	de bf       	out	0x3e, r29	; 62
    41de:	0f be       	out	0x3f, r0	; 63
    41e0:	cd bf       	out	0x3d, r28	; 61
    41e2:	cf 91       	pop	r28
    41e4:	df 91       	pop	r29
    41e6:	08 95       	ret

000041e8 <LCD_on>:

void LCD_on(){
    41e8:	df 93       	push	r29
    41ea:	cf 93       	push	r28
    41ec:	cd b7       	in	r28, 0x3d	; 61
    41ee:	de b7       	in	r29, 0x3e	; 62
    41f0:	68 97       	sbiw	r28, 0x18	; 24
    41f2:	0f b6       	in	r0, 0x3f	; 63
    41f4:	f8 94       	cli
    41f6:	de bf       	out	0x3e, r29	; 62
    41f8:	0f be       	out	0x3f, r0	; 63
    41fa:	cd bf       	out	0x3d, r28	; 61
	LCD_write_command_8bit(display_On);
	_delay_us(50);

#elif LCD_interface_mode == interface_4bit

	LCD_write_command_4bit(display_On);
    41fc:	8c e0       	ldi	r24, 0x0C	; 12
    41fe:	0e 94 4f 11 	call	0x229e	; 0x229e <LCD_write_command_4bit>
    4202:	80 e0       	ldi	r24, 0x00	; 0
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	a8 e4       	ldi	r26, 0x48	; 72
    4208:	b2 e4       	ldi	r27, 0x42	; 66
    420a:	8d 8b       	std	Y+21, r24	; 0x15
    420c:	9e 8b       	std	Y+22, r25	; 0x16
    420e:	af 8b       	std	Y+23, r26	; 0x17
    4210:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4212:	6d 89       	ldd	r22, Y+21	; 0x15
    4214:	7e 89       	ldd	r23, Y+22	; 0x16
    4216:	8f 89       	ldd	r24, Y+23	; 0x17
    4218:	98 8d       	ldd	r25, Y+24	; 0x18
    421a:	2b ea       	ldi	r18, 0xAB	; 171
    421c:	3a ea       	ldi	r19, 0xAA	; 170
    421e:	4a e2       	ldi	r20, 0x2A	; 42
    4220:	50 e4       	ldi	r21, 0x40	; 64
    4222:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4226:	dc 01       	movw	r26, r24
    4228:	cb 01       	movw	r24, r22
    422a:	89 8b       	std	Y+17, r24	; 0x11
    422c:	9a 8b       	std	Y+18, r25	; 0x12
    422e:	ab 8b       	std	Y+19, r26	; 0x13
    4230:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4232:	69 89       	ldd	r22, Y+17	; 0x11
    4234:	7a 89       	ldd	r23, Y+18	; 0x12
    4236:	8b 89       	ldd	r24, Y+19	; 0x13
    4238:	9c 89       	ldd	r25, Y+20	; 0x14
    423a:	20 e0       	ldi	r18, 0x00	; 0
    423c:	30 e0       	ldi	r19, 0x00	; 0
    423e:	40 e8       	ldi	r20, 0x80	; 128
    4240:	5f e3       	ldi	r21, 0x3F	; 63
    4242:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4246:	88 23       	and	r24, r24
    4248:	1c f4       	brge	.+6      	; 0x4250 <LCD_on+0x68>
		__ticks = 1;
    424a:	81 e0       	ldi	r24, 0x01	; 1
    424c:	88 8b       	std	Y+16, r24	; 0x10
    424e:	91 c0       	rjmp	.+290    	; 0x4372 <LCD_on+0x18a>
	else if (__tmp > 255)
    4250:	69 89       	ldd	r22, Y+17	; 0x11
    4252:	7a 89       	ldd	r23, Y+18	; 0x12
    4254:	8b 89       	ldd	r24, Y+19	; 0x13
    4256:	9c 89       	ldd	r25, Y+20	; 0x14
    4258:	20 e0       	ldi	r18, 0x00	; 0
    425a:	30 e0       	ldi	r19, 0x00	; 0
    425c:	4f e7       	ldi	r20, 0x7F	; 127
    425e:	53 e4       	ldi	r21, 0x43	; 67
    4260:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4264:	18 16       	cp	r1, r24
    4266:	0c f0       	brlt	.+2      	; 0x426a <LCD_on+0x82>
    4268:	7b c0       	rjmp	.+246    	; 0x4360 <LCD_on+0x178>
	{
		_delay_ms(__us / 1000.0);
    426a:	6d 89       	ldd	r22, Y+21	; 0x15
    426c:	7e 89       	ldd	r23, Y+22	; 0x16
    426e:	8f 89       	ldd	r24, Y+23	; 0x17
    4270:	98 8d       	ldd	r25, Y+24	; 0x18
    4272:	20 e0       	ldi	r18, 0x00	; 0
    4274:	30 e0       	ldi	r19, 0x00	; 0
    4276:	4a e7       	ldi	r20, 0x7A	; 122
    4278:	54 e4       	ldi	r21, 0x44	; 68
    427a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    427e:	dc 01       	movw	r26, r24
    4280:	cb 01       	movw	r24, r22
    4282:	8c 87       	std	Y+12, r24	; 0x0c
    4284:	9d 87       	std	Y+13, r25	; 0x0d
    4286:	ae 87       	std	Y+14, r26	; 0x0e
    4288:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    428a:	6c 85       	ldd	r22, Y+12	; 0x0c
    428c:	7d 85       	ldd	r23, Y+13	; 0x0d
    428e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4290:	9f 85       	ldd	r25, Y+15	; 0x0f
    4292:	20 e0       	ldi	r18, 0x00	; 0
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	4a ef       	ldi	r20, 0xFA	; 250
    4298:	54 e4       	ldi	r21, 0x44	; 68
    429a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    429e:	dc 01       	movw	r26, r24
    42a0:	cb 01       	movw	r24, r22
    42a2:	88 87       	std	Y+8, r24	; 0x08
    42a4:	99 87       	std	Y+9, r25	; 0x09
    42a6:	aa 87       	std	Y+10, r26	; 0x0a
    42a8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    42aa:	68 85       	ldd	r22, Y+8	; 0x08
    42ac:	79 85       	ldd	r23, Y+9	; 0x09
    42ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    42b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    42b2:	20 e0       	ldi	r18, 0x00	; 0
    42b4:	30 e0       	ldi	r19, 0x00	; 0
    42b6:	40 e8       	ldi	r20, 0x80	; 128
    42b8:	5f e3       	ldi	r21, 0x3F	; 63
    42ba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    42be:	88 23       	and	r24, r24
    42c0:	2c f4       	brge	.+10     	; 0x42cc <LCD_on+0xe4>
		__ticks = 1;
    42c2:	81 e0       	ldi	r24, 0x01	; 1
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	9f 83       	std	Y+7, r25	; 0x07
    42c8:	8e 83       	std	Y+6, r24	; 0x06
    42ca:	3f c0       	rjmp	.+126    	; 0x434a <LCD_on+0x162>
	else if (__tmp > 65535)
    42cc:	68 85       	ldd	r22, Y+8	; 0x08
    42ce:	79 85       	ldd	r23, Y+9	; 0x09
    42d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    42d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    42d4:	20 e0       	ldi	r18, 0x00	; 0
    42d6:	3f ef       	ldi	r19, 0xFF	; 255
    42d8:	4f e7       	ldi	r20, 0x7F	; 127
    42da:	57 e4       	ldi	r21, 0x47	; 71
    42dc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    42e0:	18 16       	cp	r1, r24
    42e2:	4c f5       	brge	.+82     	; 0x4336 <LCD_on+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42e4:	6c 85       	ldd	r22, Y+12	; 0x0c
    42e6:	7d 85       	ldd	r23, Y+13	; 0x0d
    42e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    42ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    42ec:	20 e0       	ldi	r18, 0x00	; 0
    42ee:	30 e0       	ldi	r19, 0x00	; 0
    42f0:	40 e2       	ldi	r20, 0x20	; 32
    42f2:	51 e4       	ldi	r21, 0x41	; 65
    42f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    42f8:	dc 01       	movw	r26, r24
    42fa:	cb 01       	movw	r24, r22
    42fc:	bc 01       	movw	r22, r24
    42fe:	cd 01       	movw	r24, r26
    4300:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4304:	dc 01       	movw	r26, r24
    4306:	cb 01       	movw	r24, r22
    4308:	9f 83       	std	Y+7, r25	; 0x07
    430a:	8e 83       	std	Y+6, r24	; 0x06
    430c:	0f c0       	rjmp	.+30     	; 0x432c <LCD_on+0x144>
    430e:	88 ec       	ldi	r24, 0xC8	; 200
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	9d 83       	std	Y+5, r25	; 0x05
    4314:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4316:	8c 81       	ldd	r24, Y+4	; 0x04
    4318:	9d 81       	ldd	r25, Y+5	; 0x05
    431a:	01 97       	sbiw	r24, 0x01	; 1
    431c:	f1 f7       	brne	.-4      	; 0x431a <LCD_on+0x132>
    431e:	9d 83       	std	Y+5, r25	; 0x05
    4320:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4322:	8e 81       	ldd	r24, Y+6	; 0x06
    4324:	9f 81       	ldd	r25, Y+7	; 0x07
    4326:	01 97       	sbiw	r24, 0x01	; 1
    4328:	9f 83       	std	Y+7, r25	; 0x07
    432a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    432c:	8e 81       	ldd	r24, Y+6	; 0x06
    432e:	9f 81       	ldd	r25, Y+7	; 0x07
    4330:	00 97       	sbiw	r24, 0x00	; 0
    4332:	69 f7       	brne	.-38     	; 0x430e <LCD_on+0x126>
    4334:	24 c0       	rjmp	.+72     	; 0x437e <LCD_on+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4336:	68 85       	ldd	r22, Y+8	; 0x08
    4338:	79 85       	ldd	r23, Y+9	; 0x09
    433a:	8a 85       	ldd	r24, Y+10	; 0x0a
    433c:	9b 85       	ldd	r25, Y+11	; 0x0b
    433e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4342:	dc 01       	movw	r26, r24
    4344:	cb 01       	movw	r24, r22
    4346:	9f 83       	std	Y+7, r25	; 0x07
    4348:	8e 83       	std	Y+6, r24	; 0x06
    434a:	8e 81       	ldd	r24, Y+6	; 0x06
    434c:	9f 81       	ldd	r25, Y+7	; 0x07
    434e:	9b 83       	std	Y+3, r25	; 0x03
    4350:	8a 83       	std	Y+2, r24	; 0x02
    4352:	8a 81       	ldd	r24, Y+2	; 0x02
    4354:	9b 81       	ldd	r25, Y+3	; 0x03
    4356:	01 97       	sbiw	r24, 0x01	; 1
    4358:	f1 f7       	brne	.-4      	; 0x4356 <LCD_on+0x16e>
    435a:	9b 83       	std	Y+3, r25	; 0x03
    435c:	8a 83       	std	Y+2, r24	; 0x02
    435e:	0f c0       	rjmp	.+30     	; 0x437e <LCD_on+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4360:	69 89       	ldd	r22, Y+17	; 0x11
    4362:	7a 89       	ldd	r23, Y+18	; 0x12
    4364:	8b 89       	ldd	r24, Y+19	; 0x13
    4366:	9c 89       	ldd	r25, Y+20	; 0x14
    4368:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    436c:	dc 01       	movw	r26, r24
    436e:	cb 01       	movw	r24, r22
    4370:	88 8b       	std	Y+16, r24	; 0x10
    4372:	88 89       	ldd	r24, Y+16	; 0x10
    4374:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4376:	89 81       	ldd	r24, Y+1	; 0x01
    4378:	8a 95       	dec	r24
    437a:	f1 f7       	brne	.-4      	; 0x4378 <LCD_on+0x190>
    437c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);

#endif


}
    437e:	68 96       	adiw	r28, 0x18	; 24
    4380:	0f b6       	in	r0, 0x3f	; 63
    4382:	f8 94       	cli
    4384:	de bf       	out	0x3e, r29	; 62
    4386:	0f be       	out	0x3f, r0	; 63
    4388:	cd bf       	out	0x3d, r28	; 61
    438a:	cf 91       	pop	r28
    438c:	df 91       	pop	r29
    438e:	08 95       	ret

00004390 <LCD_off>:

void LCD_off(){
    4390:	df 93       	push	r29
    4392:	cf 93       	push	r28
    4394:	cd b7       	in	r28, 0x3d	; 61
    4396:	de b7       	in	r29, 0x3e	; 62
    4398:	68 97       	sbiw	r28, 0x18	; 24
    439a:	0f b6       	in	r0, 0x3f	; 63
    439c:	f8 94       	cli
    439e:	de bf       	out	0x3e, r29	; 62
    43a0:	0f be       	out	0x3f, r0	; 63
    43a2:	cd bf       	out	0x3d, r28	; 61
	LCD_write_command_8bit(display_Off);
	_delay_us(50);

#elif LCD_interface_mode == interface_4bit

	LCD_write_command_4bit(display_Off);
    43a4:	88 e0       	ldi	r24, 0x08	; 8
    43a6:	0e 94 4f 11 	call	0x229e	; 0x229e <LCD_write_command_4bit>
    43aa:	80 e0       	ldi	r24, 0x00	; 0
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	a8 e4       	ldi	r26, 0x48	; 72
    43b0:	b2 e4       	ldi	r27, 0x42	; 66
    43b2:	8d 8b       	std	Y+21, r24	; 0x15
    43b4:	9e 8b       	std	Y+22, r25	; 0x16
    43b6:	af 8b       	std	Y+23, r26	; 0x17
    43b8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    43ba:	6d 89       	ldd	r22, Y+21	; 0x15
    43bc:	7e 89       	ldd	r23, Y+22	; 0x16
    43be:	8f 89       	ldd	r24, Y+23	; 0x17
    43c0:	98 8d       	ldd	r25, Y+24	; 0x18
    43c2:	2b ea       	ldi	r18, 0xAB	; 171
    43c4:	3a ea       	ldi	r19, 0xAA	; 170
    43c6:	4a e2       	ldi	r20, 0x2A	; 42
    43c8:	50 e4       	ldi	r21, 0x40	; 64
    43ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    43ce:	dc 01       	movw	r26, r24
    43d0:	cb 01       	movw	r24, r22
    43d2:	89 8b       	std	Y+17, r24	; 0x11
    43d4:	9a 8b       	std	Y+18, r25	; 0x12
    43d6:	ab 8b       	std	Y+19, r26	; 0x13
    43d8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    43da:	69 89       	ldd	r22, Y+17	; 0x11
    43dc:	7a 89       	ldd	r23, Y+18	; 0x12
    43de:	8b 89       	ldd	r24, Y+19	; 0x13
    43e0:	9c 89       	ldd	r25, Y+20	; 0x14
    43e2:	20 e0       	ldi	r18, 0x00	; 0
    43e4:	30 e0       	ldi	r19, 0x00	; 0
    43e6:	40 e8       	ldi	r20, 0x80	; 128
    43e8:	5f e3       	ldi	r21, 0x3F	; 63
    43ea:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    43ee:	88 23       	and	r24, r24
    43f0:	1c f4       	brge	.+6      	; 0x43f8 <LCD_off+0x68>
		__ticks = 1;
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	88 8b       	std	Y+16, r24	; 0x10
    43f6:	91 c0       	rjmp	.+290    	; 0x451a <LCD_off+0x18a>
	else if (__tmp > 255)
    43f8:	69 89       	ldd	r22, Y+17	; 0x11
    43fa:	7a 89       	ldd	r23, Y+18	; 0x12
    43fc:	8b 89       	ldd	r24, Y+19	; 0x13
    43fe:	9c 89       	ldd	r25, Y+20	; 0x14
    4400:	20 e0       	ldi	r18, 0x00	; 0
    4402:	30 e0       	ldi	r19, 0x00	; 0
    4404:	4f e7       	ldi	r20, 0x7F	; 127
    4406:	53 e4       	ldi	r21, 0x43	; 67
    4408:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    440c:	18 16       	cp	r1, r24
    440e:	0c f0       	brlt	.+2      	; 0x4412 <LCD_off+0x82>
    4410:	7b c0       	rjmp	.+246    	; 0x4508 <LCD_off+0x178>
	{
		_delay_ms(__us / 1000.0);
    4412:	6d 89       	ldd	r22, Y+21	; 0x15
    4414:	7e 89       	ldd	r23, Y+22	; 0x16
    4416:	8f 89       	ldd	r24, Y+23	; 0x17
    4418:	98 8d       	ldd	r25, Y+24	; 0x18
    441a:	20 e0       	ldi	r18, 0x00	; 0
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	4a e7       	ldi	r20, 0x7A	; 122
    4420:	54 e4       	ldi	r21, 0x44	; 68
    4422:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    4426:	dc 01       	movw	r26, r24
    4428:	cb 01       	movw	r24, r22
    442a:	8c 87       	std	Y+12, r24	; 0x0c
    442c:	9d 87       	std	Y+13, r25	; 0x0d
    442e:	ae 87       	std	Y+14, r26	; 0x0e
    4430:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4432:	6c 85       	ldd	r22, Y+12	; 0x0c
    4434:	7d 85       	ldd	r23, Y+13	; 0x0d
    4436:	8e 85       	ldd	r24, Y+14	; 0x0e
    4438:	9f 85       	ldd	r25, Y+15	; 0x0f
    443a:	20 e0       	ldi	r18, 0x00	; 0
    443c:	30 e0       	ldi	r19, 0x00	; 0
    443e:	4a ef       	ldi	r20, 0xFA	; 250
    4440:	54 e4       	ldi	r21, 0x44	; 68
    4442:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4446:	dc 01       	movw	r26, r24
    4448:	cb 01       	movw	r24, r22
    444a:	88 87       	std	Y+8, r24	; 0x08
    444c:	99 87       	std	Y+9, r25	; 0x09
    444e:	aa 87       	std	Y+10, r26	; 0x0a
    4450:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4452:	68 85       	ldd	r22, Y+8	; 0x08
    4454:	79 85       	ldd	r23, Y+9	; 0x09
    4456:	8a 85       	ldd	r24, Y+10	; 0x0a
    4458:	9b 85       	ldd	r25, Y+11	; 0x0b
    445a:	20 e0       	ldi	r18, 0x00	; 0
    445c:	30 e0       	ldi	r19, 0x00	; 0
    445e:	40 e8       	ldi	r20, 0x80	; 128
    4460:	5f e3       	ldi	r21, 0x3F	; 63
    4462:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4466:	88 23       	and	r24, r24
    4468:	2c f4       	brge	.+10     	; 0x4474 <LCD_off+0xe4>
		__ticks = 1;
    446a:	81 e0       	ldi	r24, 0x01	; 1
    446c:	90 e0       	ldi	r25, 0x00	; 0
    446e:	9f 83       	std	Y+7, r25	; 0x07
    4470:	8e 83       	std	Y+6, r24	; 0x06
    4472:	3f c0       	rjmp	.+126    	; 0x44f2 <LCD_off+0x162>
	else if (__tmp > 65535)
    4474:	68 85       	ldd	r22, Y+8	; 0x08
    4476:	79 85       	ldd	r23, Y+9	; 0x09
    4478:	8a 85       	ldd	r24, Y+10	; 0x0a
    447a:	9b 85       	ldd	r25, Y+11	; 0x0b
    447c:	20 e0       	ldi	r18, 0x00	; 0
    447e:	3f ef       	ldi	r19, 0xFF	; 255
    4480:	4f e7       	ldi	r20, 0x7F	; 127
    4482:	57 e4       	ldi	r21, 0x47	; 71
    4484:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4488:	18 16       	cp	r1, r24
    448a:	4c f5       	brge	.+82     	; 0x44de <LCD_off+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    448c:	6c 85       	ldd	r22, Y+12	; 0x0c
    448e:	7d 85       	ldd	r23, Y+13	; 0x0d
    4490:	8e 85       	ldd	r24, Y+14	; 0x0e
    4492:	9f 85       	ldd	r25, Y+15	; 0x0f
    4494:	20 e0       	ldi	r18, 0x00	; 0
    4496:	30 e0       	ldi	r19, 0x00	; 0
    4498:	40 e2       	ldi	r20, 0x20	; 32
    449a:	51 e4       	ldi	r21, 0x41	; 65
    449c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    44a0:	dc 01       	movw	r26, r24
    44a2:	cb 01       	movw	r24, r22
    44a4:	bc 01       	movw	r22, r24
    44a6:	cd 01       	movw	r24, r26
    44a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    44ac:	dc 01       	movw	r26, r24
    44ae:	cb 01       	movw	r24, r22
    44b0:	9f 83       	std	Y+7, r25	; 0x07
    44b2:	8e 83       	std	Y+6, r24	; 0x06
    44b4:	0f c0       	rjmp	.+30     	; 0x44d4 <LCD_off+0x144>
    44b6:	88 ec       	ldi	r24, 0xC8	; 200
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	9d 83       	std	Y+5, r25	; 0x05
    44bc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    44be:	8c 81       	ldd	r24, Y+4	; 0x04
    44c0:	9d 81       	ldd	r25, Y+5	; 0x05
    44c2:	01 97       	sbiw	r24, 0x01	; 1
    44c4:	f1 f7       	brne	.-4      	; 0x44c2 <LCD_off+0x132>
    44c6:	9d 83       	std	Y+5, r25	; 0x05
    44c8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44ca:	8e 81       	ldd	r24, Y+6	; 0x06
    44cc:	9f 81       	ldd	r25, Y+7	; 0x07
    44ce:	01 97       	sbiw	r24, 0x01	; 1
    44d0:	9f 83       	std	Y+7, r25	; 0x07
    44d2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44d4:	8e 81       	ldd	r24, Y+6	; 0x06
    44d6:	9f 81       	ldd	r25, Y+7	; 0x07
    44d8:	00 97       	sbiw	r24, 0x00	; 0
    44da:	69 f7       	brne	.-38     	; 0x44b6 <LCD_off+0x126>
    44dc:	24 c0       	rjmp	.+72     	; 0x4526 <LCD_off+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44de:	68 85       	ldd	r22, Y+8	; 0x08
    44e0:	79 85       	ldd	r23, Y+9	; 0x09
    44e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    44e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    44e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    44ea:	dc 01       	movw	r26, r24
    44ec:	cb 01       	movw	r24, r22
    44ee:	9f 83       	std	Y+7, r25	; 0x07
    44f0:	8e 83       	std	Y+6, r24	; 0x06
    44f2:	8e 81       	ldd	r24, Y+6	; 0x06
    44f4:	9f 81       	ldd	r25, Y+7	; 0x07
    44f6:	9b 83       	std	Y+3, r25	; 0x03
    44f8:	8a 83       	std	Y+2, r24	; 0x02
    44fa:	8a 81       	ldd	r24, Y+2	; 0x02
    44fc:	9b 81       	ldd	r25, Y+3	; 0x03
    44fe:	01 97       	sbiw	r24, 0x01	; 1
    4500:	f1 f7       	brne	.-4      	; 0x44fe <LCD_off+0x16e>
    4502:	9b 83       	std	Y+3, r25	; 0x03
    4504:	8a 83       	std	Y+2, r24	; 0x02
    4506:	0f c0       	rjmp	.+30     	; 0x4526 <LCD_off+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4508:	69 89       	ldd	r22, Y+17	; 0x11
    450a:	7a 89       	ldd	r23, Y+18	; 0x12
    450c:	8b 89       	ldd	r24, Y+19	; 0x13
    450e:	9c 89       	ldd	r25, Y+20	; 0x14
    4510:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4514:	dc 01       	movw	r26, r24
    4516:	cb 01       	movw	r24, r22
    4518:	88 8b       	std	Y+16, r24	; 0x10
    451a:	88 89       	ldd	r24, Y+16	; 0x10
    451c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    451e:	89 81       	ldd	r24, Y+1	; 0x01
    4520:	8a 95       	dec	r24
    4522:	f1 f7       	brne	.-4      	; 0x4520 <LCD_off+0x190>
    4524:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);

#endif


}
    4526:	68 96       	adiw	r28, 0x18	; 24
    4528:	0f b6       	in	r0, 0x3f	; 63
    452a:	f8 94       	cli
    452c:	de bf       	out	0x3e, r29	; 62
    452e:	0f be       	out	0x3f, r0	; 63
    4530:	cd bf       	out	0x3d, r28	; 61
    4532:	cf 91       	pop	r28
    4534:	df 91       	pop	r29
    4536:	08 95       	ret

00004538 <LCD_clear_display>:

void LCD_clear_display(){
    4538:	df 93       	push	r29
    453a:	cf 93       	push	r28
    453c:	cd b7       	in	r28, 0x3d	; 61
    453e:	de b7       	in	r29, 0x3e	; 62
    4540:	6c 97       	sbiw	r28, 0x1c	; 28
    4542:	0f b6       	in	r0, 0x3f	; 63
    4544:	f8 94       	cli
    4546:	de bf       	out	0x3e, r29	; 62
    4548:	0f be       	out	0x3f, r0	; 63
    454a:	cd bf       	out	0x3d, r28	; 61
	//return home
	LCD_write_command_8bit(return_Home);
	_delay_ms(2);

#elif LCD_interface_mode == interface_4bit
	LCD_write_command_4bit(clear_Display);
    454c:	81 e0       	ldi	r24, 0x01	; 1
    454e:	0e 94 4f 11 	call	0x229e	; 0x229e <LCD_write_command_4bit>
    4552:	80 e0       	ldi	r24, 0x00	; 0
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	a0 e0       	ldi	r26, 0x00	; 0
    4558:	b0 e4       	ldi	r27, 0x40	; 64
    455a:	89 8f       	std	Y+25, r24	; 0x19
    455c:	9a 8f       	std	Y+26, r25	; 0x1a
    455e:	ab 8f       	std	Y+27, r26	; 0x1b
    4560:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4562:	69 8d       	ldd	r22, Y+25	; 0x19
    4564:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4566:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4568:	9c 8d       	ldd	r25, Y+28	; 0x1c
    456a:	20 e0       	ldi	r18, 0x00	; 0
    456c:	30 e0       	ldi	r19, 0x00	; 0
    456e:	4a ef       	ldi	r20, 0xFA	; 250
    4570:	54 e4       	ldi	r21, 0x44	; 68
    4572:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4576:	dc 01       	movw	r26, r24
    4578:	cb 01       	movw	r24, r22
    457a:	8d 8b       	std	Y+21, r24	; 0x15
    457c:	9e 8b       	std	Y+22, r25	; 0x16
    457e:	af 8b       	std	Y+23, r26	; 0x17
    4580:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4582:	6d 89       	ldd	r22, Y+21	; 0x15
    4584:	7e 89       	ldd	r23, Y+22	; 0x16
    4586:	8f 89       	ldd	r24, Y+23	; 0x17
    4588:	98 8d       	ldd	r25, Y+24	; 0x18
    458a:	20 e0       	ldi	r18, 0x00	; 0
    458c:	30 e0       	ldi	r19, 0x00	; 0
    458e:	40 e8       	ldi	r20, 0x80	; 128
    4590:	5f e3       	ldi	r21, 0x3F	; 63
    4592:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4596:	88 23       	and	r24, r24
    4598:	2c f4       	brge	.+10     	; 0x45a4 <LCD_clear_display+0x6c>
		__ticks = 1;
    459a:	81 e0       	ldi	r24, 0x01	; 1
    459c:	90 e0       	ldi	r25, 0x00	; 0
    459e:	9c 8b       	std	Y+20, r25	; 0x14
    45a0:	8b 8b       	std	Y+19, r24	; 0x13
    45a2:	3f c0       	rjmp	.+126    	; 0x4622 <LCD_clear_display+0xea>
	else if (__tmp > 65535)
    45a4:	6d 89       	ldd	r22, Y+21	; 0x15
    45a6:	7e 89       	ldd	r23, Y+22	; 0x16
    45a8:	8f 89       	ldd	r24, Y+23	; 0x17
    45aa:	98 8d       	ldd	r25, Y+24	; 0x18
    45ac:	20 e0       	ldi	r18, 0x00	; 0
    45ae:	3f ef       	ldi	r19, 0xFF	; 255
    45b0:	4f e7       	ldi	r20, 0x7F	; 127
    45b2:	57 e4       	ldi	r21, 0x47	; 71
    45b4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    45b8:	18 16       	cp	r1, r24
    45ba:	4c f5       	brge	.+82     	; 0x460e <LCD_clear_display+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45bc:	69 8d       	ldd	r22, Y+25	; 0x19
    45be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45c4:	20 e0       	ldi	r18, 0x00	; 0
    45c6:	30 e0       	ldi	r19, 0x00	; 0
    45c8:	40 e2       	ldi	r20, 0x20	; 32
    45ca:	51 e4       	ldi	r21, 0x41	; 65
    45cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    45d0:	dc 01       	movw	r26, r24
    45d2:	cb 01       	movw	r24, r22
    45d4:	bc 01       	movw	r22, r24
    45d6:	cd 01       	movw	r24, r26
    45d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    45dc:	dc 01       	movw	r26, r24
    45de:	cb 01       	movw	r24, r22
    45e0:	9c 8b       	std	Y+20, r25	; 0x14
    45e2:	8b 8b       	std	Y+19, r24	; 0x13
    45e4:	0f c0       	rjmp	.+30     	; 0x4604 <LCD_clear_display+0xcc>
    45e6:	88 ec       	ldi	r24, 0xC8	; 200
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	9a 8b       	std	Y+18, r25	; 0x12
    45ec:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    45ee:	89 89       	ldd	r24, Y+17	; 0x11
    45f0:	9a 89       	ldd	r25, Y+18	; 0x12
    45f2:	01 97       	sbiw	r24, 0x01	; 1
    45f4:	f1 f7       	brne	.-4      	; 0x45f2 <LCD_clear_display+0xba>
    45f6:	9a 8b       	std	Y+18, r25	; 0x12
    45f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45fa:	8b 89       	ldd	r24, Y+19	; 0x13
    45fc:	9c 89       	ldd	r25, Y+20	; 0x14
    45fe:	01 97       	sbiw	r24, 0x01	; 1
    4600:	9c 8b       	std	Y+20, r25	; 0x14
    4602:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4604:	8b 89       	ldd	r24, Y+19	; 0x13
    4606:	9c 89       	ldd	r25, Y+20	; 0x14
    4608:	00 97       	sbiw	r24, 0x00	; 0
    460a:	69 f7       	brne	.-38     	; 0x45e6 <LCD_clear_display+0xae>
    460c:	14 c0       	rjmp	.+40     	; 0x4636 <LCD_clear_display+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    460e:	6d 89       	ldd	r22, Y+21	; 0x15
    4610:	7e 89       	ldd	r23, Y+22	; 0x16
    4612:	8f 89       	ldd	r24, Y+23	; 0x17
    4614:	98 8d       	ldd	r25, Y+24	; 0x18
    4616:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    461a:	dc 01       	movw	r26, r24
    461c:	cb 01       	movw	r24, r22
    461e:	9c 8b       	std	Y+20, r25	; 0x14
    4620:	8b 8b       	std	Y+19, r24	; 0x13
    4622:	8b 89       	ldd	r24, Y+19	; 0x13
    4624:	9c 89       	ldd	r25, Y+20	; 0x14
    4626:	98 8b       	std	Y+16, r25	; 0x10
    4628:	8f 87       	std	Y+15, r24	; 0x0f
    462a:	8f 85       	ldd	r24, Y+15	; 0x0f
    462c:	98 89       	ldd	r25, Y+16	; 0x10
    462e:	01 97       	sbiw	r24, 0x01	; 1
    4630:	f1 f7       	brne	.-4      	; 0x462e <LCD_clear_display+0xf6>
    4632:	98 8b       	std	Y+16, r25	; 0x10
    4634:	8f 87       	std	Y+15, r24	; 0x0f
	//wait more than 1.53 ms
	_delay_ms(2);
	//return home
	LCD_write_command_4bit(return_Home);
    4636:	82 e0       	ldi	r24, 0x02	; 2
    4638:	0e 94 4f 11 	call	0x229e	; 0x229e <LCD_write_command_4bit>
    463c:	80 e0       	ldi	r24, 0x00	; 0
    463e:	90 e0       	ldi	r25, 0x00	; 0
    4640:	a0 e0       	ldi	r26, 0x00	; 0
    4642:	b0 e4       	ldi	r27, 0x40	; 64
    4644:	8b 87       	std	Y+11, r24	; 0x0b
    4646:	9c 87       	std	Y+12, r25	; 0x0c
    4648:	ad 87       	std	Y+13, r26	; 0x0d
    464a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    464c:	6b 85       	ldd	r22, Y+11	; 0x0b
    464e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4650:	8d 85       	ldd	r24, Y+13	; 0x0d
    4652:	9e 85       	ldd	r25, Y+14	; 0x0e
    4654:	20 e0       	ldi	r18, 0x00	; 0
    4656:	30 e0       	ldi	r19, 0x00	; 0
    4658:	4a ef       	ldi	r20, 0xFA	; 250
    465a:	54 e4       	ldi	r21, 0x44	; 68
    465c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4660:	dc 01       	movw	r26, r24
    4662:	cb 01       	movw	r24, r22
    4664:	8f 83       	std	Y+7, r24	; 0x07
    4666:	98 87       	std	Y+8, r25	; 0x08
    4668:	a9 87       	std	Y+9, r26	; 0x09
    466a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    466c:	6f 81       	ldd	r22, Y+7	; 0x07
    466e:	78 85       	ldd	r23, Y+8	; 0x08
    4670:	89 85       	ldd	r24, Y+9	; 0x09
    4672:	9a 85       	ldd	r25, Y+10	; 0x0a
    4674:	20 e0       	ldi	r18, 0x00	; 0
    4676:	30 e0       	ldi	r19, 0x00	; 0
    4678:	40 e8       	ldi	r20, 0x80	; 128
    467a:	5f e3       	ldi	r21, 0x3F	; 63
    467c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4680:	88 23       	and	r24, r24
    4682:	2c f4       	brge	.+10     	; 0x468e <LCD_clear_display+0x156>
		__ticks = 1;
    4684:	81 e0       	ldi	r24, 0x01	; 1
    4686:	90 e0       	ldi	r25, 0x00	; 0
    4688:	9e 83       	std	Y+6, r25	; 0x06
    468a:	8d 83       	std	Y+5, r24	; 0x05
    468c:	3f c0       	rjmp	.+126    	; 0x470c <LCD_clear_display+0x1d4>
	else if (__tmp > 65535)
    468e:	6f 81       	ldd	r22, Y+7	; 0x07
    4690:	78 85       	ldd	r23, Y+8	; 0x08
    4692:	89 85       	ldd	r24, Y+9	; 0x09
    4694:	9a 85       	ldd	r25, Y+10	; 0x0a
    4696:	20 e0       	ldi	r18, 0x00	; 0
    4698:	3f ef       	ldi	r19, 0xFF	; 255
    469a:	4f e7       	ldi	r20, 0x7F	; 127
    469c:	57 e4       	ldi	r21, 0x47	; 71
    469e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    46a2:	18 16       	cp	r1, r24
    46a4:	4c f5       	brge	.+82     	; 0x46f8 <LCD_clear_display+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    46a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    46aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    46ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    46ae:	20 e0       	ldi	r18, 0x00	; 0
    46b0:	30 e0       	ldi	r19, 0x00	; 0
    46b2:	40 e2       	ldi	r20, 0x20	; 32
    46b4:	51 e4       	ldi	r21, 0x41	; 65
    46b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    46ba:	dc 01       	movw	r26, r24
    46bc:	cb 01       	movw	r24, r22
    46be:	bc 01       	movw	r22, r24
    46c0:	cd 01       	movw	r24, r26
    46c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    46c6:	dc 01       	movw	r26, r24
    46c8:	cb 01       	movw	r24, r22
    46ca:	9e 83       	std	Y+6, r25	; 0x06
    46cc:	8d 83       	std	Y+5, r24	; 0x05
    46ce:	0f c0       	rjmp	.+30     	; 0x46ee <LCD_clear_display+0x1b6>
    46d0:	88 ec       	ldi	r24, 0xC8	; 200
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	9c 83       	std	Y+4, r25	; 0x04
    46d6:	8b 83       	std	Y+3, r24	; 0x03
    46d8:	8b 81       	ldd	r24, Y+3	; 0x03
    46da:	9c 81       	ldd	r25, Y+4	; 0x04
    46dc:	01 97       	sbiw	r24, 0x01	; 1
    46de:	f1 f7       	brne	.-4      	; 0x46dc <LCD_clear_display+0x1a4>
    46e0:	9c 83       	std	Y+4, r25	; 0x04
    46e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46e4:	8d 81       	ldd	r24, Y+5	; 0x05
    46e6:	9e 81       	ldd	r25, Y+6	; 0x06
    46e8:	01 97       	sbiw	r24, 0x01	; 1
    46ea:	9e 83       	std	Y+6, r25	; 0x06
    46ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ee:	8d 81       	ldd	r24, Y+5	; 0x05
    46f0:	9e 81       	ldd	r25, Y+6	; 0x06
    46f2:	00 97       	sbiw	r24, 0x00	; 0
    46f4:	69 f7       	brne	.-38     	; 0x46d0 <LCD_clear_display+0x198>
    46f6:	14 c0       	rjmp	.+40     	; 0x4720 <LCD_clear_display+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46f8:	6f 81       	ldd	r22, Y+7	; 0x07
    46fa:	78 85       	ldd	r23, Y+8	; 0x08
    46fc:	89 85       	ldd	r24, Y+9	; 0x09
    46fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4700:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4704:	dc 01       	movw	r26, r24
    4706:	cb 01       	movw	r24, r22
    4708:	9e 83       	std	Y+6, r25	; 0x06
    470a:	8d 83       	std	Y+5, r24	; 0x05
    470c:	8d 81       	ldd	r24, Y+5	; 0x05
    470e:	9e 81       	ldd	r25, Y+6	; 0x06
    4710:	9a 83       	std	Y+2, r25	; 0x02
    4712:	89 83       	std	Y+1, r24	; 0x01
    4714:	89 81       	ldd	r24, Y+1	; 0x01
    4716:	9a 81       	ldd	r25, Y+2	; 0x02
    4718:	01 97       	sbiw	r24, 0x01	; 1
    471a:	f1 f7       	brne	.-4      	; 0x4718 <LCD_clear_display+0x1e0>
    471c:	9a 83       	std	Y+2, r25	; 0x02
    471e:	89 83       	std	Y+1, r24	; 0x01
	// wait more han 1.53 ms
	_delay_ms(2);
#endif


}
    4720:	6c 96       	adiw	r28, 0x1c	; 28
    4722:	0f b6       	in	r0, 0x3f	; 63
    4724:	f8 94       	cli
    4726:	de bf       	out	0x3e, r29	; 62
    4728:	0f be       	out	0x3f, r0	; 63
    472a:	cd bf       	out	0x3d, r28	; 61
    472c:	cf 91       	pop	r28
    472e:	df 91       	pop	r29
    4730:	08 95       	ret

00004732 <LCD_write_char>:

void LCD_write_char(u8 copy_u8_char){
    4732:	df 93       	push	r29
    4734:	cf 93       	push	r28
    4736:	cd b7       	in	r28, 0x3d	; 61
    4738:	de b7       	in	r29, 0x3e	; 62
    473a:	69 97       	sbiw	r28, 0x19	; 25
    473c:	0f b6       	in	r0, 0x3f	; 63
    473e:	f8 94       	cli
    4740:	de bf       	out	0x3e, r29	; 62
    4742:	0f be       	out	0x3f, r0	; 63
    4744:	cd bf       	out	0x3d, r28	; 61
    4746:	89 8f       	std	Y+25, r24	; 0x19
	LCD_write_data_8bit(copy_u8_char);
	// wait more than 39 us
	_delay_us(50);
#elif LCD_interface_mode == interface_4bit
	// send character
	LCD_write_data_4bit(copy_u8_char);
    4748:	89 8d       	ldd	r24, Y+25	; 0x19
    474a:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <LCD_write_data_4bit>
    474e:	80 e0       	ldi	r24, 0x00	; 0
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	a8 e4       	ldi	r26, 0x48	; 72
    4754:	b2 e4       	ldi	r27, 0x42	; 66
    4756:	8d 8b       	std	Y+21, r24	; 0x15
    4758:	9e 8b       	std	Y+22, r25	; 0x16
    475a:	af 8b       	std	Y+23, r26	; 0x17
    475c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    475e:	6d 89       	ldd	r22, Y+21	; 0x15
    4760:	7e 89       	ldd	r23, Y+22	; 0x16
    4762:	8f 89       	ldd	r24, Y+23	; 0x17
    4764:	98 8d       	ldd	r25, Y+24	; 0x18
    4766:	2b ea       	ldi	r18, 0xAB	; 171
    4768:	3a ea       	ldi	r19, 0xAA	; 170
    476a:	4a e2       	ldi	r20, 0x2A	; 42
    476c:	50 e4       	ldi	r21, 0x40	; 64
    476e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4772:	dc 01       	movw	r26, r24
    4774:	cb 01       	movw	r24, r22
    4776:	89 8b       	std	Y+17, r24	; 0x11
    4778:	9a 8b       	std	Y+18, r25	; 0x12
    477a:	ab 8b       	std	Y+19, r26	; 0x13
    477c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    477e:	69 89       	ldd	r22, Y+17	; 0x11
    4780:	7a 89       	ldd	r23, Y+18	; 0x12
    4782:	8b 89       	ldd	r24, Y+19	; 0x13
    4784:	9c 89       	ldd	r25, Y+20	; 0x14
    4786:	20 e0       	ldi	r18, 0x00	; 0
    4788:	30 e0       	ldi	r19, 0x00	; 0
    478a:	40 e8       	ldi	r20, 0x80	; 128
    478c:	5f e3       	ldi	r21, 0x3F	; 63
    478e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4792:	88 23       	and	r24, r24
    4794:	1c f4       	brge	.+6      	; 0x479c <LCD_write_char+0x6a>
		__ticks = 1;
    4796:	81 e0       	ldi	r24, 0x01	; 1
    4798:	88 8b       	std	Y+16, r24	; 0x10
    479a:	91 c0       	rjmp	.+290    	; 0x48be <LCD_write_char+0x18c>
	else if (__tmp > 255)
    479c:	69 89       	ldd	r22, Y+17	; 0x11
    479e:	7a 89       	ldd	r23, Y+18	; 0x12
    47a0:	8b 89       	ldd	r24, Y+19	; 0x13
    47a2:	9c 89       	ldd	r25, Y+20	; 0x14
    47a4:	20 e0       	ldi	r18, 0x00	; 0
    47a6:	30 e0       	ldi	r19, 0x00	; 0
    47a8:	4f e7       	ldi	r20, 0x7F	; 127
    47aa:	53 e4       	ldi	r21, 0x43	; 67
    47ac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    47b0:	18 16       	cp	r1, r24
    47b2:	0c f0       	brlt	.+2      	; 0x47b6 <LCD_write_char+0x84>
    47b4:	7b c0       	rjmp	.+246    	; 0x48ac <LCD_write_char+0x17a>
	{
		_delay_ms(__us / 1000.0);
    47b6:	6d 89       	ldd	r22, Y+21	; 0x15
    47b8:	7e 89       	ldd	r23, Y+22	; 0x16
    47ba:	8f 89       	ldd	r24, Y+23	; 0x17
    47bc:	98 8d       	ldd	r25, Y+24	; 0x18
    47be:	20 e0       	ldi	r18, 0x00	; 0
    47c0:	30 e0       	ldi	r19, 0x00	; 0
    47c2:	4a e7       	ldi	r20, 0x7A	; 122
    47c4:	54 e4       	ldi	r21, 0x44	; 68
    47c6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    47ca:	dc 01       	movw	r26, r24
    47cc:	cb 01       	movw	r24, r22
    47ce:	8c 87       	std	Y+12, r24	; 0x0c
    47d0:	9d 87       	std	Y+13, r25	; 0x0d
    47d2:	ae 87       	std	Y+14, r26	; 0x0e
    47d4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47d6:	6c 85       	ldd	r22, Y+12	; 0x0c
    47d8:	7d 85       	ldd	r23, Y+13	; 0x0d
    47da:	8e 85       	ldd	r24, Y+14	; 0x0e
    47dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    47de:	20 e0       	ldi	r18, 0x00	; 0
    47e0:	30 e0       	ldi	r19, 0x00	; 0
    47e2:	4a ef       	ldi	r20, 0xFA	; 250
    47e4:	54 e4       	ldi	r21, 0x44	; 68
    47e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    47ea:	dc 01       	movw	r26, r24
    47ec:	cb 01       	movw	r24, r22
    47ee:	88 87       	std	Y+8, r24	; 0x08
    47f0:	99 87       	std	Y+9, r25	; 0x09
    47f2:	aa 87       	std	Y+10, r26	; 0x0a
    47f4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    47f6:	68 85       	ldd	r22, Y+8	; 0x08
    47f8:	79 85       	ldd	r23, Y+9	; 0x09
    47fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    47fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    47fe:	20 e0       	ldi	r18, 0x00	; 0
    4800:	30 e0       	ldi	r19, 0x00	; 0
    4802:	40 e8       	ldi	r20, 0x80	; 128
    4804:	5f e3       	ldi	r21, 0x3F	; 63
    4806:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    480a:	88 23       	and	r24, r24
    480c:	2c f4       	brge	.+10     	; 0x4818 <LCD_write_char+0xe6>
		__ticks = 1;
    480e:	81 e0       	ldi	r24, 0x01	; 1
    4810:	90 e0       	ldi	r25, 0x00	; 0
    4812:	9f 83       	std	Y+7, r25	; 0x07
    4814:	8e 83       	std	Y+6, r24	; 0x06
    4816:	3f c0       	rjmp	.+126    	; 0x4896 <LCD_write_char+0x164>
	else if (__tmp > 65535)
    4818:	68 85       	ldd	r22, Y+8	; 0x08
    481a:	79 85       	ldd	r23, Y+9	; 0x09
    481c:	8a 85       	ldd	r24, Y+10	; 0x0a
    481e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4820:	20 e0       	ldi	r18, 0x00	; 0
    4822:	3f ef       	ldi	r19, 0xFF	; 255
    4824:	4f e7       	ldi	r20, 0x7F	; 127
    4826:	57 e4       	ldi	r21, 0x47	; 71
    4828:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    482c:	18 16       	cp	r1, r24
    482e:	4c f5       	brge	.+82     	; 0x4882 <LCD_write_char+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4830:	6c 85       	ldd	r22, Y+12	; 0x0c
    4832:	7d 85       	ldd	r23, Y+13	; 0x0d
    4834:	8e 85       	ldd	r24, Y+14	; 0x0e
    4836:	9f 85       	ldd	r25, Y+15	; 0x0f
    4838:	20 e0       	ldi	r18, 0x00	; 0
    483a:	30 e0       	ldi	r19, 0x00	; 0
    483c:	40 e2       	ldi	r20, 0x20	; 32
    483e:	51 e4       	ldi	r21, 0x41	; 65
    4840:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4844:	dc 01       	movw	r26, r24
    4846:	cb 01       	movw	r24, r22
    4848:	bc 01       	movw	r22, r24
    484a:	cd 01       	movw	r24, r26
    484c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4850:	dc 01       	movw	r26, r24
    4852:	cb 01       	movw	r24, r22
    4854:	9f 83       	std	Y+7, r25	; 0x07
    4856:	8e 83       	std	Y+6, r24	; 0x06
    4858:	0f c0       	rjmp	.+30     	; 0x4878 <LCD_write_char+0x146>
    485a:	88 ec       	ldi	r24, 0xC8	; 200
    485c:	90 e0       	ldi	r25, 0x00	; 0
    485e:	9d 83       	std	Y+5, r25	; 0x05
    4860:	8c 83       	std	Y+4, r24	; 0x04
    4862:	8c 81       	ldd	r24, Y+4	; 0x04
    4864:	9d 81       	ldd	r25, Y+5	; 0x05
    4866:	01 97       	sbiw	r24, 0x01	; 1
    4868:	f1 f7       	brne	.-4      	; 0x4866 <LCD_write_char+0x134>
    486a:	9d 83       	std	Y+5, r25	; 0x05
    486c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    486e:	8e 81       	ldd	r24, Y+6	; 0x06
    4870:	9f 81       	ldd	r25, Y+7	; 0x07
    4872:	01 97       	sbiw	r24, 0x01	; 1
    4874:	9f 83       	std	Y+7, r25	; 0x07
    4876:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4878:	8e 81       	ldd	r24, Y+6	; 0x06
    487a:	9f 81       	ldd	r25, Y+7	; 0x07
    487c:	00 97       	sbiw	r24, 0x00	; 0
    487e:	69 f7       	brne	.-38     	; 0x485a <LCD_write_char+0x128>
    4880:	24 c0       	rjmp	.+72     	; 0x48ca <LCD_write_char+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4882:	68 85       	ldd	r22, Y+8	; 0x08
    4884:	79 85       	ldd	r23, Y+9	; 0x09
    4886:	8a 85       	ldd	r24, Y+10	; 0x0a
    4888:	9b 85       	ldd	r25, Y+11	; 0x0b
    488a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    488e:	dc 01       	movw	r26, r24
    4890:	cb 01       	movw	r24, r22
    4892:	9f 83       	std	Y+7, r25	; 0x07
    4894:	8e 83       	std	Y+6, r24	; 0x06
    4896:	8e 81       	ldd	r24, Y+6	; 0x06
    4898:	9f 81       	ldd	r25, Y+7	; 0x07
    489a:	9b 83       	std	Y+3, r25	; 0x03
    489c:	8a 83       	std	Y+2, r24	; 0x02
    489e:	8a 81       	ldd	r24, Y+2	; 0x02
    48a0:	9b 81       	ldd	r25, Y+3	; 0x03
    48a2:	01 97       	sbiw	r24, 0x01	; 1
    48a4:	f1 f7       	brne	.-4      	; 0x48a2 <LCD_write_char+0x170>
    48a6:	9b 83       	std	Y+3, r25	; 0x03
    48a8:	8a 83       	std	Y+2, r24	; 0x02
    48aa:	0f c0       	rjmp	.+30     	; 0x48ca <LCD_write_char+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    48ac:	69 89       	ldd	r22, Y+17	; 0x11
    48ae:	7a 89       	ldd	r23, Y+18	; 0x12
    48b0:	8b 89       	ldd	r24, Y+19	; 0x13
    48b2:	9c 89       	ldd	r25, Y+20	; 0x14
    48b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    48b8:	dc 01       	movw	r26, r24
    48ba:	cb 01       	movw	r24, r22
    48bc:	88 8b       	std	Y+16, r24	; 0x10
    48be:	88 89       	ldd	r24, Y+16	; 0x10
    48c0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    48c2:	89 81       	ldd	r24, Y+1	; 0x01
    48c4:	8a 95       	dec	r24
    48c6:	f1 f7       	brne	.-4      	; 0x48c4 <LCD_write_char+0x192>
    48c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
#endif

}
    48ca:	69 96       	adiw	r28, 0x19	; 25
    48cc:	0f b6       	in	r0, 0x3f	; 63
    48ce:	f8 94       	cli
    48d0:	de bf       	out	0x3e, r29	; 62
    48d2:	0f be       	out	0x3f, r0	; 63
    48d4:	cd bf       	out	0x3d, r28	; 61
    48d6:	cf 91       	pop	r28
    48d8:	df 91       	pop	r29
    48da:	08 95       	ret

000048dc <LCD_write_string>:


void LCD_write_string(u8* Copy_pu8_str){
    48dc:	df 93       	push	r29
    48de:	cf 93       	push	r28
    48e0:	00 d0       	rcall	.+0      	; 0x48e2 <LCD_write_string+0x6>
    48e2:	0f 92       	push	r0
    48e4:	cd b7       	in	r28, 0x3d	; 61
    48e6:	de b7       	in	r29, 0x3e	; 62
    48e8:	9b 83       	std	Y+3, r25	; 0x03
    48ea:	8a 83       	std	Y+2, r24	; 0x02
	 * this function takes a pointer to a string u8
	 * and send it to the lcd to write on it the desired string
	 *
	 */

	u8 i = 0;
    48ec:	19 82       	std	Y+1, r1	; 0x01
    48ee:	0e c0       	rjmp	.+28     	; 0x490c <LCD_write_string+0x30>

	while(Copy_pu8_str[i] != '\0'){

		LCD_write_char(Copy_pu8_str[i]);
    48f0:	89 81       	ldd	r24, Y+1	; 0x01
    48f2:	28 2f       	mov	r18, r24
    48f4:	30 e0       	ldi	r19, 0x00	; 0
    48f6:	8a 81       	ldd	r24, Y+2	; 0x02
    48f8:	9b 81       	ldd	r25, Y+3	; 0x03
    48fa:	fc 01       	movw	r30, r24
    48fc:	e2 0f       	add	r30, r18
    48fe:	f3 1f       	adc	r31, r19
    4900:	80 81       	ld	r24, Z
    4902:	0e 94 99 23 	call	0x4732	; 0x4732 <LCD_write_char>
		i++;
    4906:	89 81       	ldd	r24, Y+1	; 0x01
    4908:	8f 5f       	subi	r24, 0xFF	; 255
    490a:	89 83       	std	Y+1, r24	; 0x01
	 *
	 */

	u8 i = 0;

	while(Copy_pu8_str[i] != '\0'){
    490c:	89 81       	ldd	r24, Y+1	; 0x01
    490e:	28 2f       	mov	r18, r24
    4910:	30 e0       	ldi	r19, 0x00	; 0
    4912:	8a 81       	ldd	r24, Y+2	; 0x02
    4914:	9b 81       	ldd	r25, Y+3	; 0x03
    4916:	fc 01       	movw	r30, r24
    4918:	e2 0f       	add	r30, r18
    491a:	f3 1f       	adc	r31, r19
    491c:	80 81       	ld	r24, Z
    491e:	88 23       	and	r24, r24
    4920:	39 f7       	brne	.-50     	; 0x48f0 <LCD_write_string+0x14>

		LCD_write_char(Copy_pu8_str[i]);
		i++;
	}

}
    4922:	0f 90       	pop	r0
    4924:	0f 90       	pop	r0
    4926:	0f 90       	pop	r0
    4928:	cf 91       	pop	r28
    492a:	df 91       	pop	r29
    492c:	08 95       	ret

0000492e <LCD_write_number>:


void LCD_write_number(s32 copy_s32_number){
    492e:	0f 93       	push	r16
    4930:	1f 93       	push	r17
    4932:	df 93       	push	r29
    4934:	cf 93       	push	r28
    4936:	cd b7       	in	r28, 0x3d	; 61
    4938:	de b7       	in	r29, 0x3e	; 62
    493a:	60 97       	sbiw	r28, 0x10	; 16
    493c:	0f b6       	in	r0, 0x3f	; 63
    493e:	f8 94       	cli
    4940:	de bf       	out	0x3e, r29	; 62
    4942:	0f be       	out	0x3f, r0	; 63
    4944:	cd bf       	out	0x3d, r28	; 61
    4946:	6d 87       	std	Y+13, r22	; 0x0d
    4948:	7e 87       	std	Y+14, r23	; 0x0e
    494a:	8f 87       	std	Y+15, r24	; 0x0f
    494c:	98 8b       	std	Y+16, r25	; 0x10
	 *
	 *
	 */
	// if number is 0

	if(copy_s32_number == 0){
    494e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4950:	9e 85       	ldd	r25, Y+14	; 0x0e
    4952:	af 85       	ldd	r26, Y+15	; 0x0f
    4954:	b8 89       	ldd	r27, Y+16	; 0x10
    4956:	00 97       	sbiw	r24, 0x00	; 0
    4958:	a1 05       	cpc	r26, r1
    495a:	b1 05       	cpc	r27, r1
    495c:	21 f4       	brne	.+8      	; 0x4966 <LCD_write_number+0x38>

		LCD_write_char('0');
    495e:	80 e3       	ldi	r24, 0x30	; 48
    4960:	0e 94 99 23 	call	0x4732	; 0x4732 <LCD_write_char>
    4964:	18 c0       	rjmp	.+48     	; 0x4996 <LCD_write_number+0x68>
		//negative number
	}else if(copy_s32_number < 0){
    4966:	8d 85       	ldd	r24, Y+13	; 0x0d
    4968:	9e 85       	ldd	r25, Y+14	; 0x0e
    496a:	af 85       	ldd	r26, Y+15	; 0x0f
    496c:	b8 89       	ldd	r27, Y+16	; 0x10
    496e:	bb 23       	and	r27, r27
    4970:	94 f4       	brge	.+36     	; 0x4996 <LCD_write_number+0x68>

		LCD_write_char('-');
    4972:	8d e2       	ldi	r24, 0x2D	; 45
    4974:	0e 94 99 23 	call	0x4732	; 0x4732 <LCD_write_char>
		//convert the number to the absolute value
		copy_s32_number *= -1;
    4978:	8d 85       	ldd	r24, Y+13	; 0x0d
    497a:	9e 85       	ldd	r25, Y+14	; 0x0e
    497c:	af 85       	ldd	r26, Y+15	; 0x0f
    497e:	b8 89       	ldd	r27, Y+16	; 0x10
    4980:	b0 95       	com	r27
    4982:	a0 95       	com	r26
    4984:	90 95       	com	r25
    4986:	81 95       	neg	r24
    4988:	9f 4f       	sbci	r25, 0xFF	; 255
    498a:	af 4f       	sbci	r26, 0xFF	; 255
    498c:	bf 4f       	sbci	r27, 0xFF	; 255
    498e:	8d 87       	std	Y+13, r24	; 0x0d
    4990:	9e 87       	std	Y+14, r25	; 0x0e
    4992:	af 87       	std	Y+15, r26	; 0x0f
    4994:	b8 8b       	std	Y+16, r27	; 0x10

	}
	if(copy_s32_number > 0){
    4996:	8d 85       	ldd	r24, Y+13	; 0x0d
    4998:	9e 85       	ldd	r25, Y+14	; 0x0e
    499a:	af 85       	ldd	r26, Y+15	; 0x0f
    499c:	b8 89       	ldd	r27, Y+16	; 0x10
    499e:	18 16       	cp	r1, r24
    49a0:	19 06       	cpc	r1, r25
    49a2:	1a 06       	cpc	r1, r26
    49a4:	1b 06       	cpc	r1, r27
    49a6:	0c f0       	brlt	.+2      	; 0x49aa <LCD_write_number+0x7c>
    49a8:	51 c0       	rjmp	.+162    	; 0x4a4c <LCD_write_number+0x11e>
	//container to store the number
	u8 numbers[10];
	u8 i = 0;
    49aa:	1a 82       	std	Y+2, r1	; 0x02
    49ac:	2d c0       	rjmp	.+90     	; 0x4a08 <LCD_write_number+0xda>

	while(copy_s32_number != 0){

		//retreive the last digit from the number
		numbers[i] = copy_s32_number%10;
    49ae:	8a 81       	ldd	r24, Y+2	; 0x02
    49b0:	08 2f       	mov	r16, r24
    49b2:	10 e0       	ldi	r17, 0x00	; 0
    49b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    49b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    49b8:	af 85       	ldd	r26, Y+15	; 0x0f
    49ba:	b8 89       	ldd	r27, Y+16	; 0x10
    49bc:	2a e0       	ldi	r18, 0x0A	; 10
    49be:	30 e0       	ldi	r19, 0x00	; 0
    49c0:	40 e0       	ldi	r20, 0x00	; 0
    49c2:	50 e0       	ldi	r21, 0x00	; 0
    49c4:	bc 01       	movw	r22, r24
    49c6:	cd 01       	movw	r24, r26
    49c8:	0e 94 f7 25 	call	0x4bee	; 0x4bee <__divmodsi4>
    49cc:	dc 01       	movw	r26, r24
    49ce:	cb 01       	movw	r24, r22
    49d0:	28 2f       	mov	r18, r24
    49d2:	ce 01       	movw	r24, r28
    49d4:	03 96       	adiw	r24, 0x03	; 3
    49d6:	fc 01       	movw	r30, r24
    49d8:	e0 0f       	add	r30, r16
    49da:	f1 1f       	adc	r31, r17
    49dc:	20 83       	st	Z, r18
		copy_s32_number /= 10;
    49de:	8d 85       	ldd	r24, Y+13	; 0x0d
    49e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    49e2:	af 85       	ldd	r26, Y+15	; 0x0f
    49e4:	b8 89       	ldd	r27, Y+16	; 0x10
    49e6:	2a e0       	ldi	r18, 0x0A	; 10
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	40 e0       	ldi	r20, 0x00	; 0
    49ec:	50 e0       	ldi	r21, 0x00	; 0
    49ee:	bc 01       	movw	r22, r24
    49f0:	cd 01       	movw	r24, r26
    49f2:	0e 94 f7 25 	call	0x4bee	; 0x4bee <__divmodsi4>
    49f6:	da 01       	movw	r26, r20
    49f8:	c9 01       	movw	r24, r18
    49fa:	8d 87       	std	Y+13, r24	; 0x0d
    49fc:	9e 87       	std	Y+14, r25	; 0x0e
    49fe:	af 87       	std	Y+15, r26	; 0x0f
    4a00:	b8 8b       	std	Y+16, r27	; 0x10
		i++;
    4a02:	8a 81       	ldd	r24, Y+2	; 0x02
    4a04:	8f 5f       	subi	r24, 0xFF	; 255
    4a06:	8a 83       	std	Y+2, r24	; 0x02
	if(copy_s32_number > 0){
	//container to store the number
	u8 numbers[10];
	u8 i = 0;

	while(copy_s32_number != 0){
    4a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a0c:	af 85       	ldd	r26, Y+15	; 0x0f
    4a0e:	b8 89       	ldd	r27, Y+16	; 0x10
    4a10:	00 97       	sbiw	r24, 0x00	; 0
    4a12:	a1 05       	cpc	r26, r1
    4a14:	b1 05       	cpc	r27, r1
    4a16:	59 f6       	brne	.-106    	; 0x49ae <LCD_write_number+0x80>
		copy_s32_number /= 10;
		i++;
	}

	// reverse array order
	array_Swap(numbers, i);
    4a18:	ce 01       	movw	r24, r28
    4a1a:	03 96       	adiw	r24, 0x03	; 3
    4a1c:	6a 81       	ldd	r22, Y+2	; 0x02
    4a1e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <array_Swap>

	// print the correct order of the number
	for(u8 j = 0; j < i; j++){
    4a22:	19 82       	std	Y+1, r1	; 0x01
    4a24:	0f c0       	rjmp	.+30     	; 0x4a44 <LCD_write_number+0x116>

		LCD_write_char(numbers[j]+'0');
    4a26:	89 81       	ldd	r24, Y+1	; 0x01
    4a28:	28 2f       	mov	r18, r24
    4a2a:	30 e0       	ldi	r19, 0x00	; 0
    4a2c:	ce 01       	movw	r24, r28
    4a2e:	03 96       	adiw	r24, 0x03	; 3
    4a30:	fc 01       	movw	r30, r24
    4a32:	e2 0f       	add	r30, r18
    4a34:	f3 1f       	adc	r31, r19
    4a36:	80 81       	ld	r24, Z
    4a38:	80 5d       	subi	r24, 0xD0	; 208
    4a3a:	0e 94 99 23 	call	0x4732	; 0x4732 <LCD_write_char>

	// reverse array order
	array_Swap(numbers, i);

	// print the correct order of the number
	for(u8 j = 0; j < i; j++){
    4a3e:	89 81       	ldd	r24, Y+1	; 0x01
    4a40:	8f 5f       	subi	r24, 0xFF	; 255
    4a42:	89 83       	std	Y+1, r24	; 0x01
    4a44:	99 81       	ldd	r25, Y+1	; 0x01
    4a46:	8a 81       	ldd	r24, Y+2	; 0x02
    4a48:	98 17       	cp	r25, r24
    4a4a:	68 f3       	brcs	.-38     	; 0x4a26 <LCD_write_number+0xf8>

		LCD_write_char(numbers[j]+'0');
	}

	}
}
    4a4c:	60 96       	adiw	r28, 0x10	; 16
    4a4e:	0f b6       	in	r0, 0x3f	; 63
    4a50:	f8 94       	cli
    4a52:	de bf       	out	0x3e, r29	; 62
    4a54:	0f be       	out	0x3f, r0	; 63
    4a56:	cd bf       	out	0x3d, r28	; 61
    4a58:	cf 91       	pop	r28
    4a5a:	df 91       	pop	r29
    4a5c:	1f 91       	pop	r17
    4a5e:	0f 91       	pop	r16
    4a60:	08 95       	ret

00004a62 <LCD_write_float>:

void LCD_write_float(f32 copy_f32_number, u8 copy_decimal_point){
    4a62:	ef 92       	push	r14
    4a64:	ff 92       	push	r15
    4a66:	0f 93       	push	r16
    4a68:	1f 93       	push	r17
    4a6a:	df 93       	push	r29
    4a6c:	cf 93       	push	r28
    4a6e:	cd b7       	in	r28, 0x3d	; 61
    4a70:	de b7       	in	r29, 0x3e	; 62
    4a72:	2d 97       	sbiw	r28, 0x0d	; 13
    4a74:	0f b6       	in	r0, 0x3f	; 63
    4a76:	f8 94       	cli
    4a78:	de bf       	out	0x3e, r29	; 62
    4a7a:	0f be       	out	0x3f, r0	; 63
    4a7c:	cd bf       	out	0x3d, r28	; 61
    4a7e:	69 87       	std	Y+9, r22	; 0x09
    4a80:	7a 87       	std	Y+10, r23	; 0x0a
    4a82:	8b 87       	std	Y+11, r24	; 0x0b
    4a84:	9c 87       	std	Y+12, r25	; 0x0c
    4a86:	4d 87       	std	Y+13, r20	; 0x0d
	 * the function doesn't return anything
	 *
	 */

	// store the integer part
	s32 int_value = (s32)copy_f32_number;
    4a88:	69 85       	ldd	r22, Y+9	; 0x09
    4a8a:	7a 85       	ldd	r23, Y+10	; 0x0a
    4a8c:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a90:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    4a94:	dc 01       	movw	r26, r24
    4a96:	cb 01       	movw	r24, r22
    4a98:	8d 83       	std	Y+5, r24	; 0x05
    4a9a:	9e 83       	std	Y+6, r25	; 0x06
    4a9c:	af 83       	std	Y+7, r26	; 0x07
    4a9e:	b8 87       	std	Y+8, r27	; 0x08

	// store the decimal part
	s32 float_value = (s32)((copy_f32_number -(f32)int_value)*power_10(copy_decimal_point));
    4aa0:	6d 81       	ldd	r22, Y+5	; 0x05
    4aa2:	7e 81       	ldd	r23, Y+6	; 0x06
    4aa4:	8f 81       	ldd	r24, Y+7	; 0x07
    4aa6:	98 85       	ldd	r25, Y+8	; 0x08
    4aa8:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    4aac:	9b 01       	movw	r18, r22
    4aae:	ac 01       	movw	r20, r24
    4ab0:	69 85       	ldd	r22, Y+9	; 0x09
    4ab2:	7a 85       	ldd	r23, Y+10	; 0x0a
    4ab4:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ab6:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ab8:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    4abc:	dc 01       	movw	r26, r24
    4abe:	cb 01       	movw	r24, r22
    4ac0:	7c 01       	movw	r14, r24
    4ac2:	8d 01       	movw	r16, r26
    4ac4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ac6:	0e 94 b8 09 	call	0x1370	; 0x1370 <power_10>
    4aca:	dc 01       	movw	r26, r24
    4acc:	cb 01       	movw	r24, r22
    4ace:	bc 01       	movw	r22, r24
    4ad0:	cd 01       	movw	r24, r26
    4ad2:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    4ad6:	9b 01       	movw	r18, r22
    4ad8:	ac 01       	movw	r20, r24
    4ada:	c8 01       	movw	r24, r16
    4adc:	b7 01       	movw	r22, r14
    4ade:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ae2:	dc 01       	movw	r26, r24
    4ae4:	cb 01       	movw	r24, r22
    4ae6:	bc 01       	movw	r22, r24
    4ae8:	cd 01       	movw	r24, r26
    4aea:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    4aee:	dc 01       	movw	r26, r24
    4af0:	cb 01       	movw	r24, r22
    4af2:	89 83       	std	Y+1, r24	; 0x01
    4af4:	9a 83       	std	Y+2, r25	; 0x02
    4af6:	ab 83       	std	Y+3, r26	; 0x03
    4af8:	bc 83       	std	Y+4, r27	; 0x04

	// print the int part
	LCD_write_number(int_value);
    4afa:	8d 81       	ldd	r24, Y+5	; 0x05
    4afc:	9e 81       	ldd	r25, Y+6	; 0x06
    4afe:	af 81       	ldd	r26, Y+7	; 0x07
    4b00:	b8 85       	ldd	r27, Y+8	; 0x08
    4b02:	bc 01       	movw	r22, r24
    4b04:	cd 01       	movw	r24, r26
    4b06:	0e 94 97 24 	call	0x492e	; 0x492e <LCD_write_number>
	//print the floating point
	LCD_write_char('.');
    4b0a:	8e e2       	ldi	r24, 0x2E	; 46
    4b0c:	0e 94 99 23 	call	0x4732	; 0x4732 <LCD_write_char>
	//print the decimal part
	if(float_value > 0 ){
    4b10:	89 81       	ldd	r24, Y+1	; 0x01
    4b12:	9a 81       	ldd	r25, Y+2	; 0x02
    4b14:	ab 81       	ldd	r26, Y+3	; 0x03
    4b16:	bc 81       	ldd	r27, Y+4	; 0x04
    4b18:	18 16       	cp	r1, r24
    4b1a:	19 06       	cpc	r1, r25
    4b1c:	1a 06       	cpc	r1, r26
    4b1e:	1b 06       	cpc	r1, r27
    4b20:	4c f4       	brge	.+18     	; 0x4b34 <LCD_write_float+0xd2>
	LCD_write_number(float_value);
    4b22:	89 81       	ldd	r24, Y+1	; 0x01
    4b24:	9a 81       	ldd	r25, Y+2	; 0x02
    4b26:	ab 81       	ldd	r26, Y+3	; 0x03
    4b28:	bc 81       	ldd	r27, Y+4	; 0x04
    4b2a:	bc 01       	movw	r22, r24
    4b2c:	cd 01       	movw	r24, r26
    4b2e:	0e 94 97 24 	call	0x492e	; 0x492e <LCD_write_number>
    4b32:	0f c0       	rjmp	.+30     	; 0x4b52 <LCD_write_float+0xf0>
	}else{
	LCD_write_number((float_value * -1));
    4b34:	89 81       	ldd	r24, Y+1	; 0x01
    4b36:	9a 81       	ldd	r25, Y+2	; 0x02
    4b38:	ab 81       	ldd	r26, Y+3	; 0x03
    4b3a:	bc 81       	ldd	r27, Y+4	; 0x04
    4b3c:	b0 95       	com	r27
    4b3e:	a0 95       	com	r26
    4b40:	90 95       	com	r25
    4b42:	81 95       	neg	r24
    4b44:	9f 4f       	sbci	r25, 0xFF	; 255
    4b46:	af 4f       	sbci	r26, 0xFF	; 255
    4b48:	bf 4f       	sbci	r27, 0xFF	; 255
    4b4a:	bc 01       	movw	r22, r24
    4b4c:	cd 01       	movw	r24, r26
    4b4e:	0e 94 97 24 	call	0x492e	; 0x492e <LCD_write_number>

	}


}
    4b52:	2d 96       	adiw	r28, 0x0d	; 13
    4b54:	0f b6       	in	r0, 0x3f	; 63
    4b56:	f8 94       	cli
    4b58:	de bf       	out	0x3e, r29	; 62
    4b5a:	0f be       	out	0x3f, r0	; 63
    4b5c:	cd bf       	out	0x3d, r28	; 61
    4b5e:	cf 91       	pop	r28
    4b60:	df 91       	pop	r29
    4b62:	1f 91       	pop	r17
    4b64:	0f 91       	pop	r16
    4b66:	ff 90       	pop	r15
    4b68:	ef 90       	pop	r14
    4b6a:	08 95       	ret

00004b6c <main>:
 *  modify the code below to your liking
 *
 *
 */

int main(){
    4b6c:	df 93       	push	r29
    4b6e:	cf 93       	push	r28
    4b70:	cd b7       	in	r28, 0x3d	; 61
    4b72:	de b7       	in	r29, 0x3e	; 62

	// initialize the lcd
	// the function set the direction of the required pins
	LCD_init();
    4b74:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <LCD_init>

	LCD_set_cursor(0, 3);
    4b78:	80 e0       	ldi	r24, 0x00	; 0
    4b7a:	63 e0       	ldi	r22, 0x03	; 3
    4b7c:	0e 94 0d 20 	call	0x401a	; 0x401a <LCD_set_cursor>
	LCD_write_string((u8*)"LCD DRIVER");
    4b80:	80 e6       	ldi	r24, 0x60	; 96
    4b82:	90 e0       	ldi	r25, 0x00	; 0
    4b84:	0e 94 6e 24 	call	0x48dc	; 0x48dc <LCD_write_string>
	LCD_set_cursor(1, 0);
    4b88:	81 e0       	ldi	r24, 0x01	; 1
    4b8a:	60 e0       	ldi	r22, 0x00	; 0
    4b8c:	0e 94 0d 20 	call	0x401a	; 0x401a <LCD_set_cursor>
	LCD_write_string((u8*)"VER:");
    4b90:	8b e6       	ldi	r24, 0x6B	; 107
    4b92:	90 e0       	ldi	r25, 0x00	; 0
    4b94:	0e 94 6e 24 	call	0x48dc	; 0x48dc <LCD_write_string>
	LCD_write_float(1.00, 1);
    4b98:	60 e0       	ldi	r22, 0x00	; 0
    4b9a:	70 e0       	ldi	r23, 0x00	; 0
    4b9c:	80 e8       	ldi	r24, 0x80	; 128
    4b9e:	9f e3       	ldi	r25, 0x3F	; 63
    4ba0:	41 e0       	ldi	r20, 0x01	; 1
    4ba2:	0e 94 31 25 	call	0x4a62	; 0x4a62 <LCD_write_float>
	LCD_write_string((u8*)" BY KARIM");
    4ba6:	80 e7       	ldi	r24, 0x70	; 112
    4ba8:	90 e0       	ldi	r25, 0x00	; 0
    4baa:	0e 94 6e 24 	call	0x48dc	; 0x48dc <LCD_write_string>
    4bae:	ff cf       	rjmp	.-2      	; 0x4bae <main+0x42>

00004bb0 <__mulsi3>:
    4bb0:	62 9f       	mul	r22, r18
    4bb2:	d0 01       	movw	r26, r0
    4bb4:	73 9f       	mul	r23, r19
    4bb6:	f0 01       	movw	r30, r0
    4bb8:	82 9f       	mul	r24, r18
    4bba:	e0 0d       	add	r30, r0
    4bbc:	f1 1d       	adc	r31, r1
    4bbe:	64 9f       	mul	r22, r20
    4bc0:	e0 0d       	add	r30, r0
    4bc2:	f1 1d       	adc	r31, r1
    4bc4:	92 9f       	mul	r25, r18
    4bc6:	f0 0d       	add	r31, r0
    4bc8:	83 9f       	mul	r24, r19
    4bca:	f0 0d       	add	r31, r0
    4bcc:	74 9f       	mul	r23, r20
    4bce:	f0 0d       	add	r31, r0
    4bd0:	65 9f       	mul	r22, r21
    4bd2:	f0 0d       	add	r31, r0
    4bd4:	99 27       	eor	r25, r25
    4bd6:	72 9f       	mul	r23, r18
    4bd8:	b0 0d       	add	r27, r0
    4bda:	e1 1d       	adc	r30, r1
    4bdc:	f9 1f       	adc	r31, r25
    4bde:	63 9f       	mul	r22, r19
    4be0:	b0 0d       	add	r27, r0
    4be2:	e1 1d       	adc	r30, r1
    4be4:	f9 1f       	adc	r31, r25
    4be6:	bd 01       	movw	r22, r26
    4be8:	cf 01       	movw	r24, r30
    4bea:	11 24       	eor	r1, r1
    4bec:	08 95       	ret

00004bee <__divmodsi4>:
    4bee:	97 fb       	bst	r25, 7
    4bf0:	09 2e       	mov	r0, r25
    4bf2:	05 26       	eor	r0, r21
    4bf4:	0e d0       	rcall	.+28     	; 0x4c12 <__divmodsi4_neg1>
    4bf6:	57 fd       	sbrc	r21, 7
    4bf8:	04 d0       	rcall	.+8      	; 0x4c02 <__divmodsi4_neg2>
    4bfa:	14 d0       	rcall	.+40     	; 0x4c24 <__udivmodsi4>
    4bfc:	0a d0       	rcall	.+20     	; 0x4c12 <__divmodsi4_neg1>
    4bfe:	00 1c       	adc	r0, r0
    4c00:	38 f4       	brcc	.+14     	; 0x4c10 <__divmodsi4_exit>

00004c02 <__divmodsi4_neg2>:
    4c02:	50 95       	com	r21
    4c04:	40 95       	com	r20
    4c06:	30 95       	com	r19
    4c08:	21 95       	neg	r18
    4c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c0c:	4f 4f       	sbci	r20, 0xFF	; 255
    4c0e:	5f 4f       	sbci	r21, 0xFF	; 255

00004c10 <__divmodsi4_exit>:
    4c10:	08 95       	ret

00004c12 <__divmodsi4_neg1>:
    4c12:	f6 f7       	brtc	.-4      	; 0x4c10 <__divmodsi4_exit>
    4c14:	90 95       	com	r25
    4c16:	80 95       	com	r24
    4c18:	70 95       	com	r23
    4c1a:	61 95       	neg	r22
    4c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    4c1e:	8f 4f       	sbci	r24, 0xFF	; 255
    4c20:	9f 4f       	sbci	r25, 0xFF	; 255
    4c22:	08 95       	ret

00004c24 <__udivmodsi4>:
    4c24:	a1 e2       	ldi	r26, 0x21	; 33
    4c26:	1a 2e       	mov	r1, r26
    4c28:	aa 1b       	sub	r26, r26
    4c2a:	bb 1b       	sub	r27, r27
    4c2c:	fd 01       	movw	r30, r26
    4c2e:	0d c0       	rjmp	.+26     	; 0x4c4a <__udivmodsi4_ep>

00004c30 <__udivmodsi4_loop>:
    4c30:	aa 1f       	adc	r26, r26
    4c32:	bb 1f       	adc	r27, r27
    4c34:	ee 1f       	adc	r30, r30
    4c36:	ff 1f       	adc	r31, r31
    4c38:	a2 17       	cp	r26, r18
    4c3a:	b3 07       	cpc	r27, r19
    4c3c:	e4 07       	cpc	r30, r20
    4c3e:	f5 07       	cpc	r31, r21
    4c40:	20 f0       	brcs	.+8      	; 0x4c4a <__udivmodsi4_ep>
    4c42:	a2 1b       	sub	r26, r18
    4c44:	b3 0b       	sbc	r27, r19
    4c46:	e4 0b       	sbc	r30, r20
    4c48:	f5 0b       	sbc	r31, r21

00004c4a <__udivmodsi4_ep>:
    4c4a:	66 1f       	adc	r22, r22
    4c4c:	77 1f       	adc	r23, r23
    4c4e:	88 1f       	adc	r24, r24
    4c50:	99 1f       	adc	r25, r25
    4c52:	1a 94       	dec	r1
    4c54:	69 f7       	brne	.-38     	; 0x4c30 <__udivmodsi4_loop>
    4c56:	60 95       	com	r22
    4c58:	70 95       	com	r23
    4c5a:	80 95       	com	r24
    4c5c:	90 95       	com	r25
    4c5e:	9b 01       	movw	r18, r22
    4c60:	ac 01       	movw	r20, r24
    4c62:	bd 01       	movw	r22, r26
    4c64:	cf 01       	movw	r24, r30
    4c66:	08 95       	ret

00004c68 <__prologue_saves__>:
    4c68:	2f 92       	push	r2
    4c6a:	3f 92       	push	r3
    4c6c:	4f 92       	push	r4
    4c6e:	5f 92       	push	r5
    4c70:	6f 92       	push	r6
    4c72:	7f 92       	push	r7
    4c74:	8f 92       	push	r8
    4c76:	9f 92       	push	r9
    4c78:	af 92       	push	r10
    4c7a:	bf 92       	push	r11
    4c7c:	cf 92       	push	r12
    4c7e:	df 92       	push	r13
    4c80:	ef 92       	push	r14
    4c82:	ff 92       	push	r15
    4c84:	0f 93       	push	r16
    4c86:	1f 93       	push	r17
    4c88:	cf 93       	push	r28
    4c8a:	df 93       	push	r29
    4c8c:	cd b7       	in	r28, 0x3d	; 61
    4c8e:	de b7       	in	r29, 0x3e	; 62
    4c90:	ca 1b       	sub	r28, r26
    4c92:	db 0b       	sbc	r29, r27
    4c94:	0f b6       	in	r0, 0x3f	; 63
    4c96:	f8 94       	cli
    4c98:	de bf       	out	0x3e, r29	; 62
    4c9a:	0f be       	out	0x3f, r0	; 63
    4c9c:	cd bf       	out	0x3d, r28	; 61
    4c9e:	09 94       	ijmp

00004ca0 <__epilogue_restores__>:
    4ca0:	2a 88       	ldd	r2, Y+18	; 0x12
    4ca2:	39 88       	ldd	r3, Y+17	; 0x11
    4ca4:	48 88       	ldd	r4, Y+16	; 0x10
    4ca6:	5f 84       	ldd	r5, Y+15	; 0x0f
    4ca8:	6e 84       	ldd	r6, Y+14	; 0x0e
    4caa:	7d 84       	ldd	r7, Y+13	; 0x0d
    4cac:	8c 84       	ldd	r8, Y+12	; 0x0c
    4cae:	9b 84       	ldd	r9, Y+11	; 0x0b
    4cb0:	aa 84       	ldd	r10, Y+10	; 0x0a
    4cb2:	b9 84       	ldd	r11, Y+9	; 0x09
    4cb4:	c8 84       	ldd	r12, Y+8	; 0x08
    4cb6:	df 80       	ldd	r13, Y+7	; 0x07
    4cb8:	ee 80       	ldd	r14, Y+6	; 0x06
    4cba:	fd 80       	ldd	r15, Y+5	; 0x05
    4cbc:	0c 81       	ldd	r16, Y+4	; 0x04
    4cbe:	1b 81       	ldd	r17, Y+3	; 0x03
    4cc0:	aa 81       	ldd	r26, Y+2	; 0x02
    4cc2:	b9 81       	ldd	r27, Y+1	; 0x01
    4cc4:	ce 0f       	add	r28, r30
    4cc6:	d1 1d       	adc	r29, r1
    4cc8:	0f b6       	in	r0, 0x3f	; 63
    4cca:	f8 94       	cli
    4ccc:	de bf       	out	0x3e, r29	; 62
    4cce:	0f be       	out	0x3f, r0	; 63
    4cd0:	cd bf       	out	0x3d, r28	; 61
    4cd2:	ed 01       	movw	r28, r26
    4cd4:	08 95       	ret

00004cd6 <_exit>:
    4cd6:	f8 94       	cli

00004cd8 <__stop_program>:
    4cd8:	ff cf       	rjmp	.-2      	; 0x4cd8 <__stop_program>
