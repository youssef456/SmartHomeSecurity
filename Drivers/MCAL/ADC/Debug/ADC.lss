
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000009b8  00000a4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800078  00800078  00000a64  2**0
                  ALLOC
  3 .stab         00000d74  00000000  00000000  00000a64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b95  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 79 04 	call	0x8f2	; 0x8f2 <main>
  8a:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_startConversion>:
#include "ADC_Private.h"

static callBack_func adc_callback = null;


void ADC_startConversion(){
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62

#if is_interrupt_Enable == True
	//start conversion bit
	set_Bit(ADC_u8_ADCSRA,ADSCRA_ADSC);
  9a:	a6 e2       	ldi	r26, 0x26	; 38
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	e6 e2       	ldi	r30, 0x26	; 38
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	8c 93       	st	X, r24
	while(get_Bit(ADC_u8_ADCSRA,ADSCRA_ADIF) == 0);
	// reset the adc interrupt flag
	set_Bit(ADC_u8_ADCSRA,ADSCRA_ADIF);
#endif

}
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	08 95       	ret

000000ae <ref_voltage>:

void ref_voltage(){
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	// AVCC 5v
#if Voltage_Reference_Mode == Voltage_Ref_AVCC
	clear_Bit(ADC_u8_ADMUX,ADMUX_REFS1);
  b6:	a7 e2       	ldi	r26, 0x27	; 39
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	e7 e2       	ldi	r30, 0x27	; 39
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8f 77       	andi	r24, 0x7F	; 127
  c2:	8c 93       	st	X, r24
	set_Bit(ADC_u8_ADMUX,ADMUX_REFS0);
  c4:	a7 e2       	ldi	r26, 0x27	; 39
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	e7 e2       	ldi	r30, 0x27	; 39
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	8c 93       	st	X, r24
#else

	#error "Please choose correct voltage reference mode from the config file"

#endif
}
  d2:	cf 91       	pop	r28
  d4:	df 91       	pop	r29
  d6:	08 95       	ret

000000d8 <auto_trigger_source>:

void auto_trigger_source(){
  d8:	df 93       	push	r29
  da:	cf 93       	push	r28
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
	clear_Bit(ADC_u8_SFIOR,SFIOR_ADTS1);
	clear_Bit(ADC_u8_SFIOR,SFIOR_ADTS2);

#elif Auto_Trigger_Source == External_Int0

	clear_Bit(ADC_u8_SFIOR,SFIOR_ADTS0);
  e0:	a0 e5       	ldi	r26, 0x50	; 80
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e0 e5       	ldi	r30, 0x50	; 80
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	8f 7d       	andi	r24, 0xDF	; 223
  ec:	8c 93       	st	X, r24
	set_Bit(ADC_u8_SFIOR,SFIOR_ADTS1);
  ee:	a0 e5       	ldi	r26, 0x50	; 80
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	e0 e5       	ldi	r30, 0x50	; 80
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	8c 93       	st	X, r24
	clear_Bit(ADC_u8_SFIOR,SFIOR_ADTS2);
  fc:	a0 e5       	ldi	r26, 0x50	; 80
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	e0 e5       	ldi	r30, 0x50	; 80
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	8f 77       	andi	r24, 0x7F	; 127
 108:	8c 93       	st	X, r24
	set_Bit(ADC_u8_SFIOR,SFIOR_ADTS1);
	set_Bit(ADC_u8_SFIOR,SFIOR_ADTS2);
#else

#endif
}
 10a:	cf 91       	pop	r28
 10c:	df 91       	pop	r29
 10e:	08 95       	ret

00000110 <preScalar_setup>:


void preScalar_setup(){
 110:	df 93       	push	r29
 112:	cf 93       	push	r28
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
	set_Bit(ADC_u8_ADCSRA,ADSCRA_ADPS1);
	clear_Bit(ADC_u8_ADCSRA,ADSCRA_ADPS0);

#elif Prescalar_Setting == Prescalar_128

	set_Bit(ADC_u8_ADCSRA,ADSCRA_ADPS2);
 118:	a6 e2       	ldi	r26, 0x26	; 38
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e6 e2       	ldi	r30, 0x26	; 38
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	84 60       	ori	r24, 0x04	; 4
 124:	8c 93       	st	X, r24
	set_Bit(ADC_u8_ADCSRA,ADSCRA_ADPS1);
 126:	a6 e2       	ldi	r26, 0x26	; 38
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	e6 e2       	ldi	r30, 0x26	; 38
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	82 60       	ori	r24, 0x02	; 2
 132:	8c 93       	st	X, r24
	set_Bit(ADC_u8_ADCSRA,ADSCRA_ADPS0);
 134:	a6 e2       	ldi	r26, 0x26	; 38
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	e6 e2       	ldi	r30, 0x26	; 38
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	8c 93       	st	X, r24

#endif
}
 142:	cf 91       	pop	r28
 144:	df 91       	pop	r29
 146:	08 95       	ret

00000148 <ADC_Void_Init>:


void ADC_Void_Init(){
 148:	df 93       	push	r29
 14a:	cf 93       	push	r28
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
	//ADC enable
	set_Bit(ADC_u8_ADCSRA,ADCSRA_ADEN);
 150:	a6 e2       	ldi	r26, 0x26	; 38
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	e6 e2       	ldi	r30, 0x26	; 38
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	80 68       	ori	r24, 0x80	; 128
 15c:	8c 93       	st	X, r24
	//prescalar setting
	preScalar_setup();
 15e:	0e 94 88 00 	call	0x110	; 0x110 <preScalar_setup>
	//set ref voltage --> Avcc
	ref_voltage();
 162:	0e 94 57 00 	call	0xae	; 0xae <ref_voltage>

	//left adjustment
#if is_Left_Adj == True
	set_Bit(ADC_u8_ADMUX,ADMUX_ADLAR);
 166:	a7 e2       	ldi	r26, 0x27	; 39
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	e7 e2       	ldi	r30, 0x27	; 39
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	80 62       	ori	r24, 0x20	; 32
 172:	8c 93       	st	X, r24
	set_Bit(ADC_u8_ADCSRA,ADSCRA_ADATE);
	//determine auto trigger source
	auto_trigger_source();
#else
	//disable auto triggering
	clear_Bit(ADC_u8_ADCSRA,ADSCRA_ADATE);
 174:	a6 e2       	ldi	r26, 0x26	; 38
 176:	b0 e0       	ldi	r27, 0x00	; 0
 178:	e6 e2       	ldi	r30, 0x26	; 38
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	8f 7d       	andi	r24, 0xDF	; 223
 180:	8c 93       	st	X, r24
#endif

#if is_interrupt_Enable == True
	set_Bit(ADC_u8_SREG,SREG_GI_ENABLE);
 182:	af e5       	ldi	r26, 0x5F	; 95
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	ef e5       	ldi	r30, 0x5F	; 95
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	80 68       	ori	r24, 0x80	; 128
 18e:	8c 93       	st	X, r24
	set_Bit(ADC_u8_ADCSRA,ADSCRA_ADIE);
 190:	a6 e2       	ldi	r26, 0x26	; 38
 192:	b0 e0       	ldi	r27, 0x00	; 0
 194:	e6 e2       	ldi	r30, 0x26	; 38
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	88 60       	ori	r24, 0x08	; 8
 19c:	8c 93       	st	X, r24
#endif

}
 19e:	cf 91       	pop	r28
 1a0:	df 91       	pop	r29
 1a2:	08 95       	ret

000001a4 <ADC_Read_Channel>:

u32 ADC_Read_Channel(u8 channel) {
 1a4:	df 93       	push	r29
 1a6:	cf 93       	push	r28
 1a8:	00 d0       	rcall	.+0      	; 0x1aa <ADC_Read_Channel+0x6>
 1aa:	00 d0       	rcall	.+0      	; 0x1ac <ADC_Read_Channel+0x8>
 1ac:	0f 92       	push	r0
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	8d 83       	std	Y+5, r24	; 0x05

	//ADC_startConversion();
    u32 result;

    ADC_u8_ADMUX &= 0b11100000;
 1b4:	a7 e2       	ldi	r26, 0x27	; 39
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	e7 e2       	ldi	r30, 0x27	; 39
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	80 7e       	andi	r24, 0xE0	; 224
 1c0:	8c 93       	st	X, r24
    ADC_u8_ADMUX |= channel;
 1c2:	a7 e2       	ldi	r26, 0x27	; 39
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	e7 e2       	ldi	r30, 0x27	; 39
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	90 81       	ld	r25, Z
 1cc:	8d 81       	ldd	r24, Y+5	; 0x05
 1ce:	89 2b       	or	r24, r25
 1d0:	8c 93       	st	X, r24

#if is_Left_Adj == True
    result = ADC_u8_ADCL >> 6;
 1d2:	e4 e2       	ldi	r30, 0x24	; 36
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	82 95       	swap	r24
 1da:	86 95       	lsr	r24
 1dc:	86 95       	lsr	r24
 1de:	83 70       	andi	r24, 0x03	; 3
 1e0:	88 2f       	mov	r24, r24
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	a0 e0       	ldi	r26, 0x00	; 0
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	89 83       	std	Y+1, r24	; 0x01
 1ea:	9a 83       	std	Y+2, r25	; 0x02
 1ec:	ab 83       	std	Y+3, r26	; 0x03
 1ee:	bc 83       	std	Y+4, r27	; 0x04
    result |= ((u16)ADC_u8_ADCH << 2);
 1f0:	e5 e2       	ldi	r30, 0x25	; 37
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	88 2f       	mov	r24, r24
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	9c 01       	movw	r18, r24
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	9a 81       	ldd	r25, Y+2	; 0x02
 20c:	ab 81       	ldd	r26, Y+3	; 0x03
 20e:	bc 81       	ldd	r27, Y+4	; 0x04
 210:	82 2b       	or	r24, r18
 212:	93 2b       	or	r25, r19
 214:	a4 2b       	or	r26, r20
 216:	b5 2b       	or	r27, r21
 218:	89 83       	std	Y+1, r24	; 0x01
 21a:	9a 83       	std	Y+2, r25	; 0x02
 21c:	ab 83       	std	Y+3, r26	; 0x03
 21e:	bc 83       	std	Y+4, r27	; 0x04
    result = ADC_u8_ADCL;
    result |= ((u16)ADC_u8_ADCH << 8);

#endif

    return result;
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	9a 81       	ldd	r25, Y+2	; 0x02
 224:	ab 81       	ldd	r26, Y+3	; 0x03
 226:	bc 81       	ldd	r27, Y+4	; 0x04
}
 228:	bc 01       	movw	r22, r24
 22a:	cd 01       	movw	r24, r26
 22c:	0f 90       	pop	r0
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	cf 91       	pop	r28
 238:	df 91       	pop	r29
 23a:	08 95       	ret

0000023c <set_callBack_function>:

void set_callBack_function(callBack_func callBack){
 23c:	df 93       	push	r29
 23e:	cf 93       	push	r28
 240:	00 d0       	rcall	.+0      	; 0x242 <set_callBack_function+0x6>
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	9a 83       	std	Y+2, r25	; 0x02
 248:	89 83       	std	Y+1, r24	; 0x01

	adc_callback = callBack;
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	9a 81       	ldd	r25, Y+2	; 0x02
 24e:	90 93 79 00 	sts	0x0079, r25
 252:	80 93 78 00 	sts	0x0078, r24

}
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	cf 91       	pop	r28
 25c:	df 91       	pop	r29
 25e:	08 95       	ret

00000260 <__vector_16>:

void __vector_16(){
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	2f 93       	push	r18
 26c:	3f 93       	push	r19
 26e:	4f 93       	push	r20
 270:	5f 93       	push	r21
 272:	6f 93       	push	r22
 274:	7f 93       	push	r23
 276:	8f 93       	push	r24
 278:	9f 93       	push	r25
 27a:	af 93       	push	r26
 27c:	bf 93       	push	r27
 27e:	ef 93       	push	r30
 280:	ff 93       	push	r31
 282:	df 93       	push	r29
 284:	cf 93       	push	r28
 286:	00 d0       	rcall	.+0      	; 0x288 <__vector_16+0x28>
 288:	00 d0       	rcall	.+0      	; 0x28a <__vector_16+0x2a>
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
	 *
	 *
	 */

	// ADC ISR
	if(adc_callback != null){
 28e:	80 91 78 00 	lds	r24, 0x0078
 292:	90 91 79 00 	lds	r25, 0x0079
 296:	00 97       	sbiw	r24, 0x00	; 0
 298:	a1 f0       	breq	.+40     	; 0x2c2 <__vector_16+0x62>
		u32 adc_val = ADC_Read_Channel(ADC_Channel_0);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <ADC_Read_Channel>
 2a0:	dc 01       	movw	r26, r24
 2a2:	cb 01       	movw	r24, r22
 2a4:	89 83       	std	Y+1, r24	; 0x01
 2a6:	9a 83       	std	Y+2, r25	; 0x02
 2a8:	ab 83       	std	Y+3, r26	; 0x03
 2aa:	bc 83       	std	Y+4, r27	; 0x04
		adc_callback(adc_val);
 2ac:	e0 91 78 00 	lds	r30, 0x0078
 2b0:	f0 91 79 00 	lds	r31, 0x0079
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	9a 81       	ldd	r25, Y+2	; 0x02
 2b8:	ab 81       	ldd	r26, Y+3	; 0x03
 2ba:	bc 81       	ldd	r27, Y+4	; 0x04
 2bc:	bc 01       	movw	r22, r24
 2be:	cd 01       	movw	r24, r26
 2c0:	09 95       	icall
	}

}
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	0f 90       	pop	r0
 2ca:	cf 91       	pop	r28
 2cc:	df 91       	pop	r29
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	bf 91       	pop	r27
 2d4:	af 91       	pop	r26
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	7f 91       	pop	r23
 2dc:	6f 91       	pop	r22
 2de:	5f 91       	pop	r21
 2e0:	4f 91       	pop	r20
 2e2:	3f 91       	pop	r19
 2e4:	2f 91       	pop	r18
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <DIO_void_set_port_dir>:


/* implementing the driver functions  */
/* set Portx Direction Function       */

void DIO_void_set_port_dir(u8 copy_u8_portID, u8 port_copy_dir){
 2f0:	df 93       	push	r29
 2f2:	cf 93       	push	r28
 2f4:	00 d0       	rcall	.+0      	; 0x2f6 <DIO_void_set_port_dir+0x6>
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
 2fa:	89 83       	std	Y+1, r24	; 0x01
 2fc:	6a 83       	std	Y+2, r22	; 0x02
	 *  Also general rule INPUT --> 0 // OUTPUT --> 1
	 *
	 *
	 */

	*(DIO_DDRx[copy_u8_portID]) = port_copy_dir;
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
 300:	88 2f       	mov	r24, r24
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	fc 01       	movw	r30, r24
 30a:	e8 59       	subi	r30, 0x98	; 152
 30c:	ff 4f       	sbci	r31, 0xFF	; 255
 30e:	01 90       	ld	r0, Z+
 310:	f0 81       	ld	r31, Z
 312:	e0 2d       	mov	r30, r0
 314:	8a 81       	ldd	r24, Y+2	; 0x02
 316:	80 83       	st	Z, r24

}
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	cf 91       	pop	r28
 31e:	df 91       	pop	r29
 320:	08 95       	ret

00000322 <DIO_void_set_pin_dir>:

void DIO_void_set_pin_dir(u8 copy_u8_portID, u8 copy_u8_pinID, u8 pin_copy_dir){
 322:	df 93       	push	r29
 324:	cf 93       	push	r28
 326:	00 d0       	rcall	.+0      	; 0x328 <DIO_void_set_pin_dir+0x6>
 328:	0f 92       	push	r0
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
 32e:	89 83       	std	Y+1, r24	; 0x01
 330:	6a 83       	std	Y+2, r22	; 0x02
 332:	4b 83       	std	Y+3, r20	; 0x03
	 *  pin_copy_dir using the predefined macro INPUT //OUTPUT
	 *
	 *
	 */

	assign_Bit(*(DIO_DDRx[copy_u8_portID]),copy_u8_pinID,pin_copy_dir);
 334:	8b 81       	ldd	r24, Y+3	; 0x03
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	29 f5       	brne	.+74     	; 0x384 <DIO_void_set_pin_dir+0x62>
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	88 2f       	mov	r24, r24
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	fc 01       	movw	r30, r24
 346:	e8 59       	subi	r30, 0x98	; 152
 348:	ff 4f       	sbci	r31, 0xFF	; 255
 34a:	a0 81       	ld	r26, Z
 34c:	b1 81       	ldd	r27, Z+1	; 0x01
 34e:	89 81       	ldd	r24, Y+1	; 0x01
 350:	88 2f       	mov	r24, r24
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	fc 01       	movw	r30, r24
 35a:	e8 59       	subi	r30, 0x98	; 152
 35c:	ff 4f       	sbci	r31, 0xFF	; 255
 35e:	01 90       	ld	r0, Z+
 360:	f0 81       	ld	r31, Z
 362:	e0 2d       	mov	r30, r0
 364:	80 81       	ld	r24, Z
 366:	48 2f       	mov	r20, r24
 368:	8a 81       	ldd	r24, Y+2	; 0x02
 36a:	28 2f       	mov	r18, r24
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 2e       	mov	r0, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_void_set_pin_dir+0x58>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	0a 94       	dec	r0
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_void_set_pin_dir+0x54>
 37e:	84 2b       	or	r24, r20
 380:	8c 93       	st	X, r24
 382:	25 c0       	rjmp	.+74     	; 0x3ce <DIO_void_set_pin_dir+0xac>
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	88 2f       	mov	r24, r24
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	fc 01       	movw	r30, r24
 390:	e8 59       	subi	r30, 0x98	; 152
 392:	ff 4f       	sbci	r31, 0xFF	; 255
 394:	a0 81       	ld	r26, Z
 396:	b1 81       	ldd	r27, Z+1	; 0x01
 398:	89 81       	ldd	r24, Y+1	; 0x01
 39a:	88 2f       	mov	r24, r24
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	fc 01       	movw	r30, r24
 3a4:	e8 59       	subi	r30, 0x98	; 152
 3a6:	ff 4f       	sbci	r31, 0xFF	; 255
 3a8:	01 90       	ld	r0, Z+
 3aa:	f0 81       	ld	r31, Z
 3ac:	e0 2d       	mov	r30, r0
 3ae:	80 81       	ld	r24, Z
 3b0:	48 2f       	mov	r20, r24
 3b2:	8a 81       	ldd	r24, Y+2	; 0x02
 3b4:	28 2f       	mov	r18, r24
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 2e       	mov	r0, r18
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_void_set_pin_dir+0xa2>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	0a 94       	dec	r0
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_void_set_pin_dir+0x9e>
 3c8:	80 95       	com	r24
 3ca:	84 23       	and	r24, r20
 3cc:	8c 93       	st	X, r24

}
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	cf 91       	pop	r28
 3d6:	df 91       	pop	r29
 3d8:	08 95       	ret

000003da <DIO_void_port_pullup>:

void DIO_void_port_pullup(u8 copy_u8_portID){
 3da:	df 93       	push	r29
 3dc:	cf 93       	push	r28
 3de:	0f 92       	push	r0
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
 3e4:	89 83       	std	Y+1, r24	; 0x01
	 *  so that is what the function does
	 *  using the pullup for any button prevents the floating effect
	 *
	 *
	 */
	*(DIO_DDRx[copy_u8_portID]) = INPUT;
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	88 2f       	mov	r24, r24
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	fc 01       	movw	r30, r24
 3f2:	e8 59       	subi	r30, 0x98	; 152
 3f4:	ff 4f       	sbci	r31, 0xFF	; 255
 3f6:	01 90       	ld	r0, Z+
 3f8:	f0 81       	ld	r31, Z
 3fa:	e0 2d       	mov	r30, r0
 3fc:	10 82       	st	Z, r1
	*(DIO_PORTx[copy_u8_portID]) = PORT_MAX;
 3fe:	89 81       	ldd	r24, Y+1	; 0x01
 400:	88 2f       	mov	r24, r24
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	fc 01       	movw	r30, r24
 40a:	e0 59       	subi	r30, 0x90	; 144
 40c:	ff 4f       	sbci	r31, 0xFF	; 255
 40e:	01 90       	ld	r0, Z+
 410:	f0 81       	ld	r31, Z
 412:	e0 2d       	mov	r30, r0
 414:	8f ef       	ldi	r24, 0xFF	; 255
 416:	80 83       	st	Z, r24
}
 418:	0f 90       	pop	r0
 41a:	cf 91       	pop	r28
 41c:	df 91       	pop	r29
 41e:	08 95       	ret

00000420 <DIO_void_pin_pullup>:

void DIO_void_pin_pullup(u8 copy_u8_portID, u8 copy_u8_pinID){
 420:	df 93       	push	r29
 422:	cf 93       	push	r28
 424:	00 d0       	rcall	.+0      	; 0x426 <DIO_void_pin_pullup+0x6>
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
 42a:	89 83       	std	Y+1, r24	; 0x01
 42c:	6a 83       	std	Y+2, r22	; 0x02
	/*  the function works as the one that set pullup for the whole port
	 *
	 *
	 */

	clear_Bit(*(DIO_DDRx[copy_u8_portID]),copy_u8_pinID);
 42e:	89 81       	ldd	r24, Y+1	; 0x01
 430:	88 2f       	mov	r24, r24
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	fc 01       	movw	r30, r24
 43a:	e8 59       	subi	r30, 0x98	; 152
 43c:	ff 4f       	sbci	r31, 0xFF	; 255
 43e:	a0 81       	ld	r26, Z
 440:	b1 81       	ldd	r27, Z+1	; 0x01
 442:	89 81       	ldd	r24, Y+1	; 0x01
 444:	88 2f       	mov	r24, r24
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	fc 01       	movw	r30, r24
 44e:	e8 59       	subi	r30, 0x98	; 152
 450:	ff 4f       	sbci	r31, 0xFF	; 255
 452:	01 90       	ld	r0, Z+
 454:	f0 81       	ld	r31, Z
 456:	e0 2d       	mov	r30, r0
 458:	80 81       	ld	r24, Z
 45a:	48 2f       	mov	r20, r24
 45c:	8a 81       	ldd	r24, Y+2	; 0x02
 45e:	28 2f       	mov	r18, r24
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 c0       	rjmp	.+4      	; 0x46c <DIO_void_pin_pullup+0x4c>
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	2a 95       	dec	r18
 46e:	e2 f7       	brpl	.-8      	; 0x468 <DIO_void_pin_pullup+0x48>
 470:	80 95       	com	r24
 472:	84 23       	and	r24, r20
 474:	8c 93       	st	X, r24
	set_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
 476:	89 81       	ldd	r24, Y+1	; 0x01
 478:	88 2f       	mov	r24, r24
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	fc 01       	movw	r30, r24
 482:	e0 59       	subi	r30, 0x90	; 144
 484:	ff 4f       	sbci	r31, 0xFF	; 255
 486:	a0 81       	ld	r26, Z
 488:	b1 81       	ldd	r27, Z+1	; 0x01
 48a:	89 81       	ldd	r24, Y+1	; 0x01
 48c:	88 2f       	mov	r24, r24
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	fc 01       	movw	r30, r24
 496:	e0 59       	subi	r30, 0x90	; 144
 498:	ff 4f       	sbci	r31, 0xFF	; 255
 49a:	01 90       	ld	r0, Z+
 49c:	f0 81       	ld	r31, Z
 49e:	e0 2d       	mov	r30, r0
 4a0:	80 81       	ld	r24, Z
 4a2:	48 2f       	mov	r20, r24
 4a4:	8a 81       	ldd	r24, Y+2	; 0x02
 4a6:	28 2f       	mov	r18, r24
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 2e       	mov	r0, r18
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <DIO_void_pin_pullup+0x96>
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	0a 94       	dec	r0
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <DIO_void_pin_pullup+0x92>
 4ba:	84 2b       	or	r24, r20
 4bc:	8c 93       	st	X, r24

}
 4be:	0f 90       	pop	r0
 4c0:	0f 90       	pop	r0
 4c2:	cf 91       	pop	r28
 4c4:	df 91       	pop	r29
 4c6:	08 95       	ret

000004c8 <DIO_void_set_port>:

void DIO_void_set_port(u8 copy_u8_portID){
 4c8:	df 93       	push	r29
 4ca:	cf 93       	push	r28
 4cc:	0f 92       	push	r0
 4ce:	cd b7       	in	r28, 0x3d	; 61
 4d0:	de b7       	in	r29, 0x3e	; 62
 4d2:	89 83       	std	Y+1, r24	; 0x01
	 *
	 */



	*(DIO_PORTx[copy_u8_portID]) = PORT_MAX;
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
 4d6:	88 2f       	mov	r24, r24
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	fc 01       	movw	r30, r24
 4e0:	e0 59       	subi	r30, 0x90	; 144
 4e2:	ff 4f       	sbci	r31, 0xFF	; 255
 4e4:	01 90       	ld	r0, Z+
 4e6:	f0 81       	ld	r31, Z
 4e8:	e0 2d       	mov	r30, r0
 4ea:	8f ef       	ldi	r24, 0xFF	; 255
 4ec:	80 83       	st	Z, r24

}
 4ee:	0f 90       	pop	r0
 4f0:	cf 91       	pop	r28
 4f2:	df 91       	pop	r29
 4f4:	08 95       	ret

000004f6 <DIO_void_clear_port>:

void DIO_void_clear_port(u8 copy_u8_portID){
 4f6:	df 93       	push	r29
 4f8:	cf 93       	push	r28
 4fa:	0f 92       	push	r0
 4fc:	cd b7       	in	r28, 0x3d	; 61
 4fe:	de b7       	in	r29, 0x3e	; 62
 500:	89 83       	std	Y+1, r24	; 0x01
	 *
	 *
	 */


	*(DIO_PORTx[copy_u8_portID]) = LOW;
 502:	89 81       	ldd	r24, Y+1	; 0x01
 504:	88 2f       	mov	r24, r24
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	fc 01       	movw	r30, r24
 50e:	e0 59       	subi	r30, 0x90	; 144
 510:	ff 4f       	sbci	r31, 0xFF	; 255
 512:	01 90       	ld	r0, Z+
 514:	f0 81       	ld	r31, Z
 516:	e0 2d       	mov	r30, r0
 518:	10 82       	st	Z, r1

}
 51a:	0f 90       	pop	r0
 51c:	cf 91       	pop	r28
 51e:	df 91       	pop	r29
 520:	08 95       	ret

00000522 <DIO_void_assign_port>:

void DIO_void_assign_port(u8 copy_u8_portID, u8 copy_value){
 522:	df 93       	push	r29
 524:	cf 93       	push	r28
 526:	00 d0       	rcall	.+0      	; 0x528 <DIO_void_assign_port+0x6>
 528:	cd b7       	in	r28, 0x3d	; 61
 52a:	de b7       	in	r29, 0x3e	; 62
 52c:	89 83       	std	Y+1, r24	; 0x01
 52e:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 */



	*(DIO_PORTx[copy_u8_portID]) = copy_value;
 530:	89 81       	ldd	r24, Y+1	; 0x01
 532:	88 2f       	mov	r24, r24
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	fc 01       	movw	r30, r24
 53c:	e0 59       	subi	r30, 0x90	; 144
 53e:	ff 4f       	sbci	r31, 0xFF	; 255
 540:	01 90       	ld	r0, Z+
 542:	f0 81       	ld	r31, Z
 544:	e0 2d       	mov	r30, r0
 546:	8a 81       	ldd	r24, Y+2	; 0x02
 548:	80 83       	st	Z, r24

}
 54a:	0f 90       	pop	r0
 54c:	0f 90       	pop	r0
 54e:	cf 91       	pop	r28
 550:	df 91       	pop	r29
 552:	08 95       	ret

00000554 <DIO_void_toggle_port>:

void DIO_void_toggle_port(u8 copy_u8_portID){
 554:	df 93       	push	r29
 556:	cf 93       	push	r28
 558:	0f 92       	push	r0
 55a:	cd b7       	in	r28, 0x3d	; 61
 55c:	de b7       	in	r29, 0x3e	; 62
 55e:	89 83       	std	Y+1, r24	; 0x01
	 *
	 *
	 */


	*(DIO_PORTx[copy_u8_portID]) ^= PORT_MAX;
 560:	89 81       	ldd	r24, Y+1	; 0x01
 562:	88 2f       	mov	r24, r24
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	fc 01       	movw	r30, r24
 56c:	e0 59       	subi	r30, 0x90	; 144
 56e:	ff 4f       	sbci	r31, 0xFF	; 255
 570:	a0 81       	ld	r26, Z
 572:	b1 81       	ldd	r27, Z+1	; 0x01
 574:	89 81       	ldd	r24, Y+1	; 0x01
 576:	88 2f       	mov	r24, r24
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	fc 01       	movw	r30, r24
 580:	e0 59       	subi	r30, 0x90	; 144
 582:	ff 4f       	sbci	r31, 0xFF	; 255
 584:	01 90       	ld	r0, Z+
 586:	f0 81       	ld	r31, Z
 588:	e0 2d       	mov	r30, r0
 58a:	80 81       	ld	r24, Z
 58c:	80 95       	com	r24
 58e:	8c 93       	st	X, r24
}
 590:	0f 90       	pop	r0
 592:	cf 91       	pop	r28
 594:	df 91       	pop	r29
 596:	08 95       	ret

00000598 <DIO_void_set_pin>:

void DIO_void_set_pin(u8 copy_u8_portID , u8 copy_u8_pinID){
 598:	df 93       	push	r29
 59a:	cf 93       	push	r28
 59c:	00 d0       	rcall	.+0      	; 0x59e <DIO_void_set_pin+0x6>
 59e:	cd b7       	in	r28, 0x3d	; 61
 5a0:	de b7       	in	r29, 0x3e	; 62
 5a2:	89 83       	std	Y+1, r24	; 0x01
 5a4:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	set_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
 5a6:	89 81       	ldd	r24, Y+1	; 0x01
 5a8:	88 2f       	mov	r24, r24
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	fc 01       	movw	r30, r24
 5b2:	e0 59       	subi	r30, 0x90	; 144
 5b4:	ff 4f       	sbci	r31, 0xFF	; 255
 5b6:	a0 81       	ld	r26, Z
 5b8:	b1 81       	ldd	r27, Z+1	; 0x01
 5ba:	89 81       	ldd	r24, Y+1	; 0x01
 5bc:	88 2f       	mov	r24, r24
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	88 0f       	add	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	fc 01       	movw	r30, r24
 5c6:	e0 59       	subi	r30, 0x90	; 144
 5c8:	ff 4f       	sbci	r31, 0xFF	; 255
 5ca:	01 90       	ld	r0, Z+
 5cc:	f0 81       	ld	r31, Z
 5ce:	e0 2d       	mov	r30, r0
 5d0:	80 81       	ld	r24, Z
 5d2:	48 2f       	mov	r20, r24
 5d4:	8a 81       	ldd	r24, Y+2	; 0x02
 5d6:	28 2f       	mov	r18, r24
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	02 2e       	mov	r0, r18
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_void_set_pin+0x4e>
 5e2:	88 0f       	add	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	0a 94       	dec	r0
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <DIO_void_set_pin+0x4a>
 5ea:	84 2b       	or	r24, r20
 5ec:	8c 93       	st	X, r24
}
 5ee:	0f 90       	pop	r0
 5f0:	0f 90       	pop	r0
 5f2:	cf 91       	pop	r28
 5f4:	df 91       	pop	r29
 5f6:	08 95       	ret

000005f8 <DIO_void_clear_pin>:

void DIO_void_clear_pin(u8 copy_u8_portID , u8 copy_u8_pinID){
 5f8:	df 93       	push	r29
 5fa:	cf 93       	push	r28
 5fc:	00 d0       	rcall	.+0      	; 0x5fe <DIO_void_clear_pin+0x6>
 5fe:	cd b7       	in	r28, 0x3d	; 61
 600:	de b7       	in	r29, 0x3e	; 62
 602:	89 83       	std	Y+1, r24	; 0x01
 604:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	clear_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
 606:	89 81       	ldd	r24, Y+1	; 0x01
 608:	88 2f       	mov	r24, r24
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	fc 01       	movw	r30, r24
 612:	e0 59       	subi	r30, 0x90	; 144
 614:	ff 4f       	sbci	r31, 0xFF	; 255
 616:	a0 81       	ld	r26, Z
 618:	b1 81       	ldd	r27, Z+1	; 0x01
 61a:	89 81       	ldd	r24, Y+1	; 0x01
 61c:	88 2f       	mov	r24, r24
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	fc 01       	movw	r30, r24
 626:	e0 59       	subi	r30, 0x90	; 144
 628:	ff 4f       	sbci	r31, 0xFF	; 255
 62a:	01 90       	ld	r0, Z+
 62c:	f0 81       	ld	r31, Z
 62e:	e0 2d       	mov	r30, r0
 630:	80 81       	ld	r24, Z
 632:	48 2f       	mov	r20, r24
 634:	8a 81       	ldd	r24, Y+2	; 0x02
 636:	28 2f       	mov	r18, r24
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	02 2e       	mov	r0, r18
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_void_clear_pin+0x4e>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	0a 94       	dec	r0
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_void_clear_pin+0x4a>
 64a:	80 95       	com	r24
 64c:	84 23       	and	r24, r20
 64e:	8c 93       	st	X, r24
}
 650:	0f 90       	pop	r0
 652:	0f 90       	pop	r0
 654:	cf 91       	pop	r28
 656:	df 91       	pop	r29
 658:	08 95       	ret

0000065a <DIO_void_assign_pin>:

void DIO_void_assign_pin(u8 copy_u8_portID,u8 copy_u8_pinID ,u8 copy_value){
 65a:	df 93       	push	r29
 65c:	cf 93       	push	r28
 65e:	00 d0       	rcall	.+0      	; 0x660 <DIO_void_assign_pin+0x6>
 660:	0f 92       	push	r0
 662:	cd b7       	in	r28, 0x3d	; 61
 664:	de b7       	in	r29, 0x3e	; 62
 666:	89 83       	std	Y+1, r24	; 0x01
 668:	6a 83       	std	Y+2, r22	; 0x02
 66a:	4b 83       	std	Y+3, r20	; 0x03
	 *
	 */



	assign_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID,copy_value);
 66c:	8b 81       	ldd	r24, Y+3	; 0x03
 66e:	81 30       	cpi	r24, 0x01	; 1
 670:	29 f5       	brne	.+74     	; 0x6bc <DIO_void_assign_pin+0x62>
 672:	89 81       	ldd	r24, Y+1	; 0x01
 674:	88 2f       	mov	r24, r24
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	88 0f       	add	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	fc 01       	movw	r30, r24
 67e:	e0 59       	subi	r30, 0x90	; 144
 680:	ff 4f       	sbci	r31, 0xFF	; 255
 682:	a0 81       	ld	r26, Z
 684:	b1 81       	ldd	r27, Z+1	; 0x01
 686:	89 81       	ldd	r24, Y+1	; 0x01
 688:	88 2f       	mov	r24, r24
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	fc 01       	movw	r30, r24
 692:	e0 59       	subi	r30, 0x90	; 144
 694:	ff 4f       	sbci	r31, 0xFF	; 255
 696:	01 90       	ld	r0, Z+
 698:	f0 81       	ld	r31, Z
 69a:	e0 2d       	mov	r30, r0
 69c:	80 81       	ld	r24, Z
 69e:	48 2f       	mov	r20, r24
 6a0:	8a 81       	ldd	r24, Y+2	; 0x02
 6a2:	28 2f       	mov	r18, r24
 6a4:	30 e0       	ldi	r19, 0x00	; 0
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	02 2e       	mov	r0, r18
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <DIO_void_assign_pin+0x58>
 6ae:	88 0f       	add	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	0a 94       	dec	r0
 6b4:	e2 f7       	brpl	.-8      	; 0x6ae <DIO_void_assign_pin+0x54>
 6b6:	84 2b       	or	r24, r20
 6b8:	8c 93       	st	X, r24
 6ba:	25 c0       	rjmp	.+74     	; 0x706 <DIO_void_assign_pin+0xac>
 6bc:	89 81       	ldd	r24, Y+1	; 0x01
 6be:	88 2f       	mov	r24, r24
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	fc 01       	movw	r30, r24
 6c8:	e0 59       	subi	r30, 0x90	; 144
 6ca:	ff 4f       	sbci	r31, 0xFF	; 255
 6cc:	a0 81       	ld	r26, Z
 6ce:	b1 81       	ldd	r27, Z+1	; 0x01
 6d0:	89 81       	ldd	r24, Y+1	; 0x01
 6d2:	88 2f       	mov	r24, r24
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	88 0f       	add	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	fc 01       	movw	r30, r24
 6dc:	e0 59       	subi	r30, 0x90	; 144
 6de:	ff 4f       	sbci	r31, 0xFF	; 255
 6e0:	01 90       	ld	r0, Z+
 6e2:	f0 81       	ld	r31, Z
 6e4:	e0 2d       	mov	r30, r0
 6e6:	80 81       	ld	r24, Z
 6e8:	48 2f       	mov	r20, r24
 6ea:	8a 81       	ldd	r24, Y+2	; 0x02
 6ec:	28 2f       	mov	r18, r24
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	02 2e       	mov	r0, r18
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <DIO_void_assign_pin+0xa2>
 6f8:	88 0f       	add	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	0a 94       	dec	r0
 6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <DIO_void_assign_pin+0x9e>
 700:	80 95       	com	r24
 702:	84 23       	and	r24, r20
 704:	8c 93       	st	X, r24
}
 706:	0f 90       	pop	r0
 708:	0f 90       	pop	r0
 70a:	0f 90       	pop	r0
 70c:	cf 91       	pop	r28
 70e:	df 91       	pop	r29
 710:	08 95       	ret

00000712 <DIO_void_toggle_pin>:

void DIO_void_toggle_pin(u8 copy_u8_portID , u8 copy_u8_pinID){
 712:	df 93       	push	r29
 714:	cf 93       	push	r28
 716:	00 d0       	rcall	.+0      	; 0x718 <DIO_void_toggle_pin+0x6>
 718:	cd b7       	in	r28, 0x3d	; 61
 71a:	de b7       	in	r29, 0x3e	; 62
 71c:	89 83       	std	Y+1, r24	; 0x01
 71e:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	toggle_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
 720:	89 81       	ldd	r24, Y+1	; 0x01
 722:	88 2f       	mov	r24, r24
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	88 0f       	add	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	fc 01       	movw	r30, r24
 72c:	e0 59       	subi	r30, 0x90	; 144
 72e:	ff 4f       	sbci	r31, 0xFF	; 255
 730:	a0 81       	ld	r26, Z
 732:	b1 81       	ldd	r27, Z+1	; 0x01
 734:	89 81       	ldd	r24, Y+1	; 0x01
 736:	88 2f       	mov	r24, r24
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	88 0f       	add	r24, r24
 73c:	99 1f       	adc	r25, r25
 73e:	fc 01       	movw	r30, r24
 740:	e0 59       	subi	r30, 0x90	; 144
 742:	ff 4f       	sbci	r31, 0xFF	; 255
 744:	01 90       	ld	r0, Z+
 746:	f0 81       	ld	r31, Z
 748:	e0 2d       	mov	r30, r0
 74a:	80 81       	ld	r24, Z
 74c:	48 2f       	mov	r20, r24
 74e:	8a 81       	ldd	r24, Y+2	; 0x02
 750:	28 2f       	mov	r18, r24
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	02 2e       	mov	r0, r18
 75a:	02 c0       	rjmp	.+4      	; 0x760 <DIO_void_toggle_pin+0x4e>
 75c:	88 0f       	add	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	0a 94       	dec	r0
 762:	e2 f7       	brpl	.-8      	; 0x75c <DIO_void_toggle_pin+0x4a>
 764:	84 27       	eor	r24, r20
 766:	8c 93       	st	X, r24

}
 768:	0f 90       	pop	r0
 76a:	0f 90       	pop	r0
 76c:	cf 91       	pop	r28
 76e:	df 91       	pop	r29
 770:	08 95       	ret

00000772 <DIO_u8_get_port>:

u8 DIO_u8_get_port(u8 copy_u8_portID){
 772:	df 93       	push	r29
 774:	cf 93       	push	r28
 776:	0f 92       	push	r0
 778:	cd b7       	in	r28, 0x3d	; 61
 77a:	de b7       	in	r29, 0x3e	; 62
 77c:	89 83       	std	Y+1, r24	; 0x01
	 *  1 byte data
	 */



	return *(DIO_PINx[copy_u8_portID]);
 77e:	89 81       	ldd	r24, Y+1	; 0x01
 780:	88 2f       	mov	r24, r24
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	88 0f       	add	r24, r24
 786:	99 1f       	adc	r25, r25
 788:	fc 01       	movw	r30, r24
 78a:	e0 5a       	subi	r30, 0xA0	; 160
 78c:	ff 4f       	sbci	r31, 0xFF	; 255
 78e:	01 90       	ld	r0, Z+
 790:	f0 81       	ld	r31, Z
 792:	e0 2d       	mov	r30, r0
 794:	80 81       	ld	r24, Z
}
 796:	0f 90       	pop	r0
 798:	cf 91       	pop	r28
 79a:	df 91       	pop	r29
 79c:	08 95       	ret

0000079e <DIO_u8_get_pin>:

u8 DIO_u8_get_pin(u8 copy_u8_portID, u8 copy_u8_pinID){
 79e:	df 93       	push	r29
 7a0:	cf 93       	push	r28
 7a2:	00 d0       	rcall	.+0      	; 0x7a4 <DIO_u8_get_pin+0x6>
 7a4:	cd b7       	in	r28, 0x3d	; 61
 7a6:	de b7       	in	r29, 0x3e	; 62
 7a8:	89 83       	std	Y+1, r24	; 0x01
 7aa:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	return get_Bit(*(DIO_PINx[copy_u8_portID]),copy_u8_pinID);
 7ac:	89 81       	ldd	r24, Y+1	; 0x01
 7ae:	88 2f       	mov	r24, r24
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	88 0f       	add	r24, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	fc 01       	movw	r30, r24
 7b8:	e0 5a       	subi	r30, 0xA0	; 160
 7ba:	ff 4f       	sbci	r31, 0xFF	; 255
 7bc:	01 90       	ld	r0, Z+
 7be:	f0 81       	ld	r31, Z
 7c0:	e0 2d       	mov	r30, r0
 7c2:	80 81       	ld	r24, Z
 7c4:	28 2f       	mov	r18, r24
 7c6:	30 e0       	ldi	r19, 0x00	; 0
 7c8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ca:	88 2f       	mov	r24, r24
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	a9 01       	movw	r20, r18
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <DIO_u8_get_pin+0x38>
 7d2:	55 95       	asr	r21
 7d4:	47 95       	ror	r20
 7d6:	8a 95       	dec	r24
 7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <DIO_u8_get_pin+0x34>
 7da:	ca 01       	movw	r24, r20
 7dc:	81 70       	andi	r24, 0x01	; 1
}
 7de:	0f 90       	pop	r0
 7e0:	0f 90       	pop	r0
 7e2:	cf 91       	pop	r28
 7e4:	df 91       	pop	r29
 7e6:	08 95       	ret

000007e8 <led_temperature_light>:
 *   temp > 41 red led
 *
 */


void led_temperature_light(u32 adc_Result){
 7e8:	df 93       	push	r29
 7ea:	cf 93       	push	r28
 7ec:	cd b7       	in	r28, 0x3d	; 61
 7ee:	de b7       	in	r29, 0x3e	; 62
 7f0:	2c 97       	sbiw	r28, 0x0c	; 12
 7f2:	0f b6       	in	r0, 0x3f	; 63
 7f4:	f8 94       	cli
 7f6:	de bf       	out	0x3e, r29	; 62
 7f8:	0f be       	out	0x3f, r0	; 63
 7fa:	cd bf       	out	0x3d, r28	; 61
 7fc:	69 87       	std	Y+9, r22	; 0x09
 7fe:	7a 87       	std	Y+10, r23	; 0x0a
 800:	8b 87       	std	Y+11, r24	; 0x0b
 802:	9c 87       	std	Y+12, r25	; 0x0c

	u32 analog = (adc_Result * 5000)/1024;
 804:	89 85       	ldd	r24, Y+9	; 0x09
 806:	9a 85       	ldd	r25, Y+10	; 0x0a
 808:	ab 85       	ldd	r26, Y+11	; 0x0b
 80a:	bc 85       	ldd	r27, Y+12	; 0x0c
 80c:	28 e8       	ldi	r18, 0x88	; 136
 80e:	33 e1       	ldi	r19, 0x13	; 19
 810:	40 e0       	ldi	r20, 0x00	; 0
 812:	50 e0       	ldi	r21, 0x00	; 0
 814:	bc 01       	movw	r22, r24
 816:	cd 01       	movw	r24, r26
 818:	0e 94 99 04 	call	0x932	; 0x932 <__mulsi3>
 81c:	dc 01       	movw	r26, r24
 81e:	cb 01       	movw	r24, r22
 820:	07 2e       	mov	r0, r23
 822:	7a e0       	ldi	r23, 0x0A	; 10
 824:	b6 95       	lsr	r27
 826:	a7 95       	ror	r26
 828:	97 95       	ror	r25
 82a:	87 95       	ror	r24
 82c:	7a 95       	dec	r23
 82e:	d1 f7       	brne	.-12     	; 0x824 <led_temperature_light+0x3c>
 830:	70 2d       	mov	r23, r0
 832:	8d 83       	std	Y+5, r24	; 0x05
 834:	9e 83       	std	Y+6, r25	; 0x06
 836:	af 83       	std	Y+7, r26	; 0x07
 838:	b8 87       	std	Y+8, r27	; 0x08
	u32 temp = analog /10;
 83a:	8d 81       	ldd	r24, Y+5	; 0x05
 83c:	9e 81       	ldd	r25, Y+6	; 0x06
 83e:	af 81       	ldd	r26, Y+7	; 0x07
 840:	b8 85       	ldd	r27, Y+8	; 0x08
 842:	2a e0       	ldi	r18, 0x0A	; 10
 844:	30 e0       	ldi	r19, 0x00	; 0
 846:	40 e0       	ldi	r20, 0x00	; 0
 848:	50 e0       	ldi	r21, 0x00	; 0
 84a:	bc 01       	movw	r22, r24
 84c:	cd 01       	movw	r24, r26
 84e:	0e 94 b8 04 	call	0x970	; 0x970 <__udivmodsi4>
 852:	da 01       	movw	r26, r20
 854:	c9 01       	movw	r24, r18
 856:	89 83       	std	Y+1, r24	; 0x01
 858:	9a 83       	std	Y+2, r25	; 0x02
 85a:	ab 83       	std	Y+3, r26	; 0x03
 85c:	bc 83       	std	Y+4, r27	; 0x04

	if(temp <= 25){
 85e:	89 81       	ldd	r24, Y+1	; 0x01
 860:	9a 81       	ldd	r25, Y+2	; 0x02
 862:	ab 81       	ldd	r26, Y+3	; 0x03
 864:	bc 81       	ldd	r27, Y+4	; 0x04
 866:	8a 31       	cpi	r24, 0x1A	; 26
 868:	91 05       	cpc	r25, r1
 86a:	a1 05       	cpc	r26, r1
 86c:	b1 05       	cpc	r27, r1
 86e:	68 f4       	brcc	.+26     	; 0x88a <__stack+0x2b>

		DIO_void_set_pin(PORTC, PIN0);
 870:	82 e0       	ldi	r24, 0x02	; 2
 872:	60 e0       	ldi	r22, 0x00	; 0
 874:	0e 94 cc 02 	call	0x598	; 0x598 <DIO_void_set_pin>
		DIO_void_clear_pin(PORTC, PIN1);
 878:	82 e0       	ldi	r24, 0x02	; 2
 87a:	61 e0       	ldi	r22, 0x01	; 1
 87c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <DIO_void_clear_pin>
		DIO_void_clear_pin(PORTC, PIN2);
 880:	82 e0       	ldi	r24, 0x02	; 2
 882:	62 e0       	ldi	r22, 0x02	; 2
 884:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <DIO_void_clear_pin>
 888:	2b c0       	rjmp	.+86     	; 0x8e0 <__stack+0x81>

	}else if ((temp >= 26) && (temp <= 40)){
 88a:	89 81       	ldd	r24, Y+1	; 0x01
 88c:	9a 81       	ldd	r25, Y+2	; 0x02
 88e:	ab 81       	ldd	r26, Y+3	; 0x03
 890:	bc 81       	ldd	r27, Y+4	; 0x04
 892:	8a 31       	cpi	r24, 0x1A	; 26
 894:	91 05       	cpc	r25, r1
 896:	a1 05       	cpc	r26, r1
 898:	b1 05       	cpc	r27, r1
 89a:	b0 f0       	brcs	.+44     	; 0x8c8 <__stack+0x69>
 89c:	89 81       	ldd	r24, Y+1	; 0x01
 89e:	9a 81       	ldd	r25, Y+2	; 0x02
 8a0:	ab 81       	ldd	r26, Y+3	; 0x03
 8a2:	bc 81       	ldd	r27, Y+4	; 0x04
 8a4:	89 32       	cpi	r24, 0x29	; 41
 8a6:	91 05       	cpc	r25, r1
 8a8:	a1 05       	cpc	r26, r1
 8aa:	b1 05       	cpc	r27, r1
 8ac:	68 f4       	brcc	.+26     	; 0x8c8 <__stack+0x69>
		DIO_void_set_pin(PORTC, PIN1);
 8ae:	82 e0       	ldi	r24, 0x02	; 2
 8b0:	61 e0       	ldi	r22, 0x01	; 1
 8b2:	0e 94 cc 02 	call	0x598	; 0x598 <DIO_void_set_pin>
		DIO_void_clear_pin(PORTC, PIN0);
 8b6:	82 e0       	ldi	r24, 0x02	; 2
 8b8:	60 e0       	ldi	r22, 0x00	; 0
 8ba:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <DIO_void_clear_pin>
		DIO_void_clear_pin(PORTC, PIN2);
 8be:	82 e0       	ldi	r24, 0x02	; 2
 8c0:	62 e0       	ldi	r22, 0x02	; 2
 8c2:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <DIO_void_clear_pin>
 8c6:	0c c0       	rjmp	.+24     	; 0x8e0 <__stack+0x81>

	}else{

		DIO_void_set_pin(PORTC, PIN2);
 8c8:	82 e0       	ldi	r24, 0x02	; 2
 8ca:	62 e0       	ldi	r22, 0x02	; 2
 8cc:	0e 94 cc 02 	call	0x598	; 0x598 <DIO_void_set_pin>
		DIO_void_clear_pin(PORTC, PIN1);
 8d0:	82 e0       	ldi	r24, 0x02	; 2
 8d2:	61 e0       	ldi	r22, 0x01	; 1
 8d4:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <DIO_void_clear_pin>
		DIO_void_clear_pin(PORTC, PIN0);
 8d8:	82 e0       	ldi	r24, 0x02	; 2
 8da:	60 e0       	ldi	r22, 0x00	; 0
 8dc:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <DIO_void_clear_pin>
	}


}
 8e0:	2c 96       	adiw	r28, 0x0c	; 12
 8e2:	0f b6       	in	r0, 0x3f	; 63
 8e4:	f8 94       	cli
 8e6:	de bf       	out	0x3e, r29	; 62
 8e8:	0f be       	out	0x3f, r0	; 63
 8ea:	cd bf       	out	0x3d, r28	; 61
 8ec:	cf 91       	pop	r28
 8ee:	df 91       	pop	r29
 8f0:	08 95       	ret

000008f2 <main>:

int main(){
 8f2:	df 93       	push	r29
 8f4:	cf 93       	push	r28
 8f6:	0f 92       	push	r0
 8f8:	cd b7       	in	r28, 0x3d	; 61
 8fa:	de b7       	in	r29, 0x3e	; 62


	//SET 3 LEDS GREEN RED BLUE
	for(u8 i =0; i<3; i++){
 8fc:	19 82       	std	Y+1, r1	; 0x01
 8fe:	08 c0       	rjmp	.+16     	; 0x910 <main+0x1e>
		/*
		 * PC0 GREEN
		 * PC1 BLUE
		 * PC2 RED
		 */
	DIO_void_set_pin_dir(PORTC, i, OUTPUT);
 900:	82 e0       	ldi	r24, 0x02	; 2
 902:	69 81       	ldd	r22, Y+1	; 0x01
 904:	41 e0       	ldi	r20, 0x01	; 1
 906:	0e 94 91 01 	call	0x322	; 0x322 <DIO_void_set_pin_dir>

int main(){


	//SET 3 LEDS GREEN RED BLUE
	for(u8 i =0; i<3; i++){
 90a:	89 81       	ldd	r24, Y+1	; 0x01
 90c:	8f 5f       	subi	r24, 0xFF	; 255
 90e:	89 83       	std	Y+1, r24	; 0x01
 910:	89 81       	ldd	r24, Y+1	; 0x01
 912:	83 30       	cpi	r24, 0x03	; 3
 914:	a8 f3       	brcs	.-22     	; 0x900 <main+0xe>
		 * PC2 RED
		 */
	DIO_void_set_pin_dir(PORTC, i, OUTPUT);
	}

	DIO_void_set_pin_dir(PORTA, PIN0, INPUT); // TEMP SENSOR
 916:	80 e0       	ldi	r24, 0x00	; 0
 918:	60 e0       	ldi	r22, 0x00	; 0
 91a:	40 e0       	ldi	r20, 0x00	; 0
 91c:	0e 94 91 01 	call	0x322	; 0x322 <DIO_void_set_pin_dir>


	// adc initialization
	ADC_Void_Init();
 920:	0e 94 a4 00 	call	0x148	; 0x148 <ADC_Void_Init>
	set_callBack_function(led_temperature_light);
 924:	84 ef       	ldi	r24, 0xF4	; 244
 926:	93 e0       	ldi	r25, 0x03	; 3
 928:	0e 94 1e 01 	call	0x23c	; 0x23c <set_callBack_function>


	while(1){

		ADC_startConversion();
 92c:	0e 94 49 00 	call	0x92	; 0x92 <ADC_startConversion>
 930:	fd cf       	rjmp	.-6      	; 0x92c <main+0x3a>

00000932 <__mulsi3>:
 932:	62 9f       	mul	r22, r18
 934:	d0 01       	movw	r26, r0
 936:	73 9f       	mul	r23, r19
 938:	f0 01       	movw	r30, r0
 93a:	82 9f       	mul	r24, r18
 93c:	e0 0d       	add	r30, r0
 93e:	f1 1d       	adc	r31, r1
 940:	64 9f       	mul	r22, r20
 942:	e0 0d       	add	r30, r0
 944:	f1 1d       	adc	r31, r1
 946:	92 9f       	mul	r25, r18
 948:	f0 0d       	add	r31, r0
 94a:	83 9f       	mul	r24, r19
 94c:	f0 0d       	add	r31, r0
 94e:	74 9f       	mul	r23, r20
 950:	f0 0d       	add	r31, r0
 952:	65 9f       	mul	r22, r21
 954:	f0 0d       	add	r31, r0
 956:	99 27       	eor	r25, r25
 958:	72 9f       	mul	r23, r18
 95a:	b0 0d       	add	r27, r0
 95c:	e1 1d       	adc	r30, r1
 95e:	f9 1f       	adc	r31, r25
 960:	63 9f       	mul	r22, r19
 962:	b0 0d       	add	r27, r0
 964:	e1 1d       	adc	r30, r1
 966:	f9 1f       	adc	r31, r25
 968:	bd 01       	movw	r22, r26
 96a:	cf 01       	movw	r24, r30
 96c:	11 24       	eor	r1, r1
 96e:	08 95       	ret

00000970 <__udivmodsi4>:
 970:	a1 e2       	ldi	r26, 0x21	; 33
 972:	1a 2e       	mov	r1, r26
 974:	aa 1b       	sub	r26, r26
 976:	bb 1b       	sub	r27, r27
 978:	fd 01       	movw	r30, r26
 97a:	0d c0       	rjmp	.+26     	; 0x996 <__udivmodsi4_ep>

0000097c <__udivmodsi4_loop>:
 97c:	aa 1f       	adc	r26, r26
 97e:	bb 1f       	adc	r27, r27
 980:	ee 1f       	adc	r30, r30
 982:	ff 1f       	adc	r31, r31
 984:	a2 17       	cp	r26, r18
 986:	b3 07       	cpc	r27, r19
 988:	e4 07       	cpc	r30, r20
 98a:	f5 07       	cpc	r31, r21
 98c:	20 f0       	brcs	.+8      	; 0x996 <__udivmodsi4_ep>
 98e:	a2 1b       	sub	r26, r18
 990:	b3 0b       	sbc	r27, r19
 992:	e4 0b       	sbc	r30, r20
 994:	f5 0b       	sbc	r31, r21

00000996 <__udivmodsi4_ep>:
 996:	66 1f       	adc	r22, r22
 998:	77 1f       	adc	r23, r23
 99a:	88 1f       	adc	r24, r24
 99c:	99 1f       	adc	r25, r25
 99e:	1a 94       	dec	r1
 9a0:	69 f7       	brne	.-38     	; 0x97c <__udivmodsi4_loop>
 9a2:	60 95       	com	r22
 9a4:	70 95       	com	r23
 9a6:	80 95       	com	r24
 9a8:	90 95       	com	r25
 9aa:	9b 01       	movw	r18, r22
 9ac:	ac 01       	movw	r20, r24
 9ae:	bd 01       	movw	r22, r26
 9b0:	cf 01       	movw	r24, r30
 9b2:	08 95       	ret

000009b4 <_exit>:
 9b4:	f8 94       	cli

000009b6 <__stop_program>:
 9b6:	ff cf       	rjmp	.-2      	; 0x9b6 <__stop_program>
