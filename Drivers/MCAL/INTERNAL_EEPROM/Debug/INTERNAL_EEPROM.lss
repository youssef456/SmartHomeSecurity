
INTERNAL_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000250  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000564  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000004a1  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 1d 01 	call	0x23a	; 0x23a <main>
  64:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <eepromWaitUntilReady>:
#define MAX_EEPROM 1024

//Global Var


static void eepromWaitUntilReady(){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62

	/* Waiting for the previous writing operation */
	while(EECR & (1<<EEWE));
  74:	ec e3       	ldi	r30, 0x3C	; 60
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	80 81       	ld	r24, Z
  7a:	88 2f       	mov	r24, r24
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	82 70       	andi	r24, 0x02	; 2
  80:	90 70       	andi	r25, 0x00	; 0
  82:	00 97       	sbiw	r24, 0x00	; 0
  84:	b9 f7       	brne	.-18     	; 0x74 <eepromWaitUntilReady+0x8>


}
  86:	cf 91       	pop	r28
  88:	df 91       	pop	r29
  8a:	08 95       	ret

0000008c <eepromWriteByte>:

void eepromWriteByte(u16 copy_u16_Address, u8 copy_u8_Data){
  8c:	df 93       	push	r29
  8e:	cf 93       	push	r28
  90:	00 d0       	rcall	.+0      	; 0x92 <eepromWriteByte+0x6>
  92:	0f 92       	push	r0
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
  98:	9a 83       	std	Y+2, r25	; 0x02
  9a:	89 83       	std	Y+1, r24	; 0x01
  9c:	6b 83       	std	Y+3, r22	; 0x03

	eepromWaitUntilReady();
  9e:	0e 94 36 00 	call	0x6c	; 0x6c <eepromWaitUntilReady>

	//load address and data
	EEAR = copy_u16_Address;
  a2:	ee e3       	ldi	r30, 0x3E	; 62
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	89 81       	ldd	r24, Y+1	; 0x01
  a8:	9a 81       	ldd	r25, Y+2	; 0x02
  aa:	91 83       	std	Z+1, r25	; 0x01
  ac:	80 83       	st	Z, r24
	EEDR = copy_u8_Data;
  ae:	ed e3       	ldi	r30, 0x3D	; 61
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	8b 81       	ldd	r24, Y+3	; 0x03
  b4:	80 83       	st	Z, r24

	//Enable EEprom Master Write
	EECR = (1<<EEMWE);
  b6:	ec e3       	ldi	r30, 0x3C	; 60
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	84 e0       	ldi	r24, 0x04	; 4
  bc:	80 83       	st	Z, r24

	//enable Eeprom Write within 4 clock cycles
	EECR = (1<<EEWE);
  be:	ec e3       	ldi	r30, 0x3C	; 60
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	80 83       	st	Z, r24

}
  c6:	0f 90       	pop	r0
  c8:	0f 90       	pop	r0
  ca:	0f 90       	pop	r0
  cc:	cf 91       	pop	r28
  ce:	df 91       	pop	r29
  d0:	08 95       	ret

000000d2 <eepromReadByte>:


u8 eepromReadByte(u16 copy_u16_Address){
  d2:	df 93       	push	r29
  d4:	cf 93       	push	r28
  d6:	00 d0       	rcall	.+0      	; 0xd8 <eepromReadByte+0x6>
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
  dc:	9a 83       	std	Y+2, r25	; 0x02
  de:	89 83       	std	Y+1, r24	; 0x01

	eepromWaitUntilReady();
  e0:	0e 94 36 00 	call	0x6c	; 0x6c <eepromWaitUntilReady>

	//load address
	EEAR = copy_u16_Address;
  e4:	ee e3       	ldi	r30, 0x3E	; 62
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	9a 81       	ldd	r25, Y+2	; 0x02
  ec:	91 83       	std	Z+1, r25	; 0x01
  ee:	80 83       	st	Z, r24

	//enable Eeprom Read

	EECR |= (1<<EERE);
  f0:	ac e3       	ldi	r26, 0x3C	; 60
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	ec e3       	ldi	r30, 0x3C	; 60
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	8c 93       	st	X, r24

	//return data

	return EEDR;
  fe:	ed e3       	ldi	r30, 0x3D	; 61
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z

}
 104:	0f 90       	pop	r0
 106:	0f 90       	pop	r0
 108:	cf 91       	pop	r28
 10a:	df 91       	pop	r29
 10c:	08 95       	ret

0000010e <eepromWriteBytes>:

eepromResult eepromWriteBytes(u16 copy_u16_Address,u8* copy_pu8_Data,u16 copy_u16_Length ){
 10e:	df 93       	push	r29
 110:	cf 93       	push	r28
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	29 97       	sbiw	r28, 0x09	; 9
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
 122:	9d 83       	std	Y+5, r25	; 0x05
 124:	8c 83       	std	Y+4, r24	; 0x04
 126:	7f 83       	std	Y+7, r23	; 0x07
 128:	6e 83       	std	Y+6, r22	; 0x06
 12a:	59 87       	std	Y+9, r21	; 0x09
 12c:	48 87       	std	Y+8, r20	; 0x08

	eepromResult Result;

	if((copy_u16_Address + copy_u16_Length)< MAX_EEPROM){
 12e:	8c 81       	ldd	r24, Y+4	; 0x04
 130:	9d 81       	ldd	r25, Y+5	; 0x05
 132:	28 85       	ldd	r18, Y+8	; 0x08
 134:	39 85       	ldd	r19, Y+9	; 0x09
 136:	82 0f       	add	r24, r18
 138:	93 1f       	adc	r25, r19
 13a:	24 e0       	ldi	r18, 0x04	; 4
 13c:	80 30       	cpi	r24, 0x00	; 0
 13e:	92 07       	cpc	r25, r18
 140:	28 f5       	brcc	.+74     	; 0x18c <eepromWriteBytes+0x7e>


		for(u16 i = 0; i < copy_u16_Length; i++){
 142:	1a 82       	std	Y+2, r1	; 0x02
 144:	19 82       	std	Y+1, r1	; 0x01
 146:	18 c0       	rjmp	.+48     	; 0x178 <eepromWriteBytes+0x6a>

			eepromWriteByte(copy_u16_Address + i, copy_pu8_Data[i]);
 148:	2c 81       	ldd	r18, Y+4	; 0x04
 14a:	3d 81       	ldd	r19, Y+5	; 0x05
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	9a 81       	ldd	r25, Y+2	; 0x02
 150:	a9 01       	movw	r20, r18
 152:	48 0f       	add	r20, r24
 154:	59 1f       	adc	r21, r25
 156:	2e 81       	ldd	r18, Y+6	; 0x06
 158:	3f 81       	ldd	r19, Y+7	; 0x07
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	9a 81       	ldd	r25, Y+2	; 0x02
 15e:	f9 01       	movw	r30, r18
 160:	e8 0f       	add	r30, r24
 162:	f9 1f       	adc	r31, r25
 164:	20 81       	ld	r18, Z
 166:	ca 01       	movw	r24, r20
 168:	62 2f       	mov	r22, r18
 16a:	0e 94 46 00 	call	0x8c	; 0x8c <eepromWriteByte>
	eepromResult Result;

	if((copy_u16_Address + copy_u16_Length)< MAX_EEPROM){


		for(u16 i = 0; i < copy_u16_Length; i++){
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	9a 81       	ldd	r25, Y+2	; 0x02
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	9a 83       	std	Y+2, r25	; 0x02
 176:	89 83       	std	Y+1, r24	; 0x01
 178:	29 81       	ldd	r18, Y+1	; 0x01
 17a:	3a 81       	ldd	r19, Y+2	; 0x02
 17c:	88 85       	ldd	r24, Y+8	; 0x08
 17e:	99 85       	ldd	r25, Y+9	; 0x09
 180:	28 17       	cp	r18, r24
 182:	39 07       	cpc	r19, r25
 184:	08 f3       	brcs	.-62     	; 0x148 <eepromWriteBytes+0x3a>

			eepromWriteByte(copy_u16_Address + i, copy_pu8_Data[i]);

		}

		Result = eepromWriteOK;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	8b 83       	std	Y+3, r24	; 0x03
 18a:	01 c0       	rjmp	.+2      	; 0x18e <eepromWriteBytes+0x80>

	} else {

		Result = eepromAddressOverFlow;
 18c:	1b 82       	std	Y+3, r1	; 0x03

	}

	return Result;
 18e:	8b 81       	ldd	r24, Y+3	; 0x03

}
 190:	29 96       	adiw	r28, 0x09	; 9
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	de bf       	out	0x3e, r29	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	cd bf       	out	0x3d, r28	; 61
 19c:	cf 91       	pop	r28
 19e:	df 91       	pop	r29
 1a0:	08 95       	ret

000001a2 <eepromReadBytes>:

eepromResult eepromReadBytes(u16 copy_u16_Address,u8* copy_pu8_Data,u16 copy_u16_Length){
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	df 93       	push	r29
 1a8:	cf 93       	push	r28
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	29 97       	sbiw	r28, 0x09	; 9
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	de bf       	out	0x3e, r29	; 62
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	cd bf       	out	0x3d, r28	; 61
 1ba:	9d 83       	std	Y+5, r25	; 0x05
 1bc:	8c 83       	std	Y+4, r24	; 0x04
 1be:	7f 83       	std	Y+7, r23	; 0x07
 1c0:	6e 83       	std	Y+6, r22	; 0x06
 1c2:	59 87       	std	Y+9, r21	; 0x09
 1c4:	48 87       	std	Y+8, r20	; 0x08

	eepromResult result;

	if((copy_u16_Address + copy_u16_Length) <MAX_EEPROM){
 1c6:	8c 81       	ldd	r24, Y+4	; 0x04
 1c8:	9d 81       	ldd	r25, Y+5	; 0x05
 1ca:	28 85       	ldd	r18, Y+8	; 0x08
 1cc:	39 85       	ldd	r19, Y+9	; 0x09
 1ce:	82 0f       	add	r24, r18
 1d0:	93 1f       	adc	r25, r19
 1d2:	24 e0       	ldi	r18, 0x04	; 4
 1d4:	80 30       	cpi	r24, 0x00	; 0
 1d6:	92 07       	cpc	r25, r18
 1d8:	18 f5       	brcc	.+70     	; 0x220 <eepromReadBytes+0x7e>

		for(u16 i = 0; i < copy_u16_Length; i++){
 1da:	1a 82       	std	Y+2, r1	; 0x02
 1dc:	19 82       	std	Y+1, r1	; 0x01
 1de:	16 c0       	rjmp	.+44     	; 0x20c <eepromReadBytes+0x6a>

			copy_pu8_Data[i] = eepromReadByte(copy_u16_Address + i);
 1e0:	2e 81       	ldd	r18, Y+6	; 0x06
 1e2:	3f 81       	ldd	r19, Y+7	; 0x07
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
 1e6:	9a 81       	ldd	r25, Y+2	; 0x02
 1e8:	89 01       	movw	r16, r18
 1ea:	08 0f       	add	r16, r24
 1ec:	19 1f       	adc	r17, r25
 1ee:	2c 81       	ldd	r18, Y+4	; 0x04
 1f0:	3d 81       	ldd	r19, Y+5	; 0x05
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	9a 81       	ldd	r25, Y+2	; 0x02
 1f6:	82 0f       	add	r24, r18
 1f8:	93 1f       	adc	r25, r19
 1fa:	0e 94 69 00 	call	0xd2	; 0xd2 <eepromReadByte>
 1fe:	f8 01       	movw	r30, r16
 200:	80 83       	st	Z, r24

	eepromResult result;

	if((copy_u16_Address + copy_u16_Length) <MAX_EEPROM){

		for(u16 i = 0; i < copy_u16_Length; i++){
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	9a 81       	ldd	r25, Y+2	; 0x02
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	9a 83       	std	Y+2, r25	; 0x02
 20a:	89 83       	std	Y+1, r24	; 0x01
 20c:	29 81       	ldd	r18, Y+1	; 0x01
 20e:	3a 81       	ldd	r19, Y+2	; 0x02
 210:	88 85       	ldd	r24, Y+8	; 0x08
 212:	99 85       	ldd	r25, Y+9	; 0x09
 214:	28 17       	cp	r18, r24
 216:	39 07       	cpc	r19, r25
 218:	18 f3       	brcs	.-58     	; 0x1e0 <eepromReadBytes+0x3e>

			copy_pu8_Data[i] = eepromReadByte(copy_u16_Address + i);

		}

		result = eepromWriteOK;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	8b 83       	std	Y+3, r24	; 0x03
 21e:	01 c0       	rjmp	.+2      	; 0x222 <eepromReadBytes+0x80>
	}else{

		result = eepromAddressOverFlow;
 220:	1b 82       	std	Y+3, r1	; 0x03
	}

	return result;
 222:	8b 81       	ldd	r24, Y+3	; 0x03
}
 224:	29 96       	adiw	r28, 0x09	; 9
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	f8 94       	cli
 22a:	de bf       	out	0x3e, r29	; 62
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	cd bf       	out	0x3d, r28	; 61
 230:	cf 91       	pop	r28
 232:	df 91       	pop	r29
 234:	1f 91       	pop	r17
 236:	0f 91       	pop	r16
 238:	08 95       	ret

0000023a <main>:
 *  Created on: Aug 23, 2023
 *      Author: karim
 */


int main (){
 23a:	df 93       	push	r29
 23c:	cf 93       	push	r28
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62


	return 0;
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
}
 246:	cf 91       	pop	r28
 248:	df 91       	pop	r29
 24a:	08 95       	ret

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
