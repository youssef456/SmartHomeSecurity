
USER_MANAGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000a00  00000a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  0080007c  0080007c  00000ab0  2**0
                  ALLOC
  3 .stab         00001188  00000000  00000000  00000ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000118b  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3b       	cpi	r26, 0xB9	; 185
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <main>
  8a:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_void_set_port_dir>:


/* implementing the driver functions  */
/* set Portx Direction Function       */

void DIO_void_set_port_dir(u8 copy_u8_portID, u8 port_copy_dir){
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <DIO_void_set_port_dir+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	6a 83       	std	Y+2, r22	; 0x02
	 *  Also general rule INPUT --> 0 // OUTPUT --> 1
	 *
	 *
	 */

	*(DIO_DDRx[copy_u8_portID]) = port_copy_dir;
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	88 2f       	mov	r24, r24
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	fc 01       	movw	r30, r24
  ac:	e5 59       	subi	r30, 0x95	; 149
  ae:	ff 4f       	sbci	r31, 0xFF	; 255
  b0:	01 90       	ld	r0, Z+
  b2:	f0 81       	ld	r31, Z
  b4:	e0 2d       	mov	r30, r0
  b6:	8a 81       	ldd	r24, Y+2	; 0x02
  b8:	80 83       	st	Z, r24

}
  ba:	0f 90       	pop	r0
  bc:	0f 90       	pop	r0
  be:	cf 91       	pop	r28
  c0:	df 91       	pop	r29
  c2:	08 95       	ret

000000c4 <DIO_void_set_pin_dir>:

void DIO_void_set_pin_dir(u8 copy_u8_portID, u8 copy_u8_pinID, u8 pin_copy_dir){
  c4:	df 93       	push	r29
  c6:	cf 93       	push	r28
  c8:	00 d0       	rcall	.+0      	; 0xca <DIO_void_set_pin_dir+0x6>
  ca:	0f 92       	push	r0
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	89 83       	std	Y+1, r24	; 0x01
  d2:	6a 83       	std	Y+2, r22	; 0x02
  d4:	4b 83       	std	Y+3, r20	; 0x03
	 *  pin_copy_dir using the predefined macro INPUT //OUTPUT
	 *
	 *
	 */

	assign_Bit(*(DIO_DDRx[copy_u8_portID]),copy_u8_pinID,pin_copy_dir);
  d6:	8b 81       	ldd	r24, Y+3	; 0x03
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	29 f5       	brne	.+74     	; 0x126 <DIO_void_set_pin_dir+0x62>
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	88 2f       	mov	r24, r24
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	fc 01       	movw	r30, r24
  e8:	e5 59       	subi	r30, 0x95	; 149
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	a0 81       	ld	r26, Z
  ee:	b1 81       	ldd	r27, Z+1	; 0x01
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	88 2f       	mov	r24, r24
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	fc 01       	movw	r30, r24
  fc:	e5 59       	subi	r30, 0x95	; 149
  fe:	ff 4f       	sbci	r31, 0xFF	; 255
 100:	01 90       	ld	r0, Z+
 102:	f0 81       	ld	r31, Z
 104:	e0 2d       	mov	r30, r0
 106:	80 81       	ld	r24, Z
 108:	48 2f       	mov	r20, r24
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	28 2f       	mov	r18, r24
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 2e       	mov	r0, r18
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_void_set_pin_dir+0x58>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_void_set_pin_dir+0x54>
 120:	84 2b       	or	r24, r20
 122:	8c 93       	st	X, r24
 124:	25 c0       	rjmp	.+74     	; 0x170 <DIO_void_set_pin_dir+0xac>
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	88 2f       	mov	r24, r24
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	fc 01       	movw	r30, r24
 132:	e5 59       	subi	r30, 0x95	; 149
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	a0 81       	ld	r26, Z
 138:	b1 81       	ldd	r27, Z+1	; 0x01
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	88 2f       	mov	r24, r24
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	fc 01       	movw	r30, r24
 146:	e5 59       	subi	r30, 0x95	; 149
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	01 90       	ld	r0, Z+
 14c:	f0 81       	ld	r31, Z
 14e:	e0 2d       	mov	r30, r0
 150:	80 81       	ld	r24, Z
 152:	48 2f       	mov	r20, r24
 154:	8a 81       	ldd	r24, Y+2	; 0x02
 156:	28 2f       	mov	r18, r24
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 2e       	mov	r0, r18
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_void_set_pin_dir+0xa2>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_void_set_pin_dir+0x9e>
 16a:	80 95       	com	r24
 16c:	84 23       	and	r24, r20
 16e:	8c 93       	st	X, r24

}
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	cf 91       	pop	r28
 178:	df 91       	pop	r29
 17a:	08 95       	ret

0000017c <DIO_void_port_pullup>:

void DIO_void_port_pullup(u8 copy_u8_portID){
 17c:	df 93       	push	r29
 17e:	cf 93       	push	r28
 180:	0f 92       	push	r0
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
 186:	89 83       	std	Y+1, r24	; 0x01
	 *  so that is what the function does
	 *  using the pullup for any button prevents the floating effect
	 *
	 *
	 */
	*(DIO_DDRx[copy_u8_portID]) = INPUT;
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	88 2f       	mov	r24, r24
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	fc 01       	movw	r30, r24
 194:	e5 59       	subi	r30, 0x95	; 149
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	01 90       	ld	r0, Z+
 19a:	f0 81       	ld	r31, Z
 19c:	e0 2d       	mov	r30, r0
 19e:	10 82       	st	Z, r1
	*(DIO_PORTx[copy_u8_portID]) = PORT_MAX;
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
 1a2:	88 2f       	mov	r24, r24
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	fc 01       	movw	r30, r24
 1ac:	ed 58       	subi	r30, 0x8D	; 141
 1ae:	ff 4f       	sbci	r31, 0xFF	; 255
 1b0:	01 90       	ld	r0, Z+
 1b2:	f0 81       	ld	r31, Z
 1b4:	e0 2d       	mov	r30, r0
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	80 83       	st	Z, r24
}
 1ba:	0f 90       	pop	r0
 1bc:	cf 91       	pop	r28
 1be:	df 91       	pop	r29
 1c0:	08 95       	ret

000001c2 <DIO_void_pin_pullup>:

void DIO_void_pin_pullup(u8 copy_u8_portID, u8 copy_u8_pinID){
 1c2:	df 93       	push	r29
 1c4:	cf 93       	push	r28
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <DIO_void_pin_pullup+0x6>
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	89 83       	std	Y+1, r24	; 0x01
 1ce:	6a 83       	std	Y+2, r22	; 0x02
	/*  the function works as the one that set pullup for the whole port
	 *
	 *
	 */

	clear_Bit(*(DIO_DDRx[copy_u8_portID]),copy_u8_pinID);
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	88 2f       	mov	r24, r24
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	fc 01       	movw	r30, r24
 1dc:	e5 59       	subi	r30, 0x95	; 149
 1de:	ff 4f       	sbci	r31, 0xFF	; 255
 1e0:	a0 81       	ld	r26, Z
 1e2:	b1 81       	ldd	r27, Z+1	; 0x01
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
 1e6:	88 2f       	mov	r24, r24
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	fc 01       	movw	r30, r24
 1f0:	e5 59       	subi	r30, 0x95	; 149
 1f2:	ff 4f       	sbci	r31, 0xFF	; 255
 1f4:	01 90       	ld	r0, Z+
 1f6:	f0 81       	ld	r31, Z
 1f8:	e0 2d       	mov	r30, r0
 1fa:	80 81       	ld	r24, Z
 1fc:	48 2f       	mov	r20, r24
 1fe:	8a 81       	ldd	r24, Y+2	; 0x02
 200:	28 2f       	mov	r18, r24
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_void_pin_pullup+0x4c>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	2a 95       	dec	r18
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_void_pin_pullup+0x48>
 212:	80 95       	com	r24
 214:	84 23       	and	r24, r20
 216:	8c 93       	st	X, r24
	set_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	88 2f       	mov	r24, r24
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	fc 01       	movw	r30, r24
 224:	ed 58       	subi	r30, 0x8D	; 141
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	a0 81       	ld	r26, Z
 22a:	b1 81       	ldd	r27, Z+1	; 0x01
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	88 2f       	mov	r24, r24
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	fc 01       	movw	r30, r24
 238:	ed 58       	subi	r30, 0x8D	; 141
 23a:	ff 4f       	sbci	r31, 0xFF	; 255
 23c:	01 90       	ld	r0, Z+
 23e:	f0 81       	ld	r31, Z
 240:	e0 2d       	mov	r30, r0
 242:	80 81       	ld	r24, Z
 244:	48 2f       	mov	r20, r24
 246:	8a 81       	ldd	r24, Y+2	; 0x02
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 2e       	mov	r0, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_void_pin_pullup+0x96>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_void_pin_pullup+0x92>
 25c:	84 2b       	or	r24, r20
 25e:	8c 93       	st	X, r24

}
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	cf 91       	pop	r28
 266:	df 91       	pop	r29
 268:	08 95       	ret

0000026a <DIO_void_set_port>:

void DIO_void_set_port(u8 copy_u8_portID){
 26a:	df 93       	push	r29
 26c:	cf 93       	push	r28
 26e:	0f 92       	push	r0
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	89 83       	std	Y+1, r24	; 0x01
	 *
	 */



	*(DIO_PORTx[copy_u8_portID]) = PORT_MAX;
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	88 2f       	mov	r24, r24
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	fc 01       	movw	r30, r24
 282:	ed 58       	subi	r30, 0x8D	; 141
 284:	ff 4f       	sbci	r31, 0xFF	; 255
 286:	01 90       	ld	r0, Z+
 288:	f0 81       	ld	r31, Z
 28a:	e0 2d       	mov	r30, r0
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	80 83       	st	Z, r24

}
 290:	0f 90       	pop	r0
 292:	cf 91       	pop	r28
 294:	df 91       	pop	r29
 296:	08 95       	ret

00000298 <DIO_void_clear_port>:

void DIO_void_clear_port(u8 copy_u8_portID){
 298:	df 93       	push	r29
 29a:	cf 93       	push	r28
 29c:	0f 92       	push	r0
 29e:	cd b7       	in	r28, 0x3d	; 61
 2a0:	de b7       	in	r29, 0x3e	; 62
 2a2:	89 83       	std	Y+1, r24	; 0x01
	 *
	 *
	 */


	*(DIO_PORTx[copy_u8_portID]) = LOW;
 2a4:	89 81       	ldd	r24, Y+1	; 0x01
 2a6:	88 2f       	mov	r24, r24
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	fc 01       	movw	r30, r24
 2b0:	ed 58       	subi	r30, 0x8D	; 141
 2b2:	ff 4f       	sbci	r31, 0xFF	; 255
 2b4:	01 90       	ld	r0, Z+
 2b6:	f0 81       	ld	r31, Z
 2b8:	e0 2d       	mov	r30, r0
 2ba:	10 82       	st	Z, r1

}
 2bc:	0f 90       	pop	r0
 2be:	cf 91       	pop	r28
 2c0:	df 91       	pop	r29
 2c2:	08 95       	ret

000002c4 <DIO_void_assign_port>:

void DIO_void_assign_port(u8 copy_u8_portID, u8 copy_value){
 2c4:	df 93       	push	r29
 2c6:	cf 93       	push	r28
 2c8:	00 d0       	rcall	.+0      	; 0x2ca <DIO_void_assign_port+0x6>
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
 2ce:	89 83       	std	Y+1, r24	; 0x01
 2d0:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 */



	*(DIO_PORTx[copy_u8_portID]) = copy_value;
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
 2d4:	88 2f       	mov	r24, r24
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	fc 01       	movw	r30, r24
 2de:	ed 58       	subi	r30, 0x8D	; 141
 2e0:	ff 4f       	sbci	r31, 0xFF	; 255
 2e2:	01 90       	ld	r0, Z+
 2e4:	f0 81       	ld	r31, Z
 2e6:	e0 2d       	mov	r30, r0
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	80 83       	st	Z, r24

}
 2ec:	0f 90       	pop	r0
 2ee:	0f 90       	pop	r0
 2f0:	cf 91       	pop	r28
 2f2:	df 91       	pop	r29
 2f4:	08 95       	ret

000002f6 <DIO_void_toggle_port>:

void DIO_void_toggle_port(u8 copy_u8_portID){
 2f6:	df 93       	push	r29
 2f8:	cf 93       	push	r28
 2fa:	0f 92       	push	r0
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
 300:	89 83       	std	Y+1, r24	; 0x01
	 *
	 *
	 */


	*(DIO_PORTx[copy_u8_portID]) ^= PORT_MAX;
 302:	89 81       	ldd	r24, Y+1	; 0x01
 304:	88 2f       	mov	r24, r24
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	fc 01       	movw	r30, r24
 30e:	ed 58       	subi	r30, 0x8D	; 141
 310:	ff 4f       	sbci	r31, 0xFF	; 255
 312:	a0 81       	ld	r26, Z
 314:	b1 81       	ldd	r27, Z+1	; 0x01
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	88 2f       	mov	r24, r24
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	fc 01       	movw	r30, r24
 322:	ed 58       	subi	r30, 0x8D	; 141
 324:	ff 4f       	sbci	r31, 0xFF	; 255
 326:	01 90       	ld	r0, Z+
 328:	f0 81       	ld	r31, Z
 32a:	e0 2d       	mov	r30, r0
 32c:	80 81       	ld	r24, Z
 32e:	80 95       	com	r24
 330:	8c 93       	st	X, r24
}
 332:	0f 90       	pop	r0
 334:	cf 91       	pop	r28
 336:	df 91       	pop	r29
 338:	08 95       	ret

0000033a <DIO_void_set_pin>:

void DIO_void_set_pin(u8 copy_u8_portID , u8 copy_u8_pinID){
 33a:	df 93       	push	r29
 33c:	cf 93       	push	r28
 33e:	00 d0       	rcall	.+0      	; 0x340 <DIO_void_set_pin+0x6>
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
 344:	89 83       	std	Y+1, r24	; 0x01
 346:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	set_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
 348:	89 81       	ldd	r24, Y+1	; 0x01
 34a:	88 2f       	mov	r24, r24
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	fc 01       	movw	r30, r24
 354:	ed 58       	subi	r30, 0x8D	; 141
 356:	ff 4f       	sbci	r31, 0xFF	; 255
 358:	a0 81       	ld	r26, Z
 35a:	b1 81       	ldd	r27, Z+1	; 0x01
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	88 2f       	mov	r24, r24
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	fc 01       	movw	r30, r24
 368:	ed 58       	subi	r30, 0x8D	; 141
 36a:	ff 4f       	sbci	r31, 0xFF	; 255
 36c:	01 90       	ld	r0, Z+
 36e:	f0 81       	ld	r31, Z
 370:	e0 2d       	mov	r30, r0
 372:	80 81       	ld	r24, Z
 374:	48 2f       	mov	r20, r24
 376:	8a 81       	ldd	r24, Y+2	; 0x02
 378:	28 2f       	mov	r18, r24
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 2e       	mov	r0, r18
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_void_set_pin+0x4e>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	0a 94       	dec	r0
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_void_set_pin+0x4a>
 38c:	84 2b       	or	r24, r20
 38e:	8c 93       	st	X, r24
}
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	cf 91       	pop	r28
 396:	df 91       	pop	r29
 398:	08 95       	ret

0000039a <DIO_void_clear_pin>:

void DIO_void_clear_pin(u8 copy_u8_portID , u8 copy_u8_pinID){
 39a:	df 93       	push	r29
 39c:	cf 93       	push	r28
 39e:	00 d0       	rcall	.+0      	; 0x3a0 <DIO_void_clear_pin+0x6>
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
 3a4:	89 83       	std	Y+1, r24	; 0x01
 3a6:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	clear_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
 3a8:	89 81       	ldd	r24, Y+1	; 0x01
 3aa:	88 2f       	mov	r24, r24
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	fc 01       	movw	r30, r24
 3b4:	ed 58       	subi	r30, 0x8D	; 141
 3b6:	ff 4f       	sbci	r31, 0xFF	; 255
 3b8:	a0 81       	ld	r26, Z
 3ba:	b1 81       	ldd	r27, Z+1	; 0x01
 3bc:	89 81       	ldd	r24, Y+1	; 0x01
 3be:	88 2f       	mov	r24, r24
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	fc 01       	movw	r30, r24
 3c8:	ed 58       	subi	r30, 0x8D	; 141
 3ca:	ff 4f       	sbci	r31, 0xFF	; 255
 3cc:	01 90       	ld	r0, Z+
 3ce:	f0 81       	ld	r31, Z
 3d0:	e0 2d       	mov	r30, r0
 3d2:	80 81       	ld	r24, Z
 3d4:	48 2f       	mov	r20, r24
 3d6:	8a 81       	ldd	r24, Y+2	; 0x02
 3d8:	28 2f       	mov	r18, r24
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	02 2e       	mov	r0, r18
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_void_clear_pin+0x4e>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	0a 94       	dec	r0
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_void_clear_pin+0x4a>
 3ec:	80 95       	com	r24
 3ee:	84 23       	and	r24, r20
 3f0:	8c 93       	st	X, r24
}
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	cf 91       	pop	r28
 3f8:	df 91       	pop	r29
 3fa:	08 95       	ret

000003fc <DIO_void_assign_pin>:

void DIO_void_assign_pin(u8 copy_u8_portID,u8 copy_u8_pinID ,u8 copy_value){
 3fc:	df 93       	push	r29
 3fe:	cf 93       	push	r28
 400:	00 d0       	rcall	.+0      	; 0x402 <DIO_void_assign_pin+0x6>
 402:	0f 92       	push	r0
 404:	cd b7       	in	r28, 0x3d	; 61
 406:	de b7       	in	r29, 0x3e	; 62
 408:	89 83       	std	Y+1, r24	; 0x01
 40a:	6a 83       	std	Y+2, r22	; 0x02
 40c:	4b 83       	std	Y+3, r20	; 0x03
	 *
	 */



	assign_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID,copy_value);
 40e:	8b 81       	ldd	r24, Y+3	; 0x03
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	29 f5       	brne	.+74     	; 0x45e <DIO_void_assign_pin+0x62>
 414:	89 81       	ldd	r24, Y+1	; 0x01
 416:	88 2f       	mov	r24, r24
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	fc 01       	movw	r30, r24
 420:	ed 58       	subi	r30, 0x8D	; 141
 422:	ff 4f       	sbci	r31, 0xFF	; 255
 424:	a0 81       	ld	r26, Z
 426:	b1 81       	ldd	r27, Z+1	; 0x01
 428:	89 81       	ldd	r24, Y+1	; 0x01
 42a:	88 2f       	mov	r24, r24
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	fc 01       	movw	r30, r24
 434:	ed 58       	subi	r30, 0x8D	; 141
 436:	ff 4f       	sbci	r31, 0xFF	; 255
 438:	01 90       	ld	r0, Z+
 43a:	f0 81       	ld	r31, Z
 43c:	e0 2d       	mov	r30, r0
 43e:	80 81       	ld	r24, Z
 440:	48 2f       	mov	r20, r24
 442:	8a 81       	ldd	r24, Y+2	; 0x02
 444:	28 2f       	mov	r18, r24
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	02 2e       	mov	r0, r18
 44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_void_assign_pin+0x58>
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	0a 94       	dec	r0
 456:	e2 f7       	brpl	.-8      	; 0x450 <DIO_void_assign_pin+0x54>
 458:	84 2b       	or	r24, r20
 45a:	8c 93       	st	X, r24
 45c:	25 c0       	rjmp	.+74     	; 0x4a8 <DIO_void_assign_pin+0xac>
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	88 2f       	mov	r24, r24
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	fc 01       	movw	r30, r24
 46a:	ed 58       	subi	r30, 0x8D	; 141
 46c:	ff 4f       	sbci	r31, 0xFF	; 255
 46e:	a0 81       	ld	r26, Z
 470:	b1 81       	ldd	r27, Z+1	; 0x01
 472:	89 81       	ldd	r24, Y+1	; 0x01
 474:	88 2f       	mov	r24, r24
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	fc 01       	movw	r30, r24
 47e:	ed 58       	subi	r30, 0x8D	; 141
 480:	ff 4f       	sbci	r31, 0xFF	; 255
 482:	01 90       	ld	r0, Z+
 484:	f0 81       	ld	r31, Z
 486:	e0 2d       	mov	r30, r0
 488:	80 81       	ld	r24, Z
 48a:	48 2f       	mov	r20, r24
 48c:	8a 81       	ldd	r24, Y+2	; 0x02
 48e:	28 2f       	mov	r18, r24
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 2e       	mov	r0, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_void_assign_pin+0xa2>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	0a 94       	dec	r0
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_void_assign_pin+0x9e>
 4a2:	80 95       	com	r24
 4a4:	84 23       	and	r24, r20
 4a6:	8c 93       	st	X, r24
}
 4a8:	0f 90       	pop	r0
 4aa:	0f 90       	pop	r0
 4ac:	0f 90       	pop	r0
 4ae:	cf 91       	pop	r28
 4b0:	df 91       	pop	r29
 4b2:	08 95       	ret

000004b4 <DIO_void_toggle_pin>:

void DIO_void_toggle_pin(u8 copy_u8_portID , u8 copy_u8_pinID){
 4b4:	df 93       	push	r29
 4b6:	cf 93       	push	r28
 4b8:	00 d0       	rcall	.+0      	; 0x4ba <DIO_void_toggle_pin+0x6>
 4ba:	cd b7       	in	r28, 0x3d	; 61
 4bc:	de b7       	in	r29, 0x3e	; 62
 4be:	89 83       	std	Y+1, r24	; 0x01
 4c0:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	toggle_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
 4c2:	89 81       	ldd	r24, Y+1	; 0x01
 4c4:	88 2f       	mov	r24, r24
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	fc 01       	movw	r30, r24
 4ce:	ed 58       	subi	r30, 0x8D	; 141
 4d0:	ff 4f       	sbci	r31, 0xFF	; 255
 4d2:	a0 81       	ld	r26, Z
 4d4:	b1 81       	ldd	r27, Z+1	; 0x01
 4d6:	89 81       	ldd	r24, Y+1	; 0x01
 4d8:	88 2f       	mov	r24, r24
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	fc 01       	movw	r30, r24
 4e2:	ed 58       	subi	r30, 0x8D	; 141
 4e4:	ff 4f       	sbci	r31, 0xFF	; 255
 4e6:	01 90       	ld	r0, Z+
 4e8:	f0 81       	ld	r31, Z
 4ea:	e0 2d       	mov	r30, r0
 4ec:	80 81       	ld	r24, Z
 4ee:	48 2f       	mov	r20, r24
 4f0:	8a 81       	ldd	r24, Y+2	; 0x02
 4f2:	28 2f       	mov	r18, r24
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 2e       	mov	r0, r18
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_void_toggle_pin+0x4e>
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	0a 94       	dec	r0
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_void_toggle_pin+0x4a>
 506:	84 27       	eor	r24, r20
 508:	8c 93       	st	X, r24

}
 50a:	0f 90       	pop	r0
 50c:	0f 90       	pop	r0
 50e:	cf 91       	pop	r28
 510:	df 91       	pop	r29
 512:	08 95       	ret

00000514 <DIO_u8_get_port>:

u8 DIO_u8_get_port(u8 copy_u8_portID){
 514:	df 93       	push	r29
 516:	cf 93       	push	r28
 518:	0f 92       	push	r0
 51a:	cd b7       	in	r28, 0x3d	; 61
 51c:	de b7       	in	r29, 0x3e	; 62
 51e:	89 83       	std	Y+1, r24	; 0x01
	 *  1 byte data
	 */



	return *(DIO_PINx[copy_u8_portID]);
 520:	89 81       	ldd	r24, Y+1	; 0x01
 522:	88 2f       	mov	r24, r24
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	fc 01       	movw	r30, r24
 52c:	ed 59       	subi	r30, 0x9D	; 157
 52e:	ff 4f       	sbci	r31, 0xFF	; 255
 530:	01 90       	ld	r0, Z+
 532:	f0 81       	ld	r31, Z
 534:	e0 2d       	mov	r30, r0
 536:	80 81       	ld	r24, Z
}
 538:	0f 90       	pop	r0
 53a:	cf 91       	pop	r28
 53c:	df 91       	pop	r29
 53e:	08 95       	ret

00000540 <DIO_u8_get_pin>:

u8 DIO_u8_get_pin(u8 copy_u8_portID, u8 copy_u8_pinID){
 540:	df 93       	push	r29
 542:	cf 93       	push	r28
 544:	00 d0       	rcall	.+0      	; 0x546 <DIO_u8_get_pin+0x6>
 546:	cd b7       	in	r28, 0x3d	; 61
 548:	de b7       	in	r29, 0x3e	; 62
 54a:	89 83       	std	Y+1, r24	; 0x01
 54c:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	return get_Bit(*(DIO_PINx[copy_u8_portID]),copy_u8_pinID);
 54e:	89 81       	ldd	r24, Y+1	; 0x01
 550:	88 2f       	mov	r24, r24
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	fc 01       	movw	r30, r24
 55a:	ed 59       	subi	r30, 0x9D	; 157
 55c:	ff 4f       	sbci	r31, 0xFF	; 255
 55e:	01 90       	ld	r0, Z+
 560:	f0 81       	ld	r31, Z
 562:	e0 2d       	mov	r30, r0
 564:	80 81       	ld	r24, Z
 566:	28 2f       	mov	r18, r24
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	8a 81       	ldd	r24, Y+2	; 0x02
 56c:	88 2f       	mov	r24, r24
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	a9 01       	movw	r20, r18
 572:	02 c0       	rjmp	.+4      	; 0x578 <DIO_u8_get_pin+0x38>
 574:	55 95       	asr	r21
 576:	47 95       	ror	r20
 578:	8a 95       	dec	r24
 57a:	e2 f7       	brpl	.-8      	; 0x574 <DIO_u8_get_pin+0x34>
 57c:	ca 01       	movw	r24, r20
 57e:	81 70       	andi	r24, 0x01	; 1
}
 580:	0f 90       	pop	r0
 582:	0f 90       	pop	r0
 584:	cf 91       	pop	r28
 586:	df 91       	pop	r29
 588:	08 95       	ret

0000058a <eepromWaitUntilReady>:
#define MAX_EEPROM 1024

//Global Var


static void eepromWaitUntilReady(){
 58a:	df 93       	push	r29
 58c:	cf 93       	push	r28
 58e:	cd b7       	in	r28, 0x3d	; 61
 590:	de b7       	in	r29, 0x3e	; 62

	/* Waiting for the previous writing operation */
	while(EECR & (1<<EEWE));
 592:	ec e3       	ldi	r30, 0x3C	; 60
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	88 2f       	mov	r24, r24
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	82 70       	andi	r24, 0x02	; 2
 59e:	90 70       	andi	r25, 0x00	; 0
 5a0:	00 97       	sbiw	r24, 0x00	; 0
 5a2:	b9 f7       	brne	.-18     	; 0x592 <eepromWaitUntilReady+0x8>


}
 5a4:	cf 91       	pop	r28
 5a6:	df 91       	pop	r29
 5a8:	08 95       	ret

000005aa <eepromWriteByte>:

void eepromWriteByte(u16 copy_u16_Address, u8 copy_u8_Data){
 5aa:	df 93       	push	r29
 5ac:	cf 93       	push	r28
 5ae:	00 d0       	rcall	.+0      	; 0x5b0 <eepromWriteByte+0x6>
 5b0:	0f 92       	push	r0
 5b2:	cd b7       	in	r28, 0x3d	; 61
 5b4:	de b7       	in	r29, 0x3e	; 62
 5b6:	9a 83       	std	Y+2, r25	; 0x02
 5b8:	89 83       	std	Y+1, r24	; 0x01
 5ba:	6b 83       	std	Y+3, r22	; 0x03

	eepromWaitUntilReady();
 5bc:	0e 94 c5 02 	call	0x58a	; 0x58a <eepromWaitUntilReady>

	//load address and data
	EEAR = copy_u16_Address;
 5c0:	ee e3       	ldi	r30, 0x3E	; 62
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	89 81       	ldd	r24, Y+1	; 0x01
 5c6:	9a 81       	ldd	r25, Y+2	; 0x02
 5c8:	91 83       	std	Z+1, r25	; 0x01
 5ca:	80 83       	st	Z, r24
	EEDR = copy_u8_Data;
 5cc:	ed e3       	ldi	r30, 0x3D	; 61
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	8b 81       	ldd	r24, Y+3	; 0x03
 5d2:	80 83       	st	Z, r24



	//Enable EEprom Master Write
	EECR = (1<<EEMWE);
 5d4:	ec e3       	ldi	r30, 0x3C	; 60
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	84 e0       	ldi	r24, 0x04	; 4
 5da:	80 83       	st	Z, r24
	EECR = (1<<EEWE);
 5dc:	ec e3       	ldi	r30, 0x3C	; 60
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	80 83       	st	Z, r24

	//enable Eeprom Write within 4 clock cycles
	//EECR |= (1<<EEWE);


}
 5e4:	0f 90       	pop	r0
 5e6:	0f 90       	pop	r0
 5e8:	0f 90       	pop	r0
 5ea:	cf 91       	pop	r28
 5ec:	df 91       	pop	r29
 5ee:	08 95       	ret

000005f0 <eepromReadByte>:


u8 eepromReadByte(u16 copy_u16_Address){
 5f0:	df 93       	push	r29
 5f2:	cf 93       	push	r28
 5f4:	00 d0       	rcall	.+0      	; 0x5f6 <eepromReadByte+0x6>
 5f6:	cd b7       	in	r28, 0x3d	; 61
 5f8:	de b7       	in	r29, 0x3e	; 62
 5fa:	9a 83       	std	Y+2, r25	; 0x02
 5fc:	89 83       	std	Y+1, r24	; 0x01

	eepromWaitUntilReady();
 5fe:	0e 94 c5 02 	call	0x58a	; 0x58a <eepromWaitUntilReady>

	//load address
	EEAR = copy_u16_Address;
 602:	ee e3       	ldi	r30, 0x3E	; 62
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	89 81       	ldd	r24, Y+1	; 0x01
 608:	9a 81       	ldd	r25, Y+2	; 0x02
 60a:	91 83       	std	Z+1, r25	; 0x01
 60c:	80 83       	st	Z, r24

	//enable Eeprom Read

	EECR |= (1<<EERE);
 60e:	ac e3       	ldi	r26, 0x3C	; 60
 610:	b0 e0       	ldi	r27, 0x00	; 0
 612:	ec e3       	ldi	r30, 0x3C	; 60
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	81 60       	ori	r24, 0x01	; 1
 61a:	8c 93       	st	X, r24

	//return data

	return EEDR;
 61c:	ed e3       	ldi	r30, 0x3D	; 61
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z

}
 622:	0f 90       	pop	r0
 624:	0f 90       	pop	r0
 626:	cf 91       	pop	r28
 628:	df 91       	pop	r29
 62a:	08 95       	ret

0000062c <eepromWriteBytes>:

eepromResult eepromWriteBytes(u16 copy_u16_Address,u8* copy_pu8_Data,u16 copy_u16_Length ){
 62c:	df 93       	push	r29
 62e:	cf 93       	push	r28
 630:	cd b7       	in	r28, 0x3d	; 61
 632:	de b7       	in	r29, 0x3e	; 62
 634:	29 97       	sbiw	r28, 0x09	; 9
 636:	0f b6       	in	r0, 0x3f	; 63
 638:	f8 94       	cli
 63a:	de bf       	out	0x3e, r29	; 62
 63c:	0f be       	out	0x3f, r0	; 63
 63e:	cd bf       	out	0x3d, r28	; 61
 640:	9d 83       	std	Y+5, r25	; 0x05
 642:	8c 83       	std	Y+4, r24	; 0x04
 644:	7f 83       	std	Y+7, r23	; 0x07
 646:	6e 83       	std	Y+6, r22	; 0x06
 648:	59 87       	std	Y+9, r21	; 0x09
 64a:	48 87       	std	Y+8, r20	; 0x08

	eepromResult Result;

	if((copy_u16_Address + copy_u16_Length)< MAX_EEPROM){
 64c:	8c 81       	ldd	r24, Y+4	; 0x04
 64e:	9d 81       	ldd	r25, Y+5	; 0x05
 650:	28 85       	ldd	r18, Y+8	; 0x08
 652:	39 85       	ldd	r19, Y+9	; 0x09
 654:	82 0f       	add	r24, r18
 656:	93 1f       	adc	r25, r19
 658:	24 e0       	ldi	r18, 0x04	; 4
 65a:	80 30       	cpi	r24, 0x00	; 0
 65c:	92 07       	cpc	r25, r18
 65e:	28 f5       	brcc	.+74     	; 0x6aa <eepromWriteBytes+0x7e>


		for(u16 i = 0; i < copy_u16_Length; i++){
 660:	1a 82       	std	Y+2, r1	; 0x02
 662:	19 82       	std	Y+1, r1	; 0x01
 664:	18 c0       	rjmp	.+48     	; 0x696 <eepromWriteBytes+0x6a>

			eepromWriteByte(copy_u16_Address + i, copy_pu8_Data[i]);
 666:	2c 81       	ldd	r18, Y+4	; 0x04
 668:	3d 81       	ldd	r19, Y+5	; 0x05
 66a:	89 81       	ldd	r24, Y+1	; 0x01
 66c:	9a 81       	ldd	r25, Y+2	; 0x02
 66e:	a9 01       	movw	r20, r18
 670:	48 0f       	add	r20, r24
 672:	59 1f       	adc	r21, r25
 674:	2e 81       	ldd	r18, Y+6	; 0x06
 676:	3f 81       	ldd	r19, Y+7	; 0x07
 678:	89 81       	ldd	r24, Y+1	; 0x01
 67a:	9a 81       	ldd	r25, Y+2	; 0x02
 67c:	f9 01       	movw	r30, r18
 67e:	e8 0f       	add	r30, r24
 680:	f9 1f       	adc	r31, r25
 682:	20 81       	ld	r18, Z
 684:	ca 01       	movw	r24, r20
 686:	62 2f       	mov	r22, r18
 688:	0e 94 d5 02 	call	0x5aa	; 0x5aa <eepromWriteByte>
	eepromResult Result;

	if((copy_u16_Address + copy_u16_Length)< MAX_EEPROM){


		for(u16 i = 0; i < copy_u16_Length; i++){
 68c:	89 81       	ldd	r24, Y+1	; 0x01
 68e:	9a 81       	ldd	r25, Y+2	; 0x02
 690:	01 96       	adiw	r24, 0x01	; 1
 692:	9a 83       	std	Y+2, r25	; 0x02
 694:	89 83       	std	Y+1, r24	; 0x01
 696:	29 81       	ldd	r18, Y+1	; 0x01
 698:	3a 81       	ldd	r19, Y+2	; 0x02
 69a:	88 85       	ldd	r24, Y+8	; 0x08
 69c:	99 85       	ldd	r25, Y+9	; 0x09
 69e:	28 17       	cp	r18, r24
 6a0:	39 07       	cpc	r19, r25
 6a2:	08 f3       	brcs	.-62     	; 0x666 <eepromWriteBytes+0x3a>

			eepromWriteByte(copy_u16_Address + i, copy_pu8_Data[i]);

		}

		Result = eepromWriteOK;
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	8b 83       	std	Y+3, r24	; 0x03
 6a8:	01 c0       	rjmp	.+2      	; 0x6ac <eepromWriteBytes+0x80>

	} else {

		Result = eepromAddressOverFlow;
 6aa:	1b 82       	std	Y+3, r1	; 0x03

	}

	return Result;
 6ac:	8b 81       	ldd	r24, Y+3	; 0x03

}
 6ae:	29 96       	adiw	r28, 0x09	; 9
 6b0:	0f b6       	in	r0, 0x3f	; 63
 6b2:	f8 94       	cli
 6b4:	de bf       	out	0x3e, r29	; 62
 6b6:	0f be       	out	0x3f, r0	; 63
 6b8:	cd bf       	out	0x3d, r28	; 61
 6ba:	cf 91       	pop	r28
 6bc:	df 91       	pop	r29
 6be:	08 95       	ret

000006c0 <eepromReadBytes>:

eepromResult eepromReadBytes(u16 copy_u16_Address,u8* copy_pu8_Data,u16 copy_u16_Length){
 6c0:	0f 93       	push	r16
 6c2:	1f 93       	push	r17
 6c4:	df 93       	push	r29
 6c6:	cf 93       	push	r28
 6c8:	cd b7       	in	r28, 0x3d	; 61
 6ca:	de b7       	in	r29, 0x3e	; 62
 6cc:	29 97       	sbiw	r28, 0x09	; 9
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	f8 94       	cli
 6d2:	de bf       	out	0x3e, r29	; 62
 6d4:	0f be       	out	0x3f, r0	; 63
 6d6:	cd bf       	out	0x3d, r28	; 61
 6d8:	9d 83       	std	Y+5, r25	; 0x05
 6da:	8c 83       	std	Y+4, r24	; 0x04
 6dc:	7f 83       	std	Y+7, r23	; 0x07
 6de:	6e 83       	std	Y+6, r22	; 0x06
 6e0:	59 87       	std	Y+9, r21	; 0x09
 6e2:	48 87       	std	Y+8, r20	; 0x08

	eepromResult result;

	//if((copy_u16_Address + copy_u16_Length) <MAX_EEPROM){

		for(u16 i = 0; i < copy_u16_Length; i++){
 6e4:	1a 82       	std	Y+2, r1	; 0x02
 6e6:	19 82       	std	Y+1, r1	; 0x01
 6e8:	16 c0       	rjmp	.+44     	; 0x716 <eepromReadBytes+0x56>

			copy_pu8_Data[i] = eepromReadByte(copy_u16_Address + i);
 6ea:	2e 81       	ldd	r18, Y+6	; 0x06
 6ec:	3f 81       	ldd	r19, Y+7	; 0x07
 6ee:	89 81       	ldd	r24, Y+1	; 0x01
 6f0:	9a 81       	ldd	r25, Y+2	; 0x02
 6f2:	89 01       	movw	r16, r18
 6f4:	08 0f       	add	r16, r24
 6f6:	19 1f       	adc	r17, r25
 6f8:	2c 81       	ldd	r18, Y+4	; 0x04
 6fa:	3d 81       	ldd	r19, Y+5	; 0x05
 6fc:	89 81       	ldd	r24, Y+1	; 0x01
 6fe:	9a 81       	ldd	r25, Y+2	; 0x02
 700:	82 0f       	add	r24, r18
 702:	93 1f       	adc	r25, r19
 704:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <eepromReadByte>
 708:	f8 01       	movw	r30, r16
 70a:	80 83       	st	Z, r24

	eepromResult result;

	//if((copy_u16_Address + copy_u16_Length) <MAX_EEPROM){

		for(u16 i = 0; i < copy_u16_Length; i++){
 70c:	89 81       	ldd	r24, Y+1	; 0x01
 70e:	9a 81       	ldd	r25, Y+2	; 0x02
 710:	01 96       	adiw	r24, 0x01	; 1
 712:	9a 83       	std	Y+2, r25	; 0x02
 714:	89 83       	std	Y+1, r24	; 0x01
 716:	29 81       	ldd	r18, Y+1	; 0x01
 718:	3a 81       	ldd	r19, Y+2	; 0x02
 71a:	88 85       	ldd	r24, Y+8	; 0x08
 71c:	99 85       	ldd	r25, Y+9	; 0x09
 71e:	28 17       	cp	r18, r24
 720:	39 07       	cpc	r19, r25
 722:	18 f3       	brcs	.-58     	; 0x6ea <eepromReadBytes+0x2a>
	//}else{

	//	result = eepromAddressOverFlow;
//	}

	return result;
 724:	8b 81       	ldd	r24, Y+3	; 0x03
}
 726:	29 96       	adiw	r28, 0x09	; 9
 728:	0f b6       	in	r0, 0x3f	; 63
 72a:	f8 94       	cli
 72c:	de bf       	out	0x3e, r29	; 62
 72e:	0f be       	out	0x3f, r0	; 63
 730:	cd bf       	out	0x3d, r28	; 61
 732:	cf 91       	pop	r28
 734:	df 91       	pop	r29
 736:	1f 91       	pop	r17
 738:	0f 91       	pop	r16
 73a:	08 95       	ret

0000073c <deleteUser>:

#include "../../../Drivers/MCAL/INTERNAL_EEPROM/Eeprom_Interface.h"
#include "USER_MANAGER_Interface.h"


void deleteUser(u8 index){
 73c:	df 93       	push	r29
 73e:	cf 93       	push	r28
 740:	cd b7       	in	r28, 0x3d	; 61
 742:	de b7       	in	r29, 0x3e	; 62
 744:	27 97       	sbiw	r28, 0x07	; 7
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	f8 94       	cli
 74a:	de bf       	out	0x3e, r29	; 62
 74c:	0f be       	out	0x3f, r0	; 63
 74e:	cd bf       	out	0x3d, r28	; 61
 750:	8f 83       	std	Y+7, r24	; 0x07
	if(index <= MAXUSERS){
 752:	8f 81       	ldd	r24, Y+7	; 0x07
 754:	8b 30       	cpi	r24, 0x0B	; 11
 756:	e0 f4       	brcc	.+56     	; 0x790 <deleteUser+0x54>

		userData blankUser = {{0},{0},0,false};
 758:	86 e0       	ldi	r24, 0x06	; 6
 75a:	fe 01       	movw	r30, r28
 75c:	31 96       	adiw	r30, 0x01	; 1
 75e:	df 01       	movw	r26, r30
 760:	98 2f       	mov	r25, r24
 762:	1d 92       	st	X+, r1
 764:	9a 95       	dec	r25
 766:	e9 f7       	brne	.-6      	; 0x762 <deleteUser+0x26>
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	8e 83       	std	Y+6, r24	; 0x06
		eepromWriteBytes(index*sizeof(userData),(u8*)&blankUser, sizeof(userData));
 76c:	8f 81       	ldd	r24, Y+7	; 0x07
 76e:	28 2f       	mov	r18, r24
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	c9 01       	movw	r24, r18
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	82 0f       	add	r24, r18
 77a:	93 1f       	adc	r25, r19
 77c:	88 0f       	add	r24, r24
 77e:	99 1f       	adc	r25, r25
 780:	9e 01       	movw	r18, r28
 782:	2f 5f       	subi	r18, 0xFF	; 255
 784:	3f 4f       	sbci	r19, 0xFF	; 255
 786:	b9 01       	movw	r22, r18
 788:	46 e0       	ldi	r20, 0x06	; 6
 78a:	50 e0       	ldi	r21, 0x00	; 0
 78c:	0e 94 16 03 	call	0x62c	; 0x62c <eepromWriteBytes>

	}


}
 790:	27 96       	adiw	r28, 0x07	; 7
 792:	0f b6       	in	r0, 0x3f	; 63
 794:	f8 94       	cli
 796:	de bf       	out	0x3e, r29	; 62
 798:	0f be       	out	0x3f, r0	; 63
 79a:	cd bf       	out	0x3d, r28	; 61
 79c:	cf 91       	pop	r28
 79e:	df 91       	pop	r29
 7a0:	08 95       	ret

000007a2 <retreiveUsers>:

void retreiveUsers(){
 7a2:	df 93       	push	r29
 7a4:	cf 93       	push	r28
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62
 7aa:	2c 97       	sbiw	r28, 0x0c	; 12
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	f8 94       	cli
 7b0:	de bf       	out	0x3e, r29	; 62
 7b2:	0f be       	out	0x3f, r0	; 63
 7b4:	cd bf       	out	0x3d, r28	; 61

	//reset the num of users to 0
	numOfUsers = 0;
 7b6:	10 92 7c 00 	sts	0x007C, r1

	for(u8 i = 0; i< MAXUSERS; i++){
 7ba:	19 82       	std	Y+1, r1	; 0x01
 7bc:	40 c0       	rjmp	.+128    	; 0x83e <retreiveUsers+0x9c>
		userData user;
		fetchUser(i, &user);
 7be:	9e 01       	movw	r18, r28
 7c0:	2e 5f       	subi	r18, 0xFE	; 254
 7c2:	3f 4f       	sbci	r19, 0xFF	; 255
 7c4:	89 81       	ldd	r24, Y+1	; 0x01
 7c6:	b9 01       	movw	r22, r18
 7c8:	0e 94 4c 04 	call	0x898	; 0x898 <fetchUser>
		if(user.userId != NOT_CREATED && user.isActive == true){
 7cc:	8e 81       	ldd	r24, Y+6	; 0x06
 7ce:	8f 3f       	cpi	r24, 0xFF	; 255
 7d0:	99 f1       	breq	.+102    	; 0x838 <retreiveUsers+0x96>
 7d2:	8f 81       	ldd	r24, Y+7	; 0x07
 7d4:	88 23       	and	r24, r24
 7d6:	81 f5       	brne	.+96     	; 0x838 <retreiveUsers+0x96>

			//store current user in the global array
			allUsers[numOfUsers] = user;
 7d8:	80 91 7c 00 	lds	r24, 0x007C
 7dc:	28 2f       	mov	r18, r24
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	c9 01       	movw	r24, r18
 7e2:	88 0f       	add	r24, r24
 7e4:	99 1f       	adc	r25, r25
 7e6:	82 0f       	add	r24, r18
 7e8:	93 1f       	adc	r25, r19
 7ea:	88 0f       	add	r24, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	83 58       	subi	r24, 0x83	; 131
 7f0:	9f 4f       	sbci	r25, 0xFF	; 255
 7f2:	99 87       	std	Y+9, r25	; 0x09
 7f4:	88 87       	std	Y+8, r24	; 0x08
 7f6:	ce 01       	movw	r24, r28
 7f8:	02 96       	adiw	r24, 0x02	; 2
 7fa:	9b 87       	std	Y+11, r25	; 0x0b
 7fc:	8a 87       	std	Y+10, r24	; 0x0a
 7fe:	96 e0       	ldi	r25, 0x06	; 6
 800:	9c 87       	std	Y+12, r25	; 0x0c
 802:	ea 85       	ldd	r30, Y+10	; 0x0a
 804:	fb 85       	ldd	r31, Y+11	; 0x0b
 806:	00 80       	ld	r0, Z
 808:	8a 85       	ldd	r24, Y+10	; 0x0a
 80a:	9b 85       	ldd	r25, Y+11	; 0x0b
 80c:	01 96       	adiw	r24, 0x01	; 1
 80e:	9b 87       	std	Y+11, r25	; 0x0b
 810:	8a 87       	std	Y+10, r24	; 0x0a
 812:	e8 85       	ldd	r30, Y+8	; 0x08
 814:	f9 85       	ldd	r31, Y+9	; 0x09
 816:	00 82       	st	Z, r0
 818:	88 85       	ldd	r24, Y+8	; 0x08
 81a:	99 85       	ldd	r25, Y+9	; 0x09
 81c:	01 96       	adiw	r24, 0x01	; 1
 81e:	99 87       	std	Y+9, r25	; 0x09
 820:	88 87       	std	Y+8, r24	; 0x08
 822:	9c 85       	ldd	r25, Y+12	; 0x0c
 824:	91 50       	subi	r25, 0x01	; 1
 826:	9c 87       	std	Y+12, r25	; 0x0c
 828:	ec 85       	ldd	r30, Y+12	; 0x0c
 82a:	ee 23       	and	r30, r30
 82c:	51 f7       	brne	.-44     	; 0x802 <retreiveUsers+0x60>
			numOfUsers++;
 82e:	80 91 7c 00 	lds	r24, 0x007C
 832:	8f 5f       	subi	r24, 0xFF	; 255
 834:	80 93 7c 00 	sts	0x007C, r24
void retreiveUsers(){

	//reset the num of users to 0
	numOfUsers = 0;

	for(u8 i = 0; i< MAXUSERS; i++){
 838:	89 81       	ldd	r24, Y+1	; 0x01
 83a:	8f 5f       	subi	r24, 0xFF	; 255
 83c:	89 83       	std	Y+1, r24	; 0x01
 83e:	89 81       	ldd	r24, Y+1	; 0x01
 840:	8a 30       	cpi	r24, 0x0A	; 10
 842:	08 f4       	brcc	.+2      	; 0x846 <retreiveUsers+0xa4>
 844:	bc cf       	rjmp	.-136    	; 0x7be <retreiveUsers+0x1c>

	}



}
 846:	2c 96       	adiw	r28, 0x0c	; 12
 848:	0f b6       	in	r0, 0x3f	; 63
 84a:	f8 94       	cli
 84c:	de bf       	out	0x3e, r29	; 62
 84e:	0f be       	out	0x3f, r0	; 63
 850:	cd bf       	out	0x3d, r28	; 61
 852:	cf 91       	pop	r28
 854:	df 91       	pop	r29
 856:	08 95       	ret

00000858 <createUser>:


void createUser(u8 index ,userData* newUser){
 858:	df 93       	push	r29
 85a:	cf 93       	push	r28
 85c:	00 d0       	rcall	.+0      	; 0x85e <createUser+0x6>
 85e:	0f 92       	push	r0
 860:	cd b7       	in	r28, 0x3d	; 61
 862:	de b7       	in	r29, 0x3e	; 62
 864:	89 83       	std	Y+1, r24	; 0x01
 866:	7b 83       	std	Y+3, r23	; 0x03
 868:	6a 83       	std	Y+2, r22	; 0x02
	 *  size of userdata is 11 bytes if index = 0 , address will be 0x00
	 *  if user created then the next index is 1 hence the address will be
	 *  1 x 11 = 0x0b and like this until the 10 users are mapped.
	 *
	 */
	eepromWriteBytes((index*sizeof(userData)),(u8*)newUser, sizeof(userData));
 86a:	89 81       	ldd	r24, Y+1	; 0x01
 86c:	28 2f       	mov	r18, r24
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	c9 01       	movw	r24, r18
 872:	88 0f       	add	r24, r24
 874:	99 1f       	adc	r25, r25
 876:	82 0f       	add	r24, r18
 878:	93 1f       	adc	r25, r19
 87a:	88 0f       	add	r24, r24
 87c:	99 1f       	adc	r25, r25
 87e:	2a 81       	ldd	r18, Y+2	; 0x02
 880:	3b 81       	ldd	r19, Y+3	; 0x03
 882:	b9 01       	movw	r22, r18
 884:	46 e0       	ldi	r20, 0x06	; 6
 886:	50 e0       	ldi	r21, 0x00	; 0
 888:	0e 94 16 03 	call	0x62c	; 0x62c <eepromWriteBytes>


}
 88c:	0f 90       	pop	r0
 88e:	0f 90       	pop	r0
 890:	0f 90       	pop	r0
 892:	cf 91       	pop	r28
 894:	df 91       	pop	r29
 896:	08 95       	ret

00000898 <fetchUser>:


void fetchUser(u8 index, userData* user){
 898:	df 93       	push	r29
 89a:	cf 93       	push	r28
 89c:	00 d0       	rcall	.+0      	; 0x89e <fetchUser+0x6>
 89e:	0f 92       	push	r0
 8a0:	cd b7       	in	r28, 0x3d	; 61
 8a2:	de b7       	in	r29, 0x3e	; 62
 8a4:	89 83       	std	Y+1, r24	; 0x01
 8a6:	7b 83       	std	Y+3, r23	; 0x03
 8a8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 *  Same logic as CreateUser Function but here we perfom a reading operation
	 *  on the desired user
	 *
	 */
	eepromReadBytes((index*sizeof(userData)),(u8*)user, sizeof(userData));
 8aa:	89 81       	ldd	r24, Y+1	; 0x01
 8ac:	28 2f       	mov	r18, r24
 8ae:	30 e0       	ldi	r19, 0x00	; 0
 8b0:	c9 01       	movw	r24, r18
 8b2:	88 0f       	add	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	82 0f       	add	r24, r18
 8b8:	93 1f       	adc	r25, r19
 8ba:	88 0f       	add	r24, r24
 8bc:	99 1f       	adc	r25, r25
 8be:	2a 81       	ldd	r18, Y+2	; 0x02
 8c0:	3b 81       	ldd	r19, Y+3	; 0x03
 8c2:	b9 01       	movw	r22, r18
 8c4:	46 e0       	ldi	r20, 0x06	; 6
 8c6:	50 e0       	ldi	r21, 0x00	; 0
 8c8:	0e 94 60 03 	call	0x6c0	; 0x6c0 <eepromReadBytes>

}
 8cc:	0f 90       	pop	r0
 8ce:	0f 90       	pop	r0
 8d0:	0f 90       	pop	r0
 8d2:	cf 91       	pop	r28
 8d4:	df 91       	pop	r29
 8d6:	08 95       	ret

000008d8 <main>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include "USER_MANAGER_Interface.h"
#include "../../../Drivers/MCAL/INTERNAL_EEPROM/Eeprom_Interface.h"
#include <avr/eeprom.h>

int main(){
 8d8:	df 93       	push	r29
 8da:	cf 93       	push	r28
 8dc:	cd b7       	in	r28, 0x3d	; 61
 8de:	de b7       	in	r29, 0x3e	; 62
 8e0:	67 97       	sbiw	r28, 0x17	; 23
 8e2:	0f b6       	in	r0, 0x3f	; 63
 8e4:	f8 94       	cli
 8e6:	de bf       	out	0x3e, r29	; 62
 8e8:	0f be       	out	0x3f, r0	; 63
 8ea:	cd bf       	out	0x3d, r28	; 61


	DIO_void_set_pin_dir(PORTA, PIN0, OUTPUT);
 8ec:	eb e3       	ldi	r30, 0x3B	; 59
 8ee:	f0 e0       	ldi	r31, 0x00	; 0
 8f0:	80 81       	ld	r24, Z
 8f2:	60 e0       	ldi	r22, 0x00	; 0
 8f4:	41 e0       	ldi	r20, 0x01	; 1
 8f6:	0e 94 62 00 	call	0xc4	; 0xc4 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(PORTA, PIN1, OUTPUT);
 8fa:	eb e3       	ldi	r30, 0x3B	; 59
 8fc:	f0 e0       	ldi	r31, 0x00	; 0
 8fe:	80 81       	ld	r24, Z
 900:	61 e0       	ldi	r22, 0x01	; 1
 902:	41 e0       	ldi	r20, 0x01	; 1
 904:	0e 94 62 00 	call	0xc4	; 0xc4 <DIO_void_set_pin_dir>

userData newUser;

newUser.userId = 1;
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	8e 83       	std	Y+6, r24	; 0x06
newUser.isActive = true;
 90c:	1f 82       	std	Y+7, r1	; 0x07

newUser.userName[0] = 'k';
 90e:	8b e6       	ldi	r24, 0x6B	; 107
 910:	8a 83       	std	Y+2, r24	; 0x02
newUser.userName[1] = 'a';
 912:	81 e6       	ldi	r24, 0x61	; 97
 914:	8b 83       	std	Y+3, r24	; 0x03

newUser.passWord[0] = '6';
 916:	86 e3       	ldi	r24, 0x36	; 54
 918:	8c 83       	std	Y+4, r24	; 0x04
newUser.passWord[1] = '9';
 91a:	89 e3       	ldi	r24, 0x39	; 57
 91c:	8d 83       	std	Y+5, r24	; 0x05


createUser(0, &newUser);
 91e:	9e 01       	movw	r18, r28
 920:	2e 5f       	subi	r18, 0xFE	; 254
 922:	3f 4f       	sbci	r19, 0xFF	; 255
 924:	80 e0       	ldi	r24, 0x00	; 0
 926:	b9 01       	movw	r22, r18
 928:	0e 94 2c 04 	call	0x858	; 0x858 <createUser>

retreiveUsers();
 92c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <retreiveUsers>

u8 input_user[] = {"ka"};
 930:	ce 01       	movw	r24, r28
 932:	08 96       	adiw	r24, 0x08	; 8
 934:	9c 8b       	std	Y+20, r25	; 0x14
 936:	8b 8b       	std	Y+19, r24	; 0x13
 938:	e0 e6       	ldi	r30, 0x60	; 96
 93a:	f0 e0       	ldi	r31, 0x00	; 0
 93c:	fe 8b       	std	Y+22, r31	; 0x16
 93e:	ed 8b       	std	Y+21, r30	; 0x15
 940:	f3 e0       	ldi	r31, 0x03	; 3
 942:	ff 8b       	std	Y+23, r31	; 0x17
 944:	ed 89       	ldd	r30, Y+21	; 0x15
 946:	fe 89       	ldd	r31, Y+22	; 0x16
 948:	00 80       	ld	r0, Z
 94a:	8d 89       	ldd	r24, Y+21	; 0x15
 94c:	9e 89       	ldd	r25, Y+22	; 0x16
 94e:	01 96       	adiw	r24, 0x01	; 1
 950:	9e 8b       	std	Y+22, r25	; 0x16
 952:	8d 8b       	std	Y+21, r24	; 0x15
 954:	eb 89       	ldd	r30, Y+19	; 0x13
 956:	fc 89       	ldd	r31, Y+20	; 0x14
 958:	00 82       	st	Z, r0
 95a:	8b 89       	ldd	r24, Y+19	; 0x13
 95c:	9c 89       	ldd	r25, Y+20	; 0x14
 95e:	01 96       	adiw	r24, 0x01	; 1
 960:	9c 8b       	std	Y+20, r25	; 0x14
 962:	8b 8b       	std	Y+19, r24	; 0x13
 964:	9f 89       	ldd	r25, Y+23	; 0x17
 966:	91 50       	subi	r25, 0x01	; 1
 968:	9f 8b       	std	Y+23, r25	; 0x17
 96a:	ef 89       	ldd	r30, Y+23	; 0x17
 96c:	ee 23       	and	r30, r30
 96e:	51 f7       	brne	.-44     	; 0x944 <main+0x6c>
u8 input_pass[2] = {1,2};
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	8b 87       	std	Y+11, r24	; 0x0b
 974:	82 e0       	ldi	r24, 0x02	; 2
 976:	8c 87       	std	Y+12, r24	; 0x0c



userData user2;
user2.isActive = true;
 978:	1a 8a       	std	Y+18, r1	; 0x12
user2.userId = 2;
 97a:	82 e0       	ldi	r24, 0x02	; 2
 97c:	89 8b       	std	Y+17, r24	; 0x11
user2.userName[1] = 'w';
 97e:	87 e7       	ldi	r24, 0x77	; 119
 980:	8e 87       	std	Y+14, r24	; 0x0e
user2.userName[2] = 'f';
 982:	86 e6       	ldi	r24, 0x66	; 102
 984:	8f 87       	std	Y+15, r24	; 0x0f

createUser(1, &user2);
 986:	9e 01       	movw	r18, r28
 988:	23 5f       	subi	r18, 0xF3	; 243
 98a:	3f 4f       	sbci	r19, 0xFF	; 255
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	b9 01       	movw	r22, r18
 990:	0e 94 2c 04 	call	0x858	; 0x858 <createUser>


deleteUser(0);
 994:	80 e0       	ldi	r24, 0x00	; 0
 996:	0e 94 9e 03 	call	0x73c	; 0x73c <deleteUser>
deleteUser(1);
 99a:	81 e0       	ldi	r24, 0x01	; 1
 99c:	0e 94 9e 03 	call	0x73c	; 0x73c <deleteUser>
deleteUser(2);
 9a0:	82 e0       	ldi	r24, 0x02	; 2
 9a2:	0e 94 9e 03 	call	0x73c	; 0x73c <deleteUser>

retreiveUsers();
 9a6:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <retreiveUsers>


	while(1){

		for(u8 i =0; i< numOfUsers;i++){
 9aa:	19 82       	std	Y+1, r1	; 0x01
 9ac:	21 c0       	rjmp	.+66     	; 0x9f0 <main+0x118>

			if(input_user[0] == allUsers[i].userName[0]){
 9ae:	48 85       	ldd	r20, Y+8	; 0x08
 9b0:	89 81       	ldd	r24, Y+1	; 0x01
 9b2:	28 2f       	mov	r18, r24
 9b4:	30 e0       	ldi	r19, 0x00	; 0
 9b6:	c9 01       	movw	r24, r18
 9b8:	88 0f       	add	r24, r24
 9ba:	99 1f       	adc	r25, r25
 9bc:	82 0f       	add	r24, r18
 9be:	93 1f       	adc	r25, r19
 9c0:	88 0f       	add	r24, r24
 9c2:	99 1f       	adc	r25, r25
 9c4:	fc 01       	movw	r30, r24
 9c6:	e3 58       	subi	r30, 0x83	; 131
 9c8:	ff 4f       	sbci	r31, 0xFF	; 255
 9ca:	80 81       	ld	r24, Z
 9cc:	48 17       	cp	r20, r24
 9ce:	39 f4       	brne	.+14     	; 0x9de <main+0x106>


				DIO_void_set_pin(PORTA, PIN0);
 9d0:	eb e3       	ldi	r30, 0x3B	; 59
 9d2:	f0 e0       	ldi	r31, 0x00	; 0
 9d4:	80 81       	ld	r24, Z
 9d6:	60 e0       	ldi	r22, 0x00	; 0
 9d8:	0e 94 9d 01 	call	0x33a	; 0x33a <DIO_void_set_pin>
 9dc:	e6 cf       	rjmp	.-52     	; 0x9aa <main+0xd2>
				break;

			}else{

				DIO_void_set_pin(PORTA, PIN1);
 9de:	eb e3       	ldi	r30, 0x3B	; 59
 9e0:	f0 e0       	ldi	r31, 0x00	; 0
 9e2:	80 81       	ld	r24, Z
 9e4:	61 e0       	ldi	r22, 0x01	; 1
 9e6:	0e 94 9d 01 	call	0x33a	; 0x33a <DIO_void_set_pin>
retreiveUsers();


	while(1){

		for(u8 i =0; i< numOfUsers;i++){
 9ea:	89 81       	ldd	r24, Y+1	; 0x01
 9ec:	8f 5f       	subi	r24, 0xFF	; 255
 9ee:	89 83       	std	Y+1, r24	; 0x01
 9f0:	90 91 7c 00 	lds	r25, 0x007C
 9f4:	89 81       	ldd	r24, Y+1	; 0x01
 9f6:	89 17       	cp	r24, r25
 9f8:	d0 f2       	brcs	.-76     	; 0x9ae <main+0xd6>
 9fa:	d7 cf       	rjmp	.-82     	; 0x9aa <main+0xd2>

000009fc <_exit>:
 9fc:	f8 94       	cli

000009fe <__stop_program>:
 9fe:	ff cf       	rjmp	.-2      	; 0x9fe <__stop_program>
